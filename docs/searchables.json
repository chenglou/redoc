[{"href": "./index.html", "title": "Home", "contents": "ooh check this out\nhttps://github.com/martinklepsch/cljdoc", "rendered": "ooh check this out\nhttps://github.com/martinklepsch/cljdoc", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "http://davidchristiansen.dk/drafts/final-pretty-printer-draft.pdf", "rendered": "http://davidchristiansen.dk/drafts/final-pretty-printer-draft.pdf", "breadcrumb": "Home"},
{"href": "./index.html#Related-work", "title": "Related work", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "Js.log(\"A shared canvas is created, and maybe floats somewhere? idk\");", "rendered": "<pre><code>Js.log(\"A shared canvas is created, and maybe floats somewhere? idk\");</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "When you execute, will trap the console &amp; display below (should also send to real console).\nDefault is to run in a worker. If you don&#39;t want that, you can do", "rendered": "When you execute, will trap the console &amp; display below (should also send to real console).\nDefault is to run in a worker. If you don&#39;t want that, you can do", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "```reason\nprint_endline(\"Hello\");\n```", "rendered": "<pre><code>```reason\nprint_endline(\"Hello\");\n```</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Example-of-inline-scratchboxes", "title": "Example of inline scratchboxes", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "For all other files:", "rendered": "For all other files:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Crawl ./docs looking for markdown files. If there&#39;s an index.md, that&#39;s the main page. Otherwise, we use Readme.md.\nThe main file is always listed at the top in directory listings.", "rendered": "Crawl <code>./docs</code> looking for markdown files. If there&#39;s an <code>index.md</code>, that&#39;s the main page. Otherwise, we use <code>Readme.md</code>.\nThe main file is always listed at the top in directory listings.", "breadcrumb": "Home"},
{"href": "./index.html#Thoughts-on-gitbook-like-functionality", "title": "Thoughts on gitbook-like functionality", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html#itemized-work-to-do", "title": "itemized work to do", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html#Things-still-to-be-implemented", "title": "Things still to be implemented", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The binary is then in ./lib/bs/native/main.native.", "rendered": "The binary is then in <code>./lib/bs/native/main.native</code>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm install\nnpm start", "rendered": "<pre><code>npm install\nnpm start</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#How-to-build", "title": "How to build", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "# docre - a clean & easy documentation generator\n\nUsage: docre [options]\n\n  --root (default: current directory)\n      expected to contain bsconfig.json, and bs-platform in the node_modules\n  --target (default: {root}/docs)\n      where we should write out the docs\n  --name (default: the name of the directory, capitalized)\n      what this project is called\n  --doctest (default: false)\n      execute the documentation snippets to make sure they run w/o erroring\n  -h, --help\n      print this help", "rendered": "<pre><code># docre - a clean & easy documentation generator\n\nUsage: docre [options]\n\n  --root (default: current directory)\n      expected to contain bsconfig.json, and bs-platform in the node_modules\n  --target (default: {root}/docs)\n      where we should write out the docs\n  --name (default: the name of the directory, capitalized)\n      what this project is called\n  --doctest (default: false)\n      execute the documentation snippets to make sure they run w/o erroring\n  -h, --help\n      print this help</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "get the binary (either by downloading it, or building it yourself).", "rendered": "get the binary (either by <a href=\"https://github.com/jaredly/docre/releases/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">downloading it</a>, or building it yourself).", "breadcrumb": "Home"},
{"href": "./index.html#How-to-use-", "title": "How to use:", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "A clean &amp; easy documentation generator for reason/bucklescript/ocaml.", "rendered": "A clean &amp; easy documentation generator for reason/bucklescript/ocaml.", "breadcrumb": "Home"},
{"href": "./index.html#Docre", "title": "Docre", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/SerializeBinary.html#value-pp_string", "title": "pp_string", "contents": "pp_string string  option char option bool string  quote utf ", "rendered": "<h4 class='item'>let pp_string: (\n  string => 'a,\n  ~?quote: option(char),\n  ~?utf: option(bool),\n  string\n) => 'a</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#value-array_conv", "title": "array_conv", "contents": "array_conv array string", "rendered": "<h4 class='item'>let array_conv: array(string)</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#value-array_str1", "title": "array_str1", "contents": "array_str1 array string", "rendered": "<h4 class='item'>let array_str1: array(string)</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html", "title": "SerializeBinary", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html", "title": "SerializeBinary", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#SerializeBinary", "title": "SerializeBinary", "contents": "", "rendered": "", "breadcrumb": "SerializeBinary"},
{"href": "./api/Infix.html#value-/+", "title": "/+", "contents": "/+ string string string  ", "rendered": "<h4 class='item'>let /+: (string, string) => string</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-fileConcat", "title": "fileConcat", "contents": "fileConcat string string string  ", "rendered": "<h4 class='item'>let fileConcat: (string, string) => string</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?<", "title": "|?<", "contents": "|?< option unit  unit  ", "rendered": "<h4 class='item'>let |?<: (option('a), 'a => unit) => unit</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|.!", "title": "|.!", "contents": "|.! option  string   ", "rendered": "<h4 class='item'>let |.!: ('a => option('a), string, 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-fold", "title": "fold", "contents": "fold option    ", "rendered": "<h4 class='item'>let fold: (option('a), 'a, 'a => 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?>>", "title": "|?>>", "contents": "|?>> option  option  ", "rendered": "<h4 class='item'>let |?>>: (option('a), 'a => 'a) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?>", "title": "|?>", "contents": "|?> option option  option  ", "rendered": "<h4 class='item'>let |?>: (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??#", "title": "|??#", "contents": " Lazy optional default wrapped operator ", "rendered": " Lazy optional default wrapped operator ", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??#", "title": "|??#", "contents": "|??# option Lazy t option option  ", "rendered": "<h4 class='item'>let |??#: (option('a), Lazy.t(option('a))) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?#", "title": "|?#", "contents": " Lazy optional default operator ", "rendered": " Lazy optional default operator ", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?#", "title": "|?#", "contents": "|?# option Lazy t option option  ", "rendered": "<h4 class='item'>let |?#: (option('a), Lazy.t(option('a))) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??", "title": "|??", "contents": "|?? option option option  ", "rendered": "<h4 class='item'>let |??: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?", "title": "|?", "contents": "|? option  ", "rendered": "<h4 class='item'>let |?: (option('a), 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|!", "title": "|!", "contents": "|! option string  ", "rendered": "<h4 class='item'>let |!: (option('a), string) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Infix"},
{"href": "./api/Infix.html", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#Infix", "title": "Infix", "contents": "", "rendered": "", "breadcrumb": "Infix"},
{"href": "./api/Files.html#value-collect", "title": "collect", "contents": "collect option string bool  string string bool  list string checkDir  ", "rendered": "<h4 class='item'>let collect: (\n  ~?checkDir: option(string => bool),\n  string,\n  string => bool\n) => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-collectDirs", "title": "collectDirs", "contents": "collectDirs string list string ", "rendered": "<h4 class='item'>let collectDirs: string => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-walk", "title": "walk", "contents": "walk string string unit  unit  ", "rendered": "<h4 class='item'>let walk: (string, string => unit) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-removeDeep", "title": "removeDeep", "contents": "removeDeep string unit ", "rendered": "<h4 class='item'>let removeDeep: string => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copyDeep", "title": "copyDeep", "contents": "copyDeep string string unit source dest", "rendered": "<h4 class='item'>let copyDeep: (~source: string, ~dest: string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-mkdirp", "title": "mkdirp", "contents": "mkdirp string unit ", "rendered": "<h4 class='item'>let mkdirp: string => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readDirectory", "title": "readDirectory", "contents": "readDirectory string list string ", "rendered": "<h4 class='item'>let readDirectory: string => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-isDirectory", "title": "isDirectory", "contents": "isDirectory string bool ", "rendered": "<h4 class='item'>let isDirectory: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-isFile", "title": "isFile", "contents": "isFile string bool ", "rendered": "<h4 class='item'>let isFile: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-ifExists", "title": "ifExists", "contents": "ifExists string option string ", "rendered": "<h4 class='item'>let ifExists: string => option(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-exists", "title": "exists", "contents": "exists string bool ", "rendered": "<h4 class='item'>let exists: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copyExn", "title": "copyExn", "contents": "copyExn string string unit source dest", "rendered": "<h4 class='item'>let copyExn: (~source: string, ~dest: string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copy", "title": "copy", "contents": "copy string string bool source dest", "rendered": "<h4 class='item'>let copy: (~source: string, ~dest: string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-writeFileExn", "title": "writeFileExn", "contents": "writeFileExn string string unit  ", "rendered": "<h4 class='item'>let writeFileExn: (string, string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-writeFile", "title": "writeFile", "contents": "writeFile string string bool  ", "rendered": "<h4 class='item'>let writeFile: (string, string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readFileExn", "title": "readFileExn", "contents": "readFileExn string string ", "rendered": "<h4 class='item'>let readFileExn: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readFile", "title": "readFile", "contents": "readFile string option string ", "rendered": "<h4 class='item'>let readFile: string => option(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-maybeStat", "title": "maybeStat", "contents": "maybeStat string option Unix stats ", "rendered": "<h4 class='item'>let maybeStat: string => option(Unix.stats)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-symlink", "title": "symlink", "contents": "symlink string string unit  ", "rendered": "<h4 class='item'>let symlink: (string, string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-relpath", "title": "relpath", "contents": "relpath string string string  ", "rendered": "<h4 class='item'>let relpath: (string, string) => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-removeExtraDots", "title": "removeExtraDots", "contents": "removeExtraDots string string ", "rendered": "<h4 class='item'>let removeExtraDots: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-absify", "title": "absify", "contents": "absify string string ", "rendered": "<h4 class='item'>let absify: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-split", "title": "split", "contents": "split string string list string  ", "rendered": "<h4 class='item'>let split: (string, string) => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html", "title": "Files", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Files"},
{"href": "./api/Files.html", "title": "Files", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Files"},
{"href": "./api/Files.html#Files", "title": "Files", "contents": "", "rendered": "", "breadcrumb": "Files"},
{"href": "./api/Commands.html#value-execWithInput", "title": "execWithInput", "contents": "execWithInput string string list string bool  ", "rendered": "<h4 class='item'>let execWithInput: (string, string) => (list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#value-execSync", "title": "execSync", "contents": "execSync string list string bool ", "rendered": "<h4 class='item'>let execSync: string => (list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#value-execFull", "title": "execFull", "contents": "execFull option string option array string string list string list string bool input env ", "rendered": "<h4 class='item'>let execFull: (\n  ~?input: option(string),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html", "title": "Commands", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Commands"},
{"href": "./api/Commands.html", "title": "Commands", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#Commands", "title": "Commands", "contents": "", "rendered": "", "breadcrumb": "Commands"},
{"href": "./api/SearchScript.html#value-js", "title": "js", "contents": "js string", "rendered": "<h4 class='item'>let js: string</h4>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html#value-framework", "title": "framework", "contents": "framework string", "rendered": "<h4 class='item'>let framework: string</h4>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html", "title": "SearchScript", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html", "title": "SearchScript", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html#SearchScript", "title": "SearchScript", "contents": "", "rendered": "", "breadcrumb": "SearchScript"},
{"href": "./api/Template.html#value-make", "title": "make", "contents": "make string string string  ", "rendered": "<h4 class='item'>let make: (string, string) => string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html#value-final", "title": "final", "contents": "final string", "rendered": "<h4 class='item'>let final: string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html#value-header", "title": "header", "contents": "header string", "rendered": "<h4 class='item'>let header: string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html", "title": "Template", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Template"},
{"href": "./api/Template.html", "title": "Template", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Template"},
{"href": "./api/Template.html#Template", "title": "Template", "contents": "", "rendered": "", "breadcrumb": "Template"},
{"href": "./api/Sidebar.html#value-generate", "title": "generate", "contents": "generate list int string string string list string string list string string string option string string      playgroundPath", "rendered": "<h4 class='item'>let generate: (\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string,\n  ~playgroundPath: option(string)\n) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-makeMarkdowns", "title": "makeMarkdowns", "contents": "makeMarkdowns list string string string ", "rendered": "<h4 class='item'>let makeMarkdowns: list((string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-showPackage", "title": "showPackage", "contents": "showPackage list string string string ", "rendered": "<h4 class='item'>let showPackage: list((string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-makeToc", "title": "makeToc", "contents": "makeToc list int string string string string ", "rendered": "<h4 class='item'>let makeToc: list((int, string, string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html", "title": "Sidebar", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html", "title": "Sidebar", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#Sidebar", "title": "Sidebar", "contents": "", "rendered": "", "breadcrumb": "Sidebar"},
{"href": "./api/PrintType.html#value-default", "title": "default", "contents": "default stringifier", "rendered": "<h4 class='item'>let default: <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_decl", "title": "print_decl", "contents": "print_decl stringifier string string Types type_declaration doc    ", "rendered": "<h4 class='item'>let print_decl: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  string,\n  string,\n  Types.type_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_value", "title": "print_value", "contents": "print_value stringifier string string Types type_expr doc    ", "rendered": "<h4 class='item'>let print_value: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  string,\n  string,\n  Types.type_expr\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_attr", "title": "print_attr", "contents": "print_attr stringifier Types label_declaration doc  ", "rendered": "<h4 class='item'>let print_attr: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  Types.label_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_constructor", "title": "print_constructor", "contents": "print_constructor Types type_expr doc  Types constructor_declaration doc  ", "rendered": "<h4 class='item'>let print_constructor: (\n  Types.type_expr => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  Types.constructor_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_expr", "title": "print_expr", "contents": "print_expr stringifier Types type_expr doc  ", "rendered": "<h4 class='item'>let print_expr: (<a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>, Types.type_expr) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-htmlEscape", "title": "htmlEscape", "contents": "htmlEscape string string ", "rendered": "<h4 class='item'>let htmlEscape: string => string</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-replace", "title": "replace", "contents": "replace string string string string   ", "rendered": "<h4 class='item'>let replace: (string, string, string) => string</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-tuple_list", "title": "tuple_list", "contents": "tuple_list list doc  doc  ", "rendered": "<h4 class='item'>let tuple_list: (list('a), 'a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-indentGroup", "title": "indentGroup", "contents": "indentGroup doc doc ", "rendered": "<h4 class='item'>let indentGroup: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a> => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-commad_list", "title": "commad_list", "contents": "commad_list doc  list doc  ", "rendered": "<h4 class='item'>let commad_list: ('a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, list('a)) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-sepd_list", "title": "sepd_list", "contents": "sepd_list doc list doc  doc   ", "rendered": "<h4 class='item'>let sepd_list: (<a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, list('a), 'a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-@!", "title": "@!", "contents": "@! doc doc doc  ", "rendered": "<h4 class='item'>let @!: (<a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-str", "title": "str", "contents": "str option int string doc len ", "rendered": "<h4 class='item'>let str: (~?len: option(int), string) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-dedent", "title": "dedent", "contents": "dedent doc", "rendered": "<h4 class='item'>let dedent: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-space", "title": "space", "contents": "space doc", "rendered": "<h4 class='item'>let space: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-break", "title": "break", "contents": "break doc", "rendered": "<h4 class='item'>let break: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#type-T.stringifier", "title": "T.stringifier", "contents": "stringifier path stringifier Path t pathType doc    expr stringifier Types type_expr doc   ident stringifier Ident t doc   decl stringifier string string Types type_declaration doc     value stringifier string string Types type_expr doc    ", "rendered": "<h4 class='item'>type stringifier = {\n  path: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Path.t, <a href=\"./api/PrintType.html#type-pathType\">pathType</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  expr: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Types.type_expr) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  ident: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Ident.t) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  decl: (\n    <a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>,\n    string,\n    string,\n    Types.type_declaration\n  ) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  value: (\n    <a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>,\n    string,\n    string,\n    Types.type_expr\n  ) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>\n}</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#module-T", "title": "T", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#module-T", "title": "T", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#type-pathType", "title": "pathType", "contents": "pathType ", "rendered": "<h4 class='item'>type pathType = | PModule | PModuleType | PValue | PType\n</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-collectArgs", "title": "collectArgs", "contents": "collectArgs list Asttypes label Types type_expr Types type_expr list Asttypes label Types type_expr Types type_expr  ", "rendered": "<h4 class='item'>let collectArgs: (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html", "title": "PrintType", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html", "title": "PrintType", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#PrintType", "title": "PrintType", "contents": "", "rendered": "", "breadcrumb": "PrintType"},
{"href": "./api/Pretty.html#value-print", "title": "print", "contents": "Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.", "rendered": "Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-print", "title": "print", "contents": "print option int option string unit  option int unit  doc unit width output indent ", "rendered": "<h4 class='item'>let print: (\n  ~?width: option(int),\n  ~?output: option(string => unit),\n  ~?indent: option(int => unit),\n  <a href=\"./api/Pretty.html#type-doc\">doc</a>\n) => unit</h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-back", "title": "back", "contents": "Constructs a linebreak that dedents", "rendered": "Constructs a linebreak that dedents", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-back", "title": "back", "contents": "back int string doc  ", "rendered": "<h4 class='item'>let back: (int, string) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-text", "title": "text", "contents": "Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines", "rendered": "Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-text", "title": "text", "contents": "text option int string doc len ", "rendered": "<h4 class='item'>let text: (~?len: option(int), string) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-line", "title": "line", "contents": "Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.", "rendered": "Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-line", "title": "line", "contents": "line string doc ", "rendered": "<h4 class='item'>let line: string => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-indent", "title": "indent", "contents": "Adds a level of indentation to a document", "rendered": "Adds a level of indentation to a document", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-indent", "title": "indent", "contents": "indent int doc doc  ", "rendered": "<h4 class='item'>let indent: (int, <a href=\"./api/Pretty.html#type-doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-group", "title": "group", "contents": "Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.", "rendered": "Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-group", "title": "group", "contents": "group doc doc ", "rendered": "<h4 class='item'>let group: <a href=\"./api/Pretty.html#type-doc\">doc</a> => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-empty", "title": "empty", "contents": "The empty document", "rendered": "The empty document", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-empty", "title": "empty", "contents": "empty doc", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-append", "title": "append", "contents": "Sequentially appends two documents", "rendered": "Sequentially appends two documents", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-append", "title": "append", "contents": "append doc doc doc  ", "rendered": "<h4 class='item'>let append: (<a href=\"./api/Pretty.html#type-doc\">doc</a>, <a href=\"./api/Pretty.html#type-doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#type-doc", "title": "doc", "contents": "Represents documents to be pretty-printed", "rendered": "Represents documents to be pretty-printed", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#type-doc", "title": "doc", "contents": "doc ", "rendered": "<h4 class='item'>type doc</h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html", "title": "Pretty", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html", "title": "Pretty", "contents": "Pretty-prints documents. This module is similar in purpose to OCaml standard Format module, but is based on the combinators described in Wadler&#39;s paper &quot;A prettier printer.&quot; Unlike Wadler&#39;s implementation, the present code does not admit lazy document nodes and therefore pretty printing always uses O(N) space where N is the size of the document. References Philip Wadler, &quot;A prettier printer.&quot; The Fun of Programming. A symposium in honour of Professor Richard Bird&#39;s 60th birthday Examination Schools, Oxford, 24-25 March 2003.", "rendered": "Pretty-prints documents. This module is similar in purpose to OCaml standard Format module, but is based on the combinators described in Wadler&#39;s paper <a href='http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf'>&quot;A prettier printer.&quot;</a> Unlike Wadler&#39;s implementation, the present code does not admit lazy document nodes and therefore pretty printing always uses O(N) space where N is the size of the document. <em>References</em> Philip Wadler, <a href='http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf'>&quot;A prettier printer.&quot;</a> The Fun of Programming. A symposium in honour of Professor Richard Bird&#39;s 60th birthday Examination Schools, Oxford, 24-25 March 2003.", "breadcrumb": "Pretty"},
{"href": "./api/GenerateDoc.html#value-docsForModule", "title": "docsForModule", "contents": "docsForModule stringifier t list string int string Omd t list doc string list int string string string       ", "rendered": "<h4 class='item'>let docsForModule: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n  <a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  int,\n  string,\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)\n) => (string, list((int, string, string, string)))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-generateDoc", "title": "generateDoc", "contents": "generateDoc stringifier t list string int doc string list int string string string     ", "rendered": "<h4 class='item'>let generateDoc: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n  <a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  int,\n  <a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>\n) => (string, list((int, string, string, string)))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#type-t", "title": "t", "contents": "t option element option string  list string string option docItem Omd t string override    ", "rendered": "<h4 class='item'>type t = (\n  ~?override: option(<a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)),\n  list(string),\n  string,\n  option(<a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>),\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-link", "title": "link", "contents": "link string string string  ", "rendered": "<h4 class='item'>let link: (string, string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-marked", "title": "marked", "contents": "marked element option string  string string  ", "rendered": "<h4 class='item'>let marked: (<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string), string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-div", "title": "div", "contents": "div string string string  ", "rendered": "<h4 class='item'>let div: (string, string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-trackToc", "title": "trackToc", "contents": "trackToc option bool int list int string string string unit  Pervasives ref int element option string  element option string     Pervasives ref list int string string string element option string  lower  ", "rendered": "<h4 class='item'>let trackToc: (\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string),\n    <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-uniqueItems", "title": "uniqueItems", "contents": "uniqueItems list docItem list docItem ", "rendered": "<h4 class='item'>let uniqueItems: list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)) => list(\n  ('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-cleanForLink", "title": "cleanForLink", "contents": "cleanForLink string string ", "rendered": "<h4 class='item'>let cleanForLink: string => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-prettyString", "title": "prettyString", "contents": "prettyString option int doc string width ", "rendered": "<h4 class='item'>let prettyString: (~?width: option(int), <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-defaultMain", "title": "defaultMain", "contents": "defaultMain option bool string string addHeading ", "rendered": "<h4 class='item'>let defaultMain: (\n  ~?addHeading: option(bool),\n  string\n) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-makeId", "title": "makeId", "contents": "makeId list string pathType string  ", "rendered": "<h4 class='item'>let makeId: (list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-ptypePrefix", "title": "ptypePrefix", "contents": "ptypePrefix pathType string ", "rendered": "<h4 class='item'>let ptypePrefix: <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a> => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-printer", "title": "printer", "contents": "printer string list string pathType option string  list int string list string stringifier  ", "rendered": "<h4 class='item'>let printer: (\n  (string, list(string), <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a>) => option(string),\n  list((int, (string, list(string), 'a)))\n) => <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a></h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-processPath", "title": "processPath", "contents": "processPath list int string list string list string Path t string list string    ", "rendered": "<h4 class='item'>let processPath: (\n  list((int, (string, list(string), 'a))),\n  list(string),\n  Path.t,\n  'a\n) => (string, list(string), 'a)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-isUpperCase", "title": "isUpperCase", "contents": "isUpperCase char bool ", "rendered": "<h4 class='item'>let isUpperCase: char => bool</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findValueByName", "title": "findValueByName", "contents": "findValueByName list docItem option docItem  ", "rendered": "<h4 class='item'>let findValueByName: (\n  list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)),\n  'a\n) => option(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findTypeByName", "title": "findTypeByName", "contents": "findTypeByName list docItem option docItem  ", "rendered": "<h4 class='item'>let findTypeByName: (list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)), 'a) => option(\n  ('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findByName", "title": "findByName", "contents": "findByName list option  ", "rendered": "<h4 class='item'>let findByName: (list(('a, 'a, 'a)), 'a) => option(\n  ('a, 'a, 'a)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html", "title": "GenerateDoc", "contents": "@rest", "rendered": "@rest", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html", "title": "GenerateDoc", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#GenerateDoc", "title": "GenerateDoc", "contents": "", "rendered": "", "breadcrumb": "GenerateDoc"},
{"href": "./api/DocsTemplate.html#value-head", "title": "head", "contents": "head string string string relativeToRoot ", "rendered": "<h4 class='item'>let head: (~relativeToRoot: string, string) => string</h4>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html#value-searchStyle", "title": "searchStyle", "contents": "searchStyle string", "rendered": "<h4 class='item'>let searchStyle: string</h4>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html", "title": "DocsTemplate", "contents": "@rest", "rendered": "@rest", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html", "title": "DocsTemplate", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html#DocsTemplate", "title": "DocsTemplate", "contents": "", "rendered": "", "breadcrumb": "DocsTemplate"},
{"href": "./api/Docs.html#value-generate", "title": "generate", "contents": "generate option string string bool GenerateDoc t string option Omd t list int string list string list doc list string list string string string sourceUrl relativeToRoot playgroundEnabled processDocString      ", "rendered": "<h4 class='item'>let generate: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~processDocString: <a href=\"./api/GenerateDoc.html\">GenerateDoc</a>.<a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  string,\n  option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>),\n  list((int, (string, list(string), 'a))),\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>),\n  list(string),\n  list((string, string))\n) => string</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-page", "title": "page", "contents": "page option string string bool option bool string list int string string string list string string list string string string string sourceUrl relativeToRoot playgroundEnabled checkHashes     ", "rendered": "<h4 class='item'>let page: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-formatHref", "title": "formatHref", "contents": "formatHref bool string list string string list string pathType option string warnMissing   ", "rendered": "<h4 class='item'>let formatHref: (\n  ~warnMissing: bool,\n  string,\n  list(string),\n  (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>)\n) => option(string)</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-allGlobals", "title": "allGlobals", "contents": "allGlobals list string", "rendered": "<h4 class='item'>let allGlobals: list(string)</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html", "title": "Docs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Docs"},
{"href": "./api/Docs.html", "title": "Docs", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#Docs", "title": "Docs", "contents": "", "rendered": "", "breadcrumb": "Docs"},
{"href": "./api/CodeSnippets.html#value-testBlock", "title": "testBlock", "contents": "testBlock string string compilationResult codeOptions string int unit  base    ", "rendered": "<h4 class='item'>let testBlock: (\n  string,\n  ~base: string,\n  <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string,\n  int\n) => unit</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-snippetLoader", "title": "snippetLoader", "contents": "snippetLoader string string string string   ", "rendered": "<h4 class='item'>let snippetLoader: (string, string, string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-shouldTest", "title": "shouldTest", "contents": "shouldTest expectation bool ", "rendered": "<h4 class='item'>let shouldTest: <a href=\"./api/State.html#type-Model.expectation\" title=\"State.Model.expectation\">expectation</a> => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-escape", "title": "escape", "contents": "escape string string ", "rendered": "<h4 class='item'>let escape: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-processBlock", "title": "processBlock", "contents": "processBlock option bool option bool string string string string codeOptions string list string compilationResult debug silentFailures       ", "rendered": "<h4 class='item'>let processBlock: (\n  ~?debug: option(bool),\n  ~?silentFailures: option(bool),\n  string,\n  string,\n  string,\n  string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string,\n  list(string)\n) => <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a></h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-justBscCommand", "title": "justBscCommand", "contents": "justBscCommand string string list string string   ", "rendered": "<h4 class='item'>let justBscCommand: (string, string, list(string)) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-refmtCommand", "title": "refmtCommand", "contents": "refmtCommand string string string string string    ", "rendered": "<h4 class='item'>let refmtCommand: (string, string, string, string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-writeDeps", "title": "writeDeps", "contents": "writeDeps string unit  list string string list string string unit output_string dependencyDirs stdlibRequires bsRoot base", "rendered": "<h4 class='item'>let writeDeps: (\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-unique", "title": "unique", "contents": "unique list list ", "rendered": "<h4 class='item'>let unique: list('a) => list('a)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-invert", "title": "invert", "contents": "invert bool  bool  ", "rendered": "<h4 class='item'>let invert: ('a => bool, 'a) => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-getDependencyDirs", "title": "getDependencyDirs", "contents": "getDependencyDirs string Json t list string string  ", "rendered": "<h4 class='item'>let getDependencyDirs: (string, Json.t) => list(\n  (string, string)\n)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-isNative", "title": "isNative", "contents": "isNative Json t bool ", "rendered": "<h4 class='item'>let isNative: Json.t => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-getSourceDirectories", "title": "getSourceDirectories", "contents": "getSourceDirectories string Json t list string  ", "rendered": "<h4 class='item'>let getSourceDirectories: (string, Json.t) => list(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-optMap", "title": "optMap", "contents": "optMap option  list list  ", "rendered": "<h4 class='item'>let optMap: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-fullContent", "title": "fullContent", "contents": "fullContent string string  codeOptions string string   ", "rendered": "<h4 class='item'>let fullContent: (\n  string => string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string\n) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-hashAll", "title": "hashAll", "contents": "hashAll string string ", "rendered": "<h4 class='item'>let hashAll: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-removeHashes", "title": "removeHashes", "contents": "removeHashes string string ", "rendered": "<h4 class='item'>let removeHashes: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-splitLines", "title": "splitLines", "contents": "splitLines string list string ", "rendered": "<h4 class='item'>let splitLines: string => list(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-highlight", "title": "highlight", "contents": "highlight bool string string codeOptions compilationResult string option string  string editingEnabled     ", "rendered": "<h4 class='item'>let highlight: (\n  ~editingEnabled: bool,\n  string,\n  string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>,\n  string => option(string)\n) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-shouldBundle", "title": "shouldBundle", "contents": "shouldBundle expectation bool ", "rendered": "<h4 class='item'>let shouldBundle: <a href=\"./api/State.html#type-Model.expectation\" title=\"State.Model.expectation\">expectation</a> => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-escapeScript", "title": "escapeScript", "contents": "escapeScript string string ", "rendered": "<h4 class='item'>let escapeScript: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-html", "title": "html", "contents": "html option bool string string md ", "rendered": "<h4 class='item'>let html: (~?md: option(bool), string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-sprintf", "title": "sprintf", "contents": "sprintf Pervasives format unit string ", "rendered": "<h4 class='item'>let sprintf: Pervasives.format('a, unit, string) => 'a</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#type-compiledBlock", "title": "compiledBlock", "contents": "compiledBlock block codeBlock status compilationResult", "rendered": "<h4 class='item'>type compiledBlock = {\n  block: <a href=\"./api/CodeSnippets.html#type-codeBlock\">codeBlock</a>,\n  status: <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>\n}</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#type-codeBlock", "title": "codeBlock", "contents": "codeBlock el element id int fileName string options codeOptions content string", "rendered": "<h4 class='item'>type codeBlock = {\n  el: <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>,\n  id: int,\n  fileName: string,\n  options: <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  content: string\n}</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-parseCodeOptions", "title": "parseCodeOptions", "contents": "parseCodeOptions string option codeOptions  ", "rendered": "<h4 class='item'>let parseCodeOptions: (string, 'a) => option(<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-matchOption", "title": "matchOption", "contents": "matchOption string string option string  ", "rendered": "<h4 class='item'>let matchOption: (string, string) => option(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-codeBlockPrefix", "title": "codeBlockPrefix", "contents": "codeBlockPrefix string", "rendered": "<h4 class='item'>let codeBlockPrefix: string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html", "title": "CodeSnippets", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html", "title": "CodeSnippets", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#CodeSnippets", "title": "CodeSnippets", "contents": "", "rendered": "", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeHighlight.html#value-highlight", "title": "highlight", "contents": "highlight string string string string string  ", "rendered": "<h4 class='item'>let highlight: (string, string) => (string, string, string)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-codeSections", "title": "codeSections", "contents": "codeSections string string int string string int ", "rendered": "<h4 class='item'>let codeSections: string => (\n  string,\n  int,\n  string,\n  string,\n  int\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-separateHashed", "title": "separateHashed", "contents": "separateHashed int list string list string int list string list string   ", "rendered": "<h4 class='item'>let separateHashed: (int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-unHash", "title": "unHash", "contents": "unHash string string ", "rendered": "<h4 class='item'>let unHash: string => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-isHashed", "title": "isHashed", "contents": "isHashed string bool ", "rendered": "<h4 class='item'>let isHashed: string => bool</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-removeIfThere", "title": "removeIfThere", "contents": "removeIfThere string unit ", "rendered": "<h4 class='item'>let removeIfThere: string => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-collectRanges", "title": "collectRanges", "contents": "collectRanges Cmt_format binary_annots list Location t string ", "rendered": "<h4 class='item'>let collectRanges: Cmt_format.binary_annots => list(\n  (Location.t, string)\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-iterTags", "title": "iterTags", "contents": "iterTags Cmt_format binary_annots Location t string unit   unit  ", "rendered": "<h4 class='item'>let iterTags: (\n  Cmt_format.binary_annots,\n  (Location.t, string) => unit\n) => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-annotateText", "title": "annotateText", "contents": "annotateText list int int string list int string string int int string     ", "rendered": "<h4 class='item'>let annotateText: (\n  list((int, int, string)),\n  list((int, string)),\n  string,\n  int,\n  int\n) => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-addHtmlEscapedToBuffer", "title": "addHtmlEscapedToBuffer", "contents": "addHtmlEscapedToBuffer Buffer t char unit  ", "rendered": "<h4 class='item'>let addHtmlEscapedToBuffer: (Buffer.t, char) => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html", "title": "CodeHighlight", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html", "title": "CodeHighlight", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#CodeHighlight", "title": "CodeHighlight", "contents": "", "rendered": "", "breadcrumb": "CodeHighlight"},
{"href": "./api/MakeIndex.html#value-run", "title": "run", "contents": "run string string unit  ", "rendered": "<h4 class='item'>let run: (string, string) => unit</h4>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html#value-source", "title": "source", "contents": "source string", "rendered": "<h4 class='item'>let source: string</h4>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html", "title": "MakeIndex", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html", "title": "MakeIndex", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html#MakeIndex", "title": "MakeIndex", "contents": "", "rendered": "", "breadcrumb": "MakeIndex"},
{"href": "./api/ElasticRaw.html#value-raw", "title": "raw", "contents": "raw string", "rendered": "<h4 class='item'>let raw: string</h4>", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html", "title": "ElasticRaw", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html", "title": "ElasticRaw", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html#ElasticRaw", "title": "ElasticRaw", "contents": "", "rendered": "", "breadcrumb": "ElasticRaw"},
{"href": "./api/Descartes.html#value-main", "title": "main", "contents": "main unit unit ", "rendered": "<h4 class='item'>let main: unit => unit</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-gatherCmts", "title": "gatherCmts", "contents": "gatherCmts string string list string list string string   ", "rendered": "<h4 class='item'>let gatherCmts: (string, string, list(string)) => list(\n  (string, string)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-processMany", "title": "processMany", "contents": "processMany list string list Typedtree structure_item string list string string string string Location t string list fullItem list fullItem list string string list string ", "rendered": "<h4 class='item'>let processMany: list(\n  (string, list(Typedtree.structure_item), string)\n) => (\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(<a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>),\n      list(<a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>)\n    )\n  ),\n  list((string, string, list(string)))\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-unique", "title": "unique", "contents": "unique list list ", "rendered": "<h4 class='item'>let unique: list('a) => list('a)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-resolveType", "title": "resolveType", "contents": "resolveType string Hashtbl t string Hashtbl t string list string string list string string Hashtbl t string list string string list string string Path t     ", "rendered": "<h4 class='item'>let resolveType: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-resolveValue", "title": "resolveValue", "contents": "resolveValue string Hashtbl t string Hashtbl t string list string string list string string Hashtbl t string list string string list string string Path t     ", "rendered": "<h4 class='item'>let resolveValue: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-deepType", "title": "deepType", "contents": "deepType list list list Hashtbl t list list    ", "rendered": "<h4 class='item'>let deepType: (\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        list(('a, 'a)),\n        'a,\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'o1 | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-deepValue", "title": "deepValue", "contents": "deepValue list list list Hashtbl t list list    ", "rendered": "<h4 class='item'>let deepValue: (\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        'a,\n        list(('a, 'a)),\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'n1 | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-toId", "title": "toId", "contents": "toId string int string  ", "rendered": "<h4 class='item'>let toId: (string, int) => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-flatten", "title": "flatten", "contents": "flatten Path t Ident t list string ", "rendered": "<h4 class='item'>let flatten: Path.t => (Ident.t, list(string))</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-fold", "title": "fold", "contents": "fold  option   ", "rendered": "<h4 class='item'>let fold: ('a, 'a => 'a, option('a)) => 'a</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-process", "title": "process", "contents": "process string list Typedtree structure_item string Hashtbl t string string list string string list string string list string string Hashtbl t string fullItem Hashtbl t string fullItem list string string list string string list string string      ", "rendered": "<h4 class='item'>let process: (\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(string, <a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>),\n  Hashtbl.t(string, <a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>)\n) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-fullItem", "title": "fullItem", "contents": "fullItem id string name string moduleName string typ string loc Location t tags list Location t list tag vals list Path t typs list Path t text string", "rendered": "<h4 class='item'>type fullItem = {\n  id: string,\n  name: string,\n  moduleName: string,\n  typ: string,\n  loc: Location.t,\n  tags: list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n  vals: list(Path.t),\n  typs: list(Path.t),\n  text: string\n}</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-chart", "title": "chart", "contents": "chart list Typedtree structure_item list int node ", "rendered": "<h4 class='item'>let chart: list(Typedtree.structure_item) => list(\n  (int, <a href=\"./api/Descartes.html#type-node\">node</a>)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-item", "title": "item", "contents": "item string string string string", "rendered": "<h4 class='item'>type item = | Value(string, string) | Type(string, string)\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-node", "title": "node", "contents": "node Location t item list Location t list tag list Path t list Path t string list int node", "rendered": "<h4 class='item'>type node = \n  | Item(\n    Location.t,\n    <a href=\"./api/Descartes.html#type-item\">item</a>,\n    list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n    list(Path.t),\n    list(Path.t)\n  )\n  | Module(string, list((int, <a href=\"./api/Descartes.html#type-node\">node</a>)))\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-markdownTags", "title": "markdownTags", "contents": "markdownTags Location t list tag", "rendered": "<h4 class='item'>type markdownTags = (Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-highlightItem", "title": "highlightItem", "contents": "highlightItem Typedtree structure_item list Location t list tag list Path t list Path t ", "rendered": "<h4 class='item'>let highlightItem: Typedtree.structure_item => (\n  list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n  list(Path.t),\n  list(Path.t)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-iterTags", "title": "iterTags", "contents": "iterTags Location t list tag unit   ", "rendered": "<h4 class='item'>let iterTags: (\n  Location.t,\n  list(\n    <a href=\"./api/Descartes.html#type-tag\">tag</a>\n  )\n) => unit => (module TypedtreeIter.IteratorArgument)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-tag", "title": "tag", "contents": "tag Types type_expr string Ident t Ident t Path t Path t", "rendered": "<h4 class='item'>type tag = \n  | TypeHover(Types.type_expr)\n  | Cls(string)\n  | TypeDef(Ident.t)\n  | ValueDef(Ident.t)\n  | TypeRef(Path.t)\n  | ValueRef(Path.t)\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-filterNil", "title": "filterNil", "contents": "filterNil option  list list  ", "rendered": "<h4 class='item'>let filterNil: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html", "title": "Descartes", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html", "title": "Descartes", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#Descartes", "title": "Descartes", "contents": "", "rendered": "", "breadcrumb": "Descartes"},
{"href": "./api/Typing.html#value-collectTypes", "title": "collectTypes", "contents": "collectTypes Cmt_format binary_annots Hashtbl t Lexing position Lexing position Types type_expr Hashtbl t list list openn Hashtbl t int int Path t tag ", "rendered": "<h4 class='item'>let collectTypes: Cmt_format.binary_annots => (\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  Hashtbl.t((int, int), (Path.t, <a href=\"./api/Typing.html#type-tag\">tag</a>))\n)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-truncateLoc", "title": "truncateLoc", "contents": "truncateLoc int Location t Location t  ", "rendered": "<h4 class='item'>let truncateLoc: (int, Location.t) => Location.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-bindings", "title": "bindings", "contents": "bindings Hashtbl t int list Ident t Location t", "rendered": "<h4 class='item'>type bindings = Hashtbl.t(int, list((Ident.t, Location.t)))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-externalsUsed", "title": "externalsUsed", "contents": "externalsUsed list Path t Location t", "rendered": "<h4 class='item'>type externalsUsed = list((Path.t, Location.t))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-type_to_string", "title": "type_to_string", "contents": "type_to_string Types type_expr string ", "rendered": "<h4 class='item'>let type_to_string: Types.type_expr => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-entry", "title": "entry", "contents": "entry Location t int option Lexing position string string  depth mend ", "rendered": "<h4 class='item'>let entry: (\n  Location.t,\n  ~depth: int,\n  ~?mend: option(Lexing.position),\n  string\n) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-ppos", "title": "ppos", "contents": "ppos Lexing position string ", "rendered": "<h4 class='item'>let ppos: Lexing.position => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_expression", "title": "F.leave_expression", "contents": "leave_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let leave_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_expression", "title": "F.enter_expression", "contents": "enter_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let enter_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure_item", "title": "F.leave_structure_item", "contents": "leave_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let leave_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure_item", "title": "F.enter_structure_item", "contents": "enter_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let enter_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_pattern", "title": "F.enter_pattern", "contents": "enter_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let enter_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.handleRecord", "title": "F.handleRecord", "contents": "handleRecord Path t Longident t Longident t  ", "rendered": "<h4 class='item'>let handleRecord: (Path.t, Longident.t) => Longident.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.handleConstructor", "title": "F.handleConstructor", "contents": "handleConstructor Path t Longident t string Longident t  ", "rendered": "<h4 class='item'>let handleConstructor: (Path.t, Longident.t) => (\n  string,\n  Longident.t\n)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declaration", "title": "F.enter_type_declaration", "contents": "enter_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let enter_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_core_type", "title": "F.enter_core_type", "contents": "enter_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let enter_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.dig", "title": "F.dig", "contents": "dig Types type_expr Types type_expr ", "rendered": "<h4 class='item'>let dig: Types.type_expr => Types.type_expr</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.add_use", "title": "F.add_use", "contents": "add_use option bool Path t tag Longident t Location t unit inferable   ", "rendered": "<h4 class='item'>let add_use: (\n  ~?inferable: option(bool),\n  (Path.t, <a href=\"./api/Typing.html#type-tag\">tag</a>),\n  Longident.t,\n  Location.t\n) => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.pop_open", "title": "F.pop_open", "contents": "pop_open unit unit ", "rendered": "<h4 class='item'>let pop_open: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.add_open", "title": "F.add_open", "contents": "add_open Path t Location t unit  ", "rendered": "<h4 class='item'>let add_open: (Path.t, Location.t) => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.pop_stack", "title": "F.pop_stack", "contents": "pop_stack unit unit ", "rendered": "<h4 class='item'>let pop_stack: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.new_stack", "title": "F.new_stack", "contents": "new_stack unit unit ", "rendered": "<h4 class='item'>let new_stack: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.open_stack", "title": "F.open_stack", "contents": "open_stack Pervasives ref open_stack", "rendered": "<h4 class='item'>let open_stack: Pervasives.ref(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.closed_stacks", "title": "F.closed_stacks", "contents": "closed_stacks Pervasives ref list open_stack", "rendered": "<h4 class='item'>let closed_stacks: Pervasives.ref(list(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.root_stack", "title": "F.root_stack", "contents": "root_stack open_stack", "rendered": "<h4 class='item'>let root_stack: <a href=\"./api/Typing.html#type-open_stack\">open_stack</a></h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.depth", "title": "F.depth", "contents": "depth Pervasives ref int", "rendered": "<h4 class='item'>let depth: Pervasives.ref(int)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_declarations", "title": "F.leave_type_declarations", "contents": "leave_type_declarations Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let leave_type_declarations: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_declaration", "title": "F.leave_type_declaration", "contents": "leave_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let leave_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declaration", "title": "F.enter_type_declaration", "contents": "enter_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let enter_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declarations", "title": "F.enter_type_declarations", "contents": "enter_type_declarations Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let enter_type_declarations: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_bindings", "title": "F.leave_bindings", "contents": "leave_bindings Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let leave_bindings: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_binding", "title": "F.leave_binding", "contents": "leave_binding Typedtree value_binding unit ", "rendered": "<h4 class='item'>let leave_binding: Typedtree.value_binding => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_binding", "title": "F.enter_binding", "contents": "enter_binding Typedtree value_binding unit ", "rendered": "<h4 class='item'>let enter_binding: Typedtree.value_binding => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_bindings", "title": "F.enter_bindings", "contents": "enter_bindings Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let enter_bindings: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure_item", "title": "F.leave_structure_item", "contents": "leave_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let leave_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_field", "title": "F.leave_class_field", "contents": "leave_class_field Typedtree class_field unit ", "rendered": "<h4 class='item'>let leave_class_field: Typedtree.class_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_structure", "title": "F.leave_class_structure", "contents": "leave_class_structure Typedtree class_structure unit ", "rendered": "<h4 class='item'>let leave_class_structure: Typedtree.class_structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_core_type", "title": "F.leave_core_type", "contents": "leave_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let leave_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type_field", "title": "F.leave_class_type_field", "contents": "leave_class_type_field Typedtree class_type_field unit ", "rendered": "<h4 class='item'>let leave_class_type_field: Typedtree.class_type_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type", "title": "F.leave_class_type", "contents": "leave_class_type Typedtree class_type unit ", "rendered": "<h4 class='item'>let leave_class_type: Typedtree.class_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type_declaration", "title": "F.leave_class_type_declaration", "contents": "leave_class_type_declaration Typedtree class_type_declaration unit ", "rendered": "<h4 class='item'>let leave_class_type_declaration: Typedtree.class_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_description", "title": "F.leave_class_description", "contents": "leave_class_description Typedtree class_description unit ", "rendered": "<h4 class='item'>let leave_class_description: Typedtree.class_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_declaration", "title": "F.leave_class_declaration", "contents": "leave_class_declaration Typedtree class_declaration unit ", "rendered": "<h4 class='item'>let leave_class_declaration: Typedtree.class_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_signature", "title": "F.leave_class_signature", "contents": "leave_class_signature Typedtree class_signature unit ", "rendered": "<h4 class='item'>let leave_class_signature: Typedtree.class_signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_expr", "title": "F.leave_class_expr", "contents": "leave_class_expr Typedtree class_expr unit ", "rendered": "<h4 class='item'>let leave_class_expr: Typedtree.class_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_with_constraint", "title": "F.leave_with_constraint", "contents": "leave_with_constraint Typedtree with_constraint unit ", "rendered": "<h4 class='item'>let leave_with_constraint: Typedtree.with_constraint => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_expr", "title": "F.leave_module_expr", "contents": "leave_module_expr Typedtree module_expr unit ", "rendered": "<h4 class='item'>let leave_module_expr: Typedtree.module_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_type", "title": "F.leave_module_type", "contents": "leave_module_type Typedtree module_type unit ", "rendered": "<h4 class='item'>let leave_module_type: Typedtree.module_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_type_declaration", "title": "F.leave_module_type_declaration", "contents": "leave_module_type_declaration Typedtree module_type_declaration unit ", "rendered": "<h4 class='item'>let leave_module_type_declaration: Typedtree.module_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_signature_item", "title": "F.leave_signature_item", "contents": "leave_signature_item Typedtree signature_item unit ", "rendered": "<h4 class='item'>let leave_signature_item: Typedtree.signature_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_signature", "title": "F.leave_signature", "contents": "leave_signature Typedtree signature unit ", "rendered": "<h4 class='item'>let leave_signature: Typedtree.signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_package_type", "title": "F.leave_package_type", "contents": "leave_package_type Typedtree package_type unit ", "rendered": "<h4 class='item'>let leave_package_type: Typedtree.package_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_expression", "title": "F.leave_expression", "contents": "leave_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let leave_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_pattern", "title": "F.leave_pattern", "contents": "leave_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let leave_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_extension_constructor", "title": "F.leave_extension_constructor", "contents": "leave_extension_constructor Typedtree extension_constructor unit ", "rendered": "<h4 class='item'>let leave_extension_constructor: Typedtree.extension_constructor => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_extension", "title": "F.leave_type_extension", "contents": "leave_type_extension Typedtree type_extension unit ", "rendered": "<h4 class='item'>let leave_type_extension: Typedtree.type_extension => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_value_description", "title": "F.leave_value_description", "contents": "leave_value_description Typedtree value_description unit ", "rendered": "<h4 class='item'>let leave_value_description: Typedtree.value_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure", "title": "F.leave_structure", "contents": "leave_structure Typedtree structure unit ", "rendered": "<h4 class='item'>let leave_structure: Typedtree.structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure_item", "title": "F.enter_structure_item", "contents": "enter_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let enter_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_field", "title": "F.enter_class_field", "contents": "enter_class_field Typedtree class_field unit ", "rendered": "<h4 class='item'>let enter_class_field: Typedtree.class_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_structure", "title": "F.enter_class_structure", "contents": "enter_class_structure Typedtree class_structure unit ", "rendered": "<h4 class='item'>let enter_class_structure: Typedtree.class_structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_core_type", "title": "F.enter_core_type", "contents": "enter_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let enter_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type_field", "title": "F.enter_class_type_field", "contents": "enter_class_type_field Typedtree class_type_field unit ", "rendered": "<h4 class='item'>let enter_class_type_field: Typedtree.class_type_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type", "title": "F.enter_class_type", "contents": "enter_class_type Typedtree class_type unit ", "rendered": "<h4 class='item'>let enter_class_type: Typedtree.class_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type_declaration", "title": "F.enter_class_type_declaration", "contents": "enter_class_type_declaration Typedtree class_type_declaration unit ", "rendered": "<h4 class='item'>let enter_class_type_declaration: Typedtree.class_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_description", "title": "F.enter_class_description", "contents": "enter_class_description Typedtree class_description unit ", "rendered": "<h4 class='item'>let enter_class_description: Typedtree.class_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_declaration", "title": "F.enter_class_declaration", "contents": "enter_class_declaration Typedtree class_declaration unit ", "rendered": "<h4 class='item'>let enter_class_declaration: Typedtree.class_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_signature", "title": "F.enter_class_signature", "contents": "enter_class_signature Typedtree class_signature unit ", "rendered": "<h4 class='item'>let enter_class_signature: Typedtree.class_signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_expr", "title": "F.enter_class_expr", "contents": "enter_class_expr Typedtree class_expr unit ", "rendered": "<h4 class='item'>let enter_class_expr: Typedtree.class_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_with_constraint", "title": "F.enter_with_constraint", "contents": "enter_with_constraint Typedtree with_constraint unit ", "rendered": "<h4 class='item'>let enter_with_constraint: Typedtree.with_constraint => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_expr", "title": "F.enter_module_expr", "contents": "enter_module_expr Typedtree module_expr unit ", "rendered": "<h4 class='item'>let enter_module_expr: Typedtree.module_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_type", "title": "F.enter_module_type", "contents": "enter_module_type Typedtree module_type unit ", "rendered": "<h4 class='item'>let enter_module_type: Typedtree.module_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_type_declaration", "title": "F.enter_module_type_declaration", "contents": "enter_module_type_declaration Typedtree module_type_declaration unit ", "rendered": "<h4 class='item'>let enter_module_type_declaration: Typedtree.module_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_signature_item", "title": "F.enter_signature_item", "contents": "enter_signature_item Typedtree signature_item unit ", "rendered": "<h4 class='item'>let enter_signature_item: Typedtree.signature_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_signature", "title": "F.enter_signature", "contents": "enter_signature Typedtree signature unit ", "rendered": "<h4 class='item'>let enter_signature: Typedtree.signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_package_type", "title": "F.enter_package_type", "contents": "enter_package_type Typedtree package_type unit ", "rendered": "<h4 class='item'>let enter_package_type: Typedtree.package_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_expression", "title": "F.enter_expression", "contents": "enter_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let enter_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_pattern", "title": "F.enter_pattern", "contents": "enter_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let enter_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_extension_constructor", "title": "F.enter_extension_constructor", "contents": "enter_extension_constructor Typedtree extension_constructor unit ", "rendered": "<h4 class='item'>let enter_extension_constructor: Typedtree.extension_constructor => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_extension", "title": "F.enter_type_extension", "contents": "enter_type_extension Typedtree type_extension unit ", "rendered": "<h4 class='item'>let enter_type_extension: Typedtree.type_extension => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_value_description", "title": "F.enter_value_description", "contents": "enter_value_description Typedtree value_description unit ", "rendered": "<h4 class='item'>let enter_value_description: Typedtree.value_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure", "title": "F.enter_structure", "contents": "enter_structure Typedtree structure unit ", "rendered": "<h4 class='item'>let enter_structure: Typedtree.structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-relative", "title": "relative", "contents": "relative Longident t Path t Path t  ", "rendered": "<h4 class='item'>let relative: (Longident.t, Path.t) => Path.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-usesOpen", "title": "usesOpen", "contents": "usesOpen Longident t Path t bool  ", "rendered": "<h4 class='item'>let usesOpen: (Longident.t, Path.t) => bool</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-addLidentToPath", "title": "addLidentToPath", "contents": "addLidentToPath Path t Longident t Path t  ", "rendered": "<h4 class='item'>let addLidentToPath: (Path.t, Longident.t) => Path.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-pathToLident", "title": "pathToLident", "contents": "pathToLident Path t Longident t ", "rendered": "<h4 class='item'>let pathToLident: Path.t => Longident.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-open_stack", "title": "open_stack", "contents": "open_stack closed list openn opens list openn parent option open_stack", "rendered": "<h4 class='item'>type open_stack = {\n  mut closed: list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  mut opens: list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  parent: option(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>)\n}</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-openn", "title": "openn", "contents": "openn used list ident Longident t path Path t loc Location t", "rendered": "<h4 class='item'>type openn = {\n  mut used: list(<a href=\"./api/Typing.html#type-ident\">ident</a>(Longident.t)),\n  path: Path.t,\n  loc: Location.t\n}</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showLoc", "title": "showLoc", "contents": "showLoc Location t string ", "rendered": "<h4 class='item'>let showLoc: Location.t => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showLident", "title": "showLident", "contents": "showLident Longident t string ", "rendered": "<h4 class='item'>let showLident: Longident.t => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showPath", "title": "showPath", "contents": "showPath option string bool  Path t string paren ", "rendered": "<h4 class='item'>let showPath: (\n  ~?paren: option(string => bool),\n  Path.t\n) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-toString", "title": "toString", "contents": "toString string  tag string  ", "rendered": "<h4 class='item'>let toString: ('a => string, ('a, <a href=\"./api/Typing.html#type-tag\">tag</a>)) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-contents", "title": "contents", "contents": "contents ", "rendered": "<h4 class='item'>let contents: ('a, 'a) => 'a</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-mapIdent", "title": "mapIdent", "contents": "mapIdent   ", "rendered": "<h4 class='item'>let mapIdent: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-ident", "title": "ident", "contents": "ident tag", "rendered": "<h4 class='item'>type ident('a) = ('a, <a href=\"./api/Typing.html#type-tag\">tag</a>)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-tag", "title": "tag", "contents": "tag string string", "rendered": "<h4 class='item'>type tag = \n  | Type\n  | Value\n  | Module\n  | Constructor(string)\n  | Attribute(string)\n</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html", "title": "Typing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html", "title": "Typing", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#Typing", "title": "Typing", "contents": "", "rendered": "", "breadcrumb": "Typing"},
{"href": "./api/PrepareUtils.html#value-compose", "title": "compose", "contents": "compose bool  option  option   ", "rendered": "<h4 class='item'>let compose: ('a => bool, 'a => option('a), 'a) => option(\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-eitherFirst", "title": "eitherFirst", "contents": "eitherFirst option option option  ", "rendered": "<h4 class='item'>let eitherFirst: (option('a), (option('a), 'a)) => (\n  option('a),\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-mapFst", "title": "mapFst", "contents": "mapFst   ", "rendered": "<h4 class='item'>let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-either", "title": "either", "contents": "either option option option  ", "rendered": "<h4 class='item'>let either: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-foldOpt", "title": "foldOpt", "contents": "foldOpt option  list list list   ", "rendered": "<h4 class='item'>let foldOpt: ('a => option('a), list('a), list('a)) => list(\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-hasNoDoc", "title": "hasNoDoc", "contents": "hasNoDoc list Asttypes loc string bool ", "rendered": "<h4 class='item'>let hasNoDoc: list((Asttypes.loc(string), 'a)) => bool</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-findDocAttribute", "title": "findDocAttribute", "contents": "findDocAttribute string  list Asttypes loc string Parsetree payload option  ", "rendered": "<h4 class='item'>let findDocAttribute: (\n  string => 'a,\n  list(\n    (Asttypes.loc(string), Parsetree.payload)\n  )\n) => option('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-cleanOffStars", "title": "cleanOffStars", "contents": "cleanOffStars string string ", "rendered": "<h4 class='item'>let cleanOffStars: string => string</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-trimFirst", "title": "trimFirst", "contents": "trimFirst int string string  ", "rendered": "<h4 class='item'>let trimFirst: (int, string) => string</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-combine", "title": "combine", "contents": "combine option int option int option int  ", "rendered": "<h4 class='item'>let combine: (option(int), option(int)) => option(int)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-findStars", "title": "findStars", "contents": "findStars string option int ", "rendered": "<h4 class='item'>let findStars: string => option(int)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-filterNil", "title": "filterNil", "contents": "filterNil option  list list  ", "rendered": "<h4 class='item'>let filterNil: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-toFullPath", "title": "toFullPath", "contents": "toFullPath  ", "rendered": "<h4 class='item'>let toFullPath: ('a, ('a, 'a)) => ('a, 'a, 'a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-addToPath", "title": "addToPath", "contents": "addToPath list list  ", "rendered": "<h4 class='item'>let addToPath: (('a, list('a)), 'a) => ('a, list('a))</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html", "title": "PrepareUtils", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html", "title": "PrepareUtils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#PrepareUtils", "title": "PrepareUtils", "contents": "", "rendered": "", "breadcrumb": "PrepareUtils"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypedtreeImplementation", "title": "stampsFromTypedtreeImplementation", "contents": "stampsFromTypedtreeImplementation list string list Typedtree structure_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypedtreeImplementation: (\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypedtreeInterface", "title": "stampsFromTypedtreeInterface", "contents": "stampsFromTypedtreeInterface list string list Typedtree signature_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypedtreeInterface: (\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypesSignature", "title": "stampsFromTypesSignature", "contents": "stampsFromTypesSignature list string list Types signature_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypesSignature: (\n  ('a, list(string)),\n  list(Types.signature_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.stamps", "title": "T.stamps", "contents": "stamps list int fullPath", "rendered": "<h4 class='item'>type stamps = list((int, <a href=\"./api/CmtFindStamps.html#type-T.fullPath\">fullPath</a>))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.fullPath", "title": "T.fullPath", "contents": "fullPath string list string pathType", "rendered": "<h4 class='item'>type fullPath = (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\">pathType</a>)</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.pathType", "title": "T.pathType", "contents": "pathType pathType", "rendered": "<h4 class='item'>type pathType = | PModule | PModuleType | PValue | PType\n = <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a></h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#module-T", "title": "T", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#module-T", "title": "T", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html", "title": "CmtFindStamps", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html", "title": "CmtFindStamps", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#CmtFindStamps", "title": "CmtFindStamps", "contents": "", "rendered": "", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsSig", "title": "moduleContentsSig", "contents": "moduleContentsSig string Omd t  Typedtree module_type option Omd t moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsSig: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Typedtree.module_type\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromSignature", "title": "docItemsFromSignature", "contents": "docItemsFromSignature string Omd t  list Typedtree signature_item option Omd t list doc  ", "rendered": "<h4 class='item'>let docItemsFromSignature: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(Typedtree.signature_item)\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>))</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsType", "title": "moduleContentsType", "contents": "moduleContentsType string Omd t  Types module_type moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsType: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.module_type\n) => <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a></h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsStr", "title": "moduleContentsStr", "contents": "moduleContentsStr string Omd t  Typedtree module_expr option Omd t moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsStr: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Typedtree.module_expr\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromStructure", "title": "docItemsFromStructure", "contents": "docItemsFromStructure string Omd t  list Typedtree structure_item option Omd t list doc  ", "rendered": "<h4 class='item'>let docItemsFromStructure: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(Typedtree.structure_item)\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>))</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-eitherFirst", "title": "eitherFirst", "contents": "eitherFirst option option option  ", "rendered": "<h4 class='item'>let eitherFirst: (option('a), (option('a), 'a)) => (\n  option('a),\n  'a\n)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-mapFst", "title": "mapFst", "contents": "mapFst   ", "rendered": "<h4 class='item'>let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-either", "title": "either", "contents": "either option option option  ", "rendered": "<h4 class='item'>let either: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContents", "title": "moduleContents", "contents": "moduleContents string Omd t  Types module_type moduleContents  ", "rendered": "<h4 class='item'>let moduleContents: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.module_type\n) => <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a></h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromTypes", "title": "docItemsFromTypes", "contents": "docItemsFromTypes string Omd t  Types signature list doc  ", "rendered": "<h4 class='item'>let docItemsFromTypes: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.signature\n) => list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-iter", "title": "iter", "contents": "iter string option Omd t docItem  doc unit  ", "rendered": "<h4 class='item'>let iter: (\n  (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>) => 'a,\n  <a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>\n) => unit</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html", "title": "CmtFindDocItems", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html", "title": "CmtFindDocItems", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#CmtFindDocItems", "title": "CmtFindDocItems", "contents": "", "rendered": "", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/SerializeBinary.html#value-pp_string", "title": "pp_string", "contents": "pp_string string  option char option bool string  quote utf ", "rendered": "<h4 class='item'>let pp_string: (\n  string => 'a,\n  ~?quote: option(char),\n  ~?utf: option(bool),\n  string\n) => 'a</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#value-array_conv", "title": "array_conv", "contents": "array_conv array string", "rendered": "<h4 class='item'>let array_conv: array(string)</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#value-array_str1", "title": "array_str1", "contents": "array_str1 array string", "rendered": "<h4 class='item'>let array_str1: array(string)</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html", "title": "SerializeBinary", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html", "title": "SerializeBinary", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#SerializeBinary", "title": "SerializeBinary", "contents": "", "rendered": "", "breadcrumb": "SerializeBinary"},
{"href": "./api/Infix.html#value-/+", "title": "/+", "contents": "/+ string string string  ", "rendered": "<h4 class='item'>let /+: (string, string) => string</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-fileConcat", "title": "fileConcat", "contents": "fileConcat string string string  ", "rendered": "<h4 class='item'>let fileConcat: (string, string) => string</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?<", "title": "|?<", "contents": "|?< option unit  unit  ", "rendered": "<h4 class='item'>let |?<: (option('a), 'a => unit) => unit</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|.!", "title": "|.!", "contents": "|.! option  string   ", "rendered": "<h4 class='item'>let |.!: ('a => option('a), string, 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-fold", "title": "fold", "contents": "fold option    ", "rendered": "<h4 class='item'>let fold: (option('a), 'a, 'a => 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?>>", "title": "|?>>", "contents": "|?>> option  option  ", "rendered": "<h4 class='item'>let |?>>: (option('a), 'a => 'a) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?>", "title": "|?>", "contents": "|?> option option  option  ", "rendered": "<h4 class='item'>let |?>: (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??#", "title": "|??#", "contents": " Lazy optional default wrapped operator ", "rendered": " Lazy optional default wrapped operator ", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??#", "title": "|??#", "contents": "|??# option Lazy t option option  ", "rendered": "<h4 class='item'>let |??#: (option('a), Lazy.t(option('a))) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?#", "title": "|?#", "contents": " Lazy optional default operator ", "rendered": " Lazy optional default operator ", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?#", "title": "|?#", "contents": "|?# option Lazy t option option  ", "rendered": "<h4 class='item'>let |?#: (option('a), Lazy.t(option('a))) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??", "title": "|??", "contents": "|?? option option option  ", "rendered": "<h4 class='item'>let |??: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?", "title": "|?", "contents": "|? option  ", "rendered": "<h4 class='item'>let |?: (option('a), 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|!", "title": "|!", "contents": "|! option string  ", "rendered": "<h4 class='item'>let |!: (option('a), string) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Infix"},
{"href": "./api/Infix.html", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#Infix", "title": "Infix", "contents": "", "rendered": "", "breadcrumb": "Infix"},
{"href": "./api/Files.html#value-collect", "title": "collect", "contents": "collect option string bool  string string bool  list string checkDir  ", "rendered": "<h4 class='item'>let collect: (\n  ~?checkDir: option(string => bool),\n  string,\n  string => bool\n) => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-collectDirs", "title": "collectDirs", "contents": "collectDirs string list string ", "rendered": "<h4 class='item'>let collectDirs: string => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-walk", "title": "walk", "contents": "walk string string unit  unit  ", "rendered": "<h4 class='item'>let walk: (string, string => unit) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-removeDeep", "title": "removeDeep", "contents": "removeDeep string unit ", "rendered": "<h4 class='item'>let removeDeep: string => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copyDeep", "title": "copyDeep", "contents": "copyDeep string string unit source dest", "rendered": "<h4 class='item'>let copyDeep: (~source: string, ~dest: string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-mkdirp", "title": "mkdirp", "contents": "mkdirp string unit ", "rendered": "<h4 class='item'>let mkdirp: string => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readDirectory", "title": "readDirectory", "contents": "readDirectory string list string ", "rendered": "<h4 class='item'>let readDirectory: string => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-isDirectory", "title": "isDirectory", "contents": "isDirectory string bool ", "rendered": "<h4 class='item'>let isDirectory: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-isFile", "title": "isFile", "contents": "isFile string bool ", "rendered": "<h4 class='item'>let isFile: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-ifExists", "title": "ifExists", "contents": "ifExists string option string ", "rendered": "<h4 class='item'>let ifExists: string => option(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-exists", "title": "exists", "contents": "exists string bool ", "rendered": "<h4 class='item'>let exists: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copyExn", "title": "copyExn", "contents": "copyExn string string unit source dest", "rendered": "<h4 class='item'>let copyExn: (~source: string, ~dest: string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copy", "title": "copy", "contents": "copy string string bool source dest", "rendered": "<h4 class='item'>let copy: (~source: string, ~dest: string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-writeFileExn", "title": "writeFileExn", "contents": "writeFileExn string string unit  ", "rendered": "<h4 class='item'>let writeFileExn: (string, string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-writeFile", "title": "writeFile", "contents": "writeFile string string bool  ", "rendered": "<h4 class='item'>let writeFile: (string, string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readFileExn", "title": "readFileExn", "contents": "readFileExn string string ", "rendered": "<h4 class='item'>let readFileExn: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readFile", "title": "readFile", "contents": "readFile string option string ", "rendered": "<h4 class='item'>let readFile: string => option(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-maybeStat", "title": "maybeStat", "contents": "maybeStat string option Unix stats ", "rendered": "<h4 class='item'>let maybeStat: string => option(Unix.stats)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-symlink", "title": "symlink", "contents": "symlink string string unit  ", "rendered": "<h4 class='item'>let symlink: (string, string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-relpath", "title": "relpath", "contents": "relpath string string string  ", "rendered": "<h4 class='item'>let relpath: (string, string) => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-removeExtraDots", "title": "removeExtraDots", "contents": "removeExtraDots string string ", "rendered": "<h4 class='item'>let removeExtraDots: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-absify", "title": "absify", "contents": "absify string string ", "rendered": "<h4 class='item'>let absify: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-split", "title": "split", "contents": "split string string list string  ", "rendered": "<h4 class='item'>let split: (string, string) => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html", "title": "Files", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Files"},
{"href": "./api/Files.html", "title": "Files", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Files"},
{"href": "./api/Files.html#Files", "title": "Files", "contents": "", "rendered": "", "breadcrumb": "Files"},
{"href": "./api/Commands.html#value-execWithInput", "title": "execWithInput", "contents": "execWithInput string string list string bool  ", "rendered": "<h4 class='item'>let execWithInput: (string, string) => (list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#value-execSync", "title": "execSync", "contents": "execSync string list string bool ", "rendered": "<h4 class='item'>let execSync: string => (list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#value-execFull", "title": "execFull", "contents": "execFull option string option array string string list string list string bool input env ", "rendered": "<h4 class='item'>let execFull: (\n  ~?input: option(string),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html", "title": "Commands", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Commands"},
{"href": "./api/Commands.html", "title": "Commands", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#Commands", "title": "Commands", "contents": "", "rendered": "", "breadcrumb": "Commands"},
{"href": "./api/SearchScript.html#value-js", "title": "js", "contents": "js string", "rendered": "<h4 class='item'>let js: string</h4>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html#value-framework", "title": "framework", "contents": "framework string", "rendered": "<h4 class='item'>let framework: string</h4>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html", "title": "SearchScript", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html", "title": "SearchScript", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html#SearchScript", "title": "SearchScript", "contents": "", "rendered": "", "breadcrumb": "SearchScript"},
{"href": "./api/Template.html#value-make", "title": "make", "contents": "make string string string  ", "rendered": "<h4 class='item'>let make: (string, string) => string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html#value-final", "title": "final", "contents": "final string", "rendered": "<h4 class='item'>let final: string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html#value-header", "title": "header", "contents": "header string", "rendered": "<h4 class='item'>let header: string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html", "title": "Template", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Template"},
{"href": "./api/Template.html", "title": "Template", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Template"},
{"href": "./api/Template.html#Template", "title": "Template", "contents": "", "rendered": "", "breadcrumb": "Template"},
{"href": "./api/Sidebar.html#value-generate", "title": "generate", "contents": "generate list int string string string list string string list string string string option string string      playgroundPath", "rendered": "<h4 class='item'>let generate: (\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string,\n  ~playgroundPath: option(string)\n) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-makeMarkdowns", "title": "makeMarkdowns", "contents": "makeMarkdowns list string string string ", "rendered": "<h4 class='item'>let makeMarkdowns: list((string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-showPackage", "title": "showPackage", "contents": "showPackage list string string string ", "rendered": "<h4 class='item'>let showPackage: list((string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-makeToc", "title": "makeToc", "contents": "makeToc list int string string string string ", "rendered": "<h4 class='item'>let makeToc: list((int, string, string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html", "title": "Sidebar", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html", "title": "Sidebar", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#Sidebar", "title": "Sidebar", "contents": "", "rendered": "", "breadcrumb": "Sidebar"},
{"href": "./api/PrintType.html#value-default", "title": "default", "contents": "default stringifier", "rendered": "<h4 class='item'>let default: <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_decl", "title": "print_decl", "contents": "print_decl stringifier string string Types type_declaration doc    ", "rendered": "<h4 class='item'>let print_decl: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  string,\n  string,\n  Types.type_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_value", "title": "print_value", "contents": "print_value stringifier string string Types type_expr doc    ", "rendered": "<h4 class='item'>let print_value: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  string,\n  string,\n  Types.type_expr\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_attr", "title": "print_attr", "contents": "print_attr stringifier Types label_declaration doc  ", "rendered": "<h4 class='item'>let print_attr: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  Types.label_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_constructor", "title": "print_constructor", "contents": "print_constructor Types type_expr doc  Types constructor_declaration doc  ", "rendered": "<h4 class='item'>let print_constructor: (\n  Types.type_expr => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  Types.constructor_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_expr", "title": "print_expr", "contents": "print_expr stringifier Types type_expr doc  ", "rendered": "<h4 class='item'>let print_expr: (<a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>, Types.type_expr) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-htmlEscape", "title": "htmlEscape", "contents": "htmlEscape string string ", "rendered": "<h4 class='item'>let htmlEscape: string => string</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-replace", "title": "replace", "contents": "replace string string string string   ", "rendered": "<h4 class='item'>let replace: (string, string, string) => string</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-tuple_list", "title": "tuple_list", "contents": "tuple_list list doc  doc  ", "rendered": "<h4 class='item'>let tuple_list: (list('a), 'a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-indentGroup", "title": "indentGroup", "contents": "indentGroup doc doc ", "rendered": "<h4 class='item'>let indentGroup: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a> => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-commad_list", "title": "commad_list", "contents": "commad_list doc  list doc  ", "rendered": "<h4 class='item'>let commad_list: ('a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, list('a)) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-sepd_list", "title": "sepd_list", "contents": "sepd_list doc list doc  doc   ", "rendered": "<h4 class='item'>let sepd_list: (<a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, list('a), 'a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-@!", "title": "@!", "contents": "@! doc doc doc  ", "rendered": "<h4 class='item'>let @!: (<a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-str", "title": "str", "contents": "str option int string doc len ", "rendered": "<h4 class='item'>let str: (~?len: option(int), string) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-dedent", "title": "dedent", "contents": "dedent doc", "rendered": "<h4 class='item'>let dedent: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-space", "title": "space", "contents": "space doc", "rendered": "<h4 class='item'>let space: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-break", "title": "break", "contents": "break doc", "rendered": "<h4 class='item'>let break: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#type-T.stringifier", "title": "T.stringifier", "contents": "stringifier path stringifier Path t pathType doc    expr stringifier Types type_expr doc   ident stringifier Ident t doc   decl stringifier string string Types type_declaration doc     value stringifier string string Types type_expr doc    ", "rendered": "<h4 class='item'>type stringifier = {\n  path: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Path.t, <a href=\"./api/PrintType.html#type-pathType\">pathType</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  expr: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Types.type_expr) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  ident: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Ident.t) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  decl: (\n    <a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>,\n    string,\n    string,\n    Types.type_declaration\n  ) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  value: (\n    <a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>,\n    string,\n    string,\n    Types.type_expr\n  ) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>\n}</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#module-T", "title": "T", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#module-T", "title": "T", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#type-pathType", "title": "pathType", "contents": "pathType ", "rendered": "<h4 class='item'>type pathType = | PModule | PModuleType | PValue | PType\n</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-collectArgs", "title": "collectArgs", "contents": "collectArgs list Asttypes label Types type_expr Types type_expr list Asttypes label Types type_expr Types type_expr  ", "rendered": "<h4 class='item'>let collectArgs: (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html", "title": "PrintType", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html", "title": "PrintType", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#PrintType", "title": "PrintType", "contents": "", "rendered": "", "breadcrumb": "PrintType"},
{"href": "./api/Pretty.html#value-print", "title": "print", "contents": "Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.", "rendered": "Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-print", "title": "print", "contents": "print option int option string unit  option int unit  doc unit width output indent ", "rendered": "<h4 class='item'>let print: (\n  ~?width: option(int),\n  ~?output: option(string => unit),\n  ~?indent: option(int => unit),\n  <a href=\"./api/Pretty.html#type-doc\">doc</a>\n) => unit</h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-back", "title": "back", "contents": "Constructs a linebreak that dedents", "rendered": "Constructs a linebreak that dedents", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-back", "title": "back", "contents": "back int string doc  ", "rendered": "<h4 class='item'>let back: (int, string) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-text", "title": "text", "contents": "Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines", "rendered": "Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-text", "title": "text", "contents": "text option int string doc len ", "rendered": "<h4 class='item'>let text: (~?len: option(int), string) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-line", "title": "line", "contents": "Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.", "rendered": "Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-line", "title": "line", "contents": "line string doc ", "rendered": "<h4 class='item'>let line: string => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-indent", "title": "indent", "contents": "Adds a level of indentation to a document", "rendered": "Adds a level of indentation to a document", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-indent", "title": "indent", "contents": "indent int doc doc  ", "rendered": "<h4 class='item'>let indent: (int, <a href=\"./api/Pretty.html#type-doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-group", "title": "group", "contents": "Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.", "rendered": "Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-group", "title": "group", "contents": "group doc doc ", "rendered": "<h4 class='item'>let group: <a href=\"./api/Pretty.html#type-doc\">doc</a> => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-empty", "title": "empty", "contents": "The empty document", "rendered": "The empty document", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-empty", "title": "empty", "contents": "empty doc", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-append", "title": "append", "contents": "Sequentially appends two documents", "rendered": "Sequentially appends two documents", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-append", "title": "append", "contents": "append doc doc doc  ", "rendered": "<h4 class='item'>let append: (<a href=\"./api/Pretty.html#type-doc\">doc</a>, <a href=\"./api/Pretty.html#type-doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#type-doc", "title": "doc", "contents": "Represents documents to be pretty-printed", "rendered": "Represents documents to be pretty-printed", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#type-doc", "title": "doc", "contents": "doc ", "rendered": "<h4 class='item'>type doc</h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html", "title": "Pretty", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html", "title": "Pretty", "contents": "Pretty-prints documents. This module is similar in purpose to OCaml standard Format module, but is based on the combinators described in Wadler&#39;s paper &quot;A prettier printer.&quot; Unlike Wadler&#39;s implementation, the present code does not admit lazy document nodes and therefore pretty printing always uses O(N) space where N is the size of the document. References Philip Wadler, &quot;A prettier printer.&quot; The Fun of Programming. A symposium in honour of Professor Richard Bird&#39;s 60th birthday Examination Schools, Oxford, 24-25 March 2003.", "rendered": "Pretty-prints documents. This module is similar in purpose to OCaml standard Format module, but is based on the combinators described in Wadler&#39;s paper <a href='http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf'>&quot;A prettier printer.&quot;</a> Unlike Wadler&#39;s implementation, the present code does not admit lazy document nodes and therefore pretty printing always uses O(N) space where N is the size of the document. <em>References</em> Philip Wadler, <a href='http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf'>&quot;A prettier printer.&quot;</a> The Fun of Programming. A symposium in honour of Professor Richard Bird&#39;s 60th birthday Examination Schools, Oxford, 24-25 March 2003.", "breadcrumb": "Pretty"},
{"href": "./api/GenerateDoc.html#value-docsForModule", "title": "docsForModule", "contents": "docsForModule stringifier t list string int string Omd t list doc string list int string string string       ", "rendered": "<h4 class='item'>let docsForModule: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n  <a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  int,\n  string,\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)\n) => (string, list((int, string, string, string)))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-generateDoc", "title": "generateDoc", "contents": "generateDoc stringifier t list string int doc string list int string string string     ", "rendered": "<h4 class='item'>let generateDoc: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n  <a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  int,\n  <a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>\n) => (string, list((int, string, string, string)))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#type-t", "title": "t", "contents": "t option element option string  list string string option docItem Omd t string override    ", "rendered": "<h4 class='item'>type t = (\n  ~?override: option(<a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)),\n  list(string),\n  string,\n  option(<a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>),\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-link", "title": "link", "contents": "link string string string  ", "rendered": "<h4 class='item'>let link: (string, string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-marked", "title": "marked", "contents": "marked element option string  string string  ", "rendered": "<h4 class='item'>let marked: (<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string), string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-div", "title": "div", "contents": "div string string string  ", "rendered": "<h4 class='item'>let div: (string, string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-trackToc", "title": "trackToc", "contents": "trackToc option bool int list int string string string unit  Pervasives ref int element option string  element option string     Pervasives ref list int string string string element option string  lower  ", "rendered": "<h4 class='item'>let trackToc: (\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string),\n    <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-uniqueItems", "title": "uniqueItems", "contents": "uniqueItems list docItem list docItem ", "rendered": "<h4 class='item'>let uniqueItems: list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)) => list(\n  ('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-cleanForLink", "title": "cleanForLink", "contents": "cleanForLink string string ", "rendered": "<h4 class='item'>let cleanForLink: string => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-prettyString", "title": "prettyString", "contents": "prettyString option int doc string width ", "rendered": "<h4 class='item'>let prettyString: (~?width: option(int), <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-defaultMain", "title": "defaultMain", "contents": "defaultMain option bool string string addHeading ", "rendered": "<h4 class='item'>let defaultMain: (\n  ~?addHeading: option(bool),\n  string\n) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-makeId", "title": "makeId", "contents": "makeId list string pathType string  ", "rendered": "<h4 class='item'>let makeId: (list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-ptypePrefix", "title": "ptypePrefix", "contents": "ptypePrefix pathType string ", "rendered": "<h4 class='item'>let ptypePrefix: <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a> => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-printer", "title": "printer", "contents": "printer string list string pathType option string  list int string list string stringifier  ", "rendered": "<h4 class='item'>let printer: (\n  (string, list(string), <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a>) => option(string),\n  list((int, (string, list(string), 'a)))\n) => <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a></h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-processPath", "title": "processPath", "contents": "processPath list int string list string list string Path t string list string    ", "rendered": "<h4 class='item'>let processPath: (\n  list((int, (string, list(string), 'a))),\n  list(string),\n  Path.t,\n  'a\n) => (string, list(string), 'a)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-isUpperCase", "title": "isUpperCase", "contents": "isUpperCase char bool ", "rendered": "<h4 class='item'>let isUpperCase: char => bool</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findValueByName", "title": "findValueByName", "contents": "findValueByName list docItem option docItem  ", "rendered": "<h4 class='item'>let findValueByName: (\n  list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)),\n  'a\n) => option(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findTypeByName", "title": "findTypeByName", "contents": "findTypeByName list docItem option docItem  ", "rendered": "<h4 class='item'>let findTypeByName: (list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)), 'a) => option(\n  ('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findByName", "title": "findByName", "contents": "findByName list option  ", "rendered": "<h4 class='item'>let findByName: (list(('a, 'a, 'a)), 'a) => option(\n  ('a, 'a, 'a)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html", "title": "GenerateDoc", "contents": "@rest", "rendered": "@rest", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html", "title": "GenerateDoc", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#GenerateDoc", "title": "GenerateDoc", "contents": "", "rendered": "", "breadcrumb": "GenerateDoc"},
{"href": "./api/DocsTemplate.html#value-head", "title": "head", "contents": "head string string string relativeToRoot ", "rendered": "<h4 class='item'>let head: (~relativeToRoot: string, string) => string</h4>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html#value-searchStyle", "title": "searchStyle", "contents": "searchStyle string", "rendered": "<h4 class='item'>let searchStyle: string</h4>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html", "title": "DocsTemplate", "contents": "@rest", "rendered": "@rest", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html", "title": "DocsTemplate", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html#DocsTemplate", "title": "DocsTemplate", "contents": "", "rendered": "", "breadcrumb": "DocsTemplate"},
{"href": "./api/Docs.html#value-generate", "title": "generate", "contents": "generate option string string bool GenerateDoc t string option Omd t list int string list string list doc list string list string string string sourceUrl relativeToRoot playgroundEnabled processDocString      ", "rendered": "<h4 class='item'>let generate: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~processDocString: <a href=\"./api/GenerateDoc.html\">GenerateDoc</a>.<a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  string,\n  option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>),\n  list((int, (string, list(string), 'a))),\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>),\n  list(string),\n  list((string, string))\n) => string</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-page", "title": "page", "contents": "page option string string bool option bool string list int string string string list string string list string string string string sourceUrl relativeToRoot playgroundEnabled checkHashes     ", "rendered": "<h4 class='item'>let page: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-formatHref", "title": "formatHref", "contents": "formatHref bool string list string string list string pathType option string warnMissing   ", "rendered": "<h4 class='item'>let formatHref: (\n  ~warnMissing: bool,\n  string,\n  list(string),\n  (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>)\n) => option(string)</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-allGlobals", "title": "allGlobals", "contents": "allGlobals list string", "rendered": "<h4 class='item'>let allGlobals: list(string)</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html", "title": "Docs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Docs"},
{"href": "./api/Docs.html", "title": "Docs", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#Docs", "title": "Docs", "contents": "", "rendered": "", "breadcrumb": "Docs"},
{"href": "./api/CodeSnippets.html#value-testBlock", "title": "testBlock", "contents": "testBlock string string compilationResult codeOptions string int unit  base    ", "rendered": "<h4 class='item'>let testBlock: (\n  string,\n  ~base: string,\n  <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string,\n  int\n) => unit</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-snippetLoader", "title": "snippetLoader", "contents": "snippetLoader string string string string   ", "rendered": "<h4 class='item'>let snippetLoader: (string, string, string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-shouldTest", "title": "shouldTest", "contents": "shouldTest expectation bool ", "rendered": "<h4 class='item'>let shouldTest: <a href=\"./api/State.html#type-Model.expectation\" title=\"State.Model.expectation\">expectation</a> => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-escape", "title": "escape", "contents": "escape string string ", "rendered": "<h4 class='item'>let escape: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-processBlock", "title": "processBlock", "contents": "processBlock option bool option bool string string string string codeOptions string list string compilationResult debug silentFailures       ", "rendered": "<h4 class='item'>let processBlock: (\n  ~?debug: option(bool),\n  ~?silentFailures: option(bool),\n  string,\n  string,\n  string,\n  string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string,\n  list(string)\n) => <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a></h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-justBscCommand", "title": "justBscCommand", "contents": "justBscCommand string string list string string   ", "rendered": "<h4 class='item'>let justBscCommand: (string, string, list(string)) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-refmtCommand", "title": "refmtCommand", "contents": "refmtCommand string string string string string    ", "rendered": "<h4 class='item'>let refmtCommand: (string, string, string, string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-writeDeps", "title": "writeDeps", "contents": "writeDeps string unit  list string string list string string unit output_string dependencyDirs stdlibRequires bsRoot base", "rendered": "<h4 class='item'>let writeDeps: (\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-unique", "title": "unique", "contents": "unique list list ", "rendered": "<h4 class='item'>let unique: list('a) => list('a)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-invert", "title": "invert", "contents": "invert bool  bool  ", "rendered": "<h4 class='item'>let invert: ('a => bool, 'a) => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-getDependencyDirs", "title": "getDependencyDirs", "contents": "getDependencyDirs string Json t list string string  ", "rendered": "<h4 class='item'>let getDependencyDirs: (string, Json.t) => list(\n  (string, string)\n)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-isNative", "title": "isNative", "contents": "isNative Json t bool ", "rendered": "<h4 class='item'>let isNative: Json.t => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-getSourceDirectories", "title": "getSourceDirectories", "contents": "getSourceDirectories string Json t list string  ", "rendered": "<h4 class='item'>let getSourceDirectories: (string, Json.t) => list(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-optMap", "title": "optMap", "contents": "optMap option  list list  ", "rendered": "<h4 class='item'>let optMap: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-fullContent", "title": "fullContent", "contents": "fullContent string string  codeOptions string string   ", "rendered": "<h4 class='item'>let fullContent: (\n  string => string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string\n) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-hashAll", "title": "hashAll", "contents": "hashAll string string ", "rendered": "<h4 class='item'>let hashAll: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-removeHashes", "title": "removeHashes", "contents": "removeHashes string string ", "rendered": "<h4 class='item'>let removeHashes: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-splitLines", "title": "splitLines", "contents": "splitLines string list string ", "rendered": "<h4 class='item'>let splitLines: string => list(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-highlight", "title": "highlight", "contents": "highlight bool string string codeOptions compilationResult string option string  string editingEnabled     ", "rendered": "<h4 class='item'>let highlight: (\n  ~editingEnabled: bool,\n  string,\n  string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>,\n  string => option(string)\n) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-shouldBundle", "title": "shouldBundle", "contents": "shouldBundle expectation bool ", "rendered": "<h4 class='item'>let shouldBundle: <a href=\"./api/State.html#type-Model.expectation\" title=\"State.Model.expectation\">expectation</a> => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-escapeScript", "title": "escapeScript", "contents": "escapeScript string string ", "rendered": "<h4 class='item'>let escapeScript: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-html", "title": "html", "contents": "html option bool string string md ", "rendered": "<h4 class='item'>let html: (~?md: option(bool), string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-sprintf", "title": "sprintf", "contents": "sprintf Pervasives format unit string ", "rendered": "<h4 class='item'>let sprintf: Pervasives.format('a, unit, string) => 'a</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#type-compiledBlock", "title": "compiledBlock", "contents": "compiledBlock block codeBlock status compilationResult", "rendered": "<h4 class='item'>type compiledBlock = {\n  block: <a href=\"./api/CodeSnippets.html#type-codeBlock\">codeBlock</a>,\n  status: <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>\n}</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#type-codeBlock", "title": "codeBlock", "contents": "codeBlock el element id int fileName string options codeOptions content string", "rendered": "<h4 class='item'>type codeBlock = {\n  el: <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>,\n  id: int,\n  fileName: string,\n  options: <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  content: string\n}</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-parseCodeOptions", "title": "parseCodeOptions", "contents": "parseCodeOptions string option codeOptions  ", "rendered": "<h4 class='item'>let parseCodeOptions: (string, 'a) => option(<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-matchOption", "title": "matchOption", "contents": "matchOption string string option string  ", "rendered": "<h4 class='item'>let matchOption: (string, string) => option(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-codeBlockPrefix", "title": "codeBlockPrefix", "contents": "codeBlockPrefix string", "rendered": "<h4 class='item'>let codeBlockPrefix: string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html", "title": "CodeSnippets", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html", "title": "CodeSnippets", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#CodeSnippets", "title": "CodeSnippets", "contents": "", "rendered": "", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeHighlight.html#value-highlight", "title": "highlight", "contents": "highlight string string string string string  ", "rendered": "<h4 class='item'>let highlight: (string, string) => (string, string, string)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-codeSections", "title": "codeSections", "contents": "codeSections string string int string string int ", "rendered": "<h4 class='item'>let codeSections: string => (\n  string,\n  int,\n  string,\n  string,\n  int\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-separateHashed", "title": "separateHashed", "contents": "separateHashed int list string list string int list string list string   ", "rendered": "<h4 class='item'>let separateHashed: (int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-unHash", "title": "unHash", "contents": "unHash string string ", "rendered": "<h4 class='item'>let unHash: string => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-isHashed", "title": "isHashed", "contents": "isHashed string bool ", "rendered": "<h4 class='item'>let isHashed: string => bool</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-removeIfThere", "title": "removeIfThere", "contents": "removeIfThere string unit ", "rendered": "<h4 class='item'>let removeIfThere: string => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-collectRanges", "title": "collectRanges", "contents": "collectRanges Cmt_format binary_annots list Location t string ", "rendered": "<h4 class='item'>let collectRanges: Cmt_format.binary_annots => list(\n  (Location.t, string)\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-iterTags", "title": "iterTags", "contents": "iterTags Cmt_format binary_annots Location t string unit   unit  ", "rendered": "<h4 class='item'>let iterTags: (\n  Cmt_format.binary_annots,\n  (Location.t, string) => unit\n) => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-annotateText", "title": "annotateText", "contents": "annotateText list int int string list int string string int int string     ", "rendered": "<h4 class='item'>let annotateText: (\n  list((int, int, string)),\n  list((int, string)),\n  string,\n  int,\n  int\n) => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-addHtmlEscapedToBuffer", "title": "addHtmlEscapedToBuffer", "contents": "addHtmlEscapedToBuffer Buffer t char unit  ", "rendered": "<h4 class='item'>let addHtmlEscapedToBuffer: (Buffer.t, char) => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html", "title": "CodeHighlight", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html", "title": "CodeHighlight", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#CodeHighlight", "title": "CodeHighlight", "contents": "", "rendered": "", "breadcrumb": "CodeHighlight"},
{"href": "./api/MakeIndex.html#value-run", "title": "run", "contents": "run string string unit  ", "rendered": "<h4 class='item'>let run: (string, string) => unit</h4>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html#value-source", "title": "source", "contents": "source string", "rendered": "<h4 class='item'>let source: string</h4>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html", "title": "MakeIndex", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html", "title": "MakeIndex", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html#MakeIndex", "title": "MakeIndex", "contents": "", "rendered": "", "breadcrumb": "MakeIndex"},
{"href": "./api/ElasticRaw.html#value-raw", "title": "raw", "contents": "raw string", "rendered": "<h4 class='item'>let raw: string</h4>", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html", "title": "ElasticRaw", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html", "title": "ElasticRaw", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html#ElasticRaw", "title": "ElasticRaw", "contents": "", "rendered": "", "breadcrumb": "ElasticRaw"},
{"href": "./api/Descartes.html#value-main", "title": "main", "contents": "main unit unit ", "rendered": "<h4 class='item'>let main: unit => unit</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-gatherCmts", "title": "gatherCmts", "contents": "gatherCmts string string list string list string string   ", "rendered": "<h4 class='item'>let gatherCmts: (string, string, list(string)) => list(\n  (string, string)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-processMany", "title": "processMany", "contents": "processMany list string list Typedtree structure_item string list string string string string Location t string list fullItem list fullItem list string string list string ", "rendered": "<h4 class='item'>let processMany: list(\n  (string, list(Typedtree.structure_item), string)\n) => (\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(<a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>),\n      list(<a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>)\n    )\n  ),\n  list((string, string, list(string)))\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-unique", "title": "unique", "contents": "unique list list ", "rendered": "<h4 class='item'>let unique: list('a) => list('a)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-resolveType", "title": "resolveType", "contents": "resolveType string Hashtbl t string Hashtbl t string list string string list string string Hashtbl t string list string string list string string Path t     ", "rendered": "<h4 class='item'>let resolveType: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-resolveValue", "title": "resolveValue", "contents": "resolveValue string Hashtbl t string Hashtbl t string list string string list string string Hashtbl t string list string string list string string Path t     ", "rendered": "<h4 class='item'>let resolveValue: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-deepType", "title": "deepType", "contents": "deepType list list list Hashtbl t list list    ", "rendered": "<h4 class='item'>let deepType: (\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        list(('a, 'a)),\n        'a,\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'm1 | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-deepValue", "title": "deepValue", "contents": "deepValue list list list Hashtbl t list list    ", "rendered": "<h4 class='item'>let deepValue: (\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        'a,\n        list(('a, 'a)),\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'l1 | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-toId", "title": "toId", "contents": "toId string int string  ", "rendered": "<h4 class='item'>let toId: (string, int) => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-flatten", "title": "flatten", "contents": "flatten Path t Ident t list string ", "rendered": "<h4 class='item'>let flatten: Path.t => (Ident.t, list(string))</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-fold", "title": "fold", "contents": "fold  option   ", "rendered": "<h4 class='item'>let fold: ('a, 'a => 'a, option('a)) => 'a</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-process", "title": "process", "contents": "process string list Typedtree structure_item string Hashtbl t string string list string string list string string list string string Hashtbl t string fullItem Hashtbl t string fullItem list string string list string string list string string      ", "rendered": "<h4 class='item'>let process: (\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(string, <a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>),\n  Hashtbl.t(string, <a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>)\n) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-fullItem", "title": "fullItem", "contents": "fullItem id string name string moduleName string typ string loc Location t tags list Location t list tag vals list Path t typs list Path t text string", "rendered": "<h4 class='item'>type fullItem = {\n  id: string,\n  name: string,\n  moduleName: string,\n  typ: string,\n  loc: Location.t,\n  tags: list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n  vals: list(Path.t),\n  typs: list(Path.t),\n  text: string\n}</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-chart", "title": "chart", "contents": "chart list Typedtree structure_item list int node ", "rendered": "<h4 class='item'>let chart: list(Typedtree.structure_item) => list(\n  (int, <a href=\"./api/Descartes.html#type-node\">node</a>)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-item", "title": "item", "contents": "item string string string string", "rendered": "<h4 class='item'>type item = | Value(string, string) | Type(string, string)\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-node", "title": "node", "contents": "node Location t item list Location t list tag list Path t list Path t string list int node", "rendered": "<h4 class='item'>type node = \n  | Item(\n    Location.t,\n    <a href=\"./api/Descartes.html#type-item\">item</a>,\n    list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n    list(Path.t),\n    list(Path.t)\n  )\n  | Module(string, list((int, <a href=\"./api/Descartes.html#type-node\">node</a>)))\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-markdownTags", "title": "markdownTags", "contents": "markdownTags Location t list tag", "rendered": "<h4 class='item'>type markdownTags = (Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-highlightItem", "title": "highlightItem", "contents": "highlightItem Typedtree structure_item list Location t list tag list Path t list Path t ", "rendered": "<h4 class='item'>let highlightItem: Typedtree.structure_item => (\n  list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n  list(Path.t),\n  list(Path.t)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-iterTags", "title": "iterTags", "contents": "iterTags Location t list tag unit   ", "rendered": "<h4 class='item'>let iterTags: (\n  Location.t,\n  list(\n    <a href=\"./api/Descartes.html#type-tag\">tag</a>\n  )\n) => unit => (module TypedtreeIter.IteratorArgument)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-tag", "title": "tag", "contents": "tag Types type_expr string Ident t Ident t Path t Path t", "rendered": "<h4 class='item'>type tag = \n  | TypeHover(Types.type_expr)\n  | Cls(string)\n  | TypeDef(Ident.t)\n  | ValueDef(Ident.t)\n  | TypeRef(Path.t)\n  | ValueRef(Path.t)\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-filterNil", "title": "filterNil", "contents": "filterNil option  list list  ", "rendered": "<h4 class='item'>let filterNil: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html", "title": "Descartes", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html", "title": "Descartes", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#Descartes", "title": "Descartes", "contents": "", "rendered": "", "breadcrumb": "Descartes"},
{"href": "./api/Typing.html#value-collectTypes", "title": "collectTypes", "contents": "collectTypes Cmt_format binary_annots Hashtbl t Lexing position Lexing position Types type_expr Hashtbl t list list openn Hashtbl t int int Path t tag ", "rendered": "<h4 class='item'>let collectTypes: Cmt_format.binary_annots => (\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  Hashtbl.t((int, int), (Path.t, <a href=\"./api/Typing.html#type-tag\">tag</a>))\n)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-truncateLoc", "title": "truncateLoc", "contents": "truncateLoc int Location t Location t  ", "rendered": "<h4 class='item'>let truncateLoc: (int, Location.t) => Location.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-bindings", "title": "bindings", "contents": "bindings Hashtbl t int list Ident t Location t", "rendered": "<h4 class='item'>type bindings = Hashtbl.t(int, list((Ident.t, Location.t)))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-externalsUsed", "title": "externalsUsed", "contents": "externalsUsed list Path t Location t", "rendered": "<h4 class='item'>type externalsUsed = list((Path.t, Location.t))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-type_to_string", "title": "type_to_string", "contents": "type_to_string Types type_expr string ", "rendered": "<h4 class='item'>let type_to_string: Types.type_expr => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-entry", "title": "entry", "contents": "entry Location t int option Lexing position string string  depth mend ", "rendered": "<h4 class='item'>let entry: (\n  Location.t,\n  ~depth: int,\n  ~?mend: option(Lexing.position),\n  string\n) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-ppos", "title": "ppos", "contents": "ppos Lexing position string ", "rendered": "<h4 class='item'>let ppos: Lexing.position => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_expression", "title": "F.leave_expression", "contents": "leave_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let leave_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_expression", "title": "F.enter_expression", "contents": "enter_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let enter_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure_item", "title": "F.leave_structure_item", "contents": "leave_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let leave_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure_item", "title": "F.enter_structure_item", "contents": "enter_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let enter_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_pattern", "title": "F.enter_pattern", "contents": "enter_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let enter_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.handleRecord", "title": "F.handleRecord", "contents": "handleRecord Path t Longident t Longident t  ", "rendered": "<h4 class='item'>let handleRecord: (Path.t, Longident.t) => Longident.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.handleConstructor", "title": "F.handleConstructor", "contents": "handleConstructor Path t Longident t string Longident t  ", "rendered": "<h4 class='item'>let handleConstructor: (Path.t, Longident.t) => (\n  string,\n  Longident.t\n)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declaration", "title": "F.enter_type_declaration", "contents": "enter_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let enter_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_core_type", "title": "F.enter_core_type", "contents": "enter_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let enter_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.dig", "title": "F.dig", "contents": "dig Types type_expr Types type_expr ", "rendered": "<h4 class='item'>let dig: Types.type_expr => Types.type_expr</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.add_use", "title": "F.add_use", "contents": "add_use option bool Path t tag Longident t Location t unit inferable   ", "rendered": "<h4 class='item'>let add_use: (\n  ~?inferable: option(bool),\n  (Path.t, <a href=\"./api/Typing.html#type-tag\">tag</a>),\n  Longident.t,\n  Location.t\n) => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.pop_open", "title": "F.pop_open", "contents": "pop_open unit unit ", "rendered": "<h4 class='item'>let pop_open: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.add_open", "title": "F.add_open", "contents": "add_open Path t Location t unit  ", "rendered": "<h4 class='item'>let add_open: (Path.t, Location.t) => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.pop_stack", "title": "F.pop_stack", "contents": "pop_stack unit unit ", "rendered": "<h4 class='item'>let pop_stack: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.new_stack", "title": "F.new_stack", "contents": "new_stack unit unit ", "rendered": "<h4 class='item'>let new_stack: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.open_stack", "title": "F.open_stack", "contents": "open_stack Pervasives ref open_stack", "rendered": "<h4 class='item'>let open_stack: Pervasives.ref(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.closed_stacks", "title": "F.closed_stacks", "contents": "closed_stacks Pervasives ref list open_stack", "rendered": "<h4 class='item'>let closed_stacks: Pervasives.ref(list(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.root_stack", "title": "F.root_stack", "contents": "root_stack open_stack", "rendered": "<h4 class='item'>let root_stack: <a href=\"./api/Typing.html#type-open_stack\">open_stack</a></h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.depth", "title": "F.depth", "contents": "depth Pervasives ref int", "rendered": "<h4 class='item'>let depth: Pervasives.ref(int)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_declarations", "title": "F.leave_type_declarations", "contents": "leave_type_declarations Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let leave_type_declarations: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_declaration", "title": "F.leave_type_declaration", "contents": "leave_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let leave_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declaration", "title": "F.enter_type_declaration", "contents": "enter_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let enter_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declarations", "title": "F.enter_type_declarations", "contents": "enter_type_declarations Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let enter_type_declarations: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_bindings", "title": "F.leave_bindings", "contents": "leave_bindings Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let leave_bindings: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_binding", "title": "F.leave_binding", "contents": "leave_binding Typedtree value_binding unit ", "rendered": "<h4 class='item'>let leave_binding: Typedtree.value_binding => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_binding", "title": "F.enter_binding", "contents": "enter_binding Typedtree value_binding unit ", "rendered": "<h4 class='item'>let enter_binding: Typedtree.value_binding => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_bindings", "title": "F.enter_bindings", "contents": "enter_bindings Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let enter_bindings: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure_item", "title": "F.leave_structure_item", "contents": "leave_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let leave_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_field", "title": "F.leave_class_field", "contents": "leave_class_field Typedtree class_field unit ", "rendered": "<h4 class='item'>let leave_class_field: Typedtree.class_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_structure", "title": "F.leave_class_structure", "contents": "leave_class_structure Typedtree class_structure unit ", "rendered": "<h4 class='item'>let leave_class_structure: Typedtree.class_structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_core_type", "title": "F.leave_core_type", "contents": "leave_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let leave_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type_field", "title": "F.leave_class_type_field", "contents": "leave_class_type_field Typedtree class_type_field unit ", "rendered": "<h4 class='item'>let leave_class_type_field: Typedtree.class_type_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type", "title": "F.leave_class_type", "contents": "leave_class_type Typedtree class_type unit ", "rendered": "<h4 class='item'>let leave_class_type: Typedtree.class_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type_declaration", "title": "F.leave_class_type_declaration", "contents": "leave_class_type_declaration Typedtree class_type_declaration unit ", "rendered": "<h4 class='item'>let leave_class_type_declaration: Typedtree.class_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_description", "title": "F.leave_class_description", "contents": "leave_class_description Typedtree class_description unit ", "rendered": "<h4 class='item'>let leave_class_description: Typedtree.class_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_declaration", "title": "F.leave_class_declaration", "contents": "leave_class_declaration Typedtree class_declaration unit ", "rendered": "<h4 class='item'>let leave_class_declaration: Typedtree.class_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_signature", "title": "F.leave_class_signature", "contents": "leave_class_signature Typedtree class_signature unit ", "rendered": "<h4 class='item'>let leave_class_signature: Typedtree.class_signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_expr", "title": "F.leave_class_expr", "contents": "leave_class_expr Typedtree class_expr unit ", "rendered": "<h4 class='item'>let leave_class_expr: Typedtree.class_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_with_constraint", "title": "F.leave_with_constraint", "contents": "leave_with_constraint Typedtree with_constraint unit ", "rendered": "<h4 class='item'>let leave_with_constraint: Typedtree.with_constraint => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_expr", "title": "F.leave_module_expr", "contents": "leave_module_expr Typedtree module_expr unit ", "rendered": "<h4 class='item'>let leave_module_expr: Typedtree.module_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_type", "title": "F.leave_module_type", "contents": "leave_module_type Typedtree module_type unit ", "rendered": "<h4 class='item'>let leave_module_type: Typedtree.module_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_type_declaration", "title": "F.leave_module_type_declaration", "contents": "leave_module_type_declaration Typedtree module_type_declaration unit ", "rendered": "<h4 class='item'>let leave_module_type_declaration: Typedtree.module_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_signature_item", "title": "F.leave_signature_item", "contents": "leave_signature_item Typedtree signature_item unit ", "rendered": "<h4 class='item'>let leave_signature_item: Typedtree.signature_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_signature", "title": "F.leave_signature", "contents": "leave_signature Typedtree signature unit ", "rendered": "<h4 class='item'>let leave_signature: Typedtree.signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_package_type", "title": "F.leave_package_type", "contents": "leave_package_type Typedtree package_type unit ", "rendered": "<h4 class='item'>let leave_package_type: Typedtree.package_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_expression", "title": "F.leave_expression", "contents": "leave_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let leave_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_pattern", "title": "F.leave_pattern", "contents": "leave_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let leave_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_extension_constructor", "title": "F.leave_extension_constructor", "contents": "leave_extension_constructor Typedtree extension_constructor unit ", "rendered": "<h4 class='item'>let leave_extension_constructor: Typedtree.extension_constructor => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_extension", "title": "F.leave_type_extension", "contents": "leave_type_extension Typedtree type_extension unit ", "rendered": "<h4 class='item'>let leave_type_extension: Typedtree.type_extension => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_value_description", "title": "F.leave_value_description", "contents": "leave_value_description Typedtree value_description unit ", "rendered": "<h4 class='item'>let leave_value_description: Typedtree.value_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure", "title": "F.leave_structure", "contents": "leave_structure Typedtree structure unit ", "rendered": "<h4 class='item'>let leave_structure: Typedtree.structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure_item", "title": "F.enter_structure_item", "contents": "enter_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let enter_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_field", "title": "F.enter_class_field", "contents": "enter_class_field Typedtree class_field unit ", "rendered": "<h4 class='item'>let enter_class_field: Typedtree.class_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_structure", "title": "F.enter_class_structure", "contents": "enter_class_structure Typedtree class_structure unit ", "rendered": "<h4 class='item'>let enter_class_structure: Typedtree.class_structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_core_type", "title": "F.enter_core_type", "contents": "enter_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let enter_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type_field", "title": "F.enter_class_type_field", "contents": "enter_class_type_field Typedtree class_type_field unit ", "rendered": "<h4 class='item'>let enter_class_type_field: Typedtree.class_type_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type", "title": "F.enter_class_type", "contents": "enter_class_type Typedtree class_type unit ", "rendered": "<h4 class='item'>let enter_class_type: Typedtree.class_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type_declaration", "title": "F.enter_class_type_declaration", "contents": "enter_class_type_declaration Typedtree class_type_declaration unit ", "rendered": "<h4 class='item'>let enter_class_type_declaration: Typedtree.class_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_description", "title": "F.enter_class_description", "contents": "enter_class_description Typedtree class_description unit ", "rendered": "<h4 class='item'>let enter_class_description: Typedtree.class_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_declaration", "title": "F.enter_class_declaration", "contents": "enter_class_declaration Typedtree class_declaration unit ", "rendered": "<h4 class='item'>let enter_class_declaration: Typedtree.class_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_signature", "title": "F.enter_class_signature", "contents": "enter_class_signature Typedtree class_signature unit ", "rendered": "<h4 class='item'>let enter_class_signature: Typedtree.class_signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_expr", "title": "F.enter_class_expr", "contents": "enter_class_expr Typedtree class_expr unit ", "rendered": "<h4 class='item'>let enter_class_expr: Typedtree.class_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_with_constraint", "title": "F.enter_with_constraint", "contents": "enter_with_constraint Typedtree with_constraint unit ", "rendered": "<h4 class='item'>let enter_with_constraint: Typedtree.with_constraint => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_expr", "title": "F.enter_module_expr", "contents": "enter_module_expr Typedtree module_expr unit ", "rendered": "<h4 class='item'>let enter_module_expr: Typedtree.module_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_type", "title": "F.enter_module_type", "contents": "enter_module_type Typedtree module_type unit ", "rendered": "<h4 class='item'>let enter_module_type: Typedtree.module_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_type_declaration", "title": "F.enter_module_type_declaration", "contents": "enter_module_type_declaration Typedtree module_type_declaration unit ", "rendered": "<h4 class='item'>let enter_module_type_declaration: Typedtree.module_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_signature_item", "title": "F.enter_signature_item", "contents": "enter_signature_item Typedtree signature_item unit ", "rendered": "<h4 class='item'>let enter_signature_item: Typedtree.signature_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_signature", "title": "F.enter_signature", "contents": "enter_signature Typedtree signature unit ", "rendered": "<h4 class='item'>let enter_signature: Typedtree.signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_package_type", "title": "F.enter_package_type", "contents": "enter_package_type Typedtree package_type unit ", "rendered": "<h4 class='item'>let enter_package_type: Typedtree.package_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_expression", "title": "F.enter_expression", "contents": "enter_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let enter_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_pattern", "title": "F.enter_pattern", "contents": "enter_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let enter_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_extension_constructor", "title": "F.enter_extension_constructor", "contents": "enter_extension_constructor Typedtree extension_constructor unit ", "rendered": "<h4 class='item'>let enter_extension_constructor: Typedtree.extension_constructor => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_extension", "title": "F.enter_type_extension", "contents": "enter_type_extension Typedtree type_extension unit ", "rendered": "<h4 class='item'>let enter_type_extension: Typedtree.type_extension => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_value_description", "title": "F.enter_value_description", "contents": "enter_value_description Typedtree value_description unit ", "rendered": "<h4 class='item'>let enter_value_description: Typedtree.value_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure", "title": "F.enter_structure", "contents": "enter_structure Typedtree structure unit ", "rendered": "<h4 class='item'>let enter_structure: Typedtree.structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-relative", "title": "relative", "contents": "relative Longident t Path t Path t  ", "rendered": "<h4 class='item'>let relative: (Longident.t, Path.t) => Path.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-usesOpen", "title": "usesOpen", "contents": "usesOpen Longident t Path t bool  ", "rendered": "<h4 class='item'>let usesOpen: (Longident.t, Path.t) => bool</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-addLidentToPath", "title": "addLidentToPath", "contents": "addLidentToPath Path t Longident t Path t  ", "rendered": "<h4 class='item'>let addLidentToPath: (Path.t, Longident.t) => Path.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-pathToLident", "title": "pathToLident", "contents": "pathToLident Path t Longident t ", "rendered": "<h4 class='item'>let pathToLident: Path.t => Longident.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-open_stack", "title": "open_stack", "contents": "open_stack closed list openn opens list openn parent option open_stack", "rendered": "<h4 class='item'>type open_stack = {\n  mut closed: list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  mut opens: list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  parent: option(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>)\n}</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-openn", "title": "openn", "contents": "openn used list ident Longident t path Path t loc Location t", "rendered": "<h4 class='item'>type openn = {\n  mut used: list(<a href=\"./api/Typing.html#type-ident\">ident</a>(Longident.t)),\n  path: Path.t,\n  loc: Location.t\n}</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showLoc", "title": "showLoc", "contents": "showLoc Location t string ", "rendered": "<h4 class='item'>let showLoc: Location.t => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showLident", "title": "showLident", "contents": "showLident Longident t string ", "rendered": "<h4 class='item'>let showLident: Longident.t => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showPath", "title": "showPath", "contents": "showPath option string bool  Path t string paren ", "rendered": "<h4 class='item'>let showPath: (\n  ~?paren: option(string => bool),\n  Path.t\n) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-toString", "title": "toString", "contents": "toString string  tag string  ", "rendered": "<h4 class='item'>let toString: ('a => string, ('a, <a href=\"./api/Typing.html#type-tag\">tag</a>)) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-contents", "title": "contents", "contents": "contents ", "rendered": "<h4 class='item'>let contents: ('a, 'a) => 'a</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-mapIdent", "title": "mapIdent", "contents": "mapIdent   ", "rendered": "<h4 class='item'>let mapIdent: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-ident", "title": "ident", "contents": "ident tag", "rendered": "<h4 class='item'>type ident('a) = ('a, <a href=\"./api/Typing.html#type-tag\">tag</a>)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-tag", "title": "tag", "contents": "tag string string", "rendered": "<h4 class='item'>type tag = \n  | Type\n  | Value\n  | Module\n  | Constructor(string)\n  | Attribute(string)\n</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html", "title": "Typing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html", "title": "Typing", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#Typing", "title": "Typing", "contents": "", "rendered": "", "breadcrumb": "Typing"},
{"href": "./api/PrepareUtils.html#value-compose", "title": "compose", "contents": "compose bool  option  option   ", "rendered": "<h4 class='item'>let compose: ('a => bool, 'a => option('a), 'a) => option(\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-eitherFirst", "title": "eitherFirst", "contents": "eitherFirst option option option  ", "rendered": "<h4 class='item'>let eitherFirst: (option('a), (option('a), 'a)) => (\n  option('a),\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-mapFst", "title": "mapFst", "contents": "mapFst   ", "rendered": "<h4 class='item'>let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-either", "title": "either", "contents": "either option option option  ", "rendered": "<h4 class='item'>let either: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-foldOpt", "title": "foldOpt", "contents": "foldOpt option  list list list   ", "rendered": "<h4 class='item'>let foldOpt: ('a => option('a), list('a), list('a)) => list(\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-hasNoDoc", "title": "hasNoDoc", "contents": "hasNoDoc list Asttypes loc string bool ", "rendered": "<h4 class='item'>let hasNoDoc: list((Asttypes.loc(string), 'a)) => bool</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-findDocAttribute", "title": "findDocAttribute", "contents": "findDocAttribute string  list Asttypes loc string Parsetree payload option  ", "rendered": "<h4 class='item'>let findDocAttribute: (\n  string => 'a,\n  list(\n    (Asttypes.loc(string), Parsetree.payload)\n  )\n) => option('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-cleanOffStars", "title": "cleanOffStars", "contents": "cleanOffStars string string ", "rendered": "<h4 class='item'>let cleanOffStars: string => string</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-trimFirst", "title": "trimFirst", "contents": "trimFirst int string string  ", "rendered": "<h4 class='item'>let trimFirst: (int, string) => string</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-combine", "title": "combine", "contents": "combine option int option int option int  ", "rendered": "<h4 class='item'>let combine: (option(int), option(int)) => option(int)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-findStars", "title": "findStars", "contents": "findStars string option int ", "rendered": "<h4 class='item'>let findStars: string => option(int)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-filterNil", "title": "filterNil", "contents": "filterNil option  list list  ", "rendered": "<h4 class='item'>let filterNil: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-toFullPath", "title": "toFullPath", "contents": "toFullPath  ", "rendered": "<h4 class='item'>let toFullPath: ('a, ('a, 'a)) => ('a, 'a, 'a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-addToPath", "title": "addToPath", "contents": "addToPath list list  ", "rendered": "<h4 class='item'>let addToPath: (('a, list('a)), 'a) => ('a, list('a))</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html", "title": "PrepareUtils", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html", "title": "PrepareUtils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#PrepareUtils", "title": "PrepareUtils", "contents": "", "rendered": "", "breadcrumb": "PrepareUtils"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypedtreeImplementation", "title": "stampsFromTypedtreeImplementation", "contents": "stampsFromTypedtreeImplementation list string list Typedtree structure_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypedtreeImplementation: (\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypedtreeInterface", "title": "stampsFromTypedtreeInterface", "contents": "stampsFromTypedtreeInterface list string list Typedtree signature_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypedtreeInterface: (\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypesSignature", "title": "stampsFromTypesSignature", "contents": "stampsFromTypesSignature list string list Types signature_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypesSignature: (\n  ('a, list(string)),\n  list(Types.signature_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.stamps", "title": "T.stamps", "contents": "stamps list int fullPath", "rendered": "<h4 class='item'>type stamps = list((int, <a href=\"./api/CmtFindStamps.html#type-T.fullPath\">fullPath</a>))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.fullPath", "title": "T.fullPath", "contents": "fullPath string list string pathType", "rendered": "<h4 class='item'>type fullPath = (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\">pathType</a>)</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.pathType", "title": "T.pathType", "contents": "pathType pathType", "rendered": "<h4 class='item'>type pathType = | PModule | PModuleType | PValue | PType\n = <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a></h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#module-T", "title": "T", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#module-T", "title": "T", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html", "title": "CmtFindStamps", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html", "title": "CmtFindStamps", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#CmtFindStamps", "title": "CmtFindStamps", "contents": "", "rendered": "", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsSig", "title": "moduleContentsSig", "contents": "moduleContentsSig string Omd t  Typedtree module_type option Omd t moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsSig: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Typedtree.module_type\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromSignature", "title": "docItemsFromSignature", "contents": "docItemsFromSignature string Omd t  list Typedtree signature_item option Omd t list doc  ", "rendered": "<h4 class='item'>let docItemsFromSignature: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(Typedtree.signature_item)\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>))</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsType", "title": "moduleContentsType", "contents": "moduleContentsType string Omd t  Types module_type moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsType: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.module_type\n) => <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a></h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsStr", "title": "moduleContentsStr", "contents": "moduleContentsStr string Omd t  Typedtree module_expr option Omd t moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsStr: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Typedtree.module_expr\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromStructure", "title": "docItemsFromStructure", "contents": "docItemsFromStructure string Omd t  list Typedtree structure_item option Omd t list doc  ", "rendered": "<h4 class='item'>let docItemsFromStructure: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(Typedtree.structure_item)\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>))</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-eitherFirst", "title": "eitherFirst", "contents": "eitherFirst option option option  ", "rendered": "<h4 class='item'>let eitherFirst: (option('a), (option('a), 'a)) => (\n  option('a),\n  'a\n)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-mapFst", "title": "mapFst", "contents": "mapFst   ", "rendered": "<h4 class='item'>let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-either", "title": "either", "contents": "either option option option  ", "rendered": "<h4 class='item'>let either: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContents", "title": "moduleContents", "contents": "moduleContents string Omd t  Types module_type moduleContents  ", "rendered": "<h4 class='item'>let moduleContents: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.module_type\n) => <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a></h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromTypes", "title": "docItemsFromTypes", "contents": "docItemsFromTypes string Omd t  Types signature list doc  ", "rendered": "<h4 class='item'>let docItemsFromTypes: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.signature\n) => list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-iter", "title": "iter", "contents": "iter string option Omd t docItem  doc unit  ", "rendered": "<h4 class='item'>let iter: (\n  (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>) => 'a,\n  <a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>\n) => unit</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html", "title": "CmtFindDocItems", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html", "title": "CmtFindDocItems", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#CmtFindDocItems", "title": "CmtFindDocItems", "contents": "", "rendered": "", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/State.html#value-Input.show", "title": "Input.show", "contents": "show t string ", "rendered": "<h4 class='item'>let show: <a href=\"./api/State.html#type-Input.t\">t</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.t", "title": "Input.t", "contents": "t target target packageInput packageInput env env", "rendered": "<h4 class='item'>type t = {\n  target: <a href=\"./api/State.html#type-Input.target\">target</a>,\n  packageInput: <a href=\"./api/State.html#type-Input.packageInput\">packageInput</a>,\n  env: <a href=\"./api/State.html#type-Input.env\">env</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.target", "title": "Input.target", "contents": "target directory string template option string skipStdlibCompletions bool search bool", "rendered": "<h4 class='item'>type target = {\n  directory: string,\n  template: option(string),\n  skipStdlibCompletions: bool,\n  search: bool\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Input.showPackageInput", "title": "Input.showPackageInput", "contents": "showPackageInput packageInput string ", "rendered": "<h4 class='item'>let showPackageInput: <a href=\"./api/State.html#type-Input.packageInput\">packageInput</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.packageInput", "title": "Input.packageInput", "contents": "packageInput root string meta meta backend backend sidebarFile option string customFiles list string option string string moduleFiles list string string defaultCodeOptions option codeOptions namespaced bool canBundle bool", "rendered": "<h4 class='item'>type packageInput = {\n  root: string,\n  meta: <a href=\"./api/State.html#type-Input.meta\">meta</a>,\n  backend: <a href=\"./api/State.html#type-backend\">backend</a>,\n  sidebarFile: option(string),\n  customFiles: list((string, option(string), string)),\n  moduleFiles: list((string, string)),\n  defaultCodeOptions: option(<a href=\"./api/State.html#type-Model.codeOptions\" title=\"Model.codeOptions\">codeOptions</a>),\n  namespaced: bool,\n  canBundle: bool\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Input.showMeta", "title": "Input.showMeta", "contents": "showMeta meta string ", "rendered": "<h4 class='item'>let showMeta: <a href=\"./api/State.html#type-Input.meta\">meta</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.meta", "title": "Input.meta", "contents": "meta packageName string repo option string", "rendered": "<h4 class='item'>type meta = {packageName: string, repo: option(string)}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Input.showEnv", "title": "Input.showEnv", "contents": "showEnv env string ", "rendered": "<h4 class='item'>let showEnv: <a href=\"./api/State.html#type-Input.env\">env</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.env", "title": "Input.env", "contents": "env static string debug bool", "rendered": "<h4 class='item'>type env = {static: string, debug: bool}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "There&#39;s probably a &quot;first stage&quot; that we get from cli args", "rendered": "There&#39;s probably a &quot;first stage&quot; that we get from cli args", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "And now, how do I go from &quot;cli args&quot; to &quot;that middle stage&quot;", "rendered": "And now, how do I go from &quot;cli args&quot; to &quot;that middle stage&quot;", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "From this middle stage I&#39;m confident I can produce some nice documentation.\nNot 100% sure when compilation (code block processing) happens tho", "rendered": "From this middle stage I&#39;m confident I can produce some nice documentation.\nNot 100% sure when compilation (code block processing) happens tho", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.world", "title": "Model.world", "contents": "world packages list string package", "rendered": "<h4 class='item'>type world = {packages: list((string, <a href=\"./api/State.html#type-Model.package\">package</a>))}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeBlocks", "title": "Model.codeBlocks", "contents": "codeBlocks Hashtbl t string string string codeBlock", "rendered": "<h4 class='item'>type codeBlocks = Hashtbl.t(\n  (string, string, string),\n  <a href=\"./api/State.html#type-Model.codeBlock\">codeBlock</a>\n)</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.package", "title": "Model.package", "contents": "package name string repo option string custom list customPage sidebar option list sidebar modules list topModule canBundle bool namespaced bool backend backend defaultCodeOptions option codeOptions", "rendered": "<h4 class='item'>type package = {\n  name: string,\n  repo: option(string),\n  custom: list(<a href=\"./api/State.html#type-Model.customPage\">customPage</a>),\n  sidebar: option(list(<a href=\"./api/State.html#type-Model.sidebar\">sidebar</a>)),\n  modules: list(<a href=\"./api/State.html#type-Model.topModule\">topModule</a>),\n  canBundle: bool,\n  namespaced: bool,\n  backend: <a href=\"./api/State.html#type-backend\">backend</a>,\n  defaultCodeOptions: option(<a href=\"./api/State.html#type-Model.codeOptions\">codeOptions</a>)\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.topModule", "title": "Model.topModule", "contents": "topModule name string sourcePath string docs option docWithExamples items list doc stamps stamps", "rendered": "<h4 class='item'>type topModule = {\n  name: string,\n  sourcePath: string,\n  docs: option(<a href=\"./api/State.html#type-Model.docWithExamples\">docWithExamples</a>),\n  items: list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"Docs.doc\">doc</a>),\n  stamps: <a href=\"./api/CmtFindStamps.html#type-T.stamps\" title=\"CmtFindStamps.T.stamps\">stamps</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.sidebar", "title": "Model.sidebar", "contents": "sidebar string string list sidebar", "rendered": "<h4 class='item'>type sidebar = \n  | SidebarItem(string)\n  | SidebarHeader(string, list(<a href=\"./api/State.html#type-Model.sidebar\">sidebar</a>))\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.customPage", "title": "Model.customPage", "contents": "customPage title string sourcePath option string destPath string contents docWithExamples", "rendered": "<h4 class='item'>type customPage = {\n  title: string,\n  sourcePath: option(string),\n  destPath: string,\n  contents: <a href=\"./api/State.html#type-Model.docWithExamples\">docWithExamples</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.Docs.iterWithPath", "title": "Model.Docs.iterWithPath", "contents": "iterWithPath Hashtbl t string list doc list string list string string option Omd t docItem   doc unit modulesAtPath   ", "rendered": "<h4 class='item'>let iterWithPath: (\n  ~modulesAtPath: Hashtbl.t(string, list(<a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>)),\n  list(string),\n  (list(string), (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a>)) => 'a,\n  <a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>\n) => unit</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.Docs.iter", "title": "Model.Docs.iter", "contents": "iter string option Omd t docItem  doc unit  ", "rendered": "<h4 class='item'>let iter: (\n  (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a>) => 'a,\n  <a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>\n) => unit</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.Docs.itemName", "title": "Model.Docs.itemName", "contents": "itemName docItem string ", "rendered": "<h4 class='item'>let itemName: <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.Docs.doc", "title": "Model.Docs.doc", "contents": "doc string option Omd t docItem", "rendered": "<h4 class='item'>type doc = (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a>)</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.Docs.moduleContents", "title": "Model.Docs.moduleContents", "contents": "moduleContents list doc Path t", "rendered": "<h4 class='item'>type moduleContents = | Items(list(<a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>)) | Alias(Path.t)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.Docs.docItem", "title": "Model.Docs.docItem", "contents": "docItem Types type_expr Types type_declaration moduleContents option Path t list doc Omd t", "rendered": "<h4 class='item'>type docItem = \n  | Value(Types.type_expr)\n  | Type(Types.type_declaration)\n  | Module(<a href=\"./api/State.html#type-Model.Docs.moduleContents\">moduleContents</a>)\n  | Include(option(Path.t), list(<a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>))\n  | StandaloneDoc(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model.Docs", "title": "Model.Docs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model.Docs", "title": "Model.Docs", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.docWithExamples", "title": "Model.docWithExamples", "contents": "docWithExamples Omd t", "rendered": "<h4 class='item'>type docWithExamples = <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a></h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.id", "title": "Model.id", "contents": "id string", "rendered": "<h4 class='item'>type id = string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeBlock", "title": "Model.codeBlock", "contents": " This represents the final result of a code block, all that&#39;s needed to render it ", "rendered": " This represents the final result of a code block, all that&#39;s needed to render it ", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeBlock", "title": "Model.codeBlock", "contents": "codeBlock langLine string raw string html string page string filePath string compilationResult compilationResult", "rendered": "<h4 class='item'>type codeBlock = {\n  langLine: string,\n  raw: string,\n  html: string,\n  page: string,\n  filePath: string,\n  compilationResult: <a href=\"./api/State.html#type-Model.compilationResult\">compilationResult</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.compilationResult", "title": "Model.compilationResult", "contents": "compilationResult string string string string string", "rendered": "<h4 class='item'>type compilationResult = \n  | Skipped\n  | ParseError(string)\n  | TypeError(string, string)\n  | Success(string, string)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.defaultOptions", "title": "Model.defaultOptions", "contents": "defaultOptions codeOptions", "rendered": "<h4 class='item'>let defaultOptions: <a href=\"./api/State.html#type-Model.codeOptions\">codeOptions</a></h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeOptions", "title": "Model.codeOptions", "contents": "codeOptions context codeContext lang lang expectation expectation codeDisplay codeDisplay inferred bool sharedAs option string uses list string", "rendered": "<h4 class='item'>type codeOptions = {\n  context: <a href=\"./api/State.html#type-Model.codeContext\">codeContext</a>,\n  lang: <a href=\"./api/State.html#type-Model.lang\">lang</a>,\n  expectation: <a href=\"./api/State.html#type-Model.expectation\">expectation</a>,\n  codeDisplay: <a href=\"./api/State.html#type-Model.codeDisplay\">codeDisplay</a>,\n  inferred: bool,\n  sharedAs: option(string),\n  uses: list(string)\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.showLang", "title": "Model.showLang", "contents": "showLang lang string ", "rendered": "<h4 class='item'>let showLang: <a href=\"./api/State.html#type-Model.lang\">lang</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.lang", "title": "Model.lang", "contents": "lang string", "rendered": "<h4 class='item'>type lang = | Reason | OCaml | Txt | OtherLang(string)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeDisplay", "title": "Model.codeDisplay", "contents": "codeDisplay prefix int suffix int noEdit bool hide bool", "rendered": "<h4 class='item'>type codeDisplay = {\n  prefix: int,\n  suffix: int,\n  noEdit: bool,\n  hide: bool\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.expectation", "title": "Model.expectation", "contents": "expectation ", "rendered": "<h4 class='item'>type expectation = \n  | Succeed\n  | Raise\n  | DontRun\n  | TypeFail\n  | DontType\n  | ParseFail\n  | Skip\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.contextString", "title": "Model.contextString", "contents": "contextString codeContext string ", "rendered": "<h4 class='item'>let contextString: <a href=\"./api/State.html#type-Model.codeContext\">codeContext</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeContext", "title": "Model.codeContext", "contents": "codeContext ", "rendered": "<h4 class='item'>type codeContext = \n  | Normal\n  | Node\n  | Window\n  | Iframe\n  | Canvas\n  | Div\n  | Log\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model", "title": "Model", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model", "title": "Model", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showBackend", "title": "showBackend", "contents": "showBackend backend string ", "rendered": "<h4 class='item'>let showBackend: <a href=\"./api/State.html#type-backend\">backend</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-backend", "title": "backend", "contents": "backend bucklescriptOptions", "rendered": "<h4 class='item'>type backend = \n  | NoBackend\n  | Bucklescript(<a href=\"./api/State.html#type-bucklescriptOptions\">bucklescriptOptions</a>)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showBucklescriptOptions", "title": "showBucklescriptOptions", "contents": "showBucklescriptOptions bucklescriptOptions string ", "rendered": "<h4 class='item'>let showBucklescriptOptions: <a href=\"./api/State.html#type-bucklescriptOptions\">bucklescriptOptions</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-bucklescriptOptions", "title": "bucklescriptOptions", "contents": "bucklescriptOptions packageRoot string bsRoot string refmt string version string browserCompilerPath option string silentFailures bool tmp string compiledDependencyDirectories list string string packageJsonName string", "rendered": "<h4 class='item'>type bucklescriptOptions = {\n  packageRoot: string,\n  bsRoot: string,\n  refmt: string,\n  version: string,\n  browserCompilerPath: option(string),\n  silentFailures: bool,\n  tmp: string,\n  compiledDependencyDirectories: list((string, string)),\n  packageJsonName: string\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showOptionString", "title": "showOptionString", "contents": "showOptionString option string string ", "rendered": "<h4 class='item'>let showOptionString: option(string) => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showOption", "title": "showOption", "contents": "showOption option string  string  ", "rendered": "<h4 class='item'>let showOption: (option('a), 'a => string) => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "I want to mess with the sidebar to allow showing more or less of each section\n(custom docs list, table of contents, api docs list)", "rendered": "I want to mess with the sidebar to allow showing more or less of each section\n(custom docs list, table of contents, api docs list)", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "A markdown page is either part of the custom docs, or the api docs.\nIf part of the api docs, then listed in the sidebar there, and exists under api/\nif in the custom docs, then listed in the custom docs portion\nwhich takes up the top section of the sidebar", "rendered": "A markdown page is either part of the custom docs, or the api docs.\nIf part of the api docs, then listed in the sidebar there, and exists under api/\nif in the custom docs, then listed in the custom docs portion\nwhich takes up the top section of the sidebar", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Each @doc&#39;able item should have a canonical home, where it can be expected to live.\nIt&#39;s possible to display the docs elsewhere, but it has to be shown there as well.", "rendered": "Each @doc&#39;able item should have a canonical home, where it can be expected to live.\nIt&#39;s possible to display the docs elsewhere, but it has to be shown there as well.", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Also, to what extent do I want to build everything into a globally addressable map?", "rendered": "Also, to what extent do I want to build everything into a globally addressable map?", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "umm @includes? How can I do that...", "rendered": "umm @includes? How can I do that...", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Custom markdown things I want to represent:", "rendered": "Custom markdown things I want to represent:", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "an item can have documentation, which is in turn a markdown page(?) or markdown thing", "rendered": "an item can have documentation, which is in turn a markdown page(?) or markdown thing", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "A markdown page can embed items\nan item is a module, type, value, or include\n(module types too probably)", "rendered": "A markdown page can embed items\nan item is a module, type, value, or include\n(module types too probably)", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Markdown page", "rendered": "Markdown page", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "The basic idea is a page\nAlso, larger than that we have packages\nbut let&#39;s talk about pages for now", "rendered": "The basic idea is a page\nAlso, larger than that we have packages\nbut let&#39;s talk about pages for now", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "indent string string ", "rendered": "<h4 class='item'>let indent: string => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html", "title": "State", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html", "title": "State", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "State"},
{"href": "./api/State.html#State", "title": "State", "contents": "", "rendered": "", "breadcrumb": "State"},
{"href": "./api/Search.html#value-serializeSearchables", "title": "serializeSearchables", "contents": "serializeSearchables list string string string string string string ", "rendered": "<h4 class='item'>let serializeSearchables: list(\n  (string, string, string, string, string)\n) => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html#value-serializeSearchable", "title": "serializeSearchable", "contents": "serializeSearchable string string string string string string ", "rendered": "<h4 class='item'>let serializeSearchable: (\n  string,\n  string,\n  string,\n  string,\n  string\n) => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html#value-replace", "title": "replace", "contents": "replace string string string string   ", "rendered": "<h4 class='item'>let replace: (string, string, string) => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html#value-escape", "title": "escape", "contents": "escape string string ", "rendered": "<h4 class='item'>let escape: string => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html", "title": "Search", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Search"},
{"href": "./api/Search.html", "title": "Search", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Search"},
{"href": "./api/Search.html#Search", "title": "Search", "contents": "", "rendered": "", "breadcrumb": "Search"},
{"href": "./api/ProcessCode.html#value-codeFromPackage", "title": "codeFromPackage", "contents": "codeFromPackage package list string string string string codeOptions option codeOptions string ", "rendered": "<h4 class='item'>let codeFromPackage: <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a> => list(\n  (\n    string,\n    string,\n    string,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option((<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>, string))\n  )\n)</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-otherSyntax", "title": "otherSyntax", "contents": "otherSyntax lang lang ", "rendered": "<h4 class='item'>let otherSyntax: <a href=\"./api/State.html#type-Model.lang\" title=\"State.Model.lang\">lang</a> => <a href=\"./api/State.html#type-Model.lang\" title=\"State.Model.lang\">lang</a></h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-openPrefix", "title": "openPrefix", "contents": "openPrefix lang string string  ", "rendered": "<h4 class='item'>let openPrefix: (<a href=\"./api/State.html#type-Model.lang\" title=\"State.Model.lang\">lang</a>, string) => string</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-resolveShared", "title": "resolveShared", "contents": "resolveShared list string codeOptions option Hashtbl t string string ", "rendered": "<h4 class='item'>let resolveShared: list(\n  (\n    'a,\n    'a,\n    'a,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option('a)\n  )\n) => Hashtbl.t(string, string)</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-collectBlocks", "title": "collectBlocks", "contents": "collectBlocks list topModule list customPage option codeOptions list string option string string string codeOptions option string string codeOptions   ", "rendered": "<h4 class='item'>let collectBlocks: (\n  list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>),\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  option(<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>)\n) => list(\n  (\n    string,\n    option(string),\n    string,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option((string, string, <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>))\n  )\n)</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-iterBlocks", "title": "iterBlocks", "contents": "iterBlocks list topModule list customPage string option string string string     unit   ", "rendered": "<h4 class='item'>let iterBlocks: (\n  list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>),\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  (string, option(string), string, string) => 'a\n) => unit</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-iterDocBlocks", "title": "iterDocBlocks", "contents": "iterDocBlocks string string   Omd t unit  ", "rendered": "<h4 class='item'>let iterDocBlocks: ((string, string) => 'a, <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html", "title": "ProcessCode", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html", "title": "ProcessCode", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#ProcessCode", "title": "ProcessCode", "contents": "", "rendered": "", "breadcrumb": "ProcessCode"},
{"href": "./api/ParseConfig.html#value-getUrl", "title": "getUrl", "contents": "getUrl string option string ", "rendered": "<h4 class='item'>let getUrl: string => option(string)</h4>", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html#value-fromGitUrl", "title": "fromGitUrl", "contents": "fromGitUrl string option string ", "rendered": "<h4 class='item'>let fromGitUrl: string => option(string)</h4>", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html", "title": "ParseConfig", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html", "title": "ParseConfig", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html#ParseConfig", "title": "ParseConfig", "contents": "", "rendered": "", "breadcrumb": "ParseConfig"},
{"href": "./api/ModelToOutput.html#value-package", "title": "package", "contents": "package package option list codeBlock option string option string Buffer t target env unit    ", "rendered": "<h4 class='item'>let package: (\n  <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>,\n  option(\n    (\n      list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>),\n      option((string, option((string, Buffer.t))))\n    )\n  ),\n  <a href=\"./api/State.html#type-Input.target\" title=\"State.Input.target\">target</a>,\n  <a href=\"./api/State.html#type-Input.env\" title=\"State.Input.env\">env</a>\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-searchHref", "title": "searchHref", "contents": "searchHref list string string list string pathType option string  ", "rendered": "<h4 class='item'>let searchHref: (\n  list(string),\n  (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>)\n) => option(string)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-makeCodeBlocksMap", "title": "makeCodeBlocksMap", "contents": "makeCodeBlocksMap list codeBlock Hashtbl t string string codeBlock ", "rendered": "<h4 class='item'>let makeCodeBlocksMap: list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>) => Hashtbl.t(\n  (string, string),\n  <a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>\n)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-outputModule", "title": "outputModule", "contents": "outputModule bool string list customPage string list string pathType option string  option string stringifier string string GenerateDoc t    list string topModule unit playgroundEnabled        ", "rendered": "<h4 class='item'>let outputModule: (\n  ~playgroundEnabled: bool,\n  string,\n  'a,\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  (string, list(string), <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a>) => option(string),\n  option(string),\n  (<a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>, string, string) => <a href=\"./api/GenerateDoc.html\">GenerateDoc</a>.<a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  <a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-outputCustom", "title": "outputCustom", "contents": "outputCustom bool string list customPage string list string pathType option string  option string stringifier string string option element option string  list string string option docItem Omd t string    override     list string customPage unit playgroundEnabled       ", "rendered": "<h4 class='item'>let outputCustom: (\n  ~playgroundEnabled: bool,\n  string,\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  (string, list(string), <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a>) => option(string),\n  option(string),\n  (\n    <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n    string,\n    string,\n    ~?override: option(<a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)),\n    list(string),\n    string,\n    option(<a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>),\n    <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n  ) => string,\n  list(string),\n  <a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-makeSearchPage", "title": "makeSearchPage", "contents": "makeSearchPage bool list customPage list string string Pervasives ref list string string string string string unit playgroundEnabled markdowns names  ", "rendered": "<h4 class='item'>let makeSearchPage: (\n  ~playgroundEnabled: bool,\n  ~markdowns: list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  ~names: list(string),\n  string,\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  )\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-writeEditorSupport", "title": "writeEditorSupport", "contents": "writeEditorSupport bool string string list topModule string Buffer t unit skipStdlibCompletions    ", "rendered": "<h4 class='item'>let writeEditorSupport: (\n  ~skipStdlibCompletions: bool,\n  string,\n  string,\n  list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>),\n  (string, Buffer.t)\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-getCompletionData", "title": "getCompletionData", "contents": "getCompletionData list topModule list list string string option Json t Json t option string string ", "rendered": "<h4 class='item'>let getCompletionData: list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>) => list(\n  (\n    list(string),\n    string,\n    (option(Json.t), Json.t),\n    option(string),\n    string\n  )\n)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-showItemType", "title": "showItemType", "contents": "showItemType string docItem Hashtbl t string list string docItem option Json t Json t   ", "rendered": "<h4 class='item'>let showItemType: (\n  string,\n  <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>,\n  Hashtbl.t(string, list((string, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)))\n) => (option(Json.t), Json.t)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-getFunctionArgs", "title": "getFunctionArgs", "contents": "getFunctionArgs Types type_expr option list Asttypes label string ", "rendered": "<h4 class='item'>let getFunctionArgs: Types.type_expr => option(\n  list((Asttypes.label, string))\n)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-firstFewItems", "title": "firstFewItems", "contents": "firstFewItems list string docItem string ", "rendered": "<h4 class='item'>let firstFewItems: list((string, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)) => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-prefix", "title": "prefix", "contents": "prefix docItem string ", "rendered": "<h4 class='item'>let prefix: <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a> => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-itemColor", "title": "itemColor", "contents": "itemColor docItem string ", "rendered": "<h4 class='item'>let itemColor: <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a> => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-takeN", "title": "takeN", "contents": "takeN list int list  ", "rendered": "<h4 class='item'>let takeN: (list('a), int) => list('a)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html", "title": "ModelToOutput", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html", "title": "ModelToOutput", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#ModelToOutput", "title": "ModelToOutput", "contents": "", "rendered": "", "breadcrumb": "ModelToOutput"},
{"href": "./api/MarkdownOfOCamldoc.html#value-convert", "title": "convert", "contents": "convert string list element  ", "rendered": "<h4 class='item'>let convert: ('a, string) => list(<a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>)</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-convertItem", "title": "convertItem", "contents": "convertItem with_location element  ", "rendered": "<h4 class='item'>let convertItem: (\n  'a,\n  <a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>(\n    [&lt; `Code_block of string\n | `Doc of string\n | `Example of Omd.name * string\n | `Heading of\n     [&lt; `Section | `Subsection | `Subsubsection | `Title ] * 'j1 *\n     Comment.non_link_inline_element Comment.with_location list\n | `List of\n     [ `Ordered | `Unordered ] *\n     Comment.nestable_block_element Comment.with_location list list\n | `Modules of Comment.Reference.module_ list\n | `Paragraph of Comment.inline_element Comment.with_location list\n | `Tag of\n     [&gt; `Author of string\n      | `Deprecated of\n          Comment.nestable_block_element Location_.with_location list\n      | `Param of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Raise of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Return of\n          Comment.nestable_block_element Location_.with_location list\n      | `See of\n          'k1 * Omd.href *\n          Comment.nestable_block_element Location_.with_location list\n      | `Since of string ]\n | `Verbatim of string ]\n  )\n) => <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a></h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-handleRef", "title": "handleRef", "contents": "handleRef Reference t string ", "rendered": "<h4 class='item'>let handleRef: <a href=\"./api/Paths.html#module-Reference\" title=\"Paths.Reference\">Reference</a>.<a href=\"./api/Paths.html#type-Reference.t\">t</a>(\n  [&lt; Paths.Reference.kind\n &gt; `Class `ClassType `Constructor `Exception `Extension `Field `Method\n   `Module `ModuleType `Type `Value ]\n) => string</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-makeHeader", "title": "makeHeader", "contents": "makeHeader Omd t element   ", "rendered": "<h4 class='item'>let makeHeader: (\n  [&lt; `Section | `Subsection | `Subsubsection | `Title ],\n  'a,\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n) => <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a></h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-stripLeft", "title": "stripLeft", "contents": "stripLeft string string ", "rendered": "<h4 class='item'>let stripLeft: string => string</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-whiteLeft", "title": "whiteLeft", "contents": "whiteLeft string int ", "rendered": "<h4 class='item'>let whiteLeft: string => int</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-stripLoc", "title": "stripLoc", "contents": "stripLoc  with_location  ", "rendered": "<h4 class='item'>let stripLoc: ('a => 'a, <a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>('a)) => 'a</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-withStyle", "title": "withStyle", "contents": "withStyle Omd t element  ", "rendered": "<h4 class='item'>let withStyle: (\n  [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ],\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n) => <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a></h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html", "title": "MarkdownOfOCamldoc", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html", "title": "MarkdownOfOCamldoc", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#MarkdownOfOCamldoc", "title": "MarkdownOfOCamldoc", "contents": "", "rendered": "", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/Markdown.html#value-makeDocStringProcessor", "title": "makeDocStringProcessor", "contents": "makeDocStringProcessor string element option string  Pervasives ref list string string string string string stringifier string string option element option string  list string string option docItem Representation t string    override      ", "rendered": "<h4 class='item'>let makeDocStringProcessor: (\n  string,\n  <a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string)\n) => (\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  ),\n  (\n    <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n    string,\n    string,\n    ~?override: option(<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string)),\n    list(string),\n    string,\n    option(<a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>),\n    <a href=\"./api/Omd.html#module-Representation\" title=\"Omd.Representation\">Representation</a>.<a href=\"./api/Omd.html#type-Representation.t\">t</a>\n  ) => string\n)</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-makeTokenCollector", "title": "makeTokenCollector", "contents": "makeTokenCollector stringifier Pervasives ref list Asttypes label stringifier ", "rendered": "<h4 class='item'>let makeTokenCollector: <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a> => (\n  Pervasives.ref(list(Asttypes.label)),\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>\n)</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-linkifyMarkdown", "title": "linkifyMarkdown", "contents": "linkifyMarkdown string string element option string  element option string      ", "rendered": "<h4 class='item'>let linkifyMarkdown: (\n  string,\n  string,\n  'a,\n  'a,\n  <a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string),\n  <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>\n) => option(string)</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html", "title": "Markdown", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html", "title": "Markdown", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#Markdown", "title": "Markdown", "contents": "", "rendered": "", "breadcrumb": "Markdown"},
{"href": "./api/Main.html#value-main", "title": "main", "contents": "main unit unit ", "rendered": "<h4 class='item'>let main: unit => unit</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-compilePackage", "title": "compilePackage", "contents": "compilePackage bool package option list codeBlock option string option string Buffer t debug ", "rendered": "<h4 class='item'>let compilePackage: (~debug: bool, <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>) => option(\n  (\n    list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>),\n    option((string, option((string, Buffer.t))))\n  )\n)</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-compileBucklescript", "title": "compileBucklescript", "contents": "compileBucklescript bool bucklescriptOptions package list codeBlock option string option string Buffer t debug  ", "rendered": "<h4 class='item'>let compileBucklescript: (\n  ~debug: bool,\n  <a href=\"./api/State.html#type-bucklescriptOptions\" title=\"State.bucklescriptOptions\">bucklescriptOptions</a>,\n  <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>\n) => (\n  list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>),\n  option((string, option((string, Buffer.t))))\n)</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-invert", "title": "invert", "contents": "invert bool  bool  ", "rendered": "<h4 class='item'>let invert: ('a => bool, 'a) => bool</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html", "title": "Main", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Main"},
{"href": "./api/Main.html", "title": "Main", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Main"},
{"href": "./api/Main.html#Main", "title": "Main", "contents": "", "rendered": "", "breadcrumb": "Main"},
{"href": "./api/InputToModel.html#value-package", "title": "package", "contents": "package bool bool packageInput package namespaced canBundle ", "rendered": "<h4 class='item'>let package: (\n  ~namespaced: bool,\n  ~canBundle: bool,\n  <a href=\"./api/State.html#type-Input.packageInput\" title=\"State.Input.packageInput\">packageInput</a>\n) => <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a></h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-processModules", "title": "processModules", "contents": "processModules bool list string string list topModule namespaced ", "rendered": "<h4 class='item'>let processModules: (\n  ~namespaced: bool,\n  list((string, string))\n) => list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>)</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-processCmt", "title": "processCmt", "contents": "processCmt string bool list int list string pathType option Omd t list doc   ", "rendered": "<h4 class='item'>let processCmt: ('a, string, bool) => (\n  list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>))),\n  option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>),\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)\n)</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-parseCustom", "title": "parseCustom", "contents": "parseCustom string string option string string customPage  ", "rendered": "<h4 class='item'>let parseCustom: (\n  string,\n  (string, option(string), string)\n) => <a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a></h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-getTitle", "title": "getTitle", "contents": "getTitle string string string  ", "rendered": "<h4 class='item'>let getTitle: (string, string) => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-htmlName", "title": "htmlName", "contents": "htmlName string string ", "rendered": "<h4 class='item'>let htmlName: string => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-asHtml", "title": "asHtml", "contents": "asHtml string string ", "rendered": "<h4 class='item'>let asHtml: string => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-isReadme", "title": "isReadme", "contents": "isReadme string bool ", "rendered": "<h4 class='item'>let isReadme: string => bool</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-getName", "title": "getName", "contents": "getName string string ", "rendered": "<h4 class='item'>let getName: string => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-parseSidebar", "title": "parseSidebar", "contents": "parseSidebar string list sidebar ", "rendered": "<h4 class='item'>let parseSidebar: string => list(<a href=\"./api/State.html#type-Model.sidebar\" title=\"State.Model.sidebar\">sidebar</a>)</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html", "title": "InputToModel", "contents": "@rest", "rendered": "@rest", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html", "title": "InputToModel", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#InputToModel", "title": "InputToModel", "contents": "", "rendered": "", "breadcrumb": "InputToModel"},
{"href": "./api/CompileCode.html#value-block", "title": "block", "contents": "block bool bool string option string  bucklescriptOptions package int string string string string codeOptions option codeOptions string codeBlock debug editingEnabled bundle    ", "rendered": "<h4 class='item'>let block: (\n  ~debug: bool,\n  ~editingEnabled: bool,\n  ~bundle: string => option(string),\n  <a href=\"./api/State.html#type-bucklescriptOptions\" title=\"State.bucklescriptOptions\">bucklescriptOptions</a>,\n  <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>,\n  int,\n  (\n    string,\n    string,\n    string,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option((<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>, string))\n  )\n) => <a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a></h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-withSections", "title": "withSections", "contents": "withSections   ", "rendered": "<h4 class='item'>let withSections: ('a => 'a, 'a) => 'a</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-toMl", "title": "toMl", "contents": "toMl string string string string string string     ", "rendered": "<h4 class='item'>let toMl: (string, string, string, string, string) => string</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-toReason", "title": "toReason", "contents": "toReason string string string  ", "rendered": "<h4 class='item'>let toReason: (string, string) => string</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-sanitize", "title": "sanitize", "contents": "sanitize string string ", "rendered": "<h4 class='item'>let sanitize: string => string</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html", "title": "CompileCode", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html", "title": "CompileCode", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#CompileCode", "title": "CompileCode", "contents": "", "rendered": "", "breadcrumb": "CompileCode"},
{"href": "./api/CliToInput.html#value-parse", "title": "parse", "contents": "parse array string Input t ", "rendered": "<h4 class='item'>let parse: array(string) => <a href=\"./api/State.html#module-Input\" title=\"State.Input\">Input</a>.<a href=\"./api/State.html#type-Input.t\">t</a></h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-optsToInput", "title": "optsToInput", "contents": "optsToInput string Minimist opts Input t  ", "rendered": "<h4 class='item'>let optsToInput: (string, Minimist.opts) => <a href=\"./api/State.html#module-Input\" title=\"State.Input\">Input</a>.<a href=\"./api/State.html#type-Input.t\">t</a></h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getBsbVersion", "title": "getBsbVersion", "contents": "getBsbVersion string string ", "rendered": "<h4 class='item'>let getBsbVersion: string => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getPackageJsonName", "title": "getPackageJsonName", "contents": "getPackageJsonName Json t option string ", "rendered": "<h4 class='item'>let getPackageJsonName: Json.t => option(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getRefmt", "title": "getRefmt", "contents": "getRefmt string option string ", "rendered": "<h4 class='item'>let getRefmt: string => option(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-fail", "title": "fail", "contents": "fail string ", "rendered": "<h4 class='item'>let fail: string => 'a</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-help", "title": "help", "contents": "help string", "rendered": "<h4 class='item'>let help: string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-findDependencyDirectories", "title": "findDependencyDirectories", "contents": "findDependencyDirectories string list string string ", "rendered": "<h4 class='item'>let findDependencyDirectories: string => list(\n  (string, string)\n)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-findProjectFiles", "title": "findProjectFiles", "contents": "findProjectFiles bool option string string list string string debug namespace ", "rendered": "<h4 class='item'>let findProjectFiles: (\n  ~debug: bool,\n  ~namespace: option(string),\n  string\n) => list((string, string))</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-ifDebug", "title": "ifDebug", "contents": "ifDebug bool string string     ", "rendered": "<h4 class='item'>let ifDebug: (bool, string, 'a => string, 'a) => 'a</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-filterDuplicates", "title": "filterDuplicates", "contents": "filterDuplicates list string list string ", "rendered": "<h4 class='item'>let filterDuplicates: list(string) => list(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getName", "title": "getName", "contents": "getName string string ", "rendered": "<h4 class='item'>let getName: string => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-compiledName", "title": "compiledName", "contents": "compiledName option string string string namespace ", "rendered": "<h4 class='item'>let compiledName: (\n  ~namespace: option(string),\n  string\n) => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-compiledNameSpace", "title": "compiledNameSpace", "contents": "compiledNameSpace string string ", "rendered": "<h4 class='item'>let compiledNameSpace: string => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-isSourceFile", "title": "isSourceFile", "contents": "isSourceFile string bool ", "rendered": "<h4 class='item'>let isSourceFile: string => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-isCompiledFile", "title": "isCompiledFile", "contents": "isCompiledFile string bool ", "rendered": "<h4 class='item'>let isCompiledFile: string => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getDependencyDirs", "title": "getDependencyDirs", "contents": "getDependencyDirs string Json t list string string  ", "rendered": "<h4 class='item'>let getDependencyDirs: (string, Json.t) => list(\n  (string, string)\n)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-isNative", "title": "isNative", "contents": "isNative Json t bool ", "rendered": "<h4 class='item'>let isNative: Json.t => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getSourceDirectories", "title": "getSourceDirectories", "contents": "getSourceDirectories string Json t list string  ", "rendered": "<h4 class='item'>let getSourceDirectories: (string, Json.t) => list(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-findMarkdownFiles", "title": "findMarkdownFiles", "contents": "findMarkdownFiles string string list string option string string   ", "rendered": "<h4 class='item'>let findMarkdownFiles: ('a, string, string) => list(\n  (string, option(string), string)\n)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-ifOneExists", "title": "ifOneExists", "contents": "ifOneExists list string option string ", "rendered": "<h4 class='item'>let ifOneExists: list(string) => option(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-oneShouldExist", "title": "oneShouldExist", "contents": "oneShouldExist string list string string  ", "rendered": "<h4 class='item'>let oneShouldExist: (string, list(string)) => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-shouldExist", "title": "shouldExist", "contents": "shouldExist string string string  ", "rendered": "<h4 class='item'>let shouldExist: (string, string) => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-optMap", "title": "optMap", "contents": "optMap option  list list  ", "rendered": "<h4 class='item'>let optMap: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html", "title": "CliToInput", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html", "title": "CliToInput", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#CliToInput", "title": "CliToInput", "contents": "", "rendered": "", "breadcrumb": "CliToInput"},
{"href": "./api/SerializeBinary.html#value-pp_string", "title": "pp_string", "contents": "pp_string string  option char option bool string  quote utf ", "rendered": "<h4 class='item'>let pp_string: (\n  string => 'a,\n  ~?quote: option(char),\n  ~?utf: option(bool),\n  string\n) => 'a</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#value-array_conv", "title": "array_conv", "contents": "array_conv array string", "rendered": "<h4 class='item'>let array_conv: array(string)</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#value-array_str1", "title": "array_str1", "contents": "array_str1 array string", "rendered": "<h4 class='item'>let array_str1: array(string)</h4>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html", "title": "SerializeBinary", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html", "title": "SerializeBinary", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SerializeBinary"},
{"href": "./api/SerializeBinary.html#SerializeBinary", "title": "SerializeBinary", "contents": "", "rendered": "", "breadcrumb": "SerializeBinary"},
{"href": "./api/Infix.html#value-/+", "title": "/+", "contents": "/+ string string string  ", "rendered": "<h4 class='item'>let /+: (string, string) => string</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-fileConcat", "title": "fileConcat", "contents": "fileConcat string string string  ", "rendered": "<h4 class='item'>let fileConcat: (string, string) => string</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?<", "title": "|?<", "contents": "|?< option unit  unit  ", "rendered": "<h4 class='item'>let |?<: (option('a), 'a => unit) => unit</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|.!", "title": "|.!", "contents": "|.! option  string   ", "rendered": "<h4 class='item'>let |.!: ('a => option('a), string, 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-fold", "title": "fold", "contents": "fold option    ", "rendered": "<h4 class='item'>let fold: (option('a), 'a, 'a => 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?>>", "title": "|?>>", "contents": "|?>> option  option  ", "rendered": "<h4 class='item'>let |?>>: (option('a), 'a => 'a) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?>", "title": "|?>", "contents": "|?> option option  option  ", "rendered": "<h4 class='item'>let |?>: (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??#", "title": "|??#", "contents": " Lazy optional default wrapped operator ", "rendered": " Lazy optional default wrapped operator ", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??#", "title": "|??#", "contents": "|??# option Lazy t option option  ", "rendered": "<h4 class='item'>let |??#: (option('a), Lazy.t(option('a))) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?#", "title": "|?#", "contents": " Lazy optional default operator ", "rendered": " Lazy optional default operator ", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?#", "title": "|?#", "contents": "|?# option Lazy t option option  ", "rendered": "<h4 class='item'>let |?#: (option('a), Lazy.t(option('a))) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|??", "title": "|??", "contents": "|?? option option option  ", "rendered": "<h4 class='item'>let |??: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|?", "title": "|?", "contents": "|? option  ", "rendered": "<h4 class='item'>let |?: (option('a), 'a) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#value-|!", "title": "|!", "contents": "|! option string  ", "rendered": "<h4 class='item'>let |!: (option('a), string) => 'a</h4>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Infix"},
{"href": "./api/Infix.html", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Infix"},
{"href": "./api/Infix.html#Infix", "title": "Infix", "contents": "", "rendered": "", "breadcrumb": "Infix"},
{"href": "./api/Files.html#value-collect", "title": "collect", "contents": "collect option string bool  string string bool  list string checkDir  ", "rendered": "<h4 class='item'>let collect: (\n  ~?checkDir: option(string => bool),\n  string,\n  string => bool\n) => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-collectDirs", "title": "collectDirs", "contents": "collectDirs string list string ", "rendered": "<h4 class='item'>let collectDirs: string => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-walk", "title": "walk", "contents": "walk string string unit  unit  ", "rendered": "<h4 class='item'>let walk: (string, string => unit) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-removeDeep", "title": "removeDeep", "contents": "removeDeep string unit ", "rendered": "<h4 class='item'>let removeDeep: string => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copyDeep", "title": "copyDeep", "contents": "copyDeep string string unit source dest", "rendered": "<h4 class='item'>let copyDeep: (~source: string, ~dest: string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-mkdirp", "title": "mkdirp", "contents": "mkdirp string unit ", "rendered": "<h4 class='item'>let mkdirp: string => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readDirectory", "title": "readDirectory", "contents": "readDirectory string list string ", "rendered": "<h4 class='item'>let readDirectory: string => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-isDirectory", "title": "isDirectory", "contents": "isDirectory string bool ", "rendered": "<h4 class='item'>let isDirectory: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-isFile", "title": "isFile", "contents": "isFile string bool ", "rendered": "<h4 class='item'>let isFile: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-ifExists", "title": "ifExists", "contents": "ifExists string option string ", "rendered": "<h4 class='item'>let ifExists: string => option(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-exists", "title": "exists", "contents": "exists string bool ", "rendered": "<h4 class='item'>let exists: string => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copyExn", "title": "copyExn", "contents": "copyExn string string unit source dest", "rendered": "<h4 class='item'>let copyExn: (~source: string, ~dest: string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-copy", "title": "copy", "contents": "copy string string bool source dest", "rendered": "<h4 class='item'>let copy: (~source: string, ~dest: string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-writeFileExn", "title": "writeFileExn", "contents": "writeFileExn string string unit  ", "rendered": "<h4 class='item'>let writeFileExn: (string, string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-writeFile", "title": "writeFile", "contents": "writeFile string string bool  ", "rendered": "<h4 class='item'>let writeFile: (string, string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readFileExn", "title": "readFileExn", "contents": "readFileExn string string ", "rendered": "<h4 class='item'>let readFileExn: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-readFile", "title": "readFile", "contents": "readFile string option string ", "rendered": "<h4 class='item'>let readFile: string => option(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-maybeStat", "title": "maybeStat", "contents": "maybeStat string option Unix stats ", "rendered": "<h4 class='item'>let maybeStat: string => option(Unix.stats)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-symlink", "title": "symlink", "contents": "symlink string string unit  ", "rendered": "<h4 class='item'>let symlink: (string, string) => unit</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-relpath", "title": "relpath", "contents": "relpath string string string  ", "rendered": "<h4 class='item'>let relpath: (string, string) => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-removeExtraDots", "title": "removeExtraDots", "contents": "removeExtraDots string string ", "rendered": "<h4 class='item'>let removeExtraDots: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-absify", "title": "absify", "contents": "absify string string ", "rendered": "<h4 class='item'>let absify: string => string</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html#value-split", "title": "split", "contents": "split string string list string  ", "rendered": "<h4 class='item'>let split: (string, string) => list(string)</h4>", "breadcrumb": "Files"},
{"href": "./api/Files.html", "title": "Files", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Files"},
{"href": "./api/Files.html", "title": "Files", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Files"},
{"href": "./api/Files.html#Files", "title": "Files", "contents": "", "rendered": "", "breadcrumb": "Files"},
{"href": "./api/Commands.html#value-execWithInput", "title": "execWithInput", "contents": "execWithInput string string list string bool  ", "rendered": "<h4 class='item'>let execWithInput: (string, string) => (list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#value-execSync", "title": "execSync", "contents": "execSync string list string bool ", "rendered": "<h4 class='item'>let execSync: string => (list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#value-execFull", "title": "execFull", "contents": "execFull option string option array string string list string list string bool input env ", "rendered": "<h4 class='item'>let execFull: (\n  ~?input: option(string),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)</h4>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html", "title": "Commands", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Commands"},
{"href": "./api/Commands.html", "title": "Commands", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Commands"},
{"href": "./api/Commands.html#Commands", "title": "Commands", "contents": "", "rendered": "", "breadcrumb": "Commands"},
{"href": "./api/SearchScript.html#value-js", "title": "js", "contents": "js string", "rendered": "<h4 class='item'>let js: string</h4>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html#value-framework", "title": "framework", "contents": "framework string", "rendered": "<h4 class='item'>let framework: string</h4>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html", "title": "SearchScript", "contents": "@rest", "rendered": "@rest", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html", "title": "SearchScript", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "SearchScript"},
{"href": "./api/SearchScript.html#SearchScript", "title": "SearchScript", "contents": "", "rendered": "", "breadcrumb": "SearchScript"},
{"href": "./api/Template.html#value-make", "title": "make", "contents": "make string string string  ", "rendered": "<h4 class='item'>let make: (string, string) => string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html#value-final", "title": "final", "contents": "final string", "rendered": "<h4 class='item'>let final: string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html#value-header", "title": "header", "contents": "header string", "rendered": "<h4 class='item'>let header: string</h4>", "breadcrumb": "Template"},
{"href": "./api/Template.html", "title": "Template", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Template"},
{"href": "./api/Template.html", "title": "Template", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Template"},
{"href": "./api/Template.html#Template", "title": "Template", "contents": "", "rendered": "", "breadcrumb": "Template"},
{"href": "./api/Sidebar.html#value-generate", "title": "generate", "contents": "generate list int string string string list string string list string string string option string string      playgroundPath", "rendered": "<h4 class='item'>let generate: (\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string,\n  ~playgroundPath: option(string)\n) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-makeMarkdowns", "title": "makeMarkdowns", "contents": "makeMarkdowns list string string string ", "rendered": "<h4 class='item'>let makeMarkdowns: list((string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-showPackage", "title": "showPackage", "contents": "showPackage list string string string ", "rendered": "<h4 class='item'>let showPackage: list((string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#value-makeToc", "title": "makeToc", "contents": "makeToc list int string string string string ", "rendered": "<h4 class='item'>let makeToc: list((int, string, string, string)) => string</h4>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html", "title": "Sidebar", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html", "title": "Sidebar", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Sidebar"},
{"href": "./api/Sidebar.html#Sidebar", "title": "Sidebar", "contents": "", "rendered": "", "breadcrumb": "Sidebar"},
{"href": "./api/PrintType.html#value-default", "title": "default", "contents": "default stringifier", "rendered": "<h4 class='item'>let default: <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_decl", "title": "print_decl", "contents": "print_decl stringifier string string Types type_declaration doc    ", "rendered": "<h4 class='item'>let print_decl: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  string,\n  string,\n  Types.type_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_value", "title": "print_value", "contents": "print_value stringifier string string Types type_expr doc    ", "rendered": "<h4 class='item'>let print_value: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  string,\n  string,\n  Types.type_expr\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_attr", "title": "print_attr", "contents": "print_attr stringifier Types label_declaration doc  ", "rendered": "<h4 class='item'>let print_attr: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>,\n  Types.label_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_constructor", "title": "print_constructor", "contents": "print_constructor Types type_expr doc  Types constructor_declaration doc  ", "rendered": "<h4 class='item'>let print_constructor: (\n  Types.type_expr => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  Types.constructor_declaration\n) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-print_expr", "title": "print_expr", "contents": "print_expr stringifier Types type_expr doc  ", "rendered": "<h4 class='item'>let print_expr: (<a href=\"./api/PrintType.html#type-T.stringifier\" title=\"T.stringifier\">stringifier</a>, Types.type_expr) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-htmlEscape", "title": "htmlEscape", "contents": "htmlEscape string string ", "rendered": "<h4 class='item'>let htmlEscape: string => string</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-replace", "title": "replace", "contents": "replace string string string string   ", "rendered": "<h4 class='item'>let replace: (string, string, string) => string</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-tuple_list", "title": "tuple_list", "contents": "tuple_list list doc  doc  ", "rendered": "<h4 class='item'>let tuple_list: (list('a), 'a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-indentGroup", "title": "indentGroup", "contents": "indentGroup doc doc ", "rendered": "<h4 class='item'>let indentGroup: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a> => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-commad_list", "title": "commad_list", "contents": "commad_list doc  list doc  ", "rendered": "<h4 class='item'>let commad_list: ('a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, list('a)) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-sepd_list", "title": "sepd_list", "contents": "sepd_list doc list doc  doc   ", "rendered": "<h4 class='item'>let sepd_list: (<a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, list('a), 'a => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-@!", "title": "@!", "contents": "@! doc doc doc  ", "rendered": "<h4 class='item'>let @!: (<a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>, <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-str", "title": "str", "contents": "str option int string doc len ", "rendered": "<h4 class='item'>let str: (~?len: option(int), string) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-dedent", "title": "dedent", "contents": "dedent doc", "rendered": "<h4 class='item'>let dedent: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-space", "title": "space", "contents": "space doc", "rendered": "<h4 class='item'>let space: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-break", "title": "break", "contents": "break doc", "rendered": "<h4 class='item'>let break: <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a></h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#type-T.stringifier", "title": "T.stringifier", "contents": "stringifier path stringifier Path t pathType doc    expr stringifier Types type_expr doc   ident stringifier Ident t doc   decl stringifier string string Types type_declaration doc     value stringifier string string Types type_expr doc    ", "rendered": "<h4 class='item'>type stringifier = {\n  path: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Path.t, <a href=\"./api/PrintType.html#type-pathType\">pathType</a>) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  expr: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Types.type_expr) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  ident: (<a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>, Ident.t) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  decl: (\n    <a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>,\n    string,\n    string,\n    Types.type_declaration\n  ) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>,\n  value: (\n    <a href=\"./api/PrintType.html#type-T.stringifier\">stringifier</a>,\n    string,\n    string,\n    Types.type_expr\n  ) => <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>\n}</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#module-T", "title": "T", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#module-T", "title": "T", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#type-pathType", "title": "pathType", "contents": "pathType ", "rendered": "<h4 class='item'>type pathType = | PModule | PModuleType | PValue | PType\n</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#value-collectArgs", "title": "collectArgs", "contents": "collectArgs list Asttypes label Types type_expr Types type_expr list Asttypes label Types type_expr Types type_expr  ", "rendered": "<h4 class='item'>let collectArgs: (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)</h4>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html", "title": "PrintType", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html", "title": "PrintType", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrintType"},
{"href": "./api/PrintType.html#PrintType", "title": "PrintType", "contents": "", "rendered": "", "breadcrumb": "PrintType"},
{"href": "./api/Pretty.html#value-print", "title": "print", "contents": "Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.", "rendered": "Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-print", "title": "print", "contents": "print option int option string unit  option int unit  doc unit width output indent ", "rendered": "<h4 class='item'>let print: (\n  ~?width: option(int),\n  ~?output: option(string => unit),\n  ~?indent: option(int => unit),\n  <a href=\"./api/Pretty.html#type-doc\">doc</a>\n) => unit</h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-back", "title": "back", "contents": "Constructs a linebreak that dedents", "rendered": "Constructs a linebreak that dedents", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-back", "title": "back", "contents": "back int string doc  ", "rendered": "<h4 class='item'>let back: (int, string) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-text", "title": "text", "contents": "Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines", "rendered": "Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-text", "title": "text", "contents": "text option int string doc len ", "rendered": "<h4 class='item'>let text: (~?len: option(int), string) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-line", "title": "line", "contents": "Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.", "rendered": "Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-line", "title": "line", "contents": "line string doc ", "rendered": "<h4 class='item'>let line: string => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-indent", "title": "indent", "contents": "Adds a level of indentation to a document", "rendered": "Adds a level of indentation to a document", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-indent", "title": "indent", "contents": "indent int doc doc  ", "rendered": "<h4 class='item'>let indent: (int, <a href=\"./api/Pretty.html#type-doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-group", "title": "group", "contents": "Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.", "rendered": "Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-group", "title": "group", "contents": "group doc doc ", "rendered": "<h4 class='item'>let group: <a href=\"./api/Pretty.html#type-doc\">doc</a> => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-empty", "title": "empty", "contents": "The empty document", "rendered": "The empty document", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-empty", "title": "empty", "contents": "empty doc", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-append", "title": "append", "contents": "Sequentially appends two documents", "rendered": "Sequentially appends two documents", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#value-append", "title": "append", "contents": "append doc doc doc  ", "rendered": "<h4 class='item'>let append: (<a href=\"./api/Pretty.html#type-doc\">doc</a>, <a href=\"./api/Pretty.html#type-doc\">doc</a>) => <a href=\"./api/Pretty.html#type-doc\">doc</a></h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#type-doc", "title": "doc", "contents": "Represents documents to be pretty-printed", "rendered": "Represents documents to be pretty-printed", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html#type-doc", "title": "doc", "contents": "doc ", "rendered": "<h4 class='item'>type doc</h4>", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html", "title": "Pretty", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Pretty"},
{"href": "./api/Pretty.html", "title": "Pretty", "contents": "Pretty-prints documents. This module is similar in purpose to OCaml standard Format module, but is based on the combinators described in Wadler&#39;s paper &quot;A prettier printer.&quot; Unlike Wadler&#39;s implementation, the present code does not admit lazy document nodes and therefore pretty printing always uses O(N) space where N is the size of the document. References Philip Wadler, &quot;A prettier printer.&quot; The Fun of Programming. A symposium in honour of Professor Richard Bird&#39;s 60th birthday Examination Schools, Oxford, 24-25 March 2003.", "rendered": "Pretty-prints documents. This module is similar in purpose to OCaml standard Format module, but is based on the combinators described in Wadler&#39;s paper <a href='http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf'>&quot;A prettier printer.&quot;</a> Unlike Wadler&#39;s implementation, the present code does not admit lazy document nodes and therefore pretty printing always uses O(N) space where N is the size of the document. <em>References</em> Philip Wadler, <a href='http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf'>&quot;A prettier printer.&quot;</a> The Fun of Programming. A symposium in honour of Professor Richard Bird&#39;s 60th birthday Examination Schools, Oxford, 24-25 March 2003.", "breadcrumb": "Pretty"},
{"href": "./api/GenerateDoc.html#value-docsForModule", "title": "docsForModule", "contents": "docsForModule stringifier t list string int string Omd t list doc string list int string string string       ", "rendered": "<h4 class='item'>let docsForModule: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n  <a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  int,\n  string,\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)\n) => (string, list((int, string, string, string)))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-generateDoc", "title": "generateDoc", "contents": "generateDoc stringifier t list string int doc string list int string string string     ", "rendered": "<h4 class='item'>let generateDoc: (\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n  <a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  int,\n  <a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>\n) => (string, list((int, string, string, string)))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#type-t", "title": "t", "contents": "t option element option string  list string string option docItem Omd t string override    ", "rendered": "<h4 class='item'>type t = (\n  ~?override: option(<a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)),\n  list(string),\n  string,\n  option(<a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>),\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-link", "title": "link", "contents": "link string string string  ", "rendered": "<h4 class='item'>let link: (string, string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-marked", "title": "marked", "contents": "marked element option string  string string  ", "rendered": "<h4 class='item'>let marked: (<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string), string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-div", "title": "div", "contents": "div string string string  ", "rendered": "<h4 class='item'>let div: (string, string) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-trackToc", "title": "trackToc", "contents": "trackToc option bool int list int string string string unit  Pervasives ref int element option string  element option string     Pervasives ref list int string string string element option string  lower  ", "rendered": "<h4 class='item'>let trackToc: (\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string),\n    <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-uniqueItems", "title": "uniqueItems", "contents": "uniqueItems list docItem list docItem ", "rendered": "<h4 class='item'>let uniqueItems: list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)) => list(\n  ('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-cleanForLink", "title": "cleanForLink", "contents": "cleanForLink string string ", "rendered": "<h4 class='item'>let cleanForLink: string => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-prettyString", "title": "prettyString", "contents": "prettyString option int doc string width ", "rendered": "<h4 class='item'>let prettyString: (~?width: option(int), <a href=\"./api/Pretty.html#type-doc\" title=\"Pretty.doc\">doc</a>) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-defaultMain", "title": "defaultMain", "contents": "defaultMain option bool string string addHeading ", "rendered": "<h4 class='item'>let defaultMain: (\n  ~?addHeading: option(bool),\n  string\n) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-makeId", "title": "makeId", "contents": "makeId list string pathType string  ", "rendered": "<h4 class='item'>let makeId: (list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>) => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-ptypePrefix", "title": "ptypePrefix", "contents": "ptypePrefix pathType string ", "rendered": "<h4 class='item'>let ptypePrefix: <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a> => string</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-printer", "title": "printer", "contents": "printer string list string pathType option string  list int string list string stringifier  ", "rendered": "<h4 class='item'>let printer: (\n  (string, list(string), <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a>) => option(string),\n  list((int, (string, list(string), 'a)))\n) => <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a></h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-processPath", "title": "processPath", "contents": "processPath list int string list string list string Path t string list string    ", "rendered": "<h4 class='item'>let processPath: (\n  list((int, (string, list(string), 'a))),\n  list(string),\n  Path.t,\n  'a\n) => (string, list(string), 'a)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-isUpperCase", "title": "isUpperCase", "contents": "isUpperCase char bool ", "rendered": "<h4 class='item'>let isUpperCase: char => bool</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findValueByName", "title": "findValueByName", "contents": "findValueByName list docItem option docItem  ", "rendered": "<h4 class='item'>let findValueByName: (\n  list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)),\n  'a\n) => option(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>))</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findTypeByName", "title": "findTypeByName", "contents": "findTypeByName list docItem option docItem  ", "rendered": "<h4 class='item'>let findTypeByName: (list(('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)), 'a) => option(\n  ('a, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#value-findByName", "title": "findByName", "contents": "findByName list option  ", "rendered": "<h4 class='item'>let findByName: (list(('a, 'a, 'a)), 'a) => option(\n  ('a, 'a, 'a)\n)</h4>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html", "title": "GenerateDoc", "contents": "@rest", "rendered": "@rest", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html", "title": "GenerateDoc", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "GenerateDoc"},
{"href": "./api/GenerateDoc.html#GenerateDoc", "title": "GenerateDoc", "contents": "", "rendered": "", "breadcrumb": "GenerateDoc"},
{"href": "./api/DocsTemplate.html#value-head", "title": "head", "contents": "head string string string relativeToRoot ", "rendered": "<h4 class='item'>let head: (~relativeToRoot: string, string) => string</h4>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html#value-searchStyle", "title": "searchStyle", "contents": "searchStyle string", "rendered": "<h4 class='item'>let searchStyle: string</h4>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html", "title": "DocsTemplate", "contents": "@rest", "rendered": "@rest", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html", "title": "DocsTemplate", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "DocsTemplate"},
{"href": "./api/DocsTemplate.html#DocsTemplate", "title": "DocsTemplate", "contents": "", "rendered": "", "breadcrumb": "DocsTemplate"},
{"href": "./api/Docs.html#value-generate", "title": "generate", "contents": "generate option string string bool GenerateDoc t string option Omd t list int string list string list doc list string list string string string sourceUrl relativeToRoot playgroundEnabled processDocString      ", "rendered": "<h4 class='item'>let generate: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~processDocString: <a href=\"./api/GenerateDoc.html\">GenerateDoc</a>.<a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  string,\n  option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>),\n  list((int, (string, list(string), 'a))),\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>),\n  list(string),\n  list((string, string))\n) => string</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-page", "title": "page", "contents": "page option string string bool option bool string list int string string string list string string list string string string string sourceUrl relativeToRoot playgroundEnabled checkHashes     ", "rendered": "<h4 class='item'>let page: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-formatHref", "title": "formatHref", "contents": "formatHref bool string list string string list string pathType option string warnMissing   ", "rendered": "<h4 class='item'>let formatHref: (\n  ~warnMissing: bool,\n  string,\n  list(string),\n  (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>)\n) => option(string)</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#value-allGlobals", "title": "allGlobals", "contents": "allGlobals list string", "rendered": "<h4 class='item'>let allGlobals: list(string)</h4>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html", "title": "Docs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Docs"},
{"href": "./api/Docs.html", "title": "Docs", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Docs"},
{"href": "./api/Docs.html#Docs", "title": "Docs", "contents": "", "rendered": "", "breadcrumb": "Docs"},
{"href": "./api/CodeSnippets.html#value-testBlock", "title": "testBlock", "contents": "testBlock string string compilationResult codeOptions string int unit  base    ", "rendered": "<h4 class='item'>let testBlock: (\n  string,\n  ~base: string,\n  <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string,\n  int\n) => unit</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-snippetLoader", "title": "snippetLoader", "contents": "snippetLoader string string string string   ", "rendered": "<h4 class='item'>let snippetLoader: (string, string, string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-shouldTest", "title": "shouldTest", "contents": "shouldTest expectation bool ", "rendered": "<h4 class='item'>let shouldTest: <a href=\"./api/State.html#type-Model.expectation\" title=\"State.Model.expectation\">expectation</a> => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-escape", "title": "escape", "contents": "escape string string ", "rendered": "<h4 class='item'>let escape: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-processBlock", "title": "processBlock", "contents": "processBlock option bool option bool string string string string codeOptions string list string compilationResult debug silentFailures       ", "rendered": "<h4 class='item'>let processBlock: (\n  ~?debug: option(bool),\n  ~?silentFailures: option(bool),\n  string,\n  string,\n  string,\n  string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string,\n  list(string)\n) => <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a></h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-justBscCommand", "title": "justBscCommand", "contents": "justBscCommand string string list string string   ", "rendered": "<h4 class='item'>let justBscCommand: (string, string, list(string)) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-refmtCommand", "title": "refmtCommand", "contents": "refmtCommand string string string string string    ", "rendered": "<h4 class='item'>let refmtCommand: (string, string, string, string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-writeDeps", "title": "writeDeps", "contents": "writeDeps string unit  list string string list string string unit output_string dependencyDirs stdlibRequires bsRoot base", "rendered": "<h4 class='item'>let writeDeps: (\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-unique", "title": "unique", "contents": "unique list list ", "rendered": "<h4 class='item'>let unique: list('a) => list('a)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-invert", "title": "invert", "contents": "invert bool  bool  ", "rendered": "<h4 class='item'>let invert: ('a => bool, 'a) => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-getDependencyDirs", "title": "getDependencyDirs", "contents": "getDependencyDirs string Json t list string string  ", "rendered": "<h4 class='item'>let getDependencyDirs: (string, Json.t) => list(\n  (string, string)\n)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-isNative", "title": "isNative", "contents": "isNative Json t bool ", "rendered": "<h4 class='item'>let isNative: Json.t => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-getSourceDirectories", "title": "getSourceDirectories", "contents": "getSourceDirectories string Json t list string  ", "rendered": "<h4 class='item'>let getSourceDirectories: (string, Json.t) => list(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-optMap", "title": "optMap", "contents": "optMap option  list list  ", "rendered": "<h4 class='item'>let optMap: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-fullContent", "title": "fullContent", "contents": "fullContent string string  codeOptions string string   ", "rendered": "<h4 class='item'>let fullContent: (\n  string => string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  string\n) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-hashAll", "title": "hashAll", "contents": "hashAll string string ", "rendered": "<h4 class='item'>let hashAll: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-removeHashes", "title": "removeHashes", "contents": "removeHashes string string ", "rendered": "<h4 class='item'>let removeHashes: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-splitLines", "title": "splitLines", "contents": "splitLines string list string ", "rendered": "<h4 class='item'>let splitLines: string => list(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-highlight", "title": "highlight", "contents": "highlight bool string string codeOptions compilationResult string option string  string editingEnabled     ", "rendered": "<h4 class='item'>let highlight: (\n  ~editingEnabled: bool,\n  string,\n  string,\n  <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>,\n  string => option(string)\n) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-shouldBundle", "title": "shouldBundle", "contents": "shouldBundle expectation bool ", "rendered": "<h4 class='item'>let shouldBundle: <a href=\"./api/State.html#type-Model.expectation\" title=\"State.Model.expectation\">expectation</a> => bool</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-escapeScript", "title": "escapeScript", "contents": "escapeScript string string ", "rendered": "<h4 class='item'>let escapeScript: string => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-html", "title": "html", "contents": "html option bool string string md ", "rendered": "<h4 class='item'>let html: (~?md: option(bool), string) => string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-sprintf", "title": "sprintf", "contents": "sprintf Pervasives format unit string ", "rendered": "<h4 class='item'>let sprintf: Pervasives.format('a, unit, string) => 'a</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#type-compiledBlock", "title": "compiledBlock", "contents": "compiledBlock block codeBlock status compilationResult", "rendered": "<h4 class='item'>type compiledBlock = {\n  block: <a href=\"./api/CodeSnippets.html#type-codeBlock\">codeBlock</a>,\n  status: <a href=\"./api/State.html#type-Model.compilationResult\" title=\"State.Model.compilationResult\">compilationResult</a>\n}</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#type-codeBlock", "title": "codeBlock", "contents": "codeBlock el element id int fileName string options codeOptions content string", "rendered": "<h4 class='item'>type codeBlock = {\n  el: <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>,\n  id: int,\n  fileName: string,\n  options: <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n  content: string\n}</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-parseCodeOptions", "title": "parseCodeOptions", "contents": "parseCodeOptions string option codeOptions  ", "rendered": "<h4 class='item'>let parseCodeOptions: (string, 'a) => option(<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-matchOption", "title": "matchOption", "contents": "matchOption string string option string  ", "rendered": "<h4 class='item'>let matchOption: (string, string) => option(string)</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#value-codeBlockPrefix", "title": "codeBlockPrefix", "contents": "codeBlockPrefix string", "rendered": "<h4 class='item'>let codeBlockPrefix: string</h4>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html", "title": "CodeSnippets", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html", "title": "CodeSnippets", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeSnippets.html#CodeSnippets", "title": "CodeSnippets", "contents": "", "rendered": "", "breadcrumb": "CodeSnippets"},
{"href": "./api/CodeHighlight.html#value-highlight", "title": "highlight", "contents": "highlight string string string string string  ", "rendered": "<h4 class='item'>let highlight: (string, string) => (string, string, string)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-codeSections", "title": "codeSections", "contents": "codeSections string string int string string int ", "rendered": "<h4 class='item'>let codeSections: string => (\n  string,\n  int,\n  string,\n  string,\n  int\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-separateHashed", "title": "separateHashed", "contents": "separateHashed int list string list string int list string list string   ", "rendered": "<h4 class='item'>let separateHashed: (int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-unHash", "title": "unHash", "contents": "unHash string string ", "rendered": "<h4 class='item'>let unHash: string => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-isHashed", "title": "isHashed", "contents": "isHashed string bool ", "rendered": "<h4 class='item'>let isHashed: string => bool</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-removeIfThere", "title": "removeIfThere", "contents": "removeIfThere string unit ", "rendered": "<h4 class='item'>let removeIfThere: string => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-collectRanges", "title": "collectRanges", "contents": "collectRanges Cmt_format binary_annots list Location t string ", "rendered": "<h4 class='item'>let collectRanges: Cmt_format.binary_annots => list(\n  (Location.t, string)\n)</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-iterTags", "title": "iterTags", "contents": "iterTags Cmt_format binary_annots Location t string unit   unit  ", "rendered": "<h4 class='item'>let iterTags: (\n  Cmt_format.binary_annots,\n  (Location.t, string) => unit\n) => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-annotateText", "title": "annotateText", "contents": "annotateText list int int string list int string string int int string     ", "rendered": "<h4 class='item'>let annotateText: (\n  list((int, int, string)),\n  list((int, string)),\n  string,\n  int,\n  int\n) => string</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#value-addHtmlEscapedToBuffer", "title": "addHtmlEscapedToBuffer", "contents": "addHtmlEscapedToBuffer Buffer t char unit  ", "rendered": "<h4 class='item'>let addHtmlEscapedToBuffer: (Buffer.t, char) => unit</h4>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html", "title": "CodeHighlight", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html", "title": "CodeHighlight", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CodeHighlight"},
{"href": "./api/CodeHighlight.html#CodeHighlight", "title": "CodeHighlight", "contents": "", "rendered": "", "breadcrumb": "CodeHighlight"},
{"href": "./api/MakeIndex.html#value-run", "title": "run", "contents": "run string string unit  ", "rendered": "<h4 class='item'>let run: (string, string) => unit</h4>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html#value-source", "title": "source", "contents": "source string", "rendered": "<h4 class='item'>let source: string</h4>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html", "title": "MakeIndex", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html", "title": "MakeIndex", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MakeIndex"},
{"href": "./api/MakeIndex.html#MakeIndex", "title": "MakeIndex", "contents": "", "rendered": "", "breadcrumb": "MakeIndex"},
{"href": "./api/ElasticRaw.html#value-raw", "title": "raw", "contents": "raw string", "rendered": "<h4 class='item'>let raw: string</h4>", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html", "title": "ElasticRaw", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html", "title": "ElasticRaw", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ElasticRaw"},
{"href": "./api/ElasticRaw.html#ElasticRaw", "title": "ElasticRaw", "contents": "", "rendered": "", "breadcrumb": "ElasticRaw"},
{"href": "./api/Descartes.html#value-main", "title": "main", "contents": "main unit unit ", "rendered": "<h4 class='item'>let main: unit => unit</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-gatherCmts", "title": "gatherCmts", "contents": "gatherCmts string string list string list string string   ", "rendered": "<h4 class='item'>let gatherCmts: (string, string, list(string)) => list(\n  (string, string)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-processMany", "title": "processMany", "contents": "processMany list string list Typedtree structure_item string list string string string string Location t string list fullItem list fullItem list string string list string ", "rendered": "<h4 class='item'>let processMany: list(\n  (string, list(Typedtree.structure_item), string)\n) => (\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(<a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>),\n      list(<a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>)\n    )\n  ),\n  list((string, string, list(string)))\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-unique", "title": "unique", "contents": "unique list list ", "rendered": "<h4 class='item'>let unique: list('a) => list('a)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-resolveType", "title": "resolveType", "contents": "resolveType string Hashtbl t string Hashtbl t string list string string list string string Hashtbl t string list string string list string string Path t     ", "rendered": "<h4 class='item'>let resolveType: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-resolveValue", "title": "resolveValue", "contents": "resolveValue string Hashtbl t string Hashtbl t string list string string list string string Hashtbl t string list string string list string string Path t     ", "rendered": "<h4 class='item'>let resolveValue: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-deepType", "title": "deepType", "contents": "deepType list list list Hashtbl t list list    ", "rendered": "<h4 class='item'>let deepType: (\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        list(('a, 'a)),\n        'a,\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'i1 | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-deepValue", "title": "deepValue", "contents": "deepValue list list list Hashtbl t list list    ", "rendered": "<h4 class='item'>let deepValue: (\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        'a,\n        list(('a, 'a)),\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'h1 | `Missing ]</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-toId", "title": "toId", "contents": "toId string int string  ", "rendered": "<h4 class='item'>let toId: (string, int) => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-flatten", "title": "flatten", "contents": "flatten Path t Ident t list string ", "rendered": "<h4 class='item'>let flatten: Path.t => (Ident.t, list(string))</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-fold", "title": "fold", "contents": "fold  option   ", "rendered": "<h4 class='item'>let fold: ('a, 'a => 'a, option('a)) => 'a</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-process", "title": "process", "contents": "process string list Typedtree structure_item string Hashtbl t string string list string string list string string list string string Hashtbl t string fullItem Hashtbl t string fullItem list string string list string string list string string      ", "rendered": "<h4 class='item'>let process: (\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(string, <a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>),\n  Hashtbl.t(string, <a href=\"./api/Descartes.html#type-fullItem\">fullItem</a>)\n) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-fullItem", "title": "fullItem", "contents": "fullItem id string name string moduleName string typ string loc Location t tags list Location t list tag vals list Path t typs list Path t text string", "rendered": "<h4 class='item'>type fullItem = {\n  id: string,\n  name: string,\n  moduleName: string,\n  typ: string,\n  loc: Location.t,\n  tags: list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n  vals: list(Path.t),\n  typs: list(Path.t),\n  text: string\n}</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-chart", "title": "chart", "contents": "chart list Typedtree structure_item list int node ", "rendered": "<h4 class='item'>let chart: list(Typedtree.structure_item) => list(\n  (int, <a href=\"./api/Descartes.html#type-node\">node</a>)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-item", "title": "item", "contents": "item string string string string", "rendered": "<h4 class='item'>type item = | Value(string, string) | Type(string, string)\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-node", "title": "node", "contents": "node Location t item list Location t list tag list Path t list Path t string list int node", "rendered": "<h4 class='item'>type node = \n  | Item(\n    Location.t,\n    <a href=\"./api/Descartes.html#type-item\">item</a>,\n    list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n    list(Path.t),\n    list(Path.t)\n  )\n  | Module(string, list((int, <a href=\"./api/Descartes.html#type-node\">node</a>)))\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-markdownTags", "title": "markdownTags", "contents": "markdownTags Location t list tag", "rendered": "<h4 class='item'>type markdownTags = (Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-highlightItem", "title": "highlightItem", "contents": "highlightItem Typedtree structure_item list Location t list tag list Path t list Path t ", "rendered": "<h4 class='item'>let highlightItem: Typedtree.structure_item => (\n  list((Location.t, list(<a href=\"./api/Descartes.html#type-tag\">tag</a>))),\n  list(Path.t),\n  list(Path.t)\n)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-iterTags", "title": "iterTags", "contents": "iterTags Location t list tag unit   ", "rendered": "<h4 class='item'>let iterTags: (\n  Location.t,\n  list(\n    <a href=\"./api/Descartes.html#type-tag\">tag</a>\n  )\n) => unit => (module TypedtreeIter.IteratorArgument)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#type-tag", "title": "tag", "contents": "tag Types type_expr string Ident t Ident t Path t Path t", "rendered": "<h4 class='item'>type tag = \n  | TypeHover(Types.type_expr)\n  | Cls(string)\n  | TypeDef(Ident.t)\n  | ValueDef(Ident.t)\n  | TypeRef(Path.t)\n  | ValueRef(Path.t)\n</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#value-filterNil", "title": "filterNil", "contents": "filterNil option  list list  ", "rendered": "<h4 class='item'>let filterNil: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html", "title": "Descartes", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html", "title": "Descartes", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Descartes"},
{"href": "./api/Descartes.html#Descartes", "title": "Descartes", "contents": "", "rendered": "", "breadcrumb": "Descartes"},
{"href": "./api/Typing.html#value-collectTypes", "title": "collectTypes", "contents": "collectTypes Cmt_format binary_annots Hashtbl t Lexing position Lexing position Types type_expr Hashtbl t list list openn Hashtbl t int int Path t tag ", "rendered": "<h4 class='item'>let collectTypes: Cmt_format.binary_annots => (\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  Hashtbl.t((int, int), (Path.t, <a href=\"./api/Typing.html#type-tag\">tag</a>))\n)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-truncateLoc", "title": "truncateLoc", "contents": "truncateLoc int Location t Location t  ", "rendered": "<h4 class='item'>let truncateLoc: (int, Location.t) => Location.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-bindings", "title": "bindings", "contents": "bindings Hashtbl t int list Ident t Location t", "rendered": "<h4 class='item'>type bindings = Hashtbl.t(int, list((Ident.t, Location.t)))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-externalsUsed", "title": "externalsUsed", "contents": "externalsUsed list Path t Location t", "rendered": "<h4 class='item'>type externalsUsed = list((Path.t, Location.t))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-type_to_string", "title": "type_to_string", "contents": "type_to_string Types type_expr string ", "rendered": "<h4 class='item'>let type_to_string: Types.type_expr => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-entry", "title": "entry", "contents": "entry Location t int option Lexing position string string  depth mend ", "rendered": "<h4 class='item'>let entry: (\n  Location.t,\n  ~depth: int,\n  ~?mend: option(Lexing.position),\n  string\n) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-ppos", "title": "ppos", "contents": "ppos Lexing position string ", "rendered": "<h4 class='item'>let ppos: Lexing.position => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_expression", "title": "F.leave_expression", "contents": "leave_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let leave_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_expression", "title": "F.enter_expression", "contents": "enter_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let enter_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure_item", "title": "F.leave_structure_item", "contents": "leave_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let leave_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure_item", "title": "F.enter_structure_item", "contents": "enter_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let enter_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_pattern", "title": "F.enter_pattern", "contents": "enter_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let enter_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.handleRecord", "title": "F.handleRecord", "contents": "handleRecord Path t Longident t Longident t  ", "rendered": "<h4 class='item'>let handleRecord: (Path.t, Longident.t) => Longident.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.handleConstructor", "title": "F.handleConstructor", "contents": "handleConstructor Path t Longident t string Longident t  ", "rendered": "<h4 class='item'>let handleConstructor: (Path.t, Longident.t) => (\n  string,\n  Longident.t\n)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declaration", "title": "F.enter_type_declaration", "contents": "enter_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let enter_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_core_type", "title": "F.enter_core_type", "contents": "enter_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let enter_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.dig", "title": "F.dig", "contents": "dig Types type_expr Types type_expr ", "rendered": "<h4 class='item'>let dig: Types.type_expr => Types.type_expr</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.add_use", "title": "F.add_use", "contents": "add_use option bool Path t tag Longident t Location t unit inferable   ", "rendered": "<h4 class='item'>let add_use: (\n  ~?inferable: option(bool),\n  (Path.t, <a href=\"./api/Typing.html#type-tag\">tag</a>),\n  Longident.t,\n  Location.t\n) => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.pop_open", "title": "F.pop_open", "contents": "pop_open unit unit ", "rendered": "<h4 class='item'>let pop_open: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.add_open", "title": "F.add_open", "contents": "add_open Path t Location t unit  ", "rendered": "<h4 class='item'>let add_open: (Path.t, Location.t) => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.pop_stack", "title": "F.pop_stack", "contents": "pop_stack unit unit ", "rendered": "<h4 class='item'>let pop_stack: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.new_stack", "title": "F.new_stack", "contents": "new_stack unit unit ", "rendered": "<h4 class='item'>let new_stack: unit => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.open_stack", "title": "F.open_stack", "contents": "open_stack Pervasives ref open_stack", "rendered": "<h4 class='item'>let open_stack: Pervasives.ref(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.closed_stacks", "title": "F.closed_stacks", "contents": "closed_stacks Pervasives ref list open_stack", "rendered": "<h4 class='item'>let closed_stacks: Pervasives.ref(list(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>))</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.root_stack", "title": "F.root_stack", "contents": "root_stack open_stack", "rendered": "<h4 class='item'>let root_stack: <a href=\"./api/Typing.html#type-open_stack\">open_stack</a></h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.depth", "title": "F.depth", "contents": "depth Pervasives ref int", "rendered": "<h4 class='item'>let depth: Pervasives.ref(int)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_declarations", "title": "F.leave_type_declarations", "contents": "leave_type_declarations Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let leave_type_declarations: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_declaration", "title": "F.leave_type_declaration", "contents": "leave_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let leave_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declaration", "title": "F.enter_type_declaration", "contents": "enter_type_declaration Typedtree type_declaration unit ", "rendered": "<h4 class='item'>let enter_type_declaration: Typedtree.type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_declarations", "title": "F.enter_type_declarations", "contents": "enter_type_declarations Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let enter_type_declarations: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_bindings", "title": "F.leave_bindings", "contents": "leave_bindings Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let leave_bindings: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_binding", "title": "F.leave_binding", "contents": "leave_binding Typedtree value_binding unit ", "rendered": "<h4 class='item'>let leave_binding: Typedtree.value_binding => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_binding", "title": "F.enter_binding", "contents": "enter_binding Typedtree value_binding unit ", "rendered": "<h4 class='item'>let enter_binding: Typedtree.value_binding => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_bindings", "title": "F.enter_bindings", "contents": "enter_bindings Asttypes rec_flag unit ", "rendered": "<h4 class='item'>let enter_bindings: Asttypes.rec_flag => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure_item", "title": "F.leave_structure_item", "contents": "leave_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let leave_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_field", "title": "F.leave_class_field", "contents": "leave_class_field Typedtree class_field unit ", "rendered": "<h4 class='item'>let leave_class_field: Typedtree.class_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_structure", "title": "F.leave_class_structure", "contents": "leave_class_structure Typedtree class_structure unit ", "rendered": "<h4 class='item'>let leave_class_structure: Typedtree.class_structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_core_type", "title": "F.leave_core_type", "contents": "leave_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let leave_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type_field", "title": "F.leave_class_type_field", "contents": "leave_class_type_field Typedtree class_type_field unit ", "rendered": "<h4 class='item'>let leave_class_type_field: Typedtree.class_type_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type", "title": "F.leave_class_type", "contents": "leave_class_type Typedtree class_type unit ", "rendered": "<h4 class='item'>let leave_class_type: Typedtree.class_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_type_declaration", "title": "F.leave_class_type_declaration", "contents": "leave_class_type_declaration Typedtree class_type_declaration unit ", "rendered": "<h4 class='item'>let leave_class_type_declaration: Typedtree.class_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_description", "title": "F.leave_class_description", "contents": "leave_class_description Typedtree class_description unit ", "rendered": "<h4 class='item'>let leave_class_description: Typedtree.class_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_declaration", "title": "F.leave_class_declaration", "contents": "leave_class_declaration Typedtree class_declaration unit ", "rendered": "<h4 class='item'>let leave_class_declaration: Typedtree.class_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_signature", "title": "F.leave_class_signature", "contents": "leave_class_signature Typedtree class_signature unit ", "rendered": "<h4 class='item'>let leave_class_signature: Typedtree.class_signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_class_expr", "title": "F.leave_class_expr", "contents": "leave_class_expr Typedtree class_expr unit ", "rendered": "<h4 class='item'>let leave_class_expr: Typedtree.class_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_with_constraint", "title": "F.leave_with_constraint", "contents": "leave_with_constraint Typedtree with_constraint unit ", "rendered": "<h4 class='item'>let leave_with_constraint: Typedtree.with_constraint => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_expr", "title": "F.leave_module_expr", "contents": "leave_module_expr Typedtree module_expr unit ", "rendered": "<h4 class='item'>let leave_module_expr: Typedtree.module_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_type", "title": "F.leave_module_type", "contents": "leave_module_type Typedtree module_type unit ", "rendered": "<h4 class='item'>let leave_module_type: Typedtree.module_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_module_type_declaration", "title": "F.leave_module_type_declaration", "contents": "leave_module_type_declaration Typedtree module_type_declaration unit ", "rendered": "<h4 class='item'>let leave_module_type_declaration: Typedtree.module_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_signature_item", "title": "F.leave_signature_item", "contents": "leave_signature_item Typedtree signature_item unit ", "rendered": "<h4 class='item'>let leave_signature_item: Typedtree.signature_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_signature", "title": "F.leave_signature", "contents": "leave_signature Typedtree signature unit ", "rendered": "<h4 class='item'>let leave_signature: Typedtree.signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_package_type", "title": "F.leave_package_type", "contents": "leave_package_type Typedtree package_type unit ", "rendered": "<h4 class='item'>let leave_package_type: Typedtree.package_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_expression", "title": "F.leave_expression", "contents": "leave_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let leave_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_pattern", "title": "F.leave_pattern", "contents": "leave_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let leave_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_extension_constructor", "title": "F.leave_extension_constructor", "contents": "leave_extension_constructor Typedtree extension_constructor unit ", "rendered": "<h4 class='item'>let leave_extension_constructor: Typedtree.extension_constructor => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_type_extension", "title": "F.leave_type_extension", "contents": "leave_type_extension Typedtree type_extension unit ", "rendered": "<h4 class='item'>let leave_type_extension: Typedtree.type_extension => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_value_description", "title": "F.leave_value_description", "contents": "leave_value_description Typedtree value_description unit ", "rendered": "<h4 class='item'>let leave_value_description: Typedtree.value_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.leave_structure", "title": "F.leave_structure", "contents": "leave_structure Typedtree structure unit ", "rendered": "<h4 class='item'>let leave_structure: Typedtree.structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure_item", "title": "F.enter_structure_item", "contents": "enter_structure_item Typedtree structure_item unit ", "rendered": "<h4 class='item'>let enter_structure_item: Typedtree.structure_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_field", "title": "F.enter_class_field", "contents": "enter_class_field Typedtree class_field unit ", "rendered": "<h4 class='item'>let enter_class_field: Typedtree.class_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_structure", "title": "F.enter_class_structure", "contents": "enter_class_structure Typedtree class_structure unit ", "rendered": "<h4 class='item'>let enter_class_structure: Typedtree.class_structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_core_type", "title": "F.enter_core_type", "contents": "enter_core_type Typedtree core_type unit ", "rendered": "<h4 class='item'>let enter_core_type: Typedtree.core_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type_field", "title": "F.enter_class_type_field", "contents": "enter_class_type_field Typedtree class_type_field unit ", "rendered": "<h4 class='item'>let enter_class_type_field: Typedtree.class_type_field => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type", "title": "F.enter_class_type", "contents": "enter_class_type Typedtree class_type unit ", "rendered": "<h4 class='item'>let enter_class_type: Typedtree.class_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_type_declaration", "title": "F.enter_class_type_declaration", "contents": "enter_class_type_declaration Typedtree class_type_declaration unit ", "rendered": "<h4 class='item'>let enter_class_type_declaration: Typedtree.class_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_description", "title": "F.enter_class_description", "contents": "enter_class_description Typedtree class_description unit ", "rendered": "<h4 class='item'>let enter_class_description: Typedtree.class_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_declaration", "title": "F.enter_class_declaration", "contents": "enter_class_declaration Typedtree class_declaration unit ", "rendered": "<h4 class='item'>let enter_class_declaration: Typedtree.class_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_signature", "title": "F.enter_class_signature", "contents": "enter_class_signature Typedtree class_signature unit ", "rendered": "<h4 class='item'>let enter_class_signature: Typedtree.class_signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_class_expr", "title": "F.enter_class_expr", "contents": "enter_class_expr Typedtree class_expr unit ", "rendered": "<h4 class='item'>let enter_class_expr: Typedtree.class_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_with_constraint", "title": "F.enter_with_constraint", "contents": "enter_with_constraint Typedtree with_constraint unit ", "rendered": "<h4 class='item'>let enter_with_constraint: Typedtree.with_constraint => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_expr", "title": "F.enter_module_expr", "contents": "enter_module_expr Typedtree module_expr unit ", "rendered": "<h4 class='item'>let enter_module_expr: Typedtree.module_expr => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_type", "title": "F.enter_module_type", "contents": "enter_module_type Typedtree module_type unit ", "rendered": "<h4 class='item'>let enter_module_type: Typedtree.module_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_module_type_declaration", "title": "F.enter_module_type_declaration", "contents": "enter_module_type_declaration Typedtree module_type_declaration unit ", "rendered": "<h4 class='item'>let enter_module_type_declaration: Typedtree.module_type_declaration => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_signature_item", "title": "F.enter_signature_item", "contents": "enter_signature_item Typedtree signature_item unit ", "rendered": "<h4 class='item'>let enter_signature_item: Typedtree.signature_item => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_signature", "title": "F.enter_signature", "contents": "enter_signature Typedtree signature unit ", "rendered": "<h4 class='item'>let enter_signature: Typedtree.signature => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_package_type", "title": "F.enter_package_type", "contents": "enter_package_type Typedtree package_type unit ", "rendered": "<h4 class='item'>let enter_package_type: Typedtree.package_type => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_expression", "title": "F.enter_expression", "contents": "enter_expression Typedtree expression unit ", "rendered": "<h4 class='item'>let enter_expression: Typedtree.expression => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_pattern", "title": "F.enter_pattern", "contents": "enter_pattern Typedtree pattern unit ", "rendered": "<h4 class='item'>let enter_pattern: Typedtree.pattern => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_extension_constructor", "title": "F.enter_extension_constructor", "contents": "enter_extension_constructor Typedtree extension_constructor unit ", "rendered": "<h4 class='item'>let enter_extension_constructor: Typedtree.extension_constructor => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_type_extension", "title": "F.enter_type_extension", "contents": "enter_type_extension Typedtree type_extension unit ", "rendered": "<h4 class='item'>let enter_type_extension: Typedtree.type_extension => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_value_description", "title": "F.enter_value_description", "contents": "enter_value_description Typedtree value_description unit ", "rendered": "<h4 class='item'>let enter_value_description: Typedtree.value_description => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-F.enter_structure", "title": "F.enter_structure", "contents": "enter_structure Typedtree structure unit ", "rendered": "<h4 class='item'>let enter_structure: Typedtree.structure => unit</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#module-F", "title": "F", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-relative", "title": "relative", "contents": "relative Longident t Path t Path t  ", "rendered": "<h4 class='item'>let relative: (Longident.t, Path.t) => Path.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-usesOpen", "title": "usesOpen", "contents": "usesOpen Longident t Path t bool  ", "rendered": "<h4 class='item'>let usesOpen: (Longident.t, Path.t) => bool</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-addLidentToPath", "title": "addLidentToPath", "contents": "addLidentToPath Path t Longident t Path t  ", "rendered": "<h4 class='item'>let addLidentToPath: (Path.t, Longident.t) => Path.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-pathToLident", "title": "pathToLident", "contents": "pathToLident Path t Longident t ", "rendered": "<h4 class='item'>let pathToLident: Path.t => Longident.t</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-open_stack", "title": "open_stack", "contents": "open_stack closed list openn opens list openn parent option open_stack", "rendered": "<h4 class='item'>type open_stack = {\n  mut closed: list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  mut opens: list(<a href=\"./api/Typing.html#type-openn\">openn</a>),\n  parent: option(<a href=\"./api/Typing.html#type-open_stack\">open_stack</a>)\n}</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-openn", "title": "openn", "contents": "openn used list ident Longident t path Path t loc Location t", "rendered": "<h4 class='item'>type openn = {\n  mut used: list(<a href=\"./api/Typing.html#type-ident\">ident</a>(Longident.t)),\n  path: Path.t,\n  loc: Location.t\n}</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showLoc", "title": "showLoc", "contents": "showLoc Location t string ", "rendered": "<h4 class='item'>let showLoc: Location.t => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showLident", "title": "showLident", "contents": "showLident Longident t string ", "rendered": "<h4 class='item'>let showLident: Longident.t => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-showPath", "title": "showPath", "contents": "showPath option string bool  Path t string paren ", "rendered": "<h4 class='item'>let showPath: (\n  ~?paren: option(string => bool),\n  Path.t\n) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-toString", "title": "toString", "contents": "toString string  tag string  ", "rendered": "<h4 class='item'>let toString: ('a => string, ('a, <a href=\"./api/Typing.html#type-tag\">tag</a>)) => string</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-contents", "title": "contents", "contents": "contents ", "rendered": "<h4 class='item'>let contents: ('a, 'a) => 'a</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#value-mapIdent", "title": "mapIdent", "contents": "mapIdent   ", "rendered": "<h4 class='item'>let mapIdent: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-ident", "title": "ident", "contents": "ident tag", "rendered": "<h4 class='item'>type ident('a) = ('a, <a href=\"./api/Typing.html#type-tag\">tag</a>)</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#type-tag", "title": "tag", "contents": "tag string string", "rendered": "<h4 class='item'>type tag = \n  | Type\n  | Value\n  | Module\n  | Constructor(string)\n  | Attribute(string)\n</h4>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html", "title": "Typing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Typing"},
{"href": "./api/Typing.html", "title": "Typing", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Typing"},
{"href": "./api/Typing.html#Typing", "title": "Typing", "contents": "", "rendered": "", "breadcrumb": "Typing"},
{"href": "./api/PrepareUtils.html#value-compose", "title": "compose", "contents": "compose bool  option  option   ", "rendered": "<h4 class='item'>let compose: ('a => bool, 'a => option('a), 'a) => option(\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-eitherFirst", "title": "eitherFirst", "contents": "eitherFirst option option option  ", "rendered": "<h4 class='item'>let eitherFirst: (option('a), (option('a), 'a)) => (\n  option('a),\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-mapFst", "title": "mapFst", "contents": "mapFst   ", "rendered": "<h4 class='item'>let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-either", "title": "either", "contents": "either option option option  ", "rendered": "<h4 class='item'>let either: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-foldOpt", "title": "foldOpt", "contents": "foldOpt option  list list list   ", "rendered": "<h4 class='item'>let foldOpt: ('a => option('a), list('a), list('a)) => list(\n  'a\n)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-hasNoDoc", "title": "hasNoDoc", "contents": "hasNoDoc list Asttypes loc string bool ", "rendered": "<h4 class='item'>let hasNoDoc: list((Asttypes.loc(string), 'a)) => bool</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-findDocAttribute", "title": "findDocAttribute", "contents": "findDocAttribute string  list Asttypes loc string Parsetree payload option  ", "rendered": "<h4 class='item'>let findDocAttribute: (\n  string => 'a,\n  list(\n    (Asttypes.loc(string), Parsetree.payload)\n  )\n) => option('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-cleanOffStars", "title": "cleanOffStars", "contents": "cleanOffStars string string ", "rendered": "<h4 class='item'>let cleanOffStars: string => string</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-trimFirst", "title": "trimFirst", "contents": "trimFirst int string string  ", "rendered": "<h4 class='item'>let trimFirst: (int, string) => string</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-combine", "title": "combine", "contents": "combine option int option int option int  ", "rendered": "<h4 class='item'>let combine: (option(int), option(int)) => option(int)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-findStars", "title": "findStars", "contents": "findStars string option int ", "rendered": "<h4 class='item'>let findStars: string => option(int)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-filterNil", "title": "filterNil", "contents": "filterNil option  list list  ", "rendered": "<h4 class='item'>let filterNil: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-toFullPath", "title": "toFullPath", "contents": "toFullPath  ", "rendered": "<h4 class='item'>let toFullPath: ('a, ('a, 'a)) => ('a, 'a, 'a)</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#value-addToPath", "title": "addToPath", "contents": "addToPath list list  ", "rendered": "<h4 class='item'>let addToPath: (('a, list('a)), 'a) => ('a, list('a))</h4>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html", "title": "PrepareUtils", "contents": "@rest", "rendered": "@rest", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html", "title": "PrepareUtils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "PrepareUtils"},
{"href": "./api/PrepareUtils.html#PrepareUtils", "title": "PrepareUtils", "contents": "", "rendered": "", "breadcrumb": "PrepareUtils"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypedtreeImplementation", "title": "stampsFromTypedtreeImplementation", "contents": "stampsFromTypedtreeImplementation list string list Typedtree structure_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypedtreeImplementation: (\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypedtreeInterface", "title": "stampsFromTypedtreeInterface", "contents": "stampsFromTypedtreeInterface list string list Typedtree signature_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypedtreeInterface: (\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#value-stampsFromTypesSignature", "title": "stampsFromTypesSignature", "contents": "stampsFromTypesSignature list string list Types signature_item list int list string pathType  ", "rendered": "<h4 class='item'>let stampsFromTypesSignature: (\n  ('a, list(string)),\n  list(Types.signature_item)\n) => list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"T.pathType\">pathType</a>)))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.stamps", "title": "T.stamps", "contents": "stamps list int fullPath", "rendered": "<h4 class='item'>type stamps = list((int, <a href=\"./api/CmtFindStamps.html#type-T.fullPath\">fullPath</a>))</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.fullPath", "title": "T.fullPath", "contents": "fullPath string list string pathType", "rendered": "<h4 class='item'>type fullPath = (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\">pathType</a>)</h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#type-T.pathType", "title": "T.pathType", "contents": "pathType pathType", "rendered": "<h4 class='item'>type pathType = | PModule | PModuleType | PValue | PType\n = <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a></h4>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#module-T", "title": "T", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#module-T", "title": "T", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html", "title": "CmtFindStamps", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html", "title": "CmtFindStamps", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindStamps.html#CmtFindStamps", "title": "CmtFindStamps", "contents": "", "rendered": "", "breadcrumb": "CmtFindStamps"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsSig", "title": "moduleContentsSig", "contents": "moduleContentsSig string Omd t  Typedtree module_type option Omd t moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsSig: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Typedtree.module_type\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromSignature", "title": "docItemsFromSignature", "contents": "docItemsFromSignature string Omd t  list Typedtree signature_item option Omd t list doc  ", "rendered": "<h4 class='item'>let docItemsFromSignature: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(Typedtree.signature_item)\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>))</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsType", "title": "moduleContentsType", "contents": "moduleContentsType string Omd t  Types module_type moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsType: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.module_type\n) => <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a></h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContentsStr", "title": "moduleContentsStr", "contents": "moduleContentsStr string Omd t  Typedtree module_expr option Omd t moduleContents  ", "rendered": "<h4 class='item'>let moduleContentsStr: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Typedtree.module_expr\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromStructure", "title": "docItemsFromStructure", "contents": "docItemsFromStructure string Omd t  list Typedtree structure_item option Omd t list doc  ", "rendered": "<h4 class='item'>let docItemsFromStructure: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  list(Typedtree.structure_item)\n) => (option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>))</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-eitherFirst", "title": "eitherFirst", "contents": "eitherFirst option option option  ", "rendered": "<h4 class='item'>let eitherFirst: (option('a), (option('a), 'a)) => (\n  option('a),\n  'a\n)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-mapFst", "title": "mapFst", "contents": "mapFst   ", "rendered": "<h4 class='item'>let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-either", "title": "either", "contents": "either option option option  ", "rendered": "<h4 class='item'>let either: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-moduleContents", "title": "moduleContents", "contents": "moduleContents string Omd t  Types module_type moduleContents  ", "rendered": "<h4 class='item'>let moduleContents: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.module_type\n) => <a href=\"./api/State.html#type-Model.Docs.moduleContents\" title=\"State.Model.Docs.moduleContents\">moduleContents</a></h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-docItemsFromTypes", "title": "docItemsFromTypes", "contents": "docItemsFromTypes string Omd t  Types signature list doc  ", "rendered": "<h4 class='item'>let docItemsFromTypes: (\n  string => <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>,\n  Types.signature\n) => list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#value-iter", "title": "iter", "contents": "iter string option Omd t docItem  doc unit  ", "rendered": "<h4 class='item'>let iter: (\n  (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>) => 'a,\n  <a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>\n) => unit</h4>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html", "title": "CmtFindDocItems", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html", "title": "CmtFindDocItems", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/CmtFindDocItems.html#CmtFindDocItems", "title": "CmtFindDocItems", "contents": "", "rendered": "", "breadcrumb": "CmtFindDocItems"},
{"href": "./api/State.html#value-Input.show", "title": "Input.show", "contents": "show t string ", "rendered": "<h4 class='item'>let show: <a href=\"./api/State.html#type-Input.t\">t</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.t", "title": "Input.t", "contents": "t target target packageInput packageInput env env", "rendered": "<h4 class='item'>type t = {\n  target: <a href=\"./api/State.html#type-Input.target\">target</a>,\n  packageInput: <a href=\"./api/State.html#type-Input.packageInput\">packageInput</a>,\n  env: <a href=\"./api/State.html#type-Input.env\">env</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.target", "title": "Input.target", "contents": "target directory string template option string skipStdlibCompletions bool search bool", "rendered": "<h4 class='item'>type target = {\n  directory: string,\n  template: option(string),\n  skipStdlibCompletions: bool,\n  search: bool\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Input.showPackageInput", "title": "Input.showPackageInput", "contents": "showPackageInput packageInput string ", "rendered": "<h4 class='item'>let showPackageInput: <a href=\"./api/State.html#type-Input.packageInput\">packageInput</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.packageInput", "title": "Input.packageInput", "contents": "packageInput root string meta meta backend backend sidebarFile option string customFiles list string option string string moduleFiles list string string defaultCodeOptions option codeOptions namespaced bool canBundle bool", "rendered": "<h4 class='item'>type packageInput = {\n  root: string,\n  meta: <a href=\"./api/State.html#type-Input.meta\">meta</a>,\n  backend: <a href=\"./api/State.html#type-backend\">backend</a>,\n  sidebarFile: option(string),\n  customFiles: list((string, option(string), string)),\n  moduleFiles: list((string, string)),\n  defaultCodeOptions: option(<a href=\"./api/State.html#type-Model.codeOptions\" title=\"Model.codeOptions\">codeOptions</a>),\n  namespaced: bool,\n  canBundle: bool\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Input.showMeta", "title": "Input.showMeta", "contents": "showMeta meta string ", "rendered": "<h4 class='item'>let showMeta: <a href=\"./api/State.html#type-Input.meta\">meta</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.meta", "title": "Input.meta", "contents": "meta packageName string repo option string", "rendered": "<h4 class='item'>type meta = {packageName: string, repo: option(string)}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Input.showEnv", "title": "Input.showEnv", "contents": "showEnv env string ", "rendered": "<h4 class='item'>let showEnv: <a href=\"./api/State.html#type-Input.env\">env</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Input.env", "title": "Input.env", "contents": "env static string debug bool", "rendered": "<h4 class='item'>type env = {static: string, debug: bool}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "There&#39;s probably a &quot;first stage&quot; that we get from cli args", "rendered": "There&#39;s probably a &quot;first stage&quot; that we get from cli args", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "And now, how do I go from &quot;cli args&quot; to &quot;that middle stage&quot;", "rendered": "And now, how do I go from &quot;cli args&quot; to &quot;that middle stage&quot;", "breadcrumb": "State"},
{"href": "./api/State.html#module-Input", "title": "Input", "contents": "From this middle stage I&#39;m confident I can produce some nice documentation.\nNot 100% sure when compilation (code block processing) happens tho", "rendered": "From this middle stage I&#39;m confident I can produce some nice documentation.\nNot 100% sure when compilation (code block processing) happens tho", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.world", "title": "Model.world", "contents": "world packages list string package", "rendered": "<h4 class='item'>type world = {packages: list((string, <a href=\"./api/State.html#type-Model.package\">package</a>))}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeBlocks", "title": "Model.codeBlocks", "contents": "codeBlocks Hashtbl t string string string codeBlock", "rendered": "<h4 class='item'>type codeBlocks = Hashtbl.t(\n  (string, string, string),\n  <a href=\"./api/State.html#type-Model.codeBlock\">codeBlock</a>\n)</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.package", "title": "Model.package", "contents": "package name string repo option string custom list customPage sidebar option list sidebar modules list topModule canBundle bool namespaced bool backend backend defaultCodeOptions option codeOptions", "rendered": "<h4 class='item'>type package = {\n  name: string,\n  repo: option(string),\n  custom: list(<a href=\"./api/State.html#type-Model.customPage\">customPage</a>),\n  sidebar: option(list(<a href=\"./api/State.html#type-Model.sidebar\">sidebar</a>)),\n  modules: list(<a href=\"./api/State.html#type-Model.topModule\">topModule</a>),\n  canBundle: bool,\n  namespaced: bool,\n  backend: <a href=\"./api/State.html#type-backend\">backend</a>,\n  defaultCodeOptions: option(<a href=\"./api/State.html#type-Model.codeOptions\">codeOptions</a>)\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.topModule", "title": "Model.topModule", "contents": "topModule name string sourcePath string docs option docWithExamples items list doc stamps stamps", "rendered": "<h4 class='item'>type topModule = {\n  name: string,\n  sourcePath: string,\n  docs: option(<a href=\"./api/State.html#type-Model.docWithExamples\">docWithExamples</a>),\n  items: list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"Docs.doc\">doc</a>),\n  stamps: <a href=\"./api/CmtFindStamps.html#type-T.stamps\" title=\"CmtFindStamps.T.stamps\">stamps</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.sidebar", "title": "Model.sidebar", "contents": "sidebar string string list sidebar", "rendered": "<h4 class='item'>type sidebar = \n  | SidebarItem(string)\n  | SidebarHeader(string, list(<a href=\"./api/State.html#type-Model.sidebar\">sidebar</a>))\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.customPage", "title": "Model.customPage", "contents": "customPage title string sourcePath option string destPath string contents docWithExamples", "rendered": "<h4 class='item'>type customPage = {\n  title: string,\n  sourcePath: option(string),\n  destPath: string,\n  contents: <a href=\"./api/State.html#type-Model.docWithExamples\">docWithExamples</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.Docs.iterWithPath", "title": "Model.Docs.iterWithPath", "contents": "iterWithPath Hashtbl t string list doc list string list string string option Omd t docItem   doc unit modulesAtPath   ", "rendered": "<h4 class='item'>let iterWithPath: (\n  ~modulesAtPath: Hashtbl.t(string, list(<a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>)),\n  list(string),\n  (list(string), (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a>)) => 'a,\n  <a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>\n) => unit</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.Docs.iter", "title": "Model.Docs.iter", "contents": "iter string option Omd t docItem  doc unit  ", "rendered": "<h4 class='item'>let iter: (\n  (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a>) => 'a,\n  <a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>\n) => unit</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.Docs.itemName", "title": "Model.Docs.itemName", "contents": "itemName docItem string ", "rendered": "<h4 class='item'>let itemName: <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.Docs.doc", "title": "Model.Docs.doc", "contents": "doc string option Omd t docItem", "rendered": "<h4 class='item'>type doc = (string, option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>), <a href=\"./api/State.html#type-Model.Docs.docItem\">docItem</a>)</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.Docs.moduleContents", "title": "Model.Docs.moduleContents", "contents": "moduleContents list doc Path t", "rendered": "<h4 class='item'>type moduleContents = | Items(list(<a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>)) | Alias(Path.t)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.Docs.docItem", "title": "Model.Docs.docItem", "contents": "docItem Types type_expr Types type_declaration moduleContents option Path t list doc Omd t", "rendered": "<h4 class='item'>type docItem = \n  | Value(Types.type_expr)\n  | Type(Types.type_declaration)\n  | Module(<a href=\"./api/State.html#type-Model.Docs.moduleContents\">moduleContents</a>)\n  | Include(option(Path.t), list(<a href=\"./api/State.html#type-Model.Docs.doc\">doc</a>))\n  | StandaloneDoc(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model.Docs", "title": "Model.Docs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model.Docs", "title": "Model.Docs", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.docWithExamples", "title": "Model.docWithExamples", "contents": "docWithExamples Omd t", "rendered": "<h4 class='item'>type docWithExamples = <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a></h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.id", "title": "Model.id", "contents": "id string", "rendered": "<h4 class='item'>type id = string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeBlock", "title": "Model.codeBlock", "contents": " This represents the final result of a code block, all that&#39;s needed to render it ", "rendered": " This represents the final result of a code block, all that&#39;s needed to render it ", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeBlock", "title": "Model.codeBlock", "contents": "codeBlock langLine string raw string html string page string filePath string compilationResult compilationResult", "rendered": "<h4 class='item'>type codeBlock = {\n  langLine: string,\n  raw: string,\n  html: string,\n  page: string,\n  filePath: string,\n  compilationResult: <a href=\"./api/State.html#type-Model.compilationResult\">compilationResult</a>\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.compilationResult", "title": "Model.compilationResult", "contents": "compilationResult string string string string string", "rendered": "<h4 class='item'>type compilationResult = \n  | Skipped\n  | ParseError(string)\n  | TypeError(string, string)\n  | Success(string, string)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.defaultOptions", "title": "Model.defaultOptions", "contents": "defaultOptions codeOptions", "rendered": "<h4 class='item'>let defaultOptions: <a href=\"./api/State.html#type-Model.codeOptions\">codeOptions</a></h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeOptions", "title": "Model.codeOptions", "contents": "codeOptions context codeContext lang lang expectation expectation codeDisplay codeDisplay inferred bool sharedAs option string uses list string", "rendered": "<h4 class='item'>type codeOptions = {\n  context: <a href=\"./api/State.html#type-Model.codeContext\">codeContext</a>,\n  lang: <a href=\"./api/State.html#type-Model.lang\">lang</a>,\n  expectation: <a href=\"./api/State.html#type-Model.expectation\">expectation</a>,\n  codeDisplay: <a href=\"./api/State.html#type-Model.codeDisplay\">codeDisplay</a>,\n  inferred: bool,\n  sharedAs: option(string),\n  uses: list(string)\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.showLang", "title": "Model.showLang", "contents": "showLang lang string ", "rendered": "<h4 class='item'>let showLang: <a href=\"./api/State.html#type-Model.lang\">lang</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.lang", "title": "Model.lang", "contents": "lang string", "rendered": "<h4 class='item'>type lang = | Reason | OCaml | Txt | OtherLang(string)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeDisplay", "title": "Model.codeDisplay", "contents": "codeDisplay prefix int suffix int noEdit bool hide bool", "rendered": "<h4 class='item'>type codeDisplay = {\n  prefix: int,\n  suffix: int,\n  noEdit: bool,\n  hide: bool\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.expectation", "title": "Model.expectation", "contents": "expectation ", "rendered": "<h4 class='item'>type expectation = \n  | Succeed\n  | Raise\n  | DontRun\n  | TypeFail\n  | DontType\n  | ParseFail\n  | Skip\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-Model.contextString", "title": "Model.contextString", "contents": "contextString codeContext string ", "rendered": "<h4 class='item'>let contextString: <a href=\"./api/State.html#type-Model.codeContext\">codeContext</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-Model.codeContext", "title": "Model.codeContext", "contents": "codeContext ", "rendered": "<h4 class='item'>type codeContext = \n  | Normal\n  | Node\n  | Window\n  | Iframe\n  | Canvas\n  | Div\n  | Log\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model", "title": "Model", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html#module-Model", "title": "Model", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showBackend", "title": "showBackend", "contents": "showBackend backend string ", "rendered": "<h4 class='item'>let showBackend: <a href=\"./api/State.html#type-backend\">backend</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-backend", "title": "backend", "contents": "backend bucklescriptOptions", "rendered": "<h4 class='item'>type backend = \n  | NoBackend\n  | Bucklescript(<a href=\"./api/State.html#type-bucklescriptOptions\">bucklescriptOptions</a>)\n</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showBucklescriptOptions", "title": "showBucklescriptOptions", "contents": "showBucklescriptOptions bucklescriptOptions string ", "rendered": "<h4 class='item'>let showBucklescriptOptions: <a href=\"./api/State.html#type-bucklescriptOptions\">bucklescriptOptions</a> => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#type-bucklescriptOptions", "title": "bucklescriptOptions", "contents": "bucklescriptOptions packageRoot string bsRoot string refmt string version string browserCompilerPath option string silentFailures bool tmp string compiledDependencyDirectories list string string packageJsonName string", "rendered": "<h4 class='item'>type bucklescriptOptions = {\n  packageRoot: string,\n  bsRoot: string,\n  refmt: string,\n  version: string,\n  browserCompilerPath: option(string),\n  silentFailures: bool,\n  tmp: string,\n  compiledDependencyDirectories: list((string, string)),\n  packageJsonName: string\n}</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showOptionString", "title": "showOptionString", "contents": "showOptionString option string string ", "rendered": "<h4 class='item'>let showOptionString: option(string) => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-showOption", "title": "showOption", "contents": "showOption option string  string  ", "rendered": "<h4 class='item'>let showOption: (option('a), 'a => string) => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "I want to mess with the sidebar to allow showing more or less of each section\n(custom docs list, table of contents, api docs list)", "rendered": "I want to mess with the sidebar to allow showing more or less of each section\n(custom docs list, table of contents, api docs list)", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "A markdown page is either part of the custom docs, or the api docs.\nIf part of the api docs, then listed in the sidebar there, and exists under api/\nif in the custom docs, then listed in the custom docs portion\nwhich takes up the top section of the sidebar", "rendered": "A markdown page is either part of the custom docs, or the api docs.\nIf part of the api docs, then listed in the sidebar there, and exists under api/\nif in the custom docs, then listed in the custom docs portion\nwhich takes up the top section of the sidebar", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Each @doc&#39;able item should have a canonical home, where it can be expected to live.\nIt&#39;s possible to display the docs elsewhere, but it has to be shown there as well.", "rendered": "Each @doc&#39;able item should have a canonical home, where it can be expected to live.\nIt&#39;s possible to display the docs elsewhere, but it has to be shown there as well.", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Also, to what extent do I want to build everything into a globally addressable map?", "rendered": "Also, to what extent do I want to build everything into a globally addressable map?", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "umm @includes? How can I do that...", "rendered": "umm @includes? How can I do that...", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Custom markdown things I want to represent:", "rendered": "Custom markdown things I want to represent:", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "an item can have documentation, which is in turn a markdown page(?) or markdown thing", "rendered": "an item can have documentation, which is in turn a markdown page(?) or markdown thing", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "A markdown page can embed items\nan item is a module, type, value, or include\n(module types too probably)", "rendered": "A markdown page can embed items\nan item is a module, type, value, or include\n(module types too probably)", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "Markdown page", "rendered": "Markdown page", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "The basic idea is a page\nAlso, larger than that we have packages\nbut let&#39;s talk about pages for now", "rendered": "The basic idea is a page\nAlso, larger than that we have packages\nbut let&#39;s talk about pages for now", "breadcrumb": "State"},
{"href": "./api/State.html#value-indent", "title": "indent", "contents": "indent string string ", "rendered": "<h4 class='item'>let indent: string => string</h4>", "breadcrumb": "State"},
{"href": "./api/State.html", "title": "State", "contents": "@rest", "rendered": "@rest", "breadcrumb": "State"},
{"href": "./api/State.html", "title": "State", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "State"},
{"href": "./api/State.html#State", "title": "State", "contents": "", "rendered": "", "breadcrumb": "State"},
{"href": "./api/Search.html#value-serializeSearchables", "title": "serializeSearchables", "contents": "serializeSearchables list string string string string string string ", "rendered": "<h4 class='item'>let serializeSearchables: list(\n  (string, string, string, string, string)\n) => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html#value-serializeSearchable", "title": "serializeSearchable", "contents": "serializeSearchable string string string string string string ", "rendered": "<h4 class='item'>let serializeSearchable: (\n  string,\n  string,\n  string,\n  string,\n  string\n) => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html#value-replace", "title": "replace", "contents": "replace string string string string   ", "rendered": "<h4 class='item'>let replace: (string, string, string) => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html#value-escape", "title": "escape", "contents": "escape string string ", "rendered": "<h4 class='item'>let escape: string => string</h4>", "breadcrumb": "Search"},
{"href": "./api/Search.html", "title": "Search", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Search"},
{"href": "./api/Search.html", "title": "Search", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Search"},
{"href": "./api/Search.html#Search", "title": "Search", "contents": "", "rendered": "", "breadcrumb": "Search"},
{"href": "./api/ProcessCode.html#value-codeFromPackage", "title": "codeFromPackage", "contents": "codeFromPackage package list string string string string codeOptions option codeOptions string ", "rendered": "<h4 class='item'>let codeFromPackage: <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a> => list(\n  (\n    string,\n    string,\n    string,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option((<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>, string))\n  )\n)</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-otherSyntax", "title": "otherSyntax", "contents": "otherSyntax lang lang ", "rendered": "<h4 class='item'>let otherSyntax: <a href=\"./api/State.html#type-Model.lang\" title=\"State.Model.lang\">lang</a> => <a href=\"./api/State.html#type-Model.lang\" title=\"State.Model.lang\">lang</a></h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-openPrefix", "title": "openPrefix", "contents": "openPrefix lang string string  ", "rendered": "<h4 class='item'>let openPrefix: (<a href=\"./api/State.html#type-Model.lang\" title=\"State.Model.lang\">lang</a>, string) => string</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-resolveShared", "title": "resolveShared", "contents": "resolveShared list string codeOptions option Hashtbl t string string ", "rendered": "<h4 class='item'>let resolveShared: list(\n  (\n    'a,\n    'a,\n    'a,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option('a)\n  )\n) => Hashtbl.t(string, string)</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-collectBlocks", "title": "collectBlocks", "contents": "collectBlocks list topModule list customPage option codeOptions list string option string string string codeOptions option string string codeOptions   ", "rendered": "<h4 class='item'>let collectBlocks: (\n  list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>),\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  option(<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>)\n) => list(\n  (\n    string,\n    option(string),\n    string,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option((string, string, <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>))\n  )\n)</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-iterBlocks", "title": "iterBlocks", "contents": "iterBlocks list topModule list customPage string option string string string     unit   ", "rendered": "<h4 class='item'>let iterBlocks: (\n  list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>),\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  (string, option(string), string, string) => 'a\n) => unit</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-iterDocBlocks", "title": "iterDocBlocks", "contents": "iterDocBlocks string string   Omd t unit  ", "rendered": "<h4 class='item'>let iterDocBlocks: ((string, string) => 'a, <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html", "title": "ProcessCode", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html", "title": "ProcessCode", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ProcessCode"},
{"href": "./api/ProcessCode.html#ProcessCode", "title": "ProcessCode", "contents": "", "rendered": "", "breadcrumb": "ProcessCode"},
{"href": "./api/ParseConfig.html#value-getUrl", "title": "getUrl", "contents": "getUrl string option string ", "rendered": "<h4 class='item'>let getUrl: string => option(string)</h4>", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html#value-fromGitUrl", "title": "fromGitUrl", "contents": "fromGitUrl string option string ", "rendered": "<h4 class='item'>let fromGitUrl: string => option(string)</h4>", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html", "title": "ParseConfig", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html", "title": "ParseConfig", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ParseConfig"},
{"href": "./api/ParseConfig.html#ParseConfig", "title": "ParseConfig", "contents": "", "rendered": "", "breadcrumb": "ParseConfig"},
{"href": "./api/ModelToOutput.html#value-package", "title": "package", "contents": "package package option list codeBlock option string option string Buffer t target env unit    ", "rendered": "<h4 class='item'>let package: (\n  <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>,\n  option(\n    (\n      list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>),\n      option((string, option((string, Buffer.t))))\n    )\n  ),\n  <a href=\"./api/State.html#type-Input.target\" title=\"State.Input.target\">target</a>,\n  <a href=\"./api/State.html#type-Input.env\" title=\"State.Input.env\">env</a>\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-searchHref", "title": "searchHref", "contents": "searchHref list string string list string pathType option string  ", "rendered": "<h4 class='item'>let searchHref: (\n  list(string),\n  (string, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>)\n) => option(string)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-makeCodeBlocksMap", "title": "makeCodeBlocksMap", "contents": "makeCodeBlocksMap list codeBlock Hashtbl t string string codeBlock ", "rendered": "<h4 class='item'>let makeCodeBlocksMap: list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>) => Hashtbl.t(\n  (string, string),\n  <a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>\n)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-outputModule", "title": "outputModule", "contents": "outputModule bool string list customPage string list string pathType option string  option string stringifier string string GenerateDoc t    list string topModule unit playgroundEnabled        ", "rendered": "<h4 class='item'>let outputModule: (\n  ~playgroundEnabled: bool,\n  string,\n  'a,\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  (string, list(string), <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a>) => option(string),\n  option(string),\n  (<a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>, string, string) => <a href=\"./api/GenerateDoc.html\">GenerateDoc</a>.<a href=\"./api/GenerateDoc.html#type-t\">t</a>,\n  list(string),\n  <a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-outputCustom", "title": "outputCustom", "contents": "outputCustom bool string list customPage string list string pathType option string  option string stringifier string string option element option string  list string string option docItem Omd t string    override     list string customPage unit playgroundEnabled       ", "rendered": "<h4 class='item'>let outputCustom: (\n  ~playgroundEnabled: bool,\n  string,\n  list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  (string, list(string), <a href=\"./api/PrintType.html#type-pathType\" title=\"PrintType.pathType\">pathType</a>) => option(string),\n  option(string),\n  (\n    <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n    string,\n    string,\n    ~?override: option(<a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a> => option(string)),\n    list(string),\n    string,\n    option(<a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>),\n    <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n  ) => string,\n  list(string),\n  <a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-makeSearchPage", "title": "makeSearchPage", "contents": "makeSearchPage bool list customPage list string string Pervasives ref list string string string string string unit playgroundEnabled markdowns names  ", "rendered": "<h4 class='item'>let makeSearchPage: (\n  ~playgroundEnabled: bool,\n  ~markdowns: list(<a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a>),\n  ~names: list(string),\n  string,\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  )\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-writeEditorSupport", "title": "writeEditorSupport", "contents": "writeEditorSupport bool string string list topModule string Buffer t unit skipStdlibCompletions    ", "rendered": "<h4 class='item'>let writeEditorSupport: (\n  ~skipStdlibCompletions: bool,\n  string,\n  string,\n  list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>),\n  (string, Buffer.t)\n) => unit</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-getCompletionData", "title": "getCompletionData", "contents": "getCompletionData list topModule list list string string option Json t Json t option string string ", "rendered": "<h4 class='item'>let getCompletionData: list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>) => list(\n  (\n    list(string),\n    string,\n    (option(Json.t), Json.t),\n    option(string),\n    string\n  )\n)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-showItemType", "title": "showItemType", "contents": "showItemType string docItem Hashtbl t string list string docItem option Json t Json t   ", "rendered": "<h4 class='item'>let showItemType: (\n  string,\n  <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>,\n  Hashtbl.t(string, list((string, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)))\n) => (option(Json.t), Json.t)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-getFunctionArgs", "title": "getFunctionArgs", "contents": "getFunctionArgs Types type_expr option list Asttypes label string ", "rendered": "<h4 class='item'>let getFunctionArgs: Types.type_expr => option(\n  list((Asttypes.label, string))\n)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-showType", "title": "showType", "contents": "showType Types type_expr string ", "rendered": "<h4 class='item'>let showType: Types.type_expr => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-firstFewItems", "title": "firstFewItems", "contents": "firstFewItems list string docItem string ", "rendered": "<h4 class='item'>let firstFewItems: list((string, 'a, <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>)) => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-prefix", "title": "prefix", "contents": "prefix docItem string ", "rendered": "<h4 class='item'>let prefix: <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a> => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-itemColor", "title": "itemColor", "contents": "itemColor docItem string ", "rendered": "<h4 class='item'>let itemColor: <a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a> => string</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#value-takeN", "title": "takeN", "contents": "takeN list int list  ", "rendered": "<h4 class='item'>let takeN: (list('a), int) => list('a)</h4>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html", "title": "ModelToOutput", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html", "title": "ModelToOutput", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ModelToOutput"},
{"href": "./api/ModelToOutput.html#ModelToOutput", "title": "ModelToOutput", "contents": "", "rendered": "", "breadcrumb": "ModelToOutput"},
{"href": "./api/MarkdownOfOCamldoc.html#value-convert", "title": "convert", "contents": "convert string list element  ", "rendered": "<h4 class='item'>let convert: ('a, string) => list(<a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>)</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-convertItem", "title": "convertItem", "contents": "convertItem with_location element  ", "rendered": "<h4 class='item'>let convertItem: (\n  'a,\n  <a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>(\n    [&lt; `Code_block of string\n | `Doc of string\n | `Example of Omd.name * string\n | `Heading of\n     [&lt; `Section | `Subsection | `Subsubsection | `Title ] * 'f1 *\n     Comment.non_link_inline_element Comment.with_location list\n | `List of\n     [ `Ordered | `Unordered ] *\n     Comment.nestable_block_element Comment.with_location list list\n | `Modules of Comment.Reference.module_ list\n | `Paragraph of Comment.inline_element Comment.with_location list\n | `Tag of\n     [&gt; `Author of string\n      | `Deprecated of\n          Comment.nestable_block_element Location_.with_location list\n      | `Param of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Raise of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Return of\n          Comment.nestable_block_element Location_.with_location list\n      | `See of\n          'g1 * Omd.href *\n          Comment.nestable_block_element Location_.with_location list\n      | `Since of string ]\n | `Verbatim of string ]\n  )\n) => <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a></h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-handleRef", "title": "handleRef", "contents": "handleRef Reference t string ", "rendered": "<h4 class='item'>let handleRef: <a href=\"./api/Paths.html#module-Reference\" title=\"Paths.Reference\">Reference</a>.<a href=\"./api/Paths.html#type-Reference.t\">t</a>(\n  [&lt; Paths.Reference.kind\n &gt; `Class `ClassType `Constructor `Exception `Extension `Field `Method\n   `Module `ModuleType `Type `Value ]\n) => string</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-makeHeader", "title": "makeHeader", "contents": "makeHeader Omd t element   ", "rendered": "<h4 class='item'>let makeHeader: (\n  [&lt; `Section | `Subsection | `Subsubsection | `Title ],\n  'a,\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n) => <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a></h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-stripLeft", "title": "stripLeft", "contents": "stripLeft string string ", "rendered": "<h4 class='item'>let stripLeft: string => string</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-whiteLeft", "title": "whiteLeft", "contents": "whiteLeft string int ", "rendered": "<h4 class='item'>let whiteLeft: string => int</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-stripLoc", "title": "stripLoc", "contents": "stripLoc  with_location  ", "rendered": "<h4 class='item'>let stripLoc: ('a => 'a, <a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>('a)) => 'a</h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#value-withStyle", "title": "withStyle", "contents": "withStyle Omd t element  ", "rendered": "<h4 class='item'>let withStyle: (\n  [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ],\n  <a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>\n) => <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a></h4>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html", "title": "MarkdownOfOCamldoc", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html", "title": "MarkdownOfOCamldoc", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/MarkdownOfOCamldoc.html#MarkdownOfOCamldoc", "title": "MarkdownOfOCamldoc", "contents": "", "rendered": "", "breadcrumb": "MarkdownOfOCamldoc"},
{"href": "./api/Markdown.html#value-makeDocStringProcessor", "title": "makeDocStringProcessor", "contents": "makeDocStringProcessor string element option string  Pervasives ref list string string string string string stringifier string string option element option string  list string string option docItem Representation t string    override      ", "rendered": "<h4 class='item'>let makeDocStringProcessor: (\n  string,\n  <a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string)\n) => (\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  ),\n  (\n    <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>,\n    string,\n    string,\n    ~?override: option(<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string)),\n    list(string),\n    string,\n    option(<a href=\"./api/State.html#type-Model.Docs.docItem\" title=\"State.Model.Docs.docItem\">docItem</a>),\n    <a href=\"./api/Omd.html#module-Representation\" title=\"Omd.Representation\">Representation</a>.<a href=\"./api/Omd.html#type-Representation.t\">t</a>\n  ) => string\n)</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-makeTokenCollector", "title": "makeTokenCollector", "contents": "makeTokenCollector stringifier Pervasives ref list Asttypes label stringifier ", "rendered": "<h4 class='item'>let makeTokenCollector: <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a> => (\n  Pervasives.ref(list(Asttypes.label)),\n  <a href=\"./api/PrintType.html#type-T.stringifier\" title=\"PrintType.T.stringifier\">stringifier</a>\n)</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-slice", "title": "slice", "contents": "slice string int int string   ", "rendered": "<h4 class='item'>let slice: (string, int, int) => string</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd string int string  ", "rendered": "<h4 class='item'>let sliceToEnd: (string, int) => string</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#value-linkifyMarkdown", "title": "linkifyMarkdown", "contents": "linkifyMarkdown string string element option string  element option string      ", "rendered": "<h4 class='item'>let linkifyMarkdown: (\n  string,\n  string,\n  'a,\n  'a,\n  <a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string),\n  <a href=\"./api/Omd.html#type-element\" title=\"Omd.element\">element</a>\n) => option(string)</h4>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html", "title": "Markdown", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html", "title": "Markdown", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Markdown"},
{"href": "./api/Markdown.html#Markdown", "title": "Markdown", "contents": "", "rendered": "", "breadcrumb": "Markdown"},
{"href": "./api/Main.html#value-main", "title": "main", "contents": "main unit unit ", "rendered": "<h4 class='item'>let main: unit => unit</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-compilePackage", "title": "compilePackage", "contents": "compilePackage bool package option list codeBlock option string option string Buffer t debug ", "rendered": "<h4 class='item'>let compilePackage: (~debug: bool, <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>) => option(\n  (\n    list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>),\n    option((string, option((string, Buffer.t))))\n  )\n)</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-compileBucklescript", "title": "compileBucklescript", "contents": "compileBucklescript bool bucklescriptOptions package list codeBlock option string option string Buffer t debug  ", "rendered": "<h4 class='item'>let compileBucklescript: (\n  ~debug: bool,\n  <a href=\"./api/State.html#type-bucklescriptOptions\" title=\"State.bucklescriptOptions\">bucklescriptOptions</a>,\n  <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>\n) => (\n  list(<a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a>),\n  option((string, option((string, Buffer.t))))\n)</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-invert", "title": "invert", "contents": "invert bool  bool  ", "rendered": "<h4 class='item'>let invert: ('a => bool, 'a) => bool</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "Main"},
{"href": "./api/Main.html", "title": "Main", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Main"},
{"href": "./api/Main.html", "title": "Main", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Main"},
{"href": "./api/Main.html#Main", "title": "Main", "contents": "", "rendered": "", "breadcrumb": "Main"},
{"href": "./api/InputToModel.html#value-package", "title": "package", "contents": "package bool bool packageInput package namespaced canBundle ", "rendered": "<h4 class='item'>let package: (\n  ~namespaced: bool,\n  ~canBundle: bool,\n  <a href=\"./api/State.html#type-Input.packageInput\" title=\"State.Input.packageInput\">packageInput</a>\n) => <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a></h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-processModules", "title": "processModules", "contents": "processModules bool list string string list topModule namespaced ", "rendered": "<h4 class='item'>let processModules: (\n  ~namespaced: bool,\n  list((string, string))\n) => list(<a href=\"./api/State.html#type-Model.topModule\" title=\"State.Model.topModule\">topModule</a>)</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-processCmt", "title": "processCmt", "contents": "processCmt string bool list int list string pathType option Omd t list doc   ", "rendered": "<h4 class='item'>let processCmt: ('a, string, bool) => (\n  list((int, ('a, list(string), <a href=\"./api/CmtFindStamps.html#type-T.pathType\" title=\"CmtFindStamps.T.pathType\">pathType</a>))),\n  option(<a href=\"./api/Omd.html\">Omd</a>.<a href=\"./api/Omd.html#type-t\">t</a>),\n  list(<a href=\"./api/State.html#type-Model.Docs.doc\" title=\"State.Model.Docs.doc\">doc</a>)\n)</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-parseCustom", "title": "parseCustom", "contents": "parseCustom string string option string string customPage  ", "rendered": "<h4 class='item'>let parseCustom: (\n  string,\n  (string, option(string), string)\n) => <a href=\"./api/State.html#type-Model.customPage\" title=\"State.Model.customPage\">customPage</a></h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-getTitle", "title": "getTitle", "contents": "getTitle string string string  ", "rendered": "<h4 class='item'>let getTitle: (string, string) => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-htmlName", "title": "htmlName", "contents": "htmlName string string ", "rendered": "<h4 class='item'>let htmlName: string => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-asHtml", "title": "asHtml", "contents": "asHtml string string ", "rendered": "<h4 class='item'>let asHtml: string => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-isReadme", "title": "isReadme", "contents": "isReadme string bool ", "rendered": "<h4 class='item'>let isReadme: string => bool</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-getName", "title": "getName", "contents": "getName string string ", "rendered": "<h4 class='item'>let getName: string => string</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#value-parseSidebar", "title": "parseSidebar", "contents": "parseSidebar string list sidebar ", "rendered": "<h4 class='item'>let parseSidebar: string => list(<a href=\"./api/State.html#type-Model.sidebar\" title=\"State.Model.sidebar\">sidebar</a>)</h4>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html", "title": "InputToModel", "contents": "@rest", "rendered": "@rest", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html", "title": "InputToModel", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "InputToModel"},
{"href": "./api/InputToModel.html#InputToModel", "title": "InputToModel", "contents": "", "rendered": "", "breadcrumb": "InputToModel"},
{"href": "./api/CompileCode.html#value-block", "title": "block", "contents": "block bool bool string option string  bucklescriptOptions package int string string string string codeOptions option codeOptions string codeBlock debug editingEnabled bundle    ", "rendered": "<h4 class='item'>let block: (\n  ~debug: bool,\n  ~editingEnabled: bool,\n  ~bundle: string => option(string),\n  <a href=\"./api/State.html#type-bucklescriptOptions\" title=\"State.bucklescriptOptions\">bucklescriptOptions</a>,\n  <a href=\"./api/State.html#type-Model.package\" title=\"State.Model.package\">package</a>,\n  int,\n  (\n    string,\n    string,\n    string,\n    string,\n    <a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>,\n    option((<a href=\"./api/State.html#type-Model.codeOptions\" title=\"State.Model.codeOptions\">codeOptions</a>, string))\n  )\n) => <a href=\"./api/State.html#type-Model.codeBlock\" title=\"State.Model.codeBlock\">codeBlock</a></h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-withSections", "title": "withSections", "contents": "withSections   ", "rendered": "<h4 class='item'>let withSections: ('a => 'a, 'a) => 'a</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-toMl", "title": "toMl", "contents": "toMl string string string string string string     ", "rendered": "<h4 class='item'>let toMl: (string, string, string, string, string) => string</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-toReason", "title": "toReason", "contents": "toReason string string string  ", "rendered": "<h4 class='item'>let toReason: (string, string) => string</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#value-sanitize", "title": "sanitize", "contents": "sanitize string string ", "rendered": "<h4 class='item'>let sanitize: string => string</h4>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html", "title": "CompileCode", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html", "title": "CompileCode", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CompileCode"},
{"href": "./api/CompileCode.html#CompileCode", "title": "CompileCode", "contents": "", "rendered": "", "breadcrumb": "CompileCode"},
{"href": "./api/CliToInput.html#value-parse", "title": "parse", "contents": "parse array string Input t ", "rendered": "<h4 class='item'>let parse: array(string) => <a href=\"./api/State.html#module-Input\" title=\"State.Input\">Input</a>.<a href=\"./api/State.html#type-Input.t\">t</a></h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-optsToInput", "title": "optsToInput", "contents": "optsToInput string Minimist opts Input t  ", "rendered": "<h4 class='item'>let optsToInput: (string, Minimist.opts) => <a href=\"./api/State.html#module-Input\" title=\"State.Input\">Input</a>.<a href=\"./api/State.html#type-Input.t\">t</a></h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getBsbVersion", "title": "getBsbVersion", "contents": "getBsbVersion string string ", "rendered": "<h4 class='item'>let getBsbVersion: string => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getPackageJsonName", "title": "getPackageJsonName", "contents": "getPackageJsonName Json t option string ", "rendered": "<h4 class='item'>let getPackageJsonName: Json.t => option(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getRefmt", "title": "getRefmt", "contents": "getRefmt string option string ", "rendered": "<h4 class='item'>let getRefmt: string => option(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-fail", "title": "fail", "contents": "fail string ", "rendered": "<h4 class='item'>let fail: string => 'a</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-help", "title": "help", "contents": "help string", "rendered": "<h4 class='item'>let help: string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-findDependencyDirectories", "title": "findDependencyDirectories", "contents": "findDependencyDirectories string list string string ", "rendered": "<h4 class='item'>let findDependencyDirectories: string => list(\n  (string, string)\n)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-findProjectFiles", "title": "findProjectFiles", "contents": "findProjectFiles bool option string string list string string debug namespace ", "rendered": "<h4 class='item'>let findProjectFiles: (\n  ~debug: bool,\n  ~namespace: option(string),\n  string\n) => list((string, string))</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-ifDebug", "title": "ifDebug", "contents": "ifDebug bool string string     ", "rendered": "<h4 class='item'>let ifDebug: (bool, string, 'a => string, 'a) => 'a</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-filterDuplicates", "title": "filterDuplicates", "contents": "filterDuplicates list string list string ", "rendered": "<h4 class='item'>let filterDuplicates: list(string) => list(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getName", "title": "getName", "contents": "getName string string ", "rendered": "<h4 class='item'>let getName: string => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-compiledName", "title": "compiledName", "contents": "compiledName option string string string namespace ", "rendered": "<h4 class='item'>let compiledName: (\n  ~namespace: option(string),\n  string\n) => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-compiledNameSpace", "title": "compiledNameSpace", "contents": "compiledNameSpace string string ", "rendered": "<h4 class='item'>let compiledNameSpace: string => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-isSourceFile", "title": "isSourceFile", "contents": "isSourceFile string bool ", "rendered": "<h4 class='item'>let isSourceFile: string => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-isCompiledFile", "title": "isCompiledFile", "contents": "isCompiledFile string bool ", "rendered": "<h4 class='item'>let isCompiledFile: string => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getDependencyDirs", "title": "getDependencyDirs", "contents": "getDependencyDirs string Json t list string string  ", "rendered": "<h4 class='item'>let getDependencyDirs: (string, Json.t) => list(\n  (string, string)\n)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-isNative", "title": "isNative", "contents": "isNative Json t bool ", "rendered": "<h4 class='item'>let isNative: Json.t => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-getSourceDirectories", "title": "getSourceDirectories", "contents": "getSourceDirectories string Json t list string  ", "rendered": "<h4 class='item'>let getSourceDirectories: (string, Json.t) => list(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-findMarkdownFiles", "title": "findMarkdownFiles", "contents": "findMarkdownFiles string string list string option string string   ", "rendered": "<h4 class='item'>let findMarkdownFiles: ('a, string, string) => list(\n  (string, option(string), string)\n)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-startsWith", "title": "startsWith", "contents": "startsWith string string bool  ", "rendered": "<h4 class='item'>let startsWith: (string, string) => bool</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-ifOneExists", "title": "ifOneExists", "contents": "ifOneExists list string option string ", "rendered": "<h4 class='item'>let ifOneExists: list(string) => option(string)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-oneShouldExist", "title": "oneShouldExist", "contents": "oneShouldExist string list string string  ", "rendered": "<h4 class='item'>let oneShouldExist: (string, list(string)) => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-shouldExist", "title": "shouldExist", "contents": "shouldExist string string string  ", "rendered": "<h4 class='item'>let shouldExist: (string, string) => string</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#value-optMap", "title": "optMap", "contents": "optMap option  list list  ", "rendered": "<h4 class='item'>let optMap: ('a => option('a), list('a)) => list('a)</h4>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html", "title": "CliToInput", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html", "title": "CliToInput", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CliToInput"},
{"href": "./api/CliToInput.html#CliToInput", "title": "CliToInput", "contents": "", "rendered": "", "breadcrumb": "CliToInput"},
{"href": "./api/Omd_xtxt.html", "title": "Omd_xtxt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_xtxt"},
{"href": "./api/Omd_xtxt.html", "title": "Omd_xtxt", "contents": "xtxt = eXTernal eXTension", "rendered": "xtxt = eXTernal eXTension", "breadcrumb": "Omd_xtxt"},
{"href": "./api/Omd_utils.html#value-@", "title": "@", "contents": "Tail-recursive version of Pervasives.(@).", "rendered": "Tail-recursive version of <code>Pervasives.(@)</code>.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-@", "title": "@", "contents": "@ list list list  ", "rendered": "<h4 class='item'>let @: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-html_void_elements", "title": "html_void_elements", "contents": "HTML void elements", "rendered": "HTML void elements", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-html_void_elements", "title": "html_void_elements", "contents": "html_void_elements StringSet t", "rendered": "<h4 class='item'>let html_void_elements: <a href=\"./api/Omd_utils.html#module-StringSet\">StringSet</a>.<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-extract_inner_html", "title": "extract_inner_html", "contents": "Takes an HTML node and returns the contents of the node. If it&#39;s not given a node, it returns something rubbish.", "rendered": "Takes an HTML node and returns the contents of the node. If it&#39;s not given a node, it returns something rubbish.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-extract_inner_html", "title": "extract_inner_html", "contents": "extract_inner_html string string ", "rendered": "<h4 class='item'>let extract_inner_html: string => string</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-extract_html_attributes", "title": "extract_html_attributes", "contents": "Takes some HTML and returns the list of attributes of the first ML tag. tes: Doesn&#39;t check the validity of HTML tags or attributes. Doesn&#39;t support backslash escaping. Attribute names are delimited by the space and equal characters. Attribute values are either delimited by the double quote or the simple quote character.", "rendered": "Takes some HTML and returns the list of attributes of the first ML tag. tes: Doesn&#39;t check the validity of HTML tags or attributes. Doesn&#39;t support backslash escaping. Attribute names are delimited by the space and equal characters. Attribute values are either delimited by the double quote or the simple quote character.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-extract_html_attributes", "title": "extract_html_attributes", "contents": "extract_html_attributes string list string string ", "rendered": "<h4 class='item'>let extract_html_attributes: string => list(\n  (string, string)\n)</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-eat", "title": "eat", "contents": "eat f l returns l where elements satisfying f have been removed, but it stops removing as soon as one element doesn&#39;t satisfy f.", "rendered": "<code>eat f l</code> returns <code>l</code> where elements satisfying <code>f</code> have been removed, but it stops removing as soon as one element doesn&#39;t satisfy <code>f</code>.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-eat", "title": "eat", "contents": "eat bool  list list  ", "rendered": "<h4 class='item'>let eat: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-minimalize_blanks", "title": "minimalize_blanks", "contents": "minimalize_blanks s returns a copy of s in which the first and last characters are never blank, and two consecutive blanks never happen.", "rendered": "<code>minimalize_blanks s</code> returns a copy of <code>s</code> in which the first and last characters are never blank, and two consecutive blanks never happen.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-minimalize_blanks", "title": "minimalize_blanks", "contents": "minimalize_blanks string string ", "rendered": "<h4 class='item'>let minimalize_blanks: string => string</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-htmlentities", "title": "htmlentities", "contents": "htmlentities s returns a new string in which html-significant characters have been converted to html entities. For instance, &quot;&lt;Foo&amp;Bar&gt;&quot; is converted to &quot;&lt;Foo&amp;Bar&gt;&quot;.", "rendered": "<code>htmlentities s</code> returns a new string in which html-significant characters have been converted to html entities. For instance, &quot;&lt;Foo&amp;Bar&gt;&quot; is converted to &quot;&lt;Foo&amp;Bar&gt;&quot;.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-htmlentities", "title": "htmlentities", "contents": "htmlentities option bool string string md ", "rendered": "<h4 class='item'>let htmlentities: (~?md: option(bool), string) => string</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-id_of_string", "title": "id_of_string", "contents": "id_of_string ids id returns a mangled version of id, using the method ids#mangle. If you don&#39;t need mangling, you may use object method mangle x = x end for ids. However, the name ids also means that your object should have knowledge of all IDs it has issued, in order to avoid collision. This is why id_of_string asks for an object rather than &quot;just a function&quot;.", "rendered": "<code>id_of_string ids id</code> returns a mangled version of <code>id</code>, using the method <code>ids#mangle</code>. If you don&#39;t need mangling, you may use <code>object method mangle x = x end</code> for <code>ids</code>. However, the name <code>ids</code> also means that your object should have knowledge of all IDs it has issued, in order to avoid collision. This is why <code>id_of_string</code> asks for an object rather than &quot;just a function&quot;.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-id_of_string", "title": "id_of_string", "contents": "id_of_string string string  ", "rendered": "<h4 class='item'>let id_of_string: (\n  &lt; mangle : string -&gt; string; .. &gt;,\n  string\n) => string</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-fsplit", "title": "fsplit", "contents": "fsplit ?excl ~f l returns Some(List.rev x, y) if fsplit ?excl ~f l returns Some(x,y), else it returns None.", "rendered": "<code>fsplit ?excl ~f l</code> returns <code>Some(List.rev x, y)</code> if <code>fsplit ?excl ~f l</code> returns <code>Some(x,y)</code>, else it returns <code>None</code>.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-fsplit", "title": "fsplit", "contents": "fsplit option list bool  split list option list list excl f ", "rendered": "<h4 class='item'>let fsplit: (\n  ~?excl: option(list('a) => bool),\n  ~f: <a href=\"./api/Omd_utils.html#type-split\">split</a>('a),\n  list('a)\n) => option((list('a), list('a)))</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-fsplit_rev", "title": "fsplit_rev", "contents": "fsplit_rev option list bool  split list option list list excl f ", "rendered": "<h4 class='item'>let fsplit_rev: (\n  ~?excl: option(list('a) => bool),\n  ~f: <a href=\"./api/Omd_utils.html#type-split\">split</a>('a),\n  list('a)\n) => option((list('a), list('a)))</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#type-split_action", "title": "split_action", "contents": "split_action list list list list", "rendered": "<h4 class='item'>type split_action('a) = \n  | Continue\n  | Continue_with(list('a), list('a))\n  | Split(list('a), list('a))\n</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#type-split", "title": "split", "contents": "Type of a split function", "rendered": "Type of a split function", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#type-split", "title": "split", "contents": "split list split_action ", "rendered": "<h4 class='item'>type split('a) = list('a) => <a href=\"./api/Omd_utils.html#type-split_action\">split_action</a>('a)</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.of_list", "title": "StringSet.of_list", "contents": "of_list list elt t ", "rendered": "<h4 class='item'>let of_list: list(<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.of_list", "title": "StringSet.of_list", "contents": "of_list list elt t ", "rendered": "<h4 class='item'>let of_list: list(<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.find", "title": "StringSet.find", "contents": "find elt t elt  ", "rendered": "<h4 class='item'>let find: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.split", "title": "StringSet.split", "contents": "split elt t t bool t  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, bool, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>)</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.choose", "title": "StringSet.choose", "contents": "choose t elt ", "rendered": "<h4 class='item'>let choose: <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a> => <a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.max_elt", "title": "StringSet.max_elt", "contents": "max_elt t elt ", "rendered": "<h4 class='item'>let max_elt: <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a> => <a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.min_elt", "title": "StringSet.min_elt", "contents": "min_elt t elt ", "rendered": "<h4 class='item'>let min_elt: <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a> => <a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.elements", "title": "StringSet.elements", "contents": "elements t list elt ", "rendered": "<h4 class='item'>let elements: <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a> => list(<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>)</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.cardinal", "title": "StringSet.cardinal", "contents": "cardinal t int ", "rendered": "<h4 class='item'>let cardinal: <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a> => int</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.partition", "title": "StringSet.partition", "contents": "partition elt bool  t t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a> => bool, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>)</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.filter", "title": "StringSet.filter", "contents": "filter elt bool  t t  ", "rendered": "<h4 class='item'>let filter: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a> => bool, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.exists", "title": "StringSet.exists", "contents": "exists elt bool  t bool  ", "rendered": "<h4 class='item'>let exists: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a> => bool, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.for_all", "title": "StringSet.for_all", "contents": "for_all elt bool  t bool  ", "rendered": "<h4 class='item'>let for_all: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a> => bool, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.fold", "title": "StringSet.fold", "contents": "fold elt   t   ", "rendered": "<h4 class='item'>let fold: ((<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>, 'a) => 'a, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, 'a) => 'a</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.iter", "title": "StringSet.iter", "contents": "iter elt unit  t unit  ", "rendered": "<h4 class='item'>let iter: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a> => unit, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => unit</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.subset", "title": "StringSet.subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.equal", "title": "StringSet.equal", "contents": "equal t t bool  ", "rendered": "<h4 class='item'>let equal: (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.compare", "title": "StringSet.compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => int</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.diff", "title": "StringSet.diff", "contents": "diff t t t  ", "rendered": "<h4 class='item'>let diff: (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.inter", "title": "StringSet.inter", "contents": "inter t t t  ", "rendered": "<h4 class='item'>let inter: (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.union", "title": "StringSet.union", "contents": "union t t t  ", "rendered": "<h4 class='item'>let union: (<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.remove", "title": "StringSet.remove", "contents": "remove elt t t  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.singleton", "title": "StringSet.singleton", "contents": "singleton elt t ", "rendered": "<h4 class='item'>let singleton: <a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a> => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.add", "title": "StringSet.add", "contents": "add elt t t  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.mem", "title": "StringSet.mem", "contents": "mem elt t bool  ", "rendered": "<h4 class='item'>let mem: (<a href=\"./api/Omd_utils.html#type-StringSet.elt\">elt</a>, <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a>) => bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.is_empty", "title": "StringSet.is_empty", "contents": "is_empty t bool ", "rendered": "<h4 class='item'>let is_empty: <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a> => bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-StringSet.empty", "title": "StringSet.empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#type-StringSet.t", "title": "StringSet.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#type-StringSet.elt", "title": "StringSet.elt", "contents": "elt string", "rendered": "<h4 class='item'>type elt = string</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#module-StringSet", "title": "StringSet", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#module-StringSet", "title": "StringSet", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#module-StringSet", "title": "StringSet", "contents": "Set of string. Cf. documentation of S", "rendered": "Set of <code>string</code>. Cf. documentation of S", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-warn", "title": "warn", "contents": "warn we x prints a warning with the message x if we is true, else raises Omd_utils.Error x.", "rendered": "<code>warn we x</code> prints a warning with the message <code>x</code> if <code>we</code> is true, else raises <code>Omd_utils.Error x</code>.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-warn", "title": "warn", "contents": "warn option bool string unit we ", "rendered": "<h4 class='item'>let warn: (~?we: option(bool), string) => unit</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-raise", "title": "raise", "contents": "Same as Pervasives.raise except if debug equals true, in which case it prints a trace on stderr before raising the exception.", "rendered": "Same as <code>Pervasives.raise</code> except if <code>debug</code> equals true, in which case it prints a trace on stderr before raising the exception.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-raise", "title": "raise", "contents": "raise exn ", "rendered": "<h4 class='item'>let raise: exn => 'a</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-trackfix", "title": "trackfix", "contents": "trackfix bool", "rendered": "<h4 class='item'>let trackfix: bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-debug", "title": "debug", "contents": "Equals true if the environment variable DEBUG is set, or if the environment variable OMD_DEBUG is set to a string that is not &quot;false&quot;.", "rendered": "Equals <code>true</code> if the environment variable DEBUG is set, or if the environment variable OMD_DEBUG is set to a string that is not <code>&quot;false&quot;</code>.", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#value-debug", "title": "debug", "contents": "debug bool", "rendered": "<h4 class='item'>let debug: bool</h4>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html", "title": "Omd_utils", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html", "title": "Omd_utils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_utils.html#Omd_utils", "title": "Omd_utils", "contents": "", "rendered": "", "breadcrumb": "Omd_utils"},
{"href": "./api/Omd_types.html#type-t", "title": "t", "contents": "t list flow", "rendered": "<h4 class='item'>type t = list(<a href=\"./api/Omd_types.html#type-flow\">flow</a>)</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-flow", "title": "flow", "contents": "flow ", "rendered": "<h4 class='item'>type flow = [ `Bold of phrasing\n| `Url of url * phrasing * title\n| `H5 of phrasing_no_NL\n| `Paragraph of phrasing\n| `Comment of string\n| `Html_block of string\n| `Html of string\n| `Br\n| `Ul of t\n| `Hr\n| `Emph of phrasing\n| `Quote of t\n| `H1 of phrasing_no_NL\n| `Ref of reference\n| `Code of name * string\n| `Ol of t\n| `H3 of phrasing_no_NL\n| `Code_block of name * string\n| `H6 of phrasing_no_NL\n| `H2 of phrasing_no_NL\n| `Img of url * alt * title\n| `Text of string\n| `H4 of phrasing_no_NL\n| `Img_ref of reference ]</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-reference", "title": "reference", "contents": "reference ", "rendered": "<h4 class='item'>type reference</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-phrasing", "title": "phrasing", "contents": "phrasing list", "rendered": "<h4 class='item'>type phrasing = list(\n  [ `Bold of phrasing\n| `Url of url * phrasing * title\n| `Comment of string\n| `NL\n| `Html of string\n| `Br\n| `Emph of phrasing\n| `Code of name * string\n| `Img of url * alt * title\n| `Text of string ]\n)</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-phrasing_no_NL", "title": "phrasing_no_NL", "contents": "phrasing_no_NL list el phrasing_no_NL", "rendered": "<h4 class='item'>type phrasing_no_NL = list(<a href=\"./api/Omd_types.html#type-el\">el</a>(<a href=\"./api/Omd_types.html#type-phrasing_no_NL\">phrasing_no_NL</a>))</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-el", "title": "el", "contents": "el ", "rendered": "<h4 class='item'>type el(\n  'a\n) = [ `Url of url * 'a0 * title\n| `Bold of 'a0\n| `Comment of string\n| `Html of string\n| `Br\n| `Emph of 'a0\n| `Code of name * string\n| `Img of url * alt * title\n| `Text of string ]</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-alt", "title": "alt", "contents": "alt string", "rendered": "<h4 class='item'>type alt = string</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-title", "title": "title", "contents": "title string", "rendered": "<h4 class='item'>type title = string</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-url", "title": "url", "contents": "url string", "rendered": "<h4 class='item'>type url = string</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#type-name", "title": "name", "contents": "name string", "rendered": "<h4 class='item'>type name = string</h4>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html", "title": "Omd_types", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html", "title": "Omd_types", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_types.html#Omd_types", "title": "Omd_types", "contents": "", "rendered": "", "breadcrumb": "Omd_types"},
{"href": "./api/Omd_representation.html#value-visit", "title": "visit", "contents": "The function f takes each element (from md) and returns Some t if it has effectively been applied to element, and None otherwise. When it returns Some t, t replaces element in the copy of md, and when it returns None, either element is copied as it is in the copy of md or a visited version is copied instead (well, that depends on if element has elements inside of it or not).", "rendered": "The function <code>f</code> takes each <code>element</code> (from <code>md</code>) and returns <code>Some t</code> if it has effectively been applied to <code>element</code>, and <code>None</code> otherwise. When it returns <code>Some t</code>, <code>t</code> replaces <code>element</code> in the copy of <code>md</code>, and when it returns <code>None</code>, either <code>element</code> is copied as it is in the copy of <code>md</code> or a visited version is copied instead (well, that depends on if <code>element</code> has elements inside of it or not).", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-visit", "title": "visit", "contents": "visitor for structures of type t: visit f md will return a new potentially altered copy of md that has been created by the visit of md by f.", "rendered": "visitor for structures of type t: <code>visit f md</code> will return a new potentially altered copy of <code>md</code> that has been created by the visit of <code>md</code> by <code>f</code>.", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-visit", "title": "visit", "contents": "visit element option t  t t  ", "rendered": "<h4 class='item'>let visit: (<a href=\"./api/Omd_representation.html#type-element\">element</a> => option(<a href=\"./api/Omd_representation.html#type-t\">t</a>), <a href=\"./api/Omd_representation.html#type-t\">t</a>) => <a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-normalise_md", "title": "normalise_md", "contents": "normalise_md md returns a copy of md where some elements have been factorized.", "rendered": "<code>normalise_md md</code> returns a copy of <code>md</code> where some elements have been factorized.", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-normalise_md", "title": "normalise_md", "contents": "normalise_md t t ", "rendered": "<h4 class='item'>let normalise_md: <a href=\"./api/Omd_representation.html#type-t\">t</a> => <a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-loose_compare", "title": "loose_compare", "contents": "loose_compare t1 t2 returns 0 if t1 and t2 are equivalent, otherwise it returns another number.", "rendered": "<code>loose_compare t1 t2</code> returns <code>0</code> if <code>t1</code> and <code>t2</code> are equivalent, otherwise it returns another number.", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-loose_compare", "title": "loose_compare", "contents": "loose_compare t t int  ", "rendered": "<h4 class='item'>let loose_compare: (<a href=\"./api/Omd_representation.html#type-t\">t</a>, <a href=\"./api/Omd_representation.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-empty_extension", "title": "empty_extension", "contents": "An empty extension", "rendered": "An empty extension", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#value-empty_extension", "title": "empty_extension", "contents": "empty_extension extension", "rendered": "<h4 class='item'>let empty_extension: <a href=\"./api/Omd_representation.html#type-extension\">extension</a></h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-extensions", "title": "extensions", "contents": "One must use this type to extend the parser. It&#39;s a list of functions of type extension. They are processed in order (the head is applied first), so be careful about it. If you use it wrong, it will behave wrong.", "rendered": "One must use this type to extend the parser. It&#39;s a list of functions of type <code>extension</code>. They are processed in order (the head is applied first), so be careful about it. If you use it wrong, it will behave wrong.", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-extensions", "title": "extensions", "contents": "extensions list extension", "rendered": "<h4 class='item'>type extensions = list(<a href=\"./api/Omd_representation.html#type-extension\">extension</a>)</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-extension", "title": "extension", "contents": "and to_string is a method that returns directly a string representation of the object (it&#39;s normal if it returns the empty string).", "rendered": "and <code>to_string</code> is a method that returns directly a string representation of the object (it&#39;s normal if it returns the empty string).", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-extension", "title": "extension", "contents": "parser_extension is a method that takes the current state of the parser&#39;s data and returns None if nothing has been changed, otherwise it returns the new state. The current state of the parser&#39;s data is (r, p, l) where r is the result so far, p is the list of the previous tokens (it&#39;s typically empty or contains information on how many newlines we&#39;ve just seen), and l is the remaining tokens to parse.", "rendered": "<code>parser_extension</code> is a method that takes the current state of the parser&#39;s data and returns None if nothing has been changed, otherwise it returns the new state. The current state of the parser&#39;s data is <code>(r, p, l)</code> where <code>r</code> is the result so far, <code>p</code> is the list of the previous tokens (it&#39;s typically empty or contains information on how many newlines we&#39;ve just seen), and <code>l</code> is the remaining tokens to parse.", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-extension", "title": "extension", "contents": "extension ", "rendered": "<h4 class='item'>type extension = &lt; parser_extension : t -&gt;\n                     tok list -&gt; tok list -&gt; (t * tok list * tok list) option;\n  to_string : string &gt;</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-tok", "title": "tok", "contents": "tok int int int int int int int int int int int int int int int int int int int int int string int int int int int int int int int int int int int int string name extension", "rendered": "<h4 class='item'>type tok = \n  | Ampersand\n  | Ampersands(int)\n  | At\n  | Ats(int)\n  | Backquote\n  | Backquotes(int)\n  | Backslash\n  | Backslashs(int)\n  | Bar\n  | Bars(int)\n  | Caret\n  | Carets(int)\n  | Cbrace\n  | Cbraces(int)\n  | Colon\n  | Colons(int)\n  | Comma\n  | Commas(int)\n  | Cparenthesis\n  | Cparenthesiss(int)\n  | Cbracket\n  | Cbrackets(int)\n  | Dollar\n  | Dollars(int)\n  | Dot\n  | Dots(int)\n  | Doublequote\n  | Doublequotes(int)\n  | Exclamation\n  | Exclamations(int)\n  | Equal\n  | Equals(int)\n  | Greaterthan\n  | Greaterthans(int)\n  | Hash\n  | Hashs(int)\n  | Lessthan\n  | Lessthans(int)\n  | Minus\n  | Minuss(int)\n  | Newline\n  | Newlines(int)\n  | Number(string)\n  | Obrace\n  | Obraces(int)\n  | Oparenthesis\n  | Oparenthesiss(int)\n  | Obracket\n  | Obrackets(int)\n  | Percent\n  | Percents(int)\n  | Plus\n  | Pluss(int)\n  | Question\n  | Questions(int)\n  | Quote\n  | Quotes(int)\n  | Semicolon\n  | Semicolons(int)\n  | Slash\n  | Slashs(int)\n  | Space\n  | Spaces(int)\n  | Star\n  | Stars(int)\n  | Tab\n  | Tabs(int)\n  | Tilde\n  | Tildes(int)\n  | Underscore\n  | Underscores(int)\n  | Word(string)\n  | Tag(<a href=\"./api/Omd_representation.html#type-name\">name</a>, <a href=\"./api/Omd_representation.html#type-extension\">extension</a>)\n</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-t", "title": "t", "contents": "t list element", "rendered": "<h4 class='item'>type t = list(<a href=\"./api/Omd_representation.html#type-element\">element</a>)</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-title", "title": "title", "contents": "title string", "rendered": "<h4 class='item'>type title = string</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-href", "title": "href", "contents": "href string", "rendered": "<h4 class='item'>type href = string</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-src", "title": "src", "contents": "src string", "rendered": "<h4 class='item'>type src = string</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-alt", "title": "alt", "contents": "alt string", "rendered": "<h4 class='item'>type alt = string</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-name", "title": "name", "contents": "name string", "rendered": "<h4 class='item'>type name = string</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-fallback", "title": "fallback", "contents": "fallback ", "rendered": "<h4 class='item'>type fallback = &lt; to_string : string; to_t : t &gt;</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#type-element", "title": "element", "contents": "element t t t t t t t string t t list t list t list t list t name string name string href t title ref_container name string fallback ref_container name alt fallback name list string option string t name list string option string t string string string t alt src title", "rendered": "<h4 class='item'>type element = \n  | H1(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | H2(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | H3(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | H4(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | H5(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | H6(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | Paragraph(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | Text(string)\n  | Emph(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | Bold(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | Ul(list(<a href=\"./api/Omd_representation.html#type-t\">t</a>))\n  | Ol(list(<a href=\"./api/Omd_representation.html#type-t\">t</a>))\n  | Ulp(list(<a href=\"./api/Omd_representation.html#type-t\">t</a>))\n  | Olp(list(<a href=\"./api/Omd_representation.html#type-t\">t</a>))\n  | Code(<a href=\"./api/Omd_representation.html#type-name\">name</a>, string)\n  | Code_block(<a href=\"./api/Omd_representation.html#type-name\">name</a>, string)\n  | Br\n  | Hr\n  | NL\n  | Url(<a href=\"./api/Omd_representation.html#type-href\">href</a>, <a href=\"./api/Omd_representation.html#type-t\">t</a>, <a href=\"./api/Omd_representation.html#type-title\">title</a>)\n  | Ref(ref_container, <a href=\"./api/Omd_representation.html#type-name\">name</a>, string, <a href=\"./api/Omd_representation.html#type-fallback\">fallback</a>)\n  | Img_ref(ref_container, <a href=\"./api/Omd_representation.html#type-name\">name</a>, <a href=\"./api/Omd_representation.html#type-alt\">alt</a>, <a href=\"./api/Omd_representation.html#type-fallback\">fallback</a>)\n  | Html(<a href=\"./api/Omd_representation.html#type-name\">name</a>, list((string, option(string))), <a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | Html_block(<a href=\"./api/Omd_representation.html#type-name\">name</a>, list((string, option(string))), <a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | Html_comment(string)\n  | Raw(string)\n  | Raw_block(string)\n  | Blockquote(<a href=\"./api/Omd_representation.html#type-t\">t</a>)\n  | Img(<a href=\"./api/Omd_representation.html#type-alt\">alt</a>, <a href=\"./api/Omd_representation.html#type-src\">src</a>, <a href=\"./api/Omd_representation.html#type-title\">title</a>)\n  | X(\n    &lt; name : string;\n  to_html : ?indent:int -&gt; (t -&gt; string) -&gt; t -&gt; string option;\n  to_sexpr : (t -&gt; string) -&gt; t -&gt; string option; to_t : t -&gt; t option &gt;\n  )\n</h4>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html", "title": "Omd_representation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html", "title": "Omd_representation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_representation.html#Omd_representation", "title": "Omd_representation", "contents": "", "rendered": "", "breadcrumb": "Omd_representation"},
{"href": "./api/Omd_parser.html#value-Make.parse", "title": "Make.parse", "contents": "parse list tok Omd_representation t ", "rendered": "<h4 class='item'>let parse: list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>) => <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.main_parse", "title": "Make.main_parse", "contents": "main_parse list tok Omd_representation t ", "rendered": "<h4 class='item'>let main_parse: list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>) => <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.main_loop", "title": "Make.main_loop", "contents": "main_loop option bool r p l Omd_representation t html   ", "rendered": "<h4 class='item'>let main_loop: (\n  ~?html: option(bool),\n  <a href=\"./api/Omd_parser.html#type-r\">r</a>,\n  <a href=\"./api/Omd_parser.html#type-p\">p</a>,\n  <a href=\"./api/Omd_parser.html#type-l\">l</a>\n) => <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.main_loop_rev", "title": "Make.main_loop_rev", "contents": "main_loop_rev option bool r p l r html   ", "rendered": "<h4 class='item'>let main_loop_rev: (~?html: option(bool), <a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>) => <a href=\"./api/Omd_parser.html#type-r\">r</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.icode", "title": "Make.icode", "contents": "icode default_lang r p l tries to parse some code that&#39;s delimited by space indentation. It should always return Some(r,p,l), if it returns None it means that it&#39;s been misused or there&#39;s a bug.", "rendered": "<code>icode default_lang r p l</code> tries to parse some code that&#39;s delimited by space indentation. It should always return <code>Some(r,p,l)</code>, if it returns <code>None</code> it means that it&#39;s been misused or there&#39;s a bug.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.icode", "title": "Make.icode", "contents": "icode option name r p l option r p l default_lang   ", "rendered": "<h4 class='item'>let icode: (\n  ~?default_lang: option(<a href=\"./api/Omd_representation.html#type-name\" title=\"Omd_representation.name\">name</a>),\n  <a href=\"./api/Omd_parser.html#type-r\">r</a>,\n  <a href=\"./api/Omd_parser.html#type-p\">p</a>,\n  <a href=\"./api/Omd_parser.html#type-l\">l</a>\n) => option((<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.bcode", "title": "Make.bcode", "contents": "bcode default_lang r p l tries to parse some code that&#39;s delimited by backquotes, and returns Some(r,p,l) if it succeeds, None otherwise.", "rendered": "<code>bcode default_lang r p l</code> tries to parse some code that&#39;s delimited by backquotes, and returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.bcode", "title": "Make.bcode", "contents": "bcode option name r p l option r p l default_lang   ", "rendered": "<h4 class='item'>let bcode: (\n  ~?default_lang: option(<a href=\"./api/Omd_representation.html#type-name\" title=\"Omd_representation.name\">name</a>),\n  <a href=\"./api/Omd_parser.html#type-r\">r</a>,\n  <a href=\"./api/Omd_parser.html#type-p\">p</a>,\n  <a href=\"./api/Omd_parser.html#type-l\">l</a>\n) => option((<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.make_paragraphs", "title": "Make.make_paragraphs", "contents": "Since Omd_parser.parse doesn&#39;t build paragraphs, if you want Markdown-style paragraphs, you need to apply this function to the result of Omd_parser.parse.", "rendered": "Since <code>Omd_parser.parse</code> doesn&#39;t build paragraphs, if you want Markdown-style paragraphs, you need to apply this function to the result of <code>Omd_parser.parse</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.make_paragraphs", "title": "Make.make_paragraphs", "contents": "make_paragraphs Omd_representation t Omd_representation t ", "rendered": "<h4 class='item'>let make_paragraphs: <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a> => <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.parse_list", "title": "Make.parse_list", "contents": "***Important property*** It is considered in Omd that a sub-list is always more indented than the item that contains it (so, 2 items with different indentations cannot have the direct same parent).", "rendered": "***Important property*** It is considered in Omd that a sub-list is always more indented than the item that contains it (so, 2 items with different indentations cannot have the direct same parent).", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.parse_list", "title": "Make.parse_list", "contents": "parse_list main_loop r p l parses a list from l.", "rendered": "<code>parse_list main_loop r p l</code> parses a list from <code>l</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.parse_list", "title": "Make.parse_list", "contents": "parse_list main_loop r p l r p l    ", "rendered": "<h4 class='item'>let parse_list: (<a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a>, <a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>) => (<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.maybe_link", "title": "Make.maybe_link", "contents": "maybe_link tries to parse a link, and returns Some(r,p,l) if it succeeds, None otherwise.", "rendered": "<code>maybe_link</code> tries to parse a link, and returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.maybe_link", "title": "Make.maybe_link", "contents": "maybe_link main_loop r p l option r p l    ", "rendered": "<h4 class='item'>let maybe_link: (<a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a>, <a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>) => option((<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.maybe_reference", "title": "Make.maybe_reference", "contents": "maybe_reference tries to parse a reference, a reference definition or a github-style short reference (e.g., foo as a shortcut for foo), and returns Some(r,p,l) if it succeeds, None otherwise.", "rendered": "<code>maybe_reference</code> tries to parse a reference, a reference definition or a github-style short reference (e.g., <code>foo</code> as a shortcut for <code>foo</code><code></code>), and returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.maybe_reference", "title": "Make.maybe_reference", "contents": "maybe_reference main_loop ref_container r p l option r p l     ", "rendered": "<h4 class='item'>let maybe_reference: (\n  <a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a>,\n  <a href=\"./api/Omd_representation.html#type-ref_container\" title=\"Omd_representation.ref_container\">ref_container</a>,\n  <a href=\"./api/Omd_parser.html#type-r\">r</a>,\n  <a href=\"./api/Omd_parser.html#type-p\">p</a>,\n  <a href=\"./api/Omd_parser.html#type-l\">l</a>\n) => option((<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.emailstyle_quoting", "title": "Make.emailstyle_quoting", "contents": "emailstyle_quoting main_loop r p l returns Some(r,p,l) with r being the updated result, p being the last parsed token and l being the remaining tokens to parse. If emailstyle_quoting fails, then it returns None, in which case its user is advise to investigate why it returns None because there&#39;s possibly a real problem.", "rendered": "<code>emailstyle_quoting main_loop r p l</code> returns <code>Some(r,p,l)</code> with <code>r</code> being the updated result, <code>p</code> being the last parsed token and <code>l</code> being the remaining tokens to parse. If <code>emailstyle_quoting</code> fails, then it returns <code>None</code>, in which case its user is advise to investigate why it returns <code>None</code> because there&#39;s possibly a real problem.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.emailstyle_quoting", "title": "Make.emailstyle_quoting", "contents": "emailstyle_quoting main_loop r p l option r p l    ", "rendered": "<h4 class='item'>let emailstyle_quoting: (<a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a>, <a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>) => option(\n  (<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>)\n)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.maybe_extension", "title": "Make.maybe_extension", "contents": "maybe_extension e r p l returns None if there is no extension or if extensions haven&#39;t had any effect, returns Some(nr, np, nl) if at least one extension has applied successfully.", "rendered": "<code>maybe_extension e r p l</code> returns <code>None</code> if there is no extension or if extensions haven&#39;t had any effect, returns <code>Some(nr, np, nl)</code> if at least one extension has applied successfully.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.maybe_extension", "title": "Make.maybe_extension", "contents": "maybe_extension extensions r p l option r p l    ", "rendered": "<h4 class='item'>let maybe_extension: (<a href=\"./api/Omd_representation.html#type-extensions\" title=\"Omd_representation.extensions\">extensions</a>, <a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>) => option(\n  (<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>)\n)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_title", "title": "Make.read_title", "contents": "r and p are the classical &quot;result&quot; and &quot;previous&quot; parameters.", "rendered": "<code>r</code> and <code>p</code> are the classical &quot;result&quot; and &quot;previous&quot; parameters.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_title", "title": "Make.read_title", "contents": "main_loop is used to parse the contents of the title.", "rendered": "<code>main_loop</code> is used to parse the contents of the title.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_title", "title": "Make.read_title", "contents": "read_title main_loop n r p l expects to read a n-level hash-declared title from l, where the hashes have *already* been *removed*. If n is not between 1 and 6 (included), then it returns None.", "rendered": "<code>read_title main_loop n r p l</code> expects to read a <code>n</code>-level hash-declared title from <code>l</code>, where the hashes have *already* been *removed*. If <code>n</code> is not between 1 and 6 (included), then it returns <code>None</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_title", "title": "Make.read_title", "contents": "read_title main_loop n r p l returns Some(r,p,l) if it succeeds, None otherwise.", "rendered": "<code>read_title main_loop n r p l</code> returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_title", "title": "Make.read_title", "contents": "read_title main_loop int r p l option r p l     ", "rendered": "<h4 class='item'>let read_title: (<a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a>, int, <a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>) => option(\n  (<a href=\"./api/Omd_parser.html#type-r\">r</a>, <a href=\"./api/Omd_parser.html#type-p\">p</a>, <a href=\"./api/Omd_parser.html#type-l\">l</a>)\n)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_newline", "title": "Make.read_until_newline", "contents": "read_until_newline list tok list tok list tok ", "rendered": "<h4 class='item'>let read_until_newline: list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_space", "title": "Make.read_until_space", "contents": "read_until_space option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_space: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_cbracket", "title": "Make.read_until_cbracket", "contents": "read_until_cbracket option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_cbracket: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_obracket", "title": "Make.read_until_obracket", "contents": "read_until_obracket option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_obracket: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_q", "title": "Make.read_until_q", "contents": "read_until_q option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_q: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_dq", "title": "Make.read_until_dq", "contents": "read_until_dq option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_dq: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_oparenth", "title": "Make.read_until_oparenth", "contents": "read_until_oparenth option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_oparenth: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_cparenth", "title": "Make.read_until_cparenth", "contents": "read_until_cparenth option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_cparenth: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_lt", "title": "Make.read_until_lt", "contents": "read_until_lt option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_lt: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.read_until_gt", "title": "Make.read_until_gt", "contents": "read_until_gt option bool option bool list tok list tok list tok bq no_nl ", "rendered": "<h4 class='item'>let read_until_gt: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)\n) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.hr_s", "title": "Make.hr_s", "contents": "hr_s l is the same as hr_m l but for horizontal rules &quot;drawn&quot; with stars instead.", "rendered": "<code>hr_s l</code> is the same as <code>hr_m l</code> but for horizontal rules &quot;drawn&quot; with stars instead.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.hr_s", "title": "Make.hr_s", "contents": "hr_s l option l ", "rendered": "<h4 class='item'>let hr_s: <a href=\"./api/Omd_parser.html#type-l\">l</a> => option(<a href=\"./api/Omd_parser.html#type-l\">l</a>)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.hr_m", "title": "Make.hr_m", "contents": "hr_m l returns Some nl where nl is the remaining of l if l contains a horizontal rule &quot;drawn&quot; with dashes. If there&#39;s no HR, then returns None.", "rendered": "<code>hr_m l</code> returns <code>Some nl</code> where <code>nl</code> is the remaining of <code>l</code> if <code>l</code> contains a horizontal rule &quot;drawn&quot; with dashes. If there&#39;s no HR, then returns <code>None</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.hr_m", "title": "Make.hr_m", "contents": "hr_m l option l ", "rendered": "<h4 class='item'>let hr_m: <a href=\"./api/Omd_parser.html#type-l\">l</a> => option(<a href=\"./api/Omd_parser.html#type-l\">l</a>)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag_setext", "title": "Make.tag_setext", "contents": "Tag used for the lines that *might* be titles using setext-style.", "rendered": "Tag used for the lines that *might* be titles using setext-style.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag_setext", "title": "Make.tag_setext", "contents": "tag_setext main_loop list tok list tok  ", "rendered": "<h4 class='item'>let tag_setext: (<a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a>, list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)) => list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag__md", "title": "Make.tag__md", "contents": "tag__md md encapsulates md to make it a value of type tok. Its purpose is to inject some pre-parsed markdown (i.e., md of type t) in a yet-to-parse token stream of type tok.", "rendered": "<code>tag__md md</code> encapsulates <code>md</code> to make it a value of type <code>tok</code>. Its purpose is to inject some pre-parsed markdown (i.e., <code>md</code> of type <code>t</code>) in a yet-to-parse token stream of type <code>tok</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag__md", "title": "Make.tag__md", "contents": "tag__md Omd_representation t tok ", "rendered": "<h4 class='item'>let tag__md: <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a> => <a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag__maybe_h2", "title": "Make.tag__maybe_h2", "contents": "tag__maybe_h2 main_loop is the same as tag__maybe_h1 main_loop but for H2.", "rendered": "<code>tag__maybe_h2 main_loop</code> is the same as <code>tag__maybe_h1 main_loop</code> but for H2.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag__maybe_h2", "title": "Make.tag__maybe_h2", "contents": "tag__maybe_h2 main_loop tok ", "rendered": "<h4 class='item'>let tag__maybe_h2: <a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a> => <a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag__maybe_h1", "title": "Make.tag__maybe_h1", "contents": "tag__maybe_h1 main_loop is a tag that is injected everywhere that might preceed a H1 title. It needs main_loop as argument because it is used to parse the contents of the titles.", "rendered": "<code>tag__maybe_h1 main_loop</code> is a tag that is injected everywhere that might preceed a H1 title. It needs <code>main_loop</code> as argument because it is used to parse the contents of the titles.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.tag__maybe_h1", "title": "Make.tag__maybe_h1", "contents": "tag__maybe_h1 main_loop tok ", "rendered": "<h4 class='item'>let tag__maybe_h1: <a href=\"./api/Omd_parser.html#type-main_loop\">main_loop</a> => <a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.eat_blank", "title": "Make.eat_blank", "contents": "eat_blank l returns l where all blanks at the beginning of the list have been removed (it stops removing as soon as it meets an element that is not a blank). Blanks are spaces and newlines only.", "rendered": "<code>eat_blank l</code> returns <code>l</code> where all blanks at the beginning of the list have been removed (it stops removing as soon as it meets an element that is not a blank). Blanks are spaces and newlines only.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.eat_blank", "title": "Make.eat_blank", "contents": "eat_blank list tok list tok ", "rendered": "<h4 class='item'>let eat_blank: list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>) => list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.uemph_or_bold", "title": "Make.uemph_or_bold", "contents": "uemph_or_bold n l returns None if l doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns Some(x,y) where x is the emph and/or bold phrase at the beginning of l and y is the rest of l. N.B. if !gh_uemph_or_bold_style then in Github style (i.e., underscores inside words are considered as underscores).", "rendered": "<code>uemph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>. N.B. if <code>!gh_uemph_or_bold_style</code> then in Github style (i.e., underscores inside words are considered as underscores).", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.uemph_or_bold", "title": "Make.uemph_or_bold", "contents": "uemph_or_bold int list tok option list tok list tok  ", "rendered": "<h4 class='item'>let uemph_or_bold: (int, list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)) => option(\n  (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))\n)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.gh_uemph_or_bold", "title": "Make.gh_uemph_or_bold", "contents": "gh_uemph_or_bold n l returns None if l doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns Some(x,y) where x is the emph and/or bold phrase at the beginning of l and y is the rest of l.", "rendered": "<code>gh_uemph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.gh_uemph_or_bold", "title": "Make.gh_uemph_or_bold", "contents": "gh_uemph_or_bold int list tok option list tok list tok  ", "rendered": "<h4 class='item'>let gh_uemph_or_bold: (int, list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)) => option(\n  (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))\n)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.sm_uemph_or_bold", "title": "Make.sm_uemph_or_bold", "contents": "sm_uemph_or_bold n l returns None if l doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns Some(x,y) where x is the emph and/or bold phrase at the beginning of l and y is the rest of l.", "rendered": "<code>sm_uemph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.sm_uemph_or_bold", "title": "Make.sm_uemph_or_bold", "contents": "sm_uemph_or_bold int list tok option list tok list tok  ", "rendered": "<h4 class='item'>let sm_uemph_or_bold: (int, list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)) => option(\n  (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))\n)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.semph_or_bold", "title": "Make.semph_or_bold", "contents": "semph_or_bold n l returns None if l doesn&#39;t start with a bold/emph phrase (marked using stars), else it returns Some(x,y) where x is the emph and/or bold phrase at the beginning of l and y is the rest of l.", "rendered": "<code>semph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using stars), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.semph_or_bold", "title": "Make.semph_or_bold", "contents": "semph_or_bold int list tok option list tok list tok  ", "rendered": "<h4 class='item'>let semph_or_bold: (int, list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)) => option(\n  (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))\n)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.is_blank", "title": "Make.is_blank", "contents": "is_blank l returns true if l only contains blanks, which are spaces and newlines.", "rendered": "<code>is_blank l</code> returns <code>true</code> if <code>l</code> only contains blanks, which are spaces and newlines.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.is_blank", "title": "Make.is_blank", "contents": "is_blank list tok bool ", "rendered": "<h4 class='item'>let is_blank: list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>) => bool</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.unindent", "title": "Make.unindent", "contents": "s function is used for lists and blockquotes.", "rendered": "s function is used for lists and blockquotes.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.unindent", "title": "Make.unindent", "contents": "This function is used for lists, so it does not require n *) spaces on every single line, but only on some specific ones of them. *)", "rendered": "This function is used for lists, so it does not require <code>n</code> *) spaces on every single line, but only on some specific ones of them. *)", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.unindent", "title": "Make.unindent", "contents": "unindent n l returns (unindented, rest) where unindented is consecutive lines of l that are indented with at least n ces, and de-indented by n spaces. If l starts with a line t is indented by less than n spaces, then it returns ([], l).", "rendered": "<code>unindent n l</code> returns <code>(unindented, rest)</code> where <code>unindented</code> is consecutive lines of <code>l</code> that are indented with at least <code>n</code> ces, and de-indented by <code>n</code> spaces. If <code>l</code> starts with a line t is indented by less than <code>n</code> spaces, then it returns <code>([], l)</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.unindent", "title": "Make.unindent", "contents": "unindent int list tok list tok list tok  ", "rendered": "<h4 class='item'>let unindent: (int, list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.unindent_rev", "title": "Make.unindent_rev", "contents": "unindent_rev n l returns the same couple as unindent n l except that the first element (which is a list) is reversed. This function is used for lists.", "rendered": "<code>unindent_rev n l</code> returns the same couple as <code>unindent n l</code> except that the first element (which is a list) is reversed. This function is used for lists.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.unindent_rev", "title": "Make.unindent_rev", "contents": "unindent_rev int list tok list tok list tok  ", "rendered": "<h4 class='item'>let unindent_rev: (int, list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)) => (list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>), list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>))</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.htmltags_set", "title": "Make.htmltags_set", "contents": "All known HTML tags", "rendered": "All known HTML tags", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.htmltags_set", "title": "Make.htmltags_set", "contents": "htmltags_set StringSet t", "rendered": "<h4 class='item'>let htmltags_set: <a href=\"./api/Omd_utils.html#module-StringSet\" title=\"Omd_utils.StringSet\">StringSet</a>.<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.inline_htmltags_set", "title": "Make.inline_htmltags_set", "contents": "set of known inline HTML tags", "rendered": "set of known inline HTML tags", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.inline_htmltags_set", "title": "Make.inline_htmltags_set", "contents": "inline_htmltags_set StringSet t", "rendered": "<h4 class='item'>let inline_htmltags_set: <a href=\"./api/Omd_utils.html#module-StringSet\" title=\"Omd_utils.StringSet\">StringSet</a>.<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.htmlcodes_set", "title": "Make.htmlcodes_set", "contents": "set of known HTML codes", "rendered": "set of known HTML codes", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.htmlcodes_set", "title": "Make.htmlcodes_set", "contents": "htmlcodes_set StringSet t", "rendered": "<h4 class='item'>let htmlcodes_set: <a href=\"./api/Omd_utils.html#module-StringSet\" title=\"Omd_utils.StringSet\">StringSet</a>.<a href=\"./api/Omd_utils.html#type-StringSet.t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.strict_html", "title": "Make.strict_html", "contents": "flag: if true, will not check whether a used HTML tag actually exists in HTML.", "rendered": "flag: if true, will not check whether a used HTML tag actually exists in HTML.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.strict_html", "title": "Make.strict_html", "contents": "strict_html bool", "rendered": "<h4 class='item'>let strict_html: bool</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.blind_html", "title": "Make.blind_html", "contents": "flag: bold/emph using using underscores is by default github-style, which means that underscores inside words are left as underscore, rather than special characters, because it&#39;s more convenient. However it is also less expressive because then you can&#39;t bold/emph a part of a word. You might want to set this flag to false.", "rendered": "flag: bold/emph using using underscores is by default github-style, which means that underscores inside words are left as underscore, rather than special characters, because it&#39;s more convenient. However it is also less expressive because then you can&#39;t bold/emph a part of a word. You might want to set this flag to false.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.blind_html", "title": "Make.blind_html", "contents": "blind_html bool", "rendered": "<h4 class='item'>let blind_html: bool</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.gh_uemph_or_bold_style", "title": "Make.gh_uemph_or_bold_style", "contents": "default language for code blocks", "rendered": "default language for code blocks", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.gh_uemph_or_bold_style", "title": "Make.gh_uemph_or_bold_style", "contents": "gh_uemph_or_bold_style bool", "rendered": "<h4 class='item'>let gh_uemph_or_bold_style: bool</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.default_lang", "title": "Make.default_lang", "contents": "list of parser extensions", "rendered": "list of parser extensions", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.default_lang", "title": "Make.default_lang", "contents": "default_lang string", "rendered": "<h4 class='item'>let default_lang: string</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.extensions", "title": "Make.extensions", "contents": "reference container", "rendered": "reference container", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.extensions", "title": "Make.extensions", "contents": "extensions extensions", "rendered": "<h4 class='item'>let extensions: <a href=\"./api/Omd_representation.html#type-extensions\" title=\"Omd_representation.extensions\">extensions</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.rc", "title": "Make.rc", "contents": "reference container", "rendered": "reference container", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-Make.rc", "title": "Make.rc", "contents": "rc ref_container", "rendered": "<h4 class='item'>let rc: <a href=\"./api/Omd_representation.html#type-ref_container\" title=\"Omd_representation.ref_container\">ref_container</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#module-Make", "title": "Make", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#module-Make", "title": "Make", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-default_parse", "title": "default_parse", "contents": "language for blocks of code where it was not specified. Default: &quot;&quot;.", "rendered": "language for blocks of code where it was not specified. Default: <code>&quot;&quot;</code>.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-default_parse", "title": "default_parse", "contents": "Param: langlanguage for blocks of code where it was not specified. Default: &quot;&quot;.\n\n", "rendered": "Param: lang<p>language for blocks of code where it was not specified. Default: <code>&quot;&quot;</code>.</p>\n", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-default_parse", "title": "default_parse", "contents": "Translate tokens to Markdown representation.", "rendered": "Translate tokens to Markdown representation.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#value-default_parse", "title": "default_parse", "contents": "default_parse option extensions option string l Omd_representation t extensions default_lang ", "rendered": "<h4 class='item'>let default_parse: (\n  ~?extensions: option(<a href=\"./api/Omd_representation.html#type-extensions\" title=\"Omd_representation.extensions\">extensions</a>),\n  ~?default_lang: option(string),\n  <a href=\"./api/Omd_parser.html#type-l\">l</a>\n) => <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-main_loop", "title": "main_loop", "contents": "most important loop, which has to be given as an argument", "rendered": "most important loop, which has to be given as an argument", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-main_loop", "title": "main_loop", "contents": "main_loop option bool r p l Omd_representation t html   ", "rendered": "<h4 class='item'>type main_loop = (\n  ~?html: option(bool),\n  <a href=\"./api/Omd_parser.html#type-r\">r</a>,\n  <a href=\"./api/Omd_parser.html#type-p\">p</a>,\n  <a href=\"./api/Omd_parser.html#type-l\">l</a>\n) => <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-l", "title": "l", "contents": "tokens to parse", "rendered": "tokens to parse", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-l", "title": "l", "contents": "l list tok", "rendered": "<h4 class='item'>type l = list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-p", "title": "p", "contents": "context information: previous elements", "rendered": "context information: previous elements", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-p", "title": "p", "contents": "p list tok", "rendered": "<h4 class='item'>type p = list(<a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a>)</h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-r", "title": "r", "contents": "accumulator (beware, reversed tokens)", "rendered": "accumulator (beware, reversed tokens)", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html#type-r", "title": "r", "contents": "r Omd_representation t", "rendered": "<h4 class='item'>type r = <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a></h4>", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html", "title": "Omd_parser", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_parser.html", "title": "Omd_parser", "contents": "Beware: the functions in this module may raise exceptions! If you use them, you should be careful.", "rendered": "Beware: the functions in this module may raise exceptions! If you use them, you should be careful.", "breadcrumb": "Omd_parser"},
{"href": "./api/Omd_lexer.html#value-destring_of_tokens", "title": "destring_of_tokens", "contents": "Converts the tokens to a simple string representation useful for debugging.", "rendered": "Converts the tokens to a simple string representation useful for debugging.", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-destring_of_tokens", "title": "destring_of_tokens", "contents": "destring_of_tokens option int t string limit ", "rendered": "<h4 class='item'>let destring_of_tokens: (~?limit: option(int), <a href=\"./api/Omd_lexer.html#type-t\">t</a>) => string</h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-split_first", "title": "split_first", "contents": "is passed a single token.", "rendered": "is passed a single token.", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-split_first", "title": "split_first", "contents": "Raises: Invalid_argumentis passed a single token.\n\n", "rendered": "Raises: Invalid_argument<p>is passed a single token.</p>\n", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-split_first", "title": "split_first", "contents": "split_first(Xs n) returns (X, X(n-1)) where X is a token carrying an int count.", "rendered": "<code>split_first(Xs n)</code> returns <code>(X, X(n-1))</code> where <code>X</code> is a token carrying an int count.", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-split_first", "title": "split_first", "contents": "split_first token token token ", "rendered": "<h4 class='item'>let split_first: <a href=\"./api/Omd_lexer.html#type-token\">token</a> => (<a href=\"./api/Omd_lexer.html#type-token\">token</a>, <a href=\"./api/Omd_lexer.html#type-token\">token</a>)</h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-make_space", "title": "make_space", "contents": "make_space int token ", "rendered": "<h4 class='item'>let make_space: int => <a href=\"./api/Omd_lexer.html#type-token\">token</a></h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-string_of_token", "title": "string_of_token", "contents": "string_of_token tk return the string corresponding to the token tk.", "rendered": "<code>string_of_token tk</code> return the string corresponding to the token <code>tk</code>.", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-string_of_token", "title": "string_of_token", "contents": "string_of_token token string ", "rendered": "<h4 class='item'>let string_of_token: <a href=\"./api/Omd_lexer.html#type-token\">token</a> => string</h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-length", "title": "length", "contents": "length t number of characters of the string represented as t (i.e. String.length(string_of_token t)).", "rendered": "<code>length t</code> number of characters of the string represented as <code>t</code> (i.e. <code>String.length(string_of_token t)</code>).", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-length", "title": "length", "contents": "length token int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Omd_lexer.html#type-token\">token</a> => int</h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-string_of_tokens", "title": "string_of_tokens", "contents": "string_of_tokens t return the string corresponding to the token list t.", "rendered": "<code>string_of_tokens t</code> return the string corresponding to the token list <code>t</code>.", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-string_of_tokens", "title": "string_of_tokens", "contents": "string_of_tokens t string ", "rendered": "<h4 class='item'>let string_of_tokens: <a href=\"./api/Omd_lexer.html#type-t\">t</a> => string</h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-lex_bigarray", "title": "lex_bigarray", "contents": "As lex, but read input from a bigarray rather than from a string.", "rendered": "As lex, but read input from a bigarray rather than from a string.", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-lex_bigarray", "title": "lex_bigarray", "contents": "lex_bigarray bigstring t ", "rendered": "<h4 class='item'>let lex_bigarray: <a href=\"./api/Omd_lexer.html#type-bigstring\">bigstring</a> => <a href=\"./api/Omd_lexer.html#type-t\">t</a></h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#type-bigstring", "title": "bigstring", "contents": "bigstring Bigarray Array1 t char Bigarray int8_unsigned_elt Bigarray c_layout", "rendered": "<h4 class='item'>type bigstring = Bigarray.Array1.t(\n  char,\n  Bigarray.int8_unsigned_elt,\n  Bigarray.c_layout\n)</h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-lex", "title": "lex", "contents": "Translate a raw string into tokens for the parser. To implement an extension to the lexer, one may process its result before giving it to the parser. To implement an extension to the parser, one may extend it using the constructor Tag from type tok and/or using the extensions mechanism of the parser (cf. the optional argument extensions). The main difference is that Tag is processed by the parser in highest priority whereas functions in extensions are applied with lowest priority.", "rendered": "Translate a raw string into tokens for the parser. To implement an extension to the lexer, one may process its result before giving it to the parser. To implement an extension to the parser, one may extend it using the constructor <code>Tag</code> from type <code>tok</code> and/or using the extensions mechanism of the parser (cf. the optional argument <code>extensions</code>). The main difference is that <code>Tag</code> is processed by the parser in highest priority whereas functions in <code>extensions</code> are applied with lowest priority.", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#value-lex", "title": "lex", "contents": "lex string t ", "rendered": "<h4 class='item'>let lex: string => <a href=\"./api/Omd_lexer.html#type-t\">t</a></h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#type-t", "title": "t", "contents": "t list token", "rendered": "<h4 class='item'>type t = list(<a href=\"./api/Omd_lexer.html#type-token\">token</a>)</h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#type-token", "title": "token", "contents": "token tok", "rendered": "<h4 class='item'>type token = <a href=\"./api/Omd_representation.html#type-tok\" title=\"Omd_representation.tok\">tok</a></h4>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html", "title": "Omd_lexer", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html", "title": "Omd_lexer", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_lexer.html#Omd_lexer", "title": "Omd_lexer", "contents": "", "rendered": "", "breadcrumb": "Omd_lexer"},
{"href": "./api/Omd_html.html#value-to_string", "title": "to_string", "contents": "to_string list html_node string ", "rendered": "<h4 class='item'>let to_string: list(<a href=\"./api/Omd_html.html#type-html_node\">html_node</a>) => string</h4>", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html#type-attribute", "title": "attribute", "contents": "attribute string option string", "rendered": "<h4 class='item'>type attribute = (string, option(string))</h4>", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html#type-attributes", "title": "attributes", "contents": "attributes list attribute", "rendered": "<h4 class='item'>type attributes = list(<a href=\"./api/Omd_html.html#type-attribute\">attribute</a>)</h4>", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html#type-nodename", "title": "nodename", "contents": "nodename string", "rendered": "<h4 class='item'>type nodename = string</h4>", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html#type-html_node", "title": "html_node", "contents": "html_node nodename attributes html string string string", "rendered": "<h4 class='item'>type html_node = \n  | Node(<a href=\"./api/Omd_html.html#type-nodename\">nodename</a>, <a href=\"./api/Omd_html.html#type-attributes\">attributes</a>, <a href=\"./api/Omd_html.html#type-html\">html</a>)\n  | Data(string)\n  | Rawdata(string)\n  | Comment(string)\n</h4>", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html#type-html", "title": "html", "contents": "html list html_node", "rendered": "<h4 class='item'>type html = list(<a href=\"./api/Omd_html.html#type-html_node\">html_node</a>)</h4>", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html", "title": "Omd_html", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html", "title": "Omd_html", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_html.html#Omd_html", "title": "Omd_html", "contents": "", "rendered": "", "breadcrumb": "Omd_html"},
{"href": "./api/Omd_backend.html#value-sexpr_of_md", "title": "sexpr_of_md", "contents": "sexpr_of_md md is basically the same as html_of_md md but with the output in s-expressions rather than HTML. This is mainly used for debugging.", "rendered": "<code>sexpr_of_md md</code> is basically the same as <code>html_of_md md</code> but with the output in s-expressions rather than HTML. This is mainly used for debugging.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-sexpr_of_md", "title": "sexpr_of_md", "contents": "sexpr_of_md Omd_representation t string ", "rendered": "<h4 class='item'>let sexpr_of_md: <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a> => string</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-markdown_of_md", "title": "markdown_of_md", "contents": "markdown_of_md md is basically the same as html_of_md md but with the output in Markdown syntax rather than HTML.", "rendered": "<code>markdown_of_md md</code> is basically the same as <code>html_of_md md</code> but with the output in Markdown syntax rather than HTML.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-markdown_of_md", "title": "markdown_of_md", "contents": "markdown_of_md Omd_representation t string ", "rendered": "<h4 class='item'>let markdown_of_md: <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a> => string</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-text_of_md", "title": "text_of_md", "contents": "text_of_md md is basically the same as html_of_md md but without the HTML tags in the output.", "rendered": "<code>text_of_md md</code> is basically the same as <code>html_of_md md</code> but without the HTML tags in the output.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-text_of_md", "title": "text_of_md", "contents": "text_of_md Omd_representation t string ", "rendered": "<h4 class='item'>let text_of_md: <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a> => string</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-escape_markdown_characters", "title": "escape_markdown_characters", "contents": "escape_markdown_characters s returns a string where markdown-significant characters in s have been backslash-escaped. Note that escape_markdown_characters takes a &quot;raw&quot; string, therefore it doesn&#39;t have the whole context in which the string appears, thus the escaping cannot really be minimal. However the implementation tries to minimalise the extra escaping.", "rendered": "<code>escape_markdown_characters s</code> returns a string where markdown-significant characters in <code>s</code> have been backslash-escaped. Note that <code>escape_markdown_characters</code> takes a &quot;raw&quot; string, therefore it doesn&#39;t have the whole context in which the string appears, thus the escaping cannot really be minimal. However the implementation tries to minimalise the extra escaping.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-escape_markdown_characters", "title": "escape_markdown_characters", "contents": "escape_markdown_characters string string ", "rendered": "<h4 class='item'>let escape_markdown_characters: string => string</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-html_and_headers_of_md", "title": "html_and_headers_of_md", "contents": "html_and_headers_of_md md is the same as (html_of_md md,\n    headers_of_md md) except that it&#39;s two times faster. If you need both headers and html, don&#39;t use html_of_md and headers_of_md but this function instead. If remove_header_links, then remove links inside headers (h1, h2, ...). Default value of remove_header_links: false.", "rendered": "<code>html_and_headers_of_md md</code> is the same as <code>(html_of_md md,\n    headers_of_md md)</code> except that it&#39;s two times faster. If you need both headers and html, don&#39;t use <code>html_of_md</code> and <code>headers_of_md</code> but this function instead. If <code>remove_header_links</code>, then remove links inside headers (h1, h2, ...). Default value of <code>remove_header_links</code>: false.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-html_and_headers_of_md", "title": "html_and_headers_of_md", "contents": "html_and_headers_of_md option bool option element option string  option bool option bool option code_stylist Omd_representation t string list element elt string remove_header_links override pindent nl2br cs ", "rendered": "<h4 class='item'>let html_and_headers_of_md: (\n  ~?remove_header_links: option(bool),\n  ~?override: option(<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string)),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(<a href=\"./api/Omd_backend.html#type-code_stylist\">code_stylist</a>),\n  <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a>\n) => (string, list((<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a>, <a href=\"./api/Omd_utils.html#type-StringSet.elt\" title=\"Omd_utils.StringSet.elt\">elt</a>, string)))</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-headers_of_md", "title": "headers_of_md", "contents": "headers_of_md md returns a list of 3-tuples; in each of them the first element is the header (e.g., H1(foo)), the second is the HTML id (as produced by html_of_md), and the third element is the HTML version of foo. The third elements of those 3-tuples exist because if you use html_and_headers_of_md, then you have the guarantee that the HTML version of foo is the same for both the headers and the HTML version of md. If remove_header_links, then remove links inside headers (h1, h2, ...). Default value of remove_header_links: cf. html_and_headers_of_md.", "rendered": "<code>headers_of_md md</code> returns a list of 3-tuples; in each of them the first element is the header (e.g., <code>H1(foo)</code>), the second is the HTML id (as produced by <code>html_of_md</code>), and the third element is the HTML version of <code>foo</code>. The third elements of those 3-tuples exist because if you use <code>html_and_headers_of_md</code>, then you have the guarantee that the HTML version of <code>foo</code> is the same for both the headers and the HTML version of <code>md</code>. If <code>remove_header_links</code>, then remove links inside headers (h1, h2, ...). Default value of <code>remove_header_links</code>: cf. <code>html_and_headers_of_md</code>.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-headers_of_md", "title": "headers_of_md", "contents": "headers_of_md option bool Omd_representation t list element string string remove_header_links ", "rendered": "<h4 class='item'>let headers_of_md: (\n  ~?remove_header_links: option(bool),\n  <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a>\n) => list((<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a>, string, string))</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-html_of_md", "title": "html_of_md", "contents": "let customized_to_html = Omd.html_of_md ~override:(function | Url (href,s,title) -&gt; Some(&quot;&lt;a href=&#39;&quot; ^ (Omd_utils.htmlentities ~md:true href) ^ &quot;&#39;&quot; ^ (if title &lt;&gt; &quot;&quot; then &quot; title=&#39;&quot; ^ (Omd_utils.htmlentities ~md:true title) ^ &quot;&#39;&quot; else &quot;&quot;) ^ &quot;&gt;&quot; ^ Omd_backend.html_of_md s ^ &quot; target=&#39;_blank&#39;&lt;/a&gt;&quot;) | _ -&gt; None)", "rendered": "let customized_to_html = Omd.html_of_md ~override:(function | Url (href,s,title) -&gt; Some(&quot;&lt;a href=&#39;&quot; ^ (Omd_utils.htmlentities ~md:true href) ^ &quot;&#39;&quot; ^ (if title &lt;&gt; &quot;&quot; then &quot; title=&#39;&quot; ^ (Omd_utils.htmlentities ~md:true title) ^ &quot;&#39;&quot; else &quot;&quot;) ^ &quot;&gt;&quot; ^ Omd_backend.html_of_md s ^ &quot; target=&#39;_blank&#39;&lt;/a&gt;&quot;) | _ -&gt; None)", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-html_of_md", "title": "html_of_md", "contents": "The optional parameter override allows to override an precise behaviour for a constructor of Omd_representation.element, as in the following example:", "rendered": "The optional parameter <code>override</code> allows to override an precise behaviour for a constructor of Omd_representation.element, as in the following example:", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-html_of_md", "title": "html_of_md", "contents": "html_of_md md returns a string containing the HTML version of md. Note that md uses the internal representation of Markdown.", "rendered": "<code>html_of_md md</code> returns a string containing the HTML version of <code>md</code>. Note that <code>md</code> uses the internal representation of Markdown.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-html_of_md", "title": "html_of_md", "contents": "html_of_md option element option string  option bool option bool option code_stylist Omd_representation t string override pindent nl2br cs ", "rendered": "<h4 class='item'>let html_of_md: (\n  ~?override: option(<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string)),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(<a href=\"./api/Omd_backend.html#type-code_stylist\">code_stylist</a>),\n  <a href=\"./api/Omd_representation.html\">Omd_representation</a>.<a href=\"./api/Omd_representation.html#type-t\">t</a>\n) => string</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-default_language", "title": "default_language", "contents": "default language for code blocks can be set to any name, by default it is the empty string", "rendered": "default language for code blocks can be set to any name, by default it is the empty string", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#value-default_language", "title": "default_language", "contents": "default_language Pervasives ref string", "rendered": "<h4 class='item'>let default_language: Pervasives.ref(string)</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#type-code_stylist", "title": "code_stylist", "contents": "Function that takes a language name and some code and returns that code with style.", "rendered": "Function that takes a language name and some code and returns that code with style.", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#type-code_stylist", "title": "code_stylist", "contents": "code_stylist string string string lang ", "rendered": "<h4 class='item'>type code_stylist = (~lang: string, string) => string</h4>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html", "title": "Omd_backend", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html", "title": "Omd_backend", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd_backend.html#Omd_backend", "title": "Omd_backend", "contents": "", "rendered": "", "breadcrumb": "Omd_backend"},
{"href": "./api/Omd.html#value-toc", "title": "toc", "contents": "gives the section for which the TOC must be built. For example ~start:[2;3] will build the TOC for subsections of the second H1 header, and within that section, the third h2 header. If a number is 0, it means to look for the first section at that level but stop if one encounters any other subsection. If no subsection exists, an empty TOC [] will be returned. Default: [] i.e. list all sections, starting with the first H1.", "rendered": "gives the section for which the TOC must be built. For example <code>~start:[2;3]</code> will build the TOC for subsections of the second <code>H1</code> header, and within that section, the third <code>h2</code> header. If a number is <code>0</code>, it means to look for the first section at that level but stop if one encounters any other subsection. If no subsection exists, an empty TOC <code>[]</code> will be returned. Default: <code>[]</code> i.e. list all sections, starting with the first <code>H1</code>.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-toc", "title": "toc", "contents": "the table of contents. Default: 2.", "rendered": "the table of contents. Default: <code>2</code>.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-toc", "title": "toc", "contents": "Param: depththe table of contents. Default: 2.\n\n", "rendered": "Param: depth<p>the table of contents. Default: <code>2</code>.</p>\n", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-toc", "title": "toc", "contents": "Param: startgives the section for which the TOC must be built. For example ~start:[2;3] will build the TOC for subsections of the second H1 header, and within that section, the third h2 header. If a number is 0, it means to look for the first section at that level but stop if one encounters any other subsection. If no subsection exists, an empty TOC [] will be returned. Default: [] i.e. list all sections, starting with the first H1.\n\n", "rendered": "Param: start<p>gives the section for which the TOC must be built. For example <code>~start:[2;3]</code> will build the TOC for subsections of the second <code>H1</code> header, and within that section, the third <code>h2</code> header. If a number is <code>0</code>, it means to look for the first section at that level but stop if one encounters any other subsection. If no subsection exists, an empty TOC <code>[]</code> will be returned. Default: <code>[]</code> i.e. list all sections, starting with the first <code>H1</code>.</p>\n", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-toc", "title": "toc", "contents": "toc md returns toc a table of contents for md.", "rendered": "<code>toc md</code> returns <code>toc</code> a table of contents for <code>md</code>.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-toc", "title": "toc", "contents": "toc option list int option int t t start depth ", "rendered": "<h4 class='item'>let toc: (\n  ~?start: option(list(int)),\n  ~?depth: option(int),\n  <a href=\"./api/Omd.html#type-t\">t</a>\n) => <a href=\"./api/Omd.html#type-t\">t</a></h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#Tansforming-Markdown-documents", "title": "Tansforming Markdown documents", "contents": "", "rendered": "", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-to_text", "title": "to_text", "contents": "Translate markdown representation into raw text.", "rendered": "Translate markdown representation into raw text.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-to_text", "title": "to_text", "contents": "to_text t string ", "rendered": "<h4 class='item'>let to_text: <a href=\"./api/Omd.html#type-t\">t</a> => string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-to_markdown", "title": "to_markdown", "contents": "Translate markdown representation into textual markdown.", "rendered": "Translate markdown representation into textual markdown.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-to_markdown", "title": "to_markdown", "contents": "to_markdown t string ", "rendered": "<h4 class='item'>let to_markdown: <a href=\"./api/Omd.html#type-t\">t</a> => string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-to_html", "title": "to_html", "contents": "Translate markdown representation into raw HTML. If you need a full HTML representation, you mainly have to figure out how to convert Html of string and Html_block of string into your HTML representation.", "rendered": "Translate markdown representation into raw HTML. If you need a full HTML representation, you mainly have to figure out how to convert <code>Html of string</code> and <code>Html_block of string</code> into your HTML representation.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-to_html", "title": "to_html", "contents": "to_html option element option string  option bool option bool option code_stylist t string override pindent nl2br cs ", "rendered": "<h4 class='item'>let to_html: (\n  ~?override: option(<a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a> => option(string)),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(<a href=\"./api/Omd.html#type-code_stylist\">code_stylist</a>),\n  <a href=\"./api/Omd.html#type-t\">t</a>\n) => string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-set_default_lang", "title": "set_default_lang", "contents": "set_default_lang lang md return a copy of md where the language of all Code or Code_block with an empty language is set to lang.", "rendered": "<code>set_default_lang lang md</code> return a copy of <code>md</code> where the language of all <code>Code</code> or <code>Code_block</code> with an empty language is set to <code>lang</code>.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-set_default_lang", "title": "set_default_lang", "contents": "set_default_lang name t t  ", "rendered": "<h4 class='item'>let set_default_lang: (<a href=\"./api/Omd.html#type-name\">name</a>, <a href=\"./api/Omd.html#type-t\">t</a>) => <a href=\"./api/Omd.html#type-t\">t</a></h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-of_bigarray", "title": "of_bigarray", "contents": "As of_string, but read input from a bigarray rather than from a string.", "rendered": "As of_string, but read input from a bigarray rather than from a string.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-of_bigarray", "title": "of_bigarray", "contents": "of_bigarray option extensions option name bigstring t extensions default_lang ", "rendered": "<h4 class='item'>let of_bigarray: (\n  ~?extensions: option(<a href=\"./api/Omd_representation.html#type-extensions\" title=\"Omd_representation.extensions\">extensions</a>),\n  ~?default_lang: option(<a href=\"./api/Omd.html#type-name\">name</a>),\n  <a href=\"./api/Omd_lexer.html#type-bigstring\" title=\"Omd_lexer.bigstring\">bigstring</a>\n) => <a href=\"./api/Omd.html#type-t\">t</a></h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-of_string", "title": "of_string", "contents": "If you want to use a custom lexer or parser, use lex and parse.", "rendered": "If you want to use a custom lexer or parser, use lex and parse.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-of_string", "title": "of_string", "contents": "language for blocks of code where it was not specified. Default: &quot;&quot;.", "rendered": "language for blocks of code where it was not specified. Default: <code>&quot;&quot;</code>.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-of_string", "title": "of_string", "contents": "Param: langlanguage for blocks of code where it was not specified. Default: &quot;&quot;.\n\nIf you want to use a custom lexer or parser, use lex and parse.\n\n", "rendered": "Param: lang<p>language for blocks of code where it was not specified. Default: <code>&quot;&quot;</code>.</p>\n<p>If you want to use a custom lexer or parser, use lex and parse.</p>\n", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-of_string", "title": "of_string", "contents": "of_string s returns the Markdown representation of the string s.", "rendered": "<code>of_string s</code> returns the Markdown representation of the string <code>s</code>.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#value-of_string", "title": "of_string", "contents": "of_string option extensions option name string t extensions default_lang ", "rendered": "<h4 class='item'>let of_string: (\n  ~?extensions: option(<a href=\"./api/Omd_representation.html#type-extensions\" title=\"Omd_representation.extensions\">extensions</a>),\n  ~?default_lang: option(<a href=\"./api/Omd.html#type-name\">name</a>),\n  string\n) => <a href=\"./api/Omd.html#type-t\">t</a></h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#Input-and-Output", "title": "Input and Output", "contents": "", "rendered": "", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-code_stylist", "title": "code_stylist", "contents": "Function that takes a language name and some code and returns that code with style.", "rendered": "Function that takes a language name and some code and returns that code with style.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-code_stylist", "title": "code_stylist", "contents": "code_stylist string string string lang ", "rendered": "<h4 class='item'>type code_stylist = (~lang: string, string) => string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-title", "title": "title", "contents": "HTML attribute.", "rendered": "HTML attribute.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-title", "title": "title", "contents": "title string", "rendered": "<h4 class='item'>type title = string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-href", "title": "href", "contents": "HTML attribute.", "rendered": "HTML attribute.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-href", "title": "href", "contents": "href string", "rendered": "<h4 class='item'>type href = string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-src", "title": "src", "contents": "HTML attribute.", "rendered": "HTML attribute.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-src", "title": "src", "contents": "src string", "rendered": "<h4 class='item'>type src = string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-alt", "title": "alt", "contents": "HTML img tag attribute.", "rendered": "HTML img tag attribute.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-alt", "title": "alt", "contents": "alt string", "rendered": "<h4 class='item'>type alt = string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-name", "title": "name", "contents": "Markdown reference name.", "rendered": "Markdown reference name.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-name", "title": "name", "contents": "name string", "rendered": "<h4 class='item'>type name = string</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-fallback", "title": "fallback", "contents": "Fallback for references in case they refer to non-existant references", "rendered": "Fallback for references in case they refer to non-existant references", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-fallback", "title": "fallback", "contents": "fallback ", "rendered": "<h4 class='item'>type fallback = &lt; to_string : string; to_t : t &gt;</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-element", "title": "element", "contents": "A element of a Markdown document.", "rendered": "A element of a Markdown document.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-element", "title": "element", "contents": "element t t t t t t t string t t list t list t list t list t name string name string href t title ref_container name string fallback ref_container name alt fallback name list string option string t name list string option string t string string string t alt src title element", "rendered": "<h4 class='item'>type element = \n  | H1(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | H2(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | H3(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | H4(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | H5(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | H6(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | Paragraph(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | Text(string)\n  | Emph(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | Bold(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | Ul(list(<a href=\"./api/Omd.html#type-t\">t</a>))\n  | Ol(list(<a href=\"./api/Omd.html#type-t\">t</a>))\n  | Ulp(list(<a href=\"./api/Omd.html#type-t\">t</a>))\n  | Olp(list(<a href=\"./api/Omd.html#type-t\">t</a>))\n  | Code(<a href=\"./api/Omd.html#type-name\">name</a>, string)\n  | Code_block(<a href=\"./api/Omd.html#type-name\">name</a>, string)\n  | Br\n  | Hr\n  | NL\n  | Url(<a href=\"./api/Omd.html#type-href\">href</a>, <a href=\"./api/Omd.html#type-t\">t</a>, <a href=\"./api/Omd.html#type-title\">title</a>)\n  | Ref(<a href=\"./api/Omd.html#type-ref_container\">ref_container</a>, <a href=\"./api/Omd.html#type-name\">name</a>, string, <a href=\"./api/Omd.html#type-fallback\">fallback</a>)\n  | Img_ref(<a href=\"./api/Omd.html#type-ref_container\">ref_container</a>, <a href=\"./api/Omd.html#type-name\">name</a>, <a href=\"./api/Omd.html#type-alt\">alt</a>, <a href=\"./api/Omd.html#type-fallback\">fallback</a>)\n  | Html(<a href=\"./api/Omd.html#type-name\">name</a>, list((string, option(string))), <a href=\"./api/Omd.html#type-t\">t</a>)\n  | Html_block(<a href=\"./api/Omd.html#type-name\">name</a>, list((string, option(string))), <a href=\"./api/Omd.html#type-t\">t</a>)\n  | Html_comment(string)\n  | Raw(string)\n  | Raw_block(string)\n  | Blockquote(<a href=\"./api/Omd.html#type-t\">t</a>)\n  | Img(<a href=\"./api/Omd.html#type-alt\">alt</a>, <a href=\"./api/Omd.html#type-src\">src</a>, <a href=\"./api/Omd.html#type-title\">title</a>)\n  | X(\n    &lt; name : string;\n  to_html : ?indent:int -&gt; (t -&gt; string) -&gt; t -&gt; string option;\n  to_sexpr : (t -&gt; string) -&gt; t -&gt; string option; to_t : t -&gt; t option &gt;\n  )\n = <a href=\"./api/Omd_representation.html#type-element\" title=\"Omd_representation.element\">element</a></h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-ref_container", "title": "ref_container", "contents": "ref_container ", "rendered": "<h4 class='item'>type ref_container = &lt; add_ref : string -&gt; string -&gt; string -&gt; unit;\n  get_all : (string * (string * string)) list;\n  get_ref : string -&gt; (string * string) option &gt;</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-t", "title": "t", "contents": "Representation of a Markdown document.", "rendered": "Representation of a Markdown document.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#type-t", "title": "t", "contents": "t list element", "rendered": "<h4 class='item'>type t = list(<a href=\"./api/Omd.html#type-element\">element</a>)</h4>", "breadcrumb": "Omd"},
{"href": "./api/Omd.html#Representation-of-Markdown-documents", "title": "Representation of Markdown documents", "contents": "", "rendered": "", "breadcrumb": "Omd"},
{"href": "./api/Omd.html", "title": "Omd", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Omd"},
{"href": "./api/Omd.html", "title": "Omd", "contents": "N.B. This module is supposed to be reentrant, if it&#39;s not then please report the bug.", "rendered": "N.B. This module is supposed to be reentrant, if it&#39;s not then please report the bug.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html", "title": "Omd", "contents": "If you want to extend the Markdown parser, you can do it without accessing any module of this library but this one, and by doing so, you are free from having to maintain a fork of this library.", "rendered": "If you want to extend the Markdown parser, you can do it without accessing any module of this library but this one, and by doing so, you are free from having to maintain a fork of this library.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html", "title": "Omd", "contents": "Its main purpose is to allow you to use the Markdown library while keeping you away from the other modules.", "rendered": "Its main purpose is to allow you to use the Markdown library while keeping you away from the other modules.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html", "title": "Omd", "contents": "This module represents this entire Markdown library written in OCaml only.", "rendered": "This module represents this entire Markdown library written in OCaml only.", "breadcrumb": "Omd"},
{"href": "./api/Omd.html", "title": "Omd", "contents": "A markdown parser in OCaml, with no extra dependencies.", "rendered": "A markdown parser in OCaml, with no extra dependencies.", "breadcrumb": "Omd"},
{"href": "./api/Html_characters.html#value-characters_htmlentities_descriptions", "title": "characters_htmlentities_descriptions", "contents": "characters_htmlentities_descriptions list string string string", "rendered": "<h4 class='item'>let characters_htmlentities_descriptions: list(\n  (string, string, string)\n)</h4>", "breadcrumb": "Html_characters"},
{"href": "./api/Html_characters.html", "title": "Html_characters", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Html_characters"},
{"href": "./api/Html_characters.html", "title": "Html_characters", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Html_characters"},
{"href": "./api/Html_characters.html#Html_characters", "title": "Html_characters", "contents": "", "rendered": "", "breadcrumb": "Html_characters"},
{"href": "./api/Token.html#value-describe", "title": "describe", "contents": "describe string ", "rendered": "<h4 class='item'>let describe: [&lt; `Begin_link_with_replacement_text of string & 'm\n | `Begin_list of [ `Ordered | `Unordered ] & [&lt; `Ordered | `Unordered ]\n | `Begin_list_item of [ `Dash | `Li ] & [&lt; `Dash | `Li ]\n | `Begin_reference_with_replacement_text of string & 'n\n | `Begin_section_heading of int * string option & int * 'o\n | `Begin_style of\n     Comment.style &\n     [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]\n | `Blank_line\n | `Code_block of string & 'p\n | `Code_span of string & 'q\n | `Comment\n | `Doc of string & 'r\n | `End\n | `Example of string * string & 's\n | `Minus\n | `Modules of string & 't\n | `Plus\n | `Right_brace\n | `Simple_link of string & 'u\n | `Simple_reference of string & 'v\n | `Single_newline\n | `Space\n | `Tag of\n     [ `Author of string\n     | `Before of string\n     | `Canonical of string\n     | `Closed\n     | `Deprecated\n     | `Inline\n     | `Open\n     | `Param of string\n     | `Raise of string\n     | `Return\n     | `See of [ `Document | `File | `Url ] * string\n     | `Since of string\n     | `Version of string ] &\n     [&lt; `Author of 'w\n      | `Before of 'x\n      | `Canonical of 'y\n      | `Closed\n      | `Deprecated\n      | `Inline\n      | `Open\n      | `Param of 'z\n      | `Raise of 'a1\n      | `Return\n      | `See of 'b1\n      | `Since of 'c1\n      | `Version of 'd1 ]\n | `Verbatim of string & 'e1\n | `Word of string ] => string</h4>", "breadcrumb": "Token"},
{"href": "./api/Token.html#value-print", "title": "print", "contents": "print string ", "rendered": "<h4 class='item'>let print: [&lt; `Begin_link_with_replacement_text of string & 'a\n | `Begin_list_item of [ `Dash | `Li ] & [&lt; `Dash | `Li ]\n | `Begin_reference_with_replacement_text of string & 'b\n | `Begin_section_heading of int * string option\n | `Begin_style of\n     Comment.style &\n     [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]\n | `Doc of string & 'c\n | `Example of string * string & 'd\n | `Minus\n | `Plus\n | `Tag of\n     [ `Author of string\n     | `Before of string\n     | `Canonical of string\n     | `Closed\n     | `Deprecated\n     | `Inline\n     | `Open\n     | `Param of string\n     | `Raise of string\n     | `Return\n     | `See of [ `Document | `File | `Url ] * string\n     | `Since of string\n     | `Version of string ] &\n     [&lt; `Author of 'e\n      | `Before of 'f\n      | `Canonical of 'g\n      | `Closed\n      | `Deprecated\n      | `Inline\n      | `Open\n      | `Param of 'h\n      | `Raise of 'i\n      | `Return\n      | `See of 'j\n      | `Since of 'k\n      | `Version of 'l ] ] => string</h4>", "breadcrumb": "Token"},
{"href": "./api/Token.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t = [ `Code_span of string\n| `Begin_style of Comment.style\n| `Tag of\n    [ `Param of string\n    | `Return\n    | `See of [ `Url | `Document | `File ] * string\n    | `Closed\n    | `Open\n    | `Before of string\n    | `Canonical of string\n    | `Version of string\n    | `Deprecated\n    | `Inline\n    | `Raise of string\n    | `Since of string\n    | `Author of string ]\n| `Simple_link of string\n| `Word of string\n| `Begin_section_heading of int * string option\n| `Right_brace\n| `Minus\n| `Doc of string\n| `Modules of string\n| `Begin_reference_with_replacement_text of string\n| `Begin_list of [ `Unordered | `Ordered ]\n| `End\n| `Example of string * string\n| `Code_block of string\n| `Space\n| `Verbatim of string\n| `Plus\n| `Begin_list_item of [ `Dash | `Li ]\n| `Begin_link_with_replacement_text of string\n| `Blank_line\n| `Simple_reference of string\n| `Single_newline ]</h4>", "breadcrumb": "Token"},
{"href": "./api/Token.html#type-tag", "title": "tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag = [ `Tag of\n    [ `Param of string\n    | `Return\n    | `See of [ `Url | `Document | `File ] * string\n    | `Closed\n    | `Open\n    | `Before of string\n    | `Canonical of string\n    | `Version of string\n    | `Deprecated\n    | `Inline\n    | `Raise of string\n    | `Since of string\n    | `Author of string ] ]</h4>", "breadcrumb": "Token"},
{"href": "./api/Token.html#type-section_heading", "title": "section_heading", "contents": "section_heading ", "rendered": "<h4 class='item'>type section_heading = [ `Begin_section_heading of int * string option ]</h4>", "breadcrumb": "Token"},
{"href": "./api/Token.html", "title": "Token", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Token"},
{"href": "./api/Token.html", "title": "Token", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Token"},
{"href": "./api/Token.html#Token", "title": "Token", "contents": "", "rendered": "", "breadcrumb": "Token"},
{"href": "./api/Syntax.html#value-parse", "title": "parse", "contents": "parse Stream t with_location Token t result docs Error t ", "rendered": "<h4 class='item'>let parse: Stream.t(<a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>(<a href=\"./api/Token.html\">Token</a>.<a href=\"./api/Token.html#type-t\">t</a>)) => <a href=\"./api/Error.html#type-result\" title=\"Error.result\">result</a>(\n  <a href=\"./api/Ast.html#type-docs\" title=\"Ast.docs\">docs</a>,\n  <a href=\"./api/Error.html\">Error</a>.<a href=\"./api/Error.html#type-t\">t</a>\n)</h4>", "breadcrumb": "Syntax"},
{"href": "./api/Syntax.html", "title": "Syntax", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Syntax"},
{"href": "./api/Syntax.html", "title": "Syntax", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Syntax"},
{"href": "./api/Syntax.html#Syntax", "title": "Syntax", "contents": "", "rendered": "", "breadcrumb": "Syntax"},
{"href": "./api/Semantics.html#value-ast_to_comment", "title": "ast_to_comment", "contents": "ast_to_comment bool sections_allowed label_parent docs with_warnings result docs Error t permissive sections_allowed parent_of_sections ", "rendered": "<h4 class='item'>let ast_to_comment: (\n  ~permissive: bool,\n  ~sections_allowed: <a href=\"./api/Ast.html#type-sections_allowed\" title=\"Ast.sections_allowed\">sections_allowed</a>,\n  ~parent_of_sections: <a href=\"./api/Paths.html#type-Identifier.label_parent\" title=\"Paths.Identifier.label_parent\">label_parent</a>,\n  <a href=\"./api/Ast.html#type-docs\" title=\"Ast.docs\">docs</a>\n) => <a href=\"./api/Error.html#type-with_warnings\" title=\"Error.with_warnings\">with_warnings</a>(<a href=\"./api/Error.html#type-result\" title=\"Error.result\">result</a>(<a href=\"./api/Comment.html#type-docs\" title=\"Comment.docs\">docs</a>, <a href=\"./api/Error.html\">Error</a>.<a href=\"./api/Error.html#type-t\">t</a>))</h4>", "breadcrumb": "Semantics"},
{"href": "./api/Semantics.html", "title": "Semantics", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Semantics"},
{"href": "./api/Semantics.html", "title": "Semantics", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Semantics"},
{"href": "./api/Semantics.html#Semantics", "title": "Semantics", "contents": "", "rendered": "", "breadcrumb": "Semantics"},
{"href": "./api/Root.html#value-contains_double_underscore", "title": "contains_double_underscore", "contents": "contains_double_underscore string bool ", "rendered": "<h4 class='item'>let contains_double_underscore: string => bool</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#value-to_string", "title": "to_string", "contents": "to_string t string ", "rendered": "<h4 class='item'>let to_string: <a href=\"./api/Root.html#type-t\">t</a> => string</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#value-hash", "title": "hash", "contents": "hash t int ", "rendered": "<h4 class='item'>let hash: <a href=\"./api/Root.html#type-t\">t</a> => int</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#value-equal", "title": "equal", "contents": "equal t t bool  ", "rendered": "<h4 class='item'>let equal: (<a href=\"./api/Root.html#type-t\">t</a>, <a href=\"./api/Root.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#type-t", "title": "t", "contents": "t package Package t file Odoc_file t digest Digest t", "rendered": "<h4 class='item'>type t = {\n  package: <a href=\"./api/Root.html#module-Package\">Package</a>.<a href=\"./api/Root.html#type-Package.t\">t</a>,\n  file: <a href=\"./api/Root.html#module-Odoc_file\">Odoc_file</a>.<a href=\"./api/Root.html#type-Odoc_file.t\">t</a>,\n  digest: Digest.t\n}</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#value-Odoc_file.name", "title": "Odoc_file.name", "contents": "name t string ", "rendered": "<h4 class='item'>let name: <a href=\"./api/Root.html#type-Odoc_file.t\">t</a> => string</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#value-Odoc_file.create_page", "title": "Odoc_file.create_page", "contents": "create_page string t ", "rendered": "<h4 class='item'>let create_page: string => <a href=\"./api/Root.html#type-Odoc_file.t\">t</a></h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#value-Odoc_file.create_unit", "title": "Odoc_file.create_unit", "contents": "create_unit bool string t force_hidden ", "rendered": "<h4 class='item'>let create_unit: (~force_hidden: bool, string) => <a href=\"./api/Root.html#type-Odoc_file.t\">t</a></h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#type-Odoc_file.t", "title": "Odoc_file.t", "contents": "t string m", "rendered": "<h4 class='item'>type t = | Page(string) | Compilation_unit(<a href=\"./api/Root.html#type-Odoc_file.m\">m</a>)\n</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#type-Odoc_file.m", "title": "Odoc_file.m", "contents": "m name string hidden bool", "rendered": "<h4 class='item'>type m = {name: string, hidden: bool}</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#module-Odoc_file", "title": "Odoc_file", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Root"},
{"href": "./api/Root.html#module-Odoc_file", "title": "Odoc_file", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Root"},
{"href": "./api/Root.html#type-Package.t", "title": "Package.t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "Root"},
{"href": "./api/Root.html#module-Package", "title": "Package", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Root"},
{"href": "./api/Root.html#module-Package", "title": "Package", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Root"},
{"href": "./api/Root.html", "title": "Root", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Root"},
{"href": "./api/Root.html", "title": "Root", "contents": "t are used by doc-ock (at the root of every resolved path/identifier/reference) and present at the beginning of every .odoc file.", "rendered": "t are used by doc-ock (at the root of every resolved path/identifier/reference) and present at the beginning of every <code>.odoc</code> file.", "breadcrumb": "Root"},
{"href": "./api/Root.html", "title": "Root", "contents": "A root can be seen as a unique representative of a odoc file.", "rendered": "A root can be seen as a unique representative of a odoc file.", "breadcrumb": "Root"},
{"href": "./api/Paths_types.html#type-Identifier.reference_page", "title": "Identifier.reference_page", "contents": "reference_page t reference_page", "rendered": "<h4 class='item'>type reference_page = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_page\" title=\"Kind.reference_page\">reference_page</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_label", "title": "Identifier.reference_label", "contents": "reference_label t reference_label", "rendered": "<h4 class='item'>type reference_label = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_label\" title=\"Kind.reference_label\">reference_label</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_instance_variable", "title": "Identifier.reference_instance_variable", "contents": "reference_instance_variable t reference_instance_variable", "rendered": "<h4 class='item'>type reference_instance_variable = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n  <a href=\"./api/Paths_types.html#type-Kind.reference_instance_variable\" title=\"Kind.reference_instance_variable\">reference_instance_variable</a>\n)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_method", "title": "Identifier.reference_method", "contents": "reference_method t reference_method", "rendered": "<h4 class='item'>type reference_method = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_method\" title=\"Kind.reference_method\">reference_method</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_class_type", "title": "Identifier.reference_class_type", "contents": "reference_class_type t reference_class_type", "rendered": "<h4 class='item'>type reference_class_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_class_type\" title=\"Kind.reference_class_type\">reference_class_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_class", "title": "Identifier.reference_class", "contents": "reference_class t reference_class", "rendered": "<h4 class='item'>type reference_class = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_class\" title=\"Kind.reference_class\">reference_class</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_value", "title": "Identifier.reference_value", "contents": "reference_value t reference_value", "rendered": "<h4 class='item'>type reference_value = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_value\" title=\"Kind.reference_value\">reference_value</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_exception", "title": "Identifier.reference_exception", "contents": "reference_exception t reference_exception", "rendered": "<h4 class='item'>type reference_exception = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_exception\" title=\"Kind.reference_exception\">reference_exception</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_extension", "title": "Identifier.reference_extension", "contents": "reference_extension t reference_extension", "rendered": "<h4 class='item'>type reference_extension = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_extension\" title=\"Kind.reference_extension\">reference_extension</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_field", "title": "Identifier.reference_field", "contents": "reference_field t reference_field", "rendered": "<h4 class='item'>type reference_field = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_field\" title=\"Kind.reference_field\">reference_field</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_constructor", "title": "Identifier.reference_constructor", "contents": "reference_constructor t reference_constructor", "rendered": "<h4 class='item'>type reference_constructor = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_constructor\" title=\"Kind.reference_constructor\">reference_constructor</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_type", "title": "Identifier.reference_type", "contents": "reference_type t reference_type", "rendered": "<h4 class='item'>type reference_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_type\" title=\"Kind.reference_type\">reference_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_module_type", "title": "Identifier.reference_module_type", "contents": "reference_module_type t reference_module_type", "rendered": "<h4 class='item'>type reference_module_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_module_type\" title=\"Kind.reference_module_type\">reference_module_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.reference_module", "title": "Identifier.reference_module", "contents": "reference_module t reference_module", "rendered": "<h4 class='item'>type reference_module = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_module\" title=\"Kind.reference_module\">reference_module</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.fragment_type", "title": "Identifier.fragment_type", "contents": "fragment_type t fragment_type", "rendered": "<h4 class='item'>type fragment_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_type\" title=\"Kind.fragment_type\">fragment_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.fragment_module", "title": "Identifier.fragment_module", "contents": "fragment_module t fragment_module", "rendered": "<h4 class='item'>type fragment_module = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_module\" title=\"Kind.fragment_module\">fragment_module</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.path_class_type", "title": "Identifier.path_class_type", "contents": "path_class_type t path_class_type", "rendered": "<h4 class='item'>type path_class_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_class_type\" title=\"Kind.path_class_type\">path_class_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.path_type", "title": "Identifier.path_type", "contents": "path_type t path_type", "rendered": "<h4 class='item'>type path_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_type\" title=\"Kind.path_type\">path_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.path_module_type", "title": "Identifier.path_module_type", "contents": "path_module_type t path_module_type", "rendered": "<h4 class='item'>type path_module_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_module_type\" title=\"Kind.path_module_type\">path_module_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.path_module", "title": "Identifier.path_module", "contents": "path_module t path_module", "rendered": "<h4 class='item'>type path_module = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_module\" title=\"Kind.path_module\">path_module</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.page", "title": "Identifier.page", "contents": "page t identifier_page", "rendered": "<h4 class='item'>type page = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_page\" title=\"Kind.identifier_page\">identifier_page</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.label", "title": "Identifier.label", "contents": "label t identifier_label", "rendered": "<h4 class='item'>type label = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_label\" title=\"Kind.identifier_label\">identifier_label</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.instance_variable", "title": "Identifier.instance_variable", "contents": "instance_variable t identifier_instance_variable", "rendered": "<h4 class='item'>type instance_variable = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_instance_variable\" title=\"Kind.identifier_instance_variable\">identifier_instance_variable</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.method_", "title": "Identifier.method_", "contents": "method_ t identifier_method", "rendered": "<h4 class='item'>type method_ = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_method\" title=\"Kind.identifier_method\">identifier_method</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.class_type", "title": "Identifier.class_type", "contents": "class_type t identifier_class_type", "rendered": "<h4 class='item'>type class_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_class_type\" title=\"Kind.identifier_class_type\">identifier_class_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.class_", "title": "Identifier.class_", "contents": "class_ t identifier_class", "rendered": "<h4 class='item'>type class_ = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_class\" title=\"Kind.identifier_class\">identifier_class</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.value", "title": "Identifier.value", "contents": "value t identifier_value", "rendered": "<h4 class='item'>type value = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_value\" title=\"Kind.identifier_value\">identifier_value</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.exception_", "title": "Identifier.exception_", "contents": "exception_ t identifier_exception", "rendered": "<h4 class='item'>type exception_ = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_exception\" title=\"Kind.identifier_exception\">identifier_exception</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.extension", "title": "Identifier.extension", "contents": "extension t identifier_extension", "rendered": "<h4 class='item'>type extension = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_extension\" title=\"Kind.identifier_extension\">identifier_extension</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.field", "title": "Identifier.field", "contents": "field t identifier_field", "rendered": "<h4 class='item'>type field = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_field\" title=\"Kind.identifier_field\">identifier_field</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.constructor", "title": "Identifier.constructor", "contents": "constructor t identifier_constructor", "rendered": "<h4 class='item'>type constructor = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_constructor\" title=\"Kind.identifier_constructor\">identifier_constructor</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.type_", "title": "Identifier.type_", "contents": "type_ t identifier_type", "rendered": "<h4 class='item'>type type_ = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_type\" title=\"Kind.identifier_type\">identifier_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.module_type", "title": "Identifier.module_type", "contents": "module_type t identifier_module_type", "rendered": "<h4 class='item'>type module_type = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_module_type\" title=\"Kind.identifier_module_type\">identifier_module_type</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.module_", "title": "Identifier.module_", "contents": "module_ t identifier_module", "rendered": "<h4 class='item'>type module_ = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_module\" title=\"Kind.identifier_module\">identifier_module</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.label_parent", "title": "Identifier.label_parent", "contents": "label_parent t label_parent", "rendered": "<h4 class='item'>type label_parent = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.label_parent\" title=\"Kind.label_parent\">label_parent</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.parent", "title": "Identifier.parent", "contents": "parent t parent", "rendered": "<h4 class='item'>type parent = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.parent\" title=\"Kind.parent\">parent</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.datatype", "title": "Identifier.datatype", "contents": "datatype t datatype", "rendered": "<h4 class='item'>type datatype = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.datatype\" title=\"Kind.datatype\">datatype</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.class_signature", "title": "Identifier.class_signature", "contents": "class_signature t class_signature", "rendered": "<h4 class='item'>type class_signature = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.class_signature\" title=\"Kind.class_signature\">class_signature</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.signature", "title": "Identifier.signature", "contents": "signature t signature", "rendered": "<h4 class='item'>type signature = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.signature\" title=\"Kind.signature\">signature</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.any", "title": "Identifier.any", "contents": "any t kind", "rendered": "<h4 class='item'>type any = <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Identifier.kind\">kind</a>)</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.t", "title": "Identifier.t", "contents": "t Root t string t Root t string t signature string t signature int string t signature string t signature string t string t datatype string t parent string t signature string t signature string t string t signature string t signature string t signature string t class_signature string t class_signature string t label_parent string t", "rendered": "<h4 class='item'>type t('kind) = \n  | Root(<a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Module ])\n  | Page(<a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Page ])\n  | Module(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Module ])\n  | Argument(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, int, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Module ]\n  )\n  | ModuleType(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `ModuleType ]\n  )\n  | Type(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Type ])\n  | CoreType(string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Type ])\n  | Constructor(<a href=\"./api/Paths_types.html#type-Identifier.datatype\">datatype</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Constructor ]\n  )\n  | Field(<a href=\"./api/Paths_types.html#type-Identifier.parent\">parent</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Field ])\n  | Extension(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Extension ]\n  )\n  | Exception(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Exception ]\n  )\n  | CoreException(string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Exception ])\n  | Value(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Value ])\n  | Class(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Class ])\n  | ClassType(<a href=\"./api/Paths_types.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `ClassType ]\n  )\n  | Method(<a href=\"./api/Paths_types.html#type-Identifier.class_signature\">class_signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Method ]\n  )\n  | InstanceVariable(<a href=\"./api/Paths_types.html#type-Identifier.class_signature\">class_signature</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `InstanceVariable ]\n  )\n  | Label(<a href=\"./api/Paths_types.html#type-Identifier.label_parent\">label_parent</a>, string): <a href=\"./api/Paths_types.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Label ])\n</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Identifier.kind", "title": "Identifier.kind", "contents": "kind identifier", "rendered": "<h4 class='item'>type kind = <a href=\"./api/Paths_types.html#type-Kind.identifier\" title=\"Kind.identifier\">identifier</a></h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#module-Identifier", "title": "Identifier", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#module-Identifier", "title": "Identifier", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_page", "title": "Kind.reference_page", "contents": "reference_page ", "rendered": "<h4 class='item'>type reference_page = [ `Page ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_label", "title": "Kind.reference_label", "contents": "reference_label ", "rendered": "<h4 class='item'>type reference_label = [ `Label ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_instance_variable", "title": "Kind.reference_instance_variable", "contents": "reference_instance_variable ", "rendered": "<h4 class='item'>type reference_instance_variable = [ `InstanceVariable ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_method", "title": "Kind.reference_method", "contents": "reference_method ", "rendered": "<h4 class='item'>type reference_method = [ `Method ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_class_type", "title": "Kind.reference_class_type", "contents": "reference_class_type ", "rendered": "<h4 class='item'>type reference_class_type = [ `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_class", "title": "Kind.reference_class", "contents": "reference_class ", "rendered": "<h4 class='item'>type reference_class = [ `Class ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_value", "title": "Kind.reference_value", "contents": "reference_value ", "rendered": "<h4 class='item'>type reference_value = [ `Value ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_exception", "title": "Kind.reference_exception", "contents": "reference_exception ", "rendered": "<h4 class='item'>type reference_exception = [ `Exception ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_extension", "title": "Kind.reference_extension", "contents": "reference_extension ", "rendered": "<h4 class='item'>type reference_extension = [ `Exception | `Extension ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_field", "title": "Kind.reference_field", "contents": "reference_field ", "rendered": "<h4 class='item'>type reference_field = [ `Field ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_constructor", "title": "Kind.reference_constructor", "contents": "reference_constructor ", "rendered": "<h4 class='item'>type reference_constructor = [ `Exception | `Constructor | `Extension ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_type", "title": "Kind.reference_type", "contents": "reference_type ", "rendered": "<h4 class='item'>type reference_type = [ `Type | `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_module_type", "title": "Kind.reference_module_type", "contents": "reference_module_type ", "rendered": "<h4 class='item'>type reference_module_type = [ `ModuleType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference_module", "title": "Kind.reference_module", "contents": "reference_module ", "rendered": "<h4 class='item'>type reference_module = [ `Module ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.reference", "title": "Kind.reference", "contents": "reference any", "rendered": "<h4 class='item'>type reference = <a href=\"./api/Paths_types.html#type-Kind.any\">any</a></h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "This means that reference kinds do not correspond directly to the kind of their referent because we used more relaxed rules when resolving a reference. For example, a reference annotated as being to a constructor can be resolved to the definition of an exception (which is a sort of constructor).", "rendered": "This means that reference kinds do not correspond directly to the kind of their referent because we used more relaxed rules when resolving a reference. For example, a reference annotated as being to a constructor can be resolved to the definition of an exception (which is a sort of constructor).", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "There is one reference kind for each kind of referent. However, the kind of a reference does not refer to the kind of its referent, but to the kind with which the reference was annotated.", "rendered": "There is one reference kind for each kind of referent. However, the kind of a reference does not refer to the kind of its referent, but to the kind with which the reference was annotated.", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#Reference-kinds", "title": "Reference kinds", "contents": "", "rendered": "", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.fragment_type", "title": "Kind.fragment_type", "contents": "fragment_type ", "rendered": "<h4 class='item'>type fragment_type = [ `Type | `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.fragment_module", "title": "Kind.fragment_module", "contents": "fragment_module ", "rendered": "<h4 class='item'>type fragment_module = [ `Module ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.fragment", "title": "Kind.fragment", "contents": "fragment ", "rendered": "<h4 class='item'>type fragment = [ `Module | `Type | `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "type", "rendered": "type", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "module", "rendered": "module", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "These kinds do not directly correspond to the kind of their referent (e.g. a type path fragment may refer to a class definition).", "rendered": "These kinds do not directly correspond to the kind of their referent (e.g. a type path fragment may refer to a class definition).", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "There are two kinds of OCaml path fragment:", "rendered": "There are two kinds of OCaml path fragment:", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#Fragment-kinds", "title": "Fragment kinds", "contents": "", "rendered": "", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.path_class_type", "title": "Kind.path_class_type", "contents": "path_class_type ", "rendered": "<h4 class='item'>type path_class_type = [ `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.path_type", "title": "Kind.path_type", "contents": "path_type ", "rendered": "<h4 class='item'>type path_type = [ `Type | `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.path_module_type", "title": "Kind.path_module_type", "contents": "path_module_type ", "rendered": "<h4 class='item'>type path_module_type = [ `ModuleType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.path_module", "title": "Kind.path_module", "contents": "path_module ", "rendered": "<h4 class='item'>type path_module = [ `Module ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.path", "title": "Kind.path", "contents": "path ", "rendered": "<h4 class='item'>type path = [ `Module | `ModuleType | `Type | `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "class type", "rendered": "class type", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "type", "rendered": "type", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "module type", "rendered": "module type", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "module", "rendered": "module", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "These kinds do not directly correspond to the kind of their referent (e.g. a type path may refer to a class definition).", "rendered": "These kinds do not directly correspond to the kind of their referent (e.g. a type path may refer to a class definition).", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "There are four kinds of OCaml path:", "rendered": "There are four kinds of OCaml path:", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#Path-kinds", "title": "Path kinds", "contents": "", "rendered": "", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_page", "title": "Kind.identifier_page", "contents": "identifier_page ", "rendered": "<h4 class='item'>type identifier_page = [ `Page ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_label", "title": "Kind.identifier_label", "contents": "identifier_label ", "rendered": "<h4 class='item'>type identifier_label = [ `Label ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_instance_variable", "title": "Kind.identifier_instance_variable", "contents": "identifier_instance_variable ", "rendered": "<h4 class='item'>type identifier_instance_variable = [ `InstanceVariable ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_method", "title": "Kind.identifier_method", "contents": "identifier_method ", "rendered": "<h4 class='item'>type identifier_method = [ `Method ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_class_type", "title": "Kind.identifier_class_type", "contents": "identifier_class_type ", "rendered": "<h4 class='item'>type identifier_class_type = [ `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_class", "title": "Kind.identifier_class", "contents": "identifier_class ", "rendered": "<h4 class='item'>type identifier_class = [ `Class ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_value", "title": "Kind.identifier_value", "contents": "identifier_value ", "rendered": "<h4 class='item'>type identifier_value = [ `Value ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_exception", "title": "Kind.identifier_exception", "contents": "identifier_exception ", "rendered": "<h4 class='item'>type identifier_exception = [ `Exception ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_extension", "title": "Kind.identifier_extension", "contents": "identifier_extension ", "rendered": "<h4 class='item'>type identifier_extension = [ `Extension ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_field", "title": "Kind.identifier_field", "contents": "identifier_field ", "rendered": "<h4 class='item'>type identifier_field = [ `Field ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_constructor", "title": "Kind.identifier_constructor", "contents": "identifier_constructor ", "rendered": "<h4 class='item'>type identifier_constructor = [ `Constructor ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_type", "title": "Kind.identifier_type", "contents": "identifier_type ", "rendered": "<h4 class='item'>type identifier_type = [ `Type ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_module_type", "title": "Kind.identifier_module_type", "contents": "identifier_module_type ", "rendered": "<h4 class='item'>type identifier_module_type = [ `ModuleType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier_module", "title": "Kind.identifier_module", "contents": "identifier_module ", "rendered": "<h4 class='item'>type identifier_module = [ `Module ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.identifier", "title": "Kind.identifier", "contents": "identifier any", "rendered": "<h4 class='item'>type identifier = <a href=\"./api/Paths_types.html#type-Kind.any\">any</a></h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Kind", "contents": "The kind of an identifier directly corresponds to the kind of its referent.", "rendered": "The kind of an identifier directly corresponds to the kind of its referent.", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#Identifier-kinds", "title": "Identifier kinds", "contents": "", "rendered": "", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.label_parent", "title": "Kind.label_parent", "contents": "label_parent ", "rendered": "<h4 class='item'>type label_parent = [ `Module | `ModuleType | `Type | `Class | `Page | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.parent", "title": "Kind.parent", "contents": "A referent that can contain other items", "rendered": "A referent that can contain other items", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.parent", "title": "Kind.parent", "contents": "parent ", "rendered": "<h4 class='item'>type parent = [ `Module | `ModuleType | `Type | `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.page", "title": "Kind.page", "contents": "A referent that can contain page items", "rendered": "A referent that can contain page items", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.page", "title": "Kind.page", "contents": "page ", "rendered": "<h4 class='item'>type page = [ `Page ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.datatype", "title": "Kind.datatype", "contents": "A referent that can contain datatype items", "rendered": "A referent that can contain datatype items", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.datatype", "title": "Kind.datatype", "contents": "datatype ", "rendered": "<h4 class='item'>type datatype = [ `Type ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.class_signature", "title": "Kind.class_signature", "contents": "A referent that can contain class signature items", "rendered": "A referent that can contain class signature items", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.class_signature", "title": "Kind.class_signature", "contents": "class_signature ", "rendered": "<h4 class='item'>type class_signature = [ `Class | `ClassType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.signature", "title": "Kind.signature", "contents": "A referent that can contain signature items", "rendered": "A referent that can contain signature items", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.signature", "title": "Kind.signature", "contents": "signature ", "rendered": "<h4 class='item'>type signature = [ `Module | `ModuleType ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.any", "title": "Kind.any", "contents": "Any possible referent", "rendered": "Any possible referent", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#type-Kind.any", "title": "Kind.any", "contents": "any ", "rendered": "<h4 class='item'>type any = [ `InstanceVariable\n| `Module\n| `ModuleType\n| `Method\n| `Field\n| `Label\n| `Type\n| `Exception\n| `Class\n| `Page\n| `ClassType\n| `Value\n| `Constructor\n| `Extension ]</h4>", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#module-Kind", "title": "Kind", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#General-purpose-kinds", "title": "General purpose kinds", "contents": "", "rendered": "", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html", "title": "Paths_types", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths_types"},
{"href": "./api/Paths_types.html#Paths", "title": "Paths", "contents": "", "rendered": "", "breadcrumb": "Paths_types"},
{"href": "./api/Paths.html#value-Fragment.split", "title": "Fragment.split", "contents": "split t string option t ", "rendered": "<h4 class='item'>let split: <a href=\"./api/Paths.html#type-Fragment.t\">t</a>('b) => (string, option(<a href=\"./api/Paths.html#type-Fragment.t\">t</a>('b)))</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.hash", "title": "Fragment.hash", "contents": "hash t int ", "rendered": "<h4 class='item'>let hash: <a href=\"./api/Paths.html#type-Fragment.t\">t</a>('b) => int</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.equal", "title": "Fragment.equal", "contents": "equal t t bool  ", "rendered": "<h4 class='item'>let equal: (<a href=\"./api/Paths.html#type-Fragment.t\">t</a>('b), <a href=\"./api/Paths.html#type-Fragment.t\">t</a>('b)) => bool</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Generic-operations", "title": "Generic operations", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.path", "title": "Fragment.path", "contents": "path Path module_ t Path t  ", "rendered": "<h4 class='item'>let path: (Path.module_, <a href=\"./api/Paths.html#type-Fragment.t\">t</a>('b)) => Path.t('b)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Attaching-fragments-to-valid-paths", "title": "Attaching fragments to valid paths", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.any", "title": "Fragment.any", "contents": "any t any ", "rendered": "<h4 class='item'>let any: <a href=\"./api/Paths.html#type-Fragment.t\">t</a>('b) => <a href=\"./api/Paths.html#type-Fragment.any\">any</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.any_sort", "title": "Fragment.any_sort", "contents": "any_sort raw raw sort ", "rendered": "<h4 class='item'>let any_sort: <a href=\"./api/Paths.html#type-Fragment.raw\">raw</a>('b, 'c) => <a href=\"./api/Paths.html#type-Fragment.raw\">raw</a>('b, <a href=\"./api/Paths.html#type-Fragment.sort\">sort</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.signature_of_module", "title": "Fragment.signature_of_module", "contents": "signature_of_module module_ signature ", "rendered": "<h4 class='item'>let signature_of_module: <a href=\"./api/Paths.html#type-Fragment.module_\">module_</a> => <a href=\"./api/Paths.html#type-Fragment.signature\">signature</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Explicit-coercions", "title": "Explicit coercions", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.type_", "title": "Fragment.type_", "contents": "type_ t fragment_type", "rendered": "<h4 class='item'>type type_ = <a href=\"./api/Paths.html#type-Fragment.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_type\" title=\"Paths_types.Kind.fragment_type\">fragment_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.module_", "title": "Fragment.module_", "contents": "module_ t fragment_module", "rendered": "<h4 class='item'>type module_ = <a href=\"./api/Paths.html#type-Fragment.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_module\" title=\"Paths_types.Kind.fragment_module\">fragment_module</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.signature", "title": "Fragment.signature", "contents": "signature raw fragment_module", "rendered": "<h4 class='item'>type signature = <a href=\"./api/Paths.html#type-Fragment.raw\">raw</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_module\" title=\"Paths_types.Kind.fragment_module\">fragment_module</a>, [ `Branch | `Root ])</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.any", "title": "Fragment.any", "contents": "any t kind", "rendered": "<h4 class='item'>type any = <a href=\"./api/Paths.html#type-Fragment.t\">t</a>(<a href=\"./api/Paths.html#type-Fragment.kind\">kind</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.t", "title": "Fragment.t", "contents": "t raw", "rendered": "<h4 class='item'>type t('b) = <a href=\"./api/Paths.html#type-Fragment.raw\">raw</a>('b, [ `Branch ])</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.raw", "title": "Fragment.raw", "contents": "raw raw raw signature string raw", "rendered": "<h4 class='item'>type raw('b, 'c) = \n  | Resolved(<a href=\"./api/Paths_types.html#type-Resolved_fragment.raw\" title=\"Paths_types.Resolved_fragment.raw\">raw</a>('b, 'c)): <a href=\"./api/Paths.html#type-Fragment.raw\">raw</a>('b, 'c)\n  | Dot(<a href=\"./api/Paths.html#type-Fragment.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Fragment.raw\">raw</a>(\n    [&lt; kind ],\n    [&lt; sort &gt; `Branch ]\n  )\n</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.sort", "title": "Fragment.sort", "contents": "sort ", "rendered": "<h4 class='item'>type sort = [ `Branch | `Root ]</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.kind", "title": "Fragment.kind", "contents": "kind fragment", "rendered": "<h4 class='item'>type kind = <a href=\"./api/Paths_types.html#type-Kind.fragment\" title=\"Paths_types.Kind.fragment\">fragment</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Fragment", "title": "Fragment", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.split", "title": "Fragment.Resolved.split", "contents": "split t string option t ", "rendered": "<h4 class='item'>let split: <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b) => (string, option(<a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b)))</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.hash", "title": "Fragment.Resolved.hash", "contents": "hash t int ", "rendered": "<h4 class='item'>let hash: <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b) => int</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.equal", "title": "Fragment.Resolved.equal", "contents": "equal t t bool  ", "rendered": "<h4 class='item'>let equal: (<a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b), <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b)) => bool</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Generic-operations", "title": "Generic operations", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.identifier", "title": "Fragment.Resolved.identifier", "contents": "identifier signature t Identifier t  ", "rendered": "<h4 class='item'>let identifier: (<a href=\"./api/Paths.html#type-Identifier.signature\" title=\"Identifier.signature\">signature</a>, <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b)) => <a href=\"./api/Paths.html#module-Identifier\">Identifier</a>.<a href=\"./api/Paths.html#type-Identifier.t\">t</a>('b)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.path", "title": "Fragment.Resolved.path", "contents": "path Path module_ t Path t  ", "rendered": "<h4 class='item'>let path: (Path.module_, <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b)) => Path.t('b)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Attaching-fragments-to-valid-paths", "title": "Attaching fragments to valid paths", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.any_sort", "title": "Fragment.Resolved.any_sort", "contents": "any_sort raw raw sort ", "rendered": "<h4 class='item'>let any_sort: <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>('b, 'c) => <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>('b, <a href=\"./api/Paths.html#type-Fragment.Resolved.sort\">sort</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.any", "title": "Fragment.Resolved.any", "contents": "any t any ", "rendered": "<h4 class='item'>let any: <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>('b) => <a href=\"./api/Paths.html#type-Fragment.Resolved.any\">any</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Fragment.Resolved.signature_of_module", "title": "Fragment.Resolved.signature_of_module", "contents": "signature_of_module module_ signature ", "rendered": "<h4 class='item'>let signature_of_module: <a href=\"./api/Paths.html#type-Fragment.Resolved.module_\">module_</a> => <a href=\"./api/Paths.html#type-Fragment.Resolved.signature\">signature</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Explicit-coercions", "title": "Explicit coercions", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.type_", "title": "Fragment.Resolved.type_", "contents": "type_ t fragment_type", "rendered": "<h4 class='item'>type type_ = <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_type\" title=\"Paths_types.Kind.fragment_type\">fragment_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.module_", "title": "Fragment.Resolved.module_", "contents": "module_ t fragment_module", "rendered": "<h4 class='item'>type module_ = <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_module\" title=\"Paths_types.Kind.fragment_module\">fragment_module</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.signature", "title": "Fragment.Resolved.signature", "contents": "signature raw fragment_module", "rendered": "<h4 class='item'>type signature = <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_module\" title=\"Paths_types.Kind.fragment_module\">fragment_module</a>, [ `Branch | `Root ])</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.any", "title": "Fragment.Resolved.any", "contents": "any t kind", "rendered": "<h4 class='item'>type any = <a href=\"./api/Paths.html#type-Fragment.Resolved.t\">t</a>(<a href=\"./api/Paths.html#type-Fragment.Resolved.kind\">kind</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.t", "title": "Fragment.Resolved.t", "contents": "t raw", "rendered": "<h4 class='item'>type t('b) = <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>('b, [ `Branch ])</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.raw", "title": "Fragment.Resolved.raw", "contents": "raw raw module_type module_ raw module_ module_ raw signature string raw signature string raw signature string raw signature string raw", "rendered": "<h4 class='item'>type raw('b, 'c) = \n  | Root: <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>('b, [&lt; sort &gt; `Root ])\n  | Subst(<a href=\"./api/Paths_types.html#type-Resolved_path.module_type\" title=\"Paths_types.Resolved_path.module_type\">module_type</a>, <a href=\"./api/Paths.html#type-Fragment.Resolved.module_\">module_</a>): <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>(\n    [&lt; kind &gt; `Module ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | SubstAlias(<a href=\"./api/Paths_types.html#type-Resolved_path.module_\" title=\"Paths_types.Resolved_path.module_\">module_</a>, <a href=\"./api/Paths.html#type-Fragment.Resolved.module_\">module_</a>): <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>(\n    [&lt; kind &gt; `Module ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | Module(<a href=\"./api/Paths.html#type-Fragment.Resolved.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>(\n    [&lt; kind &gt; `Module ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | Type(<a href=\"./api/Paths.html#type-Fragment.Resolved.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>(\n    [&lt; kind &gt; `Type ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | Class(<a href=\"./api/Paths.html#type-Fragment.Resolved.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>(\n    [&lt; kind &gt; `Class ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | ClassType(<a href=\"./api/Paths.html#type-Fragment.Resolved.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Fragment.Resolved.raw\">raw</a>(\n    [&lt; kind &gt; `ClassType ],\n    [&lt; sort &gt; `Branch ]\n  )\n</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.sort", "title": "Fragment.Resolved.sort", "contents": "sort ", "rendered": "<h4 class='item'>type sort = [ `Branch | `Root ]</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Fragment.Resolved.kind", "title": "Fragment.Resolved.kind", "contents": "kind fragment", "rendered": "<h4 class='item'>type kind = <a href=\"./api/Paths_types.html#type-Kind.fragment\" title=\"Paths_types.Kind.fragment\">fragment</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Fragment.Resolved", "title": "Fragment.Resolved", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Fragment.Resolved", "title": "Fragment.Resolved", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Fragment.Resolved", "title": "Fragment.Resolved", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Fragment", "title": "Fragment", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Fragment", "title": "Fragment", "contents": "OCaml path fragments for specifying module substitutions", "rendered": "OCaml path fragments for specifying module substitutions", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.label_parent_root", "title": "Identifier.label_parent_root", "contents": "label_parent_root label_parent Root t ", "rendered": "<h4 class='item'>let label_parent_root: <a href=\"./api/Paths.html#type-Identifier.label_parent\">label_parent</a> => <a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.class_signature_root", "title": "Identifier.class_signature_root", "contents": "class_signature_root class_signature Root t ", "rendered": "<h4 class='item'>let class_signature_root: <a href=\"./api/Paths.html#type-Identifier.class_signature\">class_signature</a> => <a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.module_type_root", "title": "Identifier.module_type_root", "contents": "module_type_root module_type Root t ", "rendered": "<h4 class='item'>let module_type_root: <a href=\"./api/Paths.html#type-Identifier.module_type\">module_type</a> => <a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.module_root", "title": "Identifier.module_root", "contents": "module_root module_ Root t ", "rendered": "<h4 class='item'>let module_root: <a href=\"./api/Paths.html#type-Identifier.module_\">module_</a> => <a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.signature_root", "title": "Identifier.signature_root", "contents": "signature_root signature Root t ", "rendered": "<h4 class='item'>let signature_root: <a href=\"./api/Paths.html#type-Identifier.signature\">signature</a> => <a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Root-retrieval", "title": "Root retrieval", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.name", "title": "Identifier.name", "contents": "name t string ", "rendered": "<h4 class='item'>let name: <a href=\"./api/Paths.html#type-Identifier.t\">t</a>('kind) => string</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Printing", "title": "Printing", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.hash", "title": "Identifier.hash", "contents": "hash t int ", "rendered": "<h4 class='item'>let hash: <a href=\"./api/Paths.html#type-Identifier.t\">t</a>('kind) => int</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.equal", "title": "Identifier.equal", "contents": "equal t t bool  ", "rendered": "<h4 class='item'>let equal: (<a href=\"./api/Paths.html#type-Identifier.t\">t</a>('kind), <a href=\"./api/Paths.html#type-Identifier.t\">t</a>('kind)) => bool</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Generic-operations", "title": "Generic operations", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.any", "title": "Identifier.any", "contents": "any t any ", "rendered": "<h4 class='item'>let any: <a href=\"./api/Paths.html#type-Identifier.t\">t</a>('kind) => <a href=\"./api/Paths.html#type-Identifier.any\">any</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.label_parent_of_page", "title": "Identifier.label_parent_of_page", "contents": "label_parent_of_page page label_parent ", "rendered": "<h4 class='item'>let label_parent_of_page: <a href=\"./api/Paths.html#type-Identifier.page\">page</a> => <a href=\"./api/Paths.html#type-Identifier.label_parent\">label_parent</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.label_parent_of_parent", "title": "Identifier.label_parent_of_parent", "contents": "label_parent_of_parent parent label_parent ", "rendered": "<h4 class='item'>let label_parent_of_parent: <a href=\"./api/Paths.html#type-Identifier.parent\">parent</a> => <a href=\"./api/Paths.html#type-Identifier.label_parent\">label_parent</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.parent_of_datatype", "title": "Identifier.parent_of_datatype", "contents": "parent_of_datatype datatype parent ", "rendered": "<h4 class='item'>let parent_of_datatype: <a href=\"./api/Paths.html#type-Identifier.datatype\">datatype</a> => <a href=\"./api/Paths.html#type-Identifier.parent\">parent</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.parent_of_class_signature", "title": "Identifier.parent_of_class_signature", "contents": "parent_of_class_signature class_signature parent ", "rendered": "<h4 class='item'>let parent_of_class_signature: <a href=\"./api/Paths.html#type-Identifier.class_signature\">class_signature</a> => <a href=\"./api/Paths.html#type-Identifier.parent\">parent</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.parent_of_signature", "title": "Identifier.parent_of_signature", "contents": "parent_of_signature signature parent ", "rendered": "<h4 class='item'>let parent_of_signature: <a href=\"./api/Paths.html#type-Identifier.signature\">signature</a> => <a href=\"./api/Paths.html#type-Identifier.parent\">parent</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.datatype_of_type", "title": "Identifier.datatype_of_type", "contents": "datatype_of_type type_ datatype ", "rendered": "<h4 class='item'>let datatype_of_type: <a href=\"./api/Paths.html#type-Identifier.type_\">type_</a> => <a href=\"./api/Paths.html#type-Identifier.datatype\">datatype</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.class_signature_of_class_type", "title": "Identifier.class_signature_of_class_type", "contents": "class_signature_of_class_type class_type class_signature ", "rendered": "<h4 class='item'>let class_signature_of_class_type: <a href=\"./api/Paths.html#type-Identifier.class_type\">class_type</a> => <a href=\"./api/Paths.html#type-Identifier.class_signature\">class_signature</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.class_signature_of_class", "title": "Identifier.class_signature_of_class", "contents": "class_signature_of_class class_ class_signature ", "rendered": "<h4 class='item'>let class_signature_of_class: <a href=\"./api/Paths.html#type-Identifier.class_\">class_</a> => <a href=\"./api/Paths.html#type-Identifier.class_signature\">class_signature</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.signature_of_module_type", "title": "Identifier.signature_of_module_type", "contents": "signature_of_module_type module_type signature ", "rendered": "<h4 class='item'>let signature_of_module_type: <a href=\"./api/Paths.html#type-Identifier.module_type\">module_type</a> => <a href=\"./api/Paths.html#type-Identifier.signature\">signature</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#value-Identifier.signature_of_module", "title": "Identifier.signature_of_module", "contents": "signature_of_module module_ signature ", "rendered": "<h4 class='item'>let signature_of_module: <a href=\"./api/Paths.html#type-Identifier.module_\">module_</a> => <a href=\"./api/Paths.html#type-Identifier.signature\">signature</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#Explicit-coercions", "title": "Explicit coercions", "contents": "", "rendered": "", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_page", "title": "Identifier.reference_page", "contents": "reference_page t reference_page", "rendered": "<h4 class='item'>type reference_page = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_page\" title=\"Paths_types.Kind.reference_page\">reference_page</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_label", "title": "Identifier.reference_label", "contents": "reference_label t reference_label", "rendered": "<h4 class='item'>type reference_label = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_label\" title=\"Paths_types.Kind.reference_label\">reference_label</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_instance_variable", "title": "Identifier.reference_instance_variable", "contents": "reference_instance_variable t reference_instance_variable", "rendered": "<h4 class='item'>type reference_instance_variable = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n  <a href=\"./api/Paths_types.html#type-Kind.reference_instance_variable\" title=\"Paths_types.Kind.reference_instance_variable\">reference_instance_variable</a>\n)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_method", "title": "Identifier.reference_method", "contents": "reference_method t reference_method", "rendered": "<h4 class='item'>type reference_method = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_method\" title=\"Paths_types.Kind.reference_method\">reference_method</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_class_type", "title": "Identifier.reference_class_type", "contents": "reference_class_type t reference_class_type", "rendered": "<h4 class='item'>type reference_class_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_class_type\" title=\"Paths_types.Kind.reference_class_type\">reference_class_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_class", "title": "Identifier.reference_class", "contents": "reference_class t reference_class", "rendered": "<h4 class='item'>type reference_class = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_class\" title=\"Paths_types.Kind.reference_class\">reference_class</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_value", "title": "Identifier.reference_value", "contents": "reference_value t reference_value", "rendered": "<h4 class='item'>type reference_value = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_value\" title=\"Paths_types.Kind.reference_value\">reference_value</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_exception", "title": "Identifier.reference_exception", "contents": "reference_exception t reference_exception", "rendered": "<h4 class='item'>type reference_exception = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_exception\" title=\"Paths_types.Kind.reference_exception\">reference_exception</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_extension", "title": "Identifier.reference_extension", "contents": "reference_extension t reference_extension", "rendered": "<h4 class='item'>type reference_extension = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_extension\" title=\"Paths_types.Kind.reference_extension\">reference_extension</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_field", "title": "Identifier.reference_field", "contents": "reference_field t reference_field", "rendered": "<h4 class='item'>type reference_field = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_field\" title=\"Paths_types.Kind.reference_field\">reference_field</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_constructor", "title": "Identifier.reference_constructor", "contents": "reference_constructor t reference_constructor", "rendered": "<h4 class='item'>type reference_constructor = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_constructor\" title=\"Paths_types.Kind.reference_constructor\">reference_constructor</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_type", "title": "Identifier.reference_type", "contents": "reference_type t reference_type", "rendered": "<h4 class='item'>type reference_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_type\" title=\"Paths_types.Kind.reference_type\">reference_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_module_type", "title": "Identifier.reference_module_type", "contents": "reference_module_type t reference_module_type", "rendered": "<h4 class='item'>type reference_module_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_module_type\" title=\"Paths_types.Kind.reference_module_type\">reference_module_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.reference_module", "title": "Identifier.reference_module", "contents": "reference_module t reference_module", "rendered": "<h4 class='item'>type reference_module = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.reference_module\" title=\"Paths_types.Kind.reference_module\">reference_module</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.fragment_type", "title": "Identifier.fragment_type", "contents": "fragment_type t fragment_type", "rendered": "<h4 class='item'>type fragment_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_type\" title=\"Paths_types.Kind.fragment_type\">fragment_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.fragment_module", "title": "Identifier.fragment_module", "contents": "fragment_module t fragment_module", "rendered": "<h4 class='item'>type fragment_module = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.fragment_module\" title=\"Paths_types.Kind.fragment_module\">fragment_module</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.path_class_type", "title": "Identifier.path_class_type", "contents": "path_class_type t path_class_type", "rendered": "<h4 class='item'>type path_class_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_class_type\" title=\"Paths_types.Kind.path_class_type\">path_class_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.path_type", "title": "Identifier.path_type", "contents": "path_type t path_type", "rendered": "<h4 class='item'>type path_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_type\" title=\"Paths_types.Kind.path_type\">path_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.path_module_type", "title": "Identifier.path_module_type", "contents": "path_module_type t path_module_type", "rendered": "<h4 class='item'>type path_module_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_module_type\" title=\"Paths_types.Kind.path_module_type\">path_module_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.path_module", "title": "Identifier.path_module", "contents": "path_module t path_module", "rendered": "<h4 class='item'>type path_module = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.path_module\" title=\"Paths_types.Kind.path_module\">path_module</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.page", "title": "Identifier.page", "contents": "page t identifier_page", "rendered": "<h4 class='item'>type page = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_page\" title=\"Paths_types.Kind.identifier_page\">identifier_page</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.label", "title": "Identifier.label", "contents": "label t identifier_label", "rendered": "<h4 class='item'>type label = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_label\" title=\"Paths_types.Kind.identifier_label\">identifier_label</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.instance_variable", "title": "Identifier.instance_variable", "contents": "instance_variable t identifier_instance_variable", "rendered": "<h4 class='item'>type instance_variable = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_instance_variable\" title=\"Paths_types.Kind.identifier_instance_variable\">identifier_instance_variable</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.method_", "title": "Identifier.method_", "contents": "method_ t identifier_method", "rendered": "<h4 class='item'>type method_ = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_method\" title=\"Paths_types.Kind.identifier_method\">identifier_method</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.class_type", "title": "Identifier.class_type", "contents": "class_type t identifier_class_type", "rendered": "<h4 class='item'>type class_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_class_type\" title=\"Paths_types.Kind.identifier_class_type\">identifier_class_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.class_", "title": "Identifier.class_", "contents": "class_ t identifier_class", "rendered": "<h4 class='item'>type class_ = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_class\" title=\"Paths_types.Kind.identifier_class\">identifier_class</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.value", "title": "Identifier.value", "contents": "value t identifier_value", "rendered": "<h4 class='item'>type value = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_value\" title=\"Paths_types.Kind.identifier_value\">identifier_value</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.exception_", "title": "Identifier.exception_", "contents": "exception_ t identifier_exception", "rendered": "<h4 class='item'>type exception_ = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_exception\" title=\"Paths_types.Kind.identifier_exception\">identifier_exception</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.extension", "title": "Identifier.extension", "contents": "extension t identifier_extension", "rendered": "<h4 class='item'>type extension = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_extension\" title=\"Paths_types.Kind.identifier_extension\">identifier_extension</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.field", "title": "Identifier.field", "contents": "field t identifier_field", "rendered": "<h4 class='item'>type field = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_field\" title=\"Paths_types.Kind.identifier_field\">identifier_field</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.constructor", "title": "Identifier.constructor", "contents": "constructor t identifier_constructor", "rendered": "<h4 class='item'>type constructor = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_constructor\" title=\"Paths_types.Kind.identifier_constructor\">identifier_constructor</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.type_", "title": "Identifier.type_", "contents": "type_ t identifier_type", "rendered": "<h4 class='item'>type type_ = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_type\" title=\"Paths_types.Kind.identifier_type\">identifier_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.module_type", "title": "Identifier.module_type", "contents": "module_type t identifier_module_type", "rendered": "<h4 class='item'>type module_type = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_module_type\" title=\"Paths_types.Kind.identifier_module_type\">identifier_module_type</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.module_", "title": "Identifier.module_", "contents": "module_ t identifier_module", "rendered": "<h4 class='item'>type module_ = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.identifier_module\" title=\"Paths_types.Kind.identifier_module\">identifier_module</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.label_parent", "title": "Identifier.label_parent", "contents": "label_parent t label_parent", "rendered": "<h4 class='item'>type label_parent = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.label_parent\" title=\"Paths_types.Kind.label_parent\">label_parent</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.parent", "title": "Identifier.parent", "contents": "parent t parent", "rendered": "<h4 class='item'>type parent = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.parent\" title=\"Paths_types.Kind.parent\">parent</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.datatype", "title": "Identifier.datatype", "contents": "datatype t datatype", "rendered": "<h4 class='item'>type datatype = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.datatype\" title=\"Paths_types.Kind.datatype\">datatype</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.class_signature", "title": "Identifier.class_signature", "contents": "class_signature t class_signature", "rendered": "<h4 class='item'>type class_signature = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.class_signature\" title=\"Paths_types.Kind.class_signature\">class_signature</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.signature", "title": "Identifier.signature", "contents": "signature t signature", "rendered": "<h4 class='item'>type signature = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths_types.html#type-Kind.signature\" title=\"Paths_types.Kind.signature\">signature</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.any", "title": "Identifier.any", "contents": "any t kind", "rendered": "<h4 class='item'>type any = <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(<a href=\"./api/Paths.html#type-Identifier.kind\">kind</a>)</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.t", "title": "Identifier.t", "contents": "t Root t string t Root t string t signature string t signature int string t signature string t signature string t string t datatype string t parent string t signature string t signature string t string t signature string t signature string t signature string t class_signature string t class_signature string t label_parent string t", "rendered": "<h4 class='item'>type t('kind) = \n  | Root(<a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Module ])\n  | Page(<a href=\"./api/Root.html\">Root</a>.<a href=\"./api/Root.html#type-t\">t</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Page ])\n  | Module(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Module ])\n  | Argument(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, int, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Module ]\n  )\n  | ModuleType(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `ModuleType ]\n  )\n  | Type(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Type ])\n  | CoreType(string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Type ])\n  | Constructor(<a href=\"./api/Paths.html#type-Identifier.datatype\">datatype</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Constructor ]\n  )\n  | Field(<a href=\"./api/Paths.html#type-Identifier.parent\">parent</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Field ])\n  | Extension(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Extension ]\n  )\n  | Exception(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Exception ]\n  )\n  | CoreException(string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Exception ])\n  | Value(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Value ])\n  | Class(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Class ])\n  | ClassType(<a href=\"./api/Paths.html#type-Identifier.signature\">signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `ClassType ]\n  )\n  | Method(<a href=\"./api/Paths.html#type-Identifier.class_signature\">class_signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `Method ]\n  )\n  | InstanceVariable(<a href=\"./api/Paths.html#type-Identifier.class_signature\">class_signature</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>(\n    [&lt; kind &gt; `InstanceVariable ]\n  )\n  | Label(<a href=\"./api/Paths.html#type-Identifier.label_parent\">label_parent</a>, string): <a href=\"./api/Paths.html#type-Identifier.t\">t</a>([&lt; kind &gt; `Label ])\n</h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#type-Identifier.kind", "title": "Identifier.kind", "contents": "kind identifier", "rendered": "<h4 class='item'>type kind = <a href=\"./api/Paths_types.html#type-Kind.identifier\" title=\"Paths_types.Kind.identifier\">identifier</a></h4>", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Identifier", "title": "Identifier", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Identifier", "title": "Identifier", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths"},
{"href": "./api/Paths.html#module-Identifier", "title": "Identifier", "contents": "Identifiers for definitions", "rendered": "Identifiers for definitions", "breadcrumb": "Paths"},
{"href": "./api/Paths.html", "title": "Paths", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Paths"},
{"href": "./api/Paths.html", "title": "Paths", "contents": "Paths of documentation", "rendered": "Paths of documentation", "breadcrumb": "Paths"},
{"href": "./api/Parser_.html#value-errors_to_warnings", "title": "errors_to_warnings", "contents": "Converts fatal errors to warnings for now, by emitting a blank comment. This is a temporary measure, because the code that drives the parser does not yet have proper error handling written.", "rendered": "Converts fatal errors to warnings for now, by emitting a blank comment. This is a temporary measure, because the code that drives the parser does not yet have proper error handling written.", "breadcrumb": "Parser_"},
{"href": "./api/Parser_.html#value-errors_to_warnings", "title": "errors_to_warnings", "contents": "errors_to_warnings with_warnings result docs Error t with_warnings result docs Error t ", "rendered": "<h4 class='item'>let errors_to_warnings: <a href=\"./api/Error.html#type-with_warnings\" title=\"Error.with_warnings\">with_warnings</a>(\n  <a href=\"./api/Error.html#type-result\" title=\"Error.result\">result</a>(<a href=\"./api/Comment.html#type-docs\" title=\"Comment.docs\">docs</a>, <a href=\"./api/Error.html\">Error</a>.<a href=\"./api/Error.html#type-t\">t</a>)\n) => <a href=\"./api/Error.html#type-with_warnings\" title=\"Error.with_warnings\">with_warnings</a>(<a href=\"./api/Error.html#type-result\" title=\"Error.result\">result</a>(<a href=\"./api/Comment.html#type-docs\" title=\"Comment.docs\">docs</a>, <a href=\"./api/Error.html\">Error</a>.<a href=\"./api/Error.html#type-t\">t</a>))</h4>", "breadcrumb": "Parser_"},
{"href": "./api/Parser_.html#value-parse_comment", "title": "parse_comment", "contents": "parse_comment bool sections_allowed label_parent Lexing position string with_warnings result docs Error t permissive sections_allowed containing_definition location text", "rendered": "<h4 class='item'>let parse_comment: (\n  ~permissive: bool,\n  ~sections_allowed: <a href=\"./api/Parser_.html#type-sections_allowed\">sections_allowed</a>,\n  ~containing_definition: <a href=\"./api/Paths.html#type-Identifier.label_parent\" title=\"Paths.Identifier.label_parent\">label_parent</a>,\n  ~location: Lexing.position,\n  ~text: string\n) => <a href=\"./api/Error.html#type-with_warnings\" title=\"Error.with_warnings\">with_warnings</a>(<a href=\"./api/Error.html#type-result\" title=\"Error.result\">result</a>(<a href=\"./api/Comment.html#type-docs\" title=\"Comment.docs\">docs</a>, <a href=\"./api/Error.html\">Error</a>.<a href=\"./api/Error.html#type-t\">t</a>))</h4>", "breadcrumb": "Parser_"},
{"href": "./api/Parser_.html#type-sections_allowed", "title": "sections_allowed", "contents": "sections_allowed sections_allowed", "rendered": "<h4 class='item'>type sections_allowed = <a href=\"./api/Ast.html#type-sections_allowed\" title=\"Ast.sections_allowed\">sections_allowed</a></h4>", "breadcrumb": "Parser_"},
{"href": "./api/Parser_.html", "title": "Parser_", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Parser_"},
{"href": "./api/Parser_.html", "title": "Parser_", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Parser_"},
{"href": "./api/Parser_.html#Parser_", "title": "Parser_", "contents": "", "rendered": "", "breadcrumb": "Parser_"},
{"href": "./api/Parse_error.html#value-unpaired_right_bracket", "title": "unpaired_right_bracket", "contents": "unpaired_right_bracket span Error t ", "rendered": "<h4 class='item'>let unpaired_right_bracket: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-unpaired_right_brace", "title": "unpaired_right_brace", "contents": "unpaired_right_brace span Error t ", "rendered": "<h4 class='item'>let unpaired_right_brace: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-unknown_tag", "title": "unknown_tag", "contents": "unknown_tag string span Error t  ", "rendered": "<h4 class='item'>let unknown_tag: (string, <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a>) => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-truncated_see", "title": "truncated_see", "contents": "truncated_see span Error t ", "rendered": "<h4 class='item'>let truncated_see: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-truncated_raise", "title": "truncated_raise", "contents": "truncated_raise span Error t ", "rendered": "<h4 class='item'>let truncated_raise: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-truncated_param", "title": "truncated_param", "contents": "truncated_param span Error t ", "rendered": "<h4 class='item'>let truncated_param: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-truncated_before", "title": "truncated_before", "contents": "truncated_before span Error t ", "rendered": "<h4 class='item'>let truncated_before: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-stray_cr", "title": "stray_cr", "contents": "stray_cr span Error t ", "rendered": "<h4 class='item'>let stray_cr: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-stray_at", "title": "stray_at", "contents": "stray_at span Error t ", "rendered": "<h4 class='item'>let stray_at: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-sections_not_allowed", "title": "sections_not_allowed", "contents": "sections_not_allowed span Error t ", "rendered": "<h4 class='item'>let sections_not_allowed: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-only_one_title_allowed", "title": "only_one_title_allowed", "contents": "only_one_title_allowed span Error t ", "rendered": "<h4 class='item'>let only_one_title_allowed: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-no_trailing_whitespace_in_verbatim", "title": "no_trailing_whitespace_in_verbatim", "contents": "no_trailing_whitespace_in_verbatim span Error t ", "rendered": "<h4 class='item'>let no_trailing_whitespace_in_verbatim: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-no_leading_whitespace_in_verbatim", "title": "no_leading_whitespace_in_verbatim", "contents": "no_leading_whitespace_in_verbatim span Error t ", "rendered": "<h4 class='item'>let no_leading_whitespace_in_verbatim: <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a> => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-not_allowed", "title": "not_allowed", "contents": "not_allowed option string string string span Error t suggestion what in_what ", "rendered": "<h4 class='item'>let not_allowed: (\n  ~?suggestion: option(string),\n  ~what: string,\n  ~in_what: string,\n  <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a>\n) => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-must_be_followed_by_whitespace", "title": "must_be_followed_by_whitespace", "contents": "must_be_followed_by_whitespace string span Error t what ", "rendered": "<h4 class='item'>let must_be_followed_by_whitespace: (\n  ~what: string,\n  <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a>\n) => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-must_begin_on_its_own_line", "title": "must_begin_on_its_own_line", "contents": "must_begin_on_its_own_line string span Error t what ", "rendered": "<h4 class='item'>let must_begin_on_its_own_line: (\n  ~what: string,\n  <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a>\n) => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-cannot_be_empty", "title": "cannot_be_empty", "contents": "cannot_be_empty string span Error t what ", "rendered": "<h4 class='item'>let cannot_be_empty: (~what: string, <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a>) => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-bad_section_level", "title": "bad_section_level", "contents": "bad_section_level string span Error t  ", "rendered": "<h4 class='item'>let bad_section_level: (string, <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a>) => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#value-bad_markup", "title": "bad_markup", "contents": "bad_markup string span Error t  ", "rendered": "<h4 class='item'>let bad_markup: (string, <a href=\"./api/Parse_error.html#type-Location.span\" title=\"Location.span\">span</a>) => <a href=\"./api/Parse_error.html#module-Error\">Error</a>.<a href=\"./api/Parse_error.html#type-Error.t\">t</a></h4>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html", "title": "Parse_error", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html", "title": "Parse_error", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Parse_error"},
{"href": "./api/Parse_error.html#Parse_error", "title": "Parse_error", "contents": "", "rendered": "", "breadcrumb": "Parse_error"},
{"href": "./api/Odoc_lexer.html#value-token", "title": "token", "contents": "token input Lexing lexbuf with_location Token t  ", "rendered": "<h4 class='item'>let token: (<a href=\"./api/Odoc_lexer.html#type-input\">input</a>, Lexing.lexbuf) => <a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>(<a href=\"./api/Token.html\">Token</a>.<a href=\"./api/Token.html#type-t\">t</a>)</h4>", "breadcrumb": "Odoc_lexer"},
{"href": "./api/Odoc_lexer.html#type-input", "title": "input", "contents": "input file string offset_to_location int point  lexbuf Lexing lexbuf", "rendered": "<h4 class='item'>type input = {\n  file: string,\n  offset_to_location: int => <a href=\"./api/Location_.html#type-point\" title=\"Location_.point\">point</a>,\n  lexbuf: Lexing.lexbuf\n}</h4>", "breadcrumb": "Odoc_lexer"},
{"href": "./api/Odoc_lexer.html", "title": "Odoc_lexer", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Odoc_lexer"},
{"href": "./api/Odoc_lexer.html", "title": "Odoc_lexer", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Odoc_lexer"},
{"href": "./api/Odoc_lexer.html#Odoc_lexer", "title": "Odoc_lexer", "contents": "", "rendered": "", "breadcrumb": "Odoc_lexer"},
{"href": "./api/Location_.html#value-span", "title": "span", "contents": "span list span span ", "rendered": "<h4 class='item'>let span: list(<a href=\"./api/Location_.html#type-span\">span</a>) => <a href=\"./api/Location_.html#type-span\">span</a></h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#value-same", "title": "same", "contents": "same with_location with_location  ", "rendered": "<h4 class='item'>let same: (<a href=\"./api/Location_.html#type-with_location\">with_location</a>('a), 'b) => <a href=\"./api/Location_.html#type-with_location\">with_location</a>('b)</h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#value-map", "title": "map", "contents": "map  with_location with_location  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Location_.html#type-with_location\">with_location</a>('a)) => <a href=\"./api/Location_.html#type-with_location\">with_location</a>('b)</h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#value-value", "title": "value", "contents": "value with_location ", "rendered": "<h4 class='item'>let value: <a href=\"./api/Location_.html#type-with_location\">with_location</a>('a) => 'a</h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#value-location", "title": "location", "contents": "location with_location span ", "rendered": "<h4 class='item'>let location: <a href=\"./api/Location_.html#type-with_location\">with_location</a>('a) => <a href=\"./api/Location_.html#type-span\">span</a></h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#value-at", "title": "at", "contents": "at span with_location  ", "rendered": "<h4 class='item'>let at: (<a href=\"./api/Location_.html#type-span\">span</a>, 'a) => <a href=\"./api/Location_.html#type-with_location\">with_location</a>('a)</h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#type-with_location", "title": "with_location", "contents": "with_location location span value", "rendered": "<h4 class='item'>type with_location('a) = {location: <a href=\"./api/Location_.html#type-span\">span</a>, value: 'a}</h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#type-span", "title": "span", "contents": "span file string start point end_ point", "rendered": "<h4 class='item'>type span = {file: string, start: <a href=\"./api/Location_.html#type-point\">point</a>, end_: <a href=\"./api/Location_.html#type-point\">point</a>}</h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#type-point", "title": "point", "contents": "point line int column int", "rendered": "<h4 class='item'>type point = {line: int, column: int}</h4>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html", "title": "Location_", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Location_"},
{"href": "./api/Location_.html", "title": "Location_", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Location_"},
{"href": "./api/Location_.html#Location_", "title": "Location_", "contents": "", "rendered": "", "breadcrumb": "Location_"},
{"href": "./api/Lang.html#Compilation-units", "title": "Compilation units", "contents": "", "rendered": "", "breadcrumb": "Lang"},
{"href": "./api/Lang.html", "title": "Lang", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Lang"},
{"href": "./api/Lang.html#Modules", "title": "Modules", "contents": "", "rendered": "", "breadcrumb": "Lang"},
{"href": "./api/Helpers.html#value-read_mod_longident", "title": "read_mod_longident", "contents": "read_mod_longident string module_ ", "rendered": "<h4 class='item'>let read_mod_longident: string => <a href=\"./api/Helpers.html#type-Paths.Reference.module_\" title=\"Paths.Reference.module_\">module_</a></h4>", "breadcrumb": "Helpers"},
{"href": "./api/Helpers.html#value-read_path_longident", "title": "read_path_longident", "contents": "read_path_longident string Path t ", "rendered": "<h4 class='item'>let read_path_longident: string => <a href=\"./api/Helpers.html#module-Paths.Path\" title=\"Paths.Path\">Path</a>.<a href=\"./api/Helpers.html#type-Paths.Path.t\">t</a>(\n  [&lt; Paths.Path.kind &gt; `Module ]\n)</h4>", "breadcrumb": "Helpers"},
{"href": "./api/Helpers.html#value-read_reference", "title": "read_reference", "contents": "read_reference string any ", "rendered": "<h4 class='item'>let read_reference: string => <a href=\"./api/Helpers.html#type-Paths.Reference.any\" title=\"Paths.Reference.any\">any</a></h4>", "breadcrumb": "Helpers"},
{"href": "./api/Helpers.html#value-read_longident", "title": "read_longident", "contents": "read_longident string Reference t kind ", "rendered": "<h4 class='item'>let read_longident: string => <a href=\"./api/Helpers.html#module-Paths.Reference\" title=\"Paths.Reference\">Reference</a>.<a href=\"./api/Helpers.html#type-Paths.Reference.t\">t</a>(<a href=\"./api/Helpers.html#type-Paths.Reference.kind\" title=\"Paths.Reference.kind\">kind</a>)</h4>", "breadcrumb": "Helpers"},
{"href": "./api/Helpers.html#value-read_qualifier", "title": "read_qualifier", "contents": "read_qualifier option string tag ", "rendered": "<h4 class='item'>let read_qualifier: option(string) => <a href=\"./api/Helpers.html#type-Paths.Reference.tag\" title=\"Paths.Reference.tag\">tag</a>(\n  Paths.Reference.kind\n)</h4>", "breadcrumb": "Helpers"},
{"href": "./api/Helpers.html", "title": "Helpers", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Helpers"},
{"href": "./api/Helpers.html", "title": "Helpers", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Helpers"},
{"href": "./api/Helpers.html#Helpers", "title": "Helpers", "contents": "", "rendered": "", "breadcrumb": "Helpers"},
{"href": "./api/Error.html#value-shed_warnings", "title": "shed_warnings", "contents": "shed_warnings with_warnings ", "rendered": "<h4 class='item'>let shed_warnings: <a href=\"./api/Error.html#type-with_warnings\">with_warnings</a>('a) => 'a</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#value-catch", "title": "catch", "contents": "catch unit  result t ", "rendered": "<h4 class='item'>let catch: unit => 'a => <a href=\"./api/Error.html#type-result\">result</a>('a, <a href=\"./api/Error.html#type-t\">t</a>)</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#value-to_exception", "title": "to_exception", "contents": "to_exception result t ", "rendered": "<h4 class='item'>let to_exception: <a href=\"./api/Error.html#type-result\">result</a>('a, <a href=\"./api/Error.html#type-t\">t</a>) => 'a</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#value-raise_exception", "title": "raise_exception", "contents": "raise_exception t ", "rendered": "<h4 class='item'>let raise_exception: <a href=\"./api/Error.html#type-t\">t</a> => 'a</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#type-result", "title": "result", "contents": "result ", "rendered": "<h4 class='item'>type result('a, 'b) = | Ok('a) | Error('b)\n</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#value-to_string", "title": "to_string", "contents": "to_string t string ", "rendered": "<h4 class='item'>let to_string: <a href=\"./api/Error.html#type-t\">t</a> => string</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#value-format", "title": "format", "contents": "format Pervasives format4 unit string span t  ", "rendered": "<h4 class='item'>let format: Pervasives.format4(\n  'a,\n  unit,\n  string,\n  <a href=\"./api/Location_.html#type-span\" title=\"Location_.span\">span</a> => <a href=\"./api/Error.html#type-t\">t</a>\n) => 'a</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#value-filename_only", "title": "filename_only", "contents": "filename_only string string t  ", "rendered": "<h4 class='item'>let filename_only: (string, string) => <a href=\"./api/Error.html#type-t\">t</a></h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#value-make", "title": "make", "contents": "make string span t  ", "rendered": "<h4 class='item'>let make: (string, <a href=\"./api/Location_.html#type-span\" title=\"Location_.span\">span</a>) => <a href=\"./api/Error.html#type-t\">t</a></h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#type-with_warnings", "title": "with_warnings", "contents": "with_warnings result warnings list t", "rendered": "<h4 class='item'>type with_warnings('a) = {result: 'a, warnings: list(<a href=\"./api/Error.html#type-t\">t</a>)}</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t = [ `With_filename_only of filename_only_payload\n| `With_full_location of full_location_payload ]</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#type-filename_only_payload", "title": "filename_only_payload", "contents": "filename_only_payload file string message string", "rendered": "<h4 class='item'>type filename_only_payload = {file: string, message: string}</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html#type-full_location_payload", "title": "full_location_payload", "contents": "full_location_payload location span message string", "rendered": "<h4 class='item'>type full_location_payload = {\n  location: <a href=\"./api/Location_.html#type-span\" title=\"Location_.span\">span</a>,\n  message: string\n}</h4>", "breadcrumb": "Error"},
{"href": "./api/Error.html", "title": "Error", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Error"},
{"href": "./api/Error.html", "title": "Error", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Error"},
{"href": "./api/Error.html#Error", "title": "Error", "contents": "", "rendered": "", "breadcrumb": "Error"},
{"href": "./api/Comment.html#type-docs_or_stop", "title": "docs_or_stop", "contents": "docs_or_stop ", "rendered": "<h4 class='item'>type docs_or_stop = [ `Stop | `Docs of docs ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-docs", "title": "docs", "contents": "docs list with_location block_element", "rendered": "<h4 class='item'>type docs = list(<a href=\"./api/Comment.html#type-with_location\">with_location</a>(<a href=\"./api/Comment.html#type-block_element\">block_element</a>))</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-block_element", "title": "block_element", "contents": "block_element ", "rendered": "<h4 class='item'>type block_element = [ `Paragraph of inline_element with_location list\n| `Tag of tag\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Heading of heading_level * Identifier.label * link_content\n| `Modules of Reference.module_ list\n| `Code_block of string\n| `Example of string * string\n| `Verbatim of string ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-heading_level", "title": "heading_level", "contents": "heading_level ", "rendered": "<h4 class='item'>type heading_level = [ `Subsubsection | `Section | `Title | `Subsection ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-tag", "title": "tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag = [ `Param of string * nestable_block_element with_location list\n| `Return of nestable_block_element with_location list\n| `See of\n    [ `Url | `Document | `File ] * string *\n    nestable_block_element with_location list\n| `Closed\n| `Open\n| `Before of string * nestable_block_element with_location list\n| `Canonical of Path.module_ * Reference.module_\n| `Version of string\n| `Deprecated of nestable_block_element with_location list\n| `Inline\n| `Raise of string * nestable_block_element with_location list\n| `Since of string\n| `Author of string ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-nestable_block_element", "title": "nestable_block_element", "contents": "nestable_block_element ", "rendered": "<h4 class='item'>type nestable_block_element = [ `Paragraph of inline_element with_location list\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Modules of Reference.module_ list\n| `Example of string * string\n| `Code_block of string\n| `Verbatim of string ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-inline_element", "title": "inline_element", "contents": "inline_element ", "rendered": "<h4 class='item'>type inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Reference of Reference.any * link_content\n| `Link of string * link_content\n| `Styled of style * inline_element with_location list ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-link_content", "title": "link_content", "contents": "link_content list with_location non_link_inline_element", "rendered": "<h4 class='item'>type link_content = list(\n  <a href=\"./api/Comment.html#type-with_location\">with_location</a>(<a href=\"./api/Comment.html#type-non_link_inline_element\">non_link_inline_element</a>)\n)</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-non_link_inline_element", "title": "non_link_inline_element", "contents": "non_link_inline_element ", "rendered": "<h4 class='item'>type non_link_inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Styled of style * non_link_inline_element with_location list ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-leaf_inline_element", "title": "leaf_inline_element", "contents": "leaf_inline_element ", "rendered": "<h4 class='item'>type leaf_inline_element = [ `Code_span of string | `Word of string | `Space ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-style", "title": "style", "contents": "style ", "rendered": "<h4 class='item'>type style = [ `Bold | `Superscript | `Emphasis | `Subscript | `Italic ]</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#type-with_location", "title": "with_location", "contents": "with_location with_location", "rendered": "<h4 class='item'>type with_location('a) = <a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>('a)</h4>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html", "title": "Comment", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Comment"},
{"href": "./api/Comment.html", "title": "Comment", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Comment"},
{"href": "./api/Comment.html#Comment", "title": "Comment", "contents": "", "rendered": "", "breadcrumb": "Comment"},
{"href": "./api/Ast.html#type-sections_allowed", "title": "sections_allowed", "contents": "sections_allowed ", "rendered": "<h4 class='item'>type sections_allowed = [ `No_titles | `All | `None ]</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#type-docs", "title": "docs", "contents": "docs list with_location block_element", "rendered": "<h4 class='item'>type docs = list(<a href=\"./api/Ast.html#type-with_location\">with_location</a>(<a href=\"./api/Ast.html#type-block_element\">block_element</a>))</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#type-block_element", "title": "block_element", "contents": "block_element ", "rendered": "<h4 class='item'>type block_element = [ `Paragraph of inline_element with_location list\n| `Tag of tag\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Heading of int * string option * inline_element with_location list\n| `Modules of Reference.module_ list\n| `Code_block of string\n| `Example of string * string\n| `Verbatim of string ]</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#type-tag", "title": "tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag = [ `Param of string * nestable_block_element with_location list\n| `Return of nestable_block_element with_location list\n| `See of\n    [ `Url | `Document | `File ] * string *\n    nestable_block_element with_location list\n| `Closed\n| `Open\n| `Before of string * nestable_block_element with_location list\n| `Canonical of Path.module_ * Reference.module_\n| `Version of string\n| `Deprecated of nestable_block_element with_location list\n| `Inline\n| `Raise of string * nestable_block_element with_location list\n| `Since of string\n| `Author of string ]</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#type-nestable_block_element", "title": "nestable_block_element", "contents": "nestable_block_element ", "rendered": "<h4 class='item'>type nestable_block_element = [ `Paragraph of inline_element with_location list\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Modules of Reference.module_ list\n| `Example of string * string\n| `Code_block of string\n| `Verbatim of string ]</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#type-inline_element", "title": "inline_element", "contents": "inline_element ", "rendered": "<h4 class='item'>type inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Reference of\n    reference_kind * Reference.any * inline_element with_location list\n| `Link of string * inline_element with_location list\n| `Styled of Comment.style * inline_element with_location list ]</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#type-reference_kind", "title": "reference_kind", "contents": "reference_kind ", "rendered": "<h4 class='item'>type reference_kind = [ `Simple | `With_text ]</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#type-with_location", "title": "with_location", "contents": "with_location with_location", "rendered": "<h4 class='item'>type with_location('a) = <a href=\"./api/Location_.html#type-with_location\" title=\"Location_.with_location\">with_location</a>('a)</h4>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html", "title": "Ast", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Ast"},
{"href": "./api/Ast.html", "title": "Ast", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Ast"},
{"href": "./api/Ast.html#Ast", "title": "Ast", "contents": "", "rendered": "", "breadcrumb": "Ast"}]