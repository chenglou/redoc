[].push.apply(window.complationData, [{"path": "SerializeBinary", "name": "array_str1", "type": "let array_str1: array(string)", "docs": null, "kind": "value"}, {"path": "SerializeBinary", "name": "array_conv", "type": "let array_conv: array(string)", "docs": null, "kind": "value"}, {"path": "SerializeBinary", "name": "pp_string", "type": "let pp_string: (string => 'a, ~?quote: option(char), ~?utf: option(bool), string) => 'a", "docs": null, "kind": "value", "args": [["", "string => 'a"], ["?quote", "option(char)"], ["?utf", "option(bool)"], ["", "string"]]}, {"path": "", "name": "SerializeBinary", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>array_conv\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>array_str1\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pp_string", "docs": null, "kind": "module"}, {"path": "Infix", "name": "|!", "type": "let |!: (option('a), string) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "string"]]}, {"path": "Infix", "name": "|?", "type": "let |?: (option('a), 'a) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a"]]}, {"path": "Infix", "name": "|??", "type": "let |??: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "Infix", "name": "|?#", "type": "let |?#: (option('a), Lazy.t(option('a))) => option('a)", "docs": "<p> Lazy optional default operator</p>\n", "kind": "value", "args": [["", "option('a)"], ["", "Lazy.t(option('a))"]]}, {"path": "Infix", "name": "|??#", "type": "let |??#: (option('a), Lazy.t(option('a))) => option('a)", "docs": "<p> Lazy optional default wrapped operator</p>\n", "kind": "value", "args": [["", "option('a)"], ["", "Lazy.t(option('a))"]]}, {"path": "Infix", "name": "|?>", "type": "let |?>: (option('a), 'a => option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => option('a)"]]}, {"path": "Infix", "name": "|?>>", "type": "let |?>>: (option('a), 'a => 'a) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => 'a"]]}, {"path": "Infix", "name": "fold", "type": "let fold: (option('a), 'a, 'a => 'a) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a"], ["", "'a => 'a"]]}, {"path": "Infix", "name": "|.!", "type": "let |.!: ('a => option('a), string, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "string"], ["", "'a"]]}, {"path": "Infix", "name": "|?<", "type": "let |?<: (option('a), 'a => unit) => unit", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => unit"]]}, {"path": "Infix", "name": "fileConcat", "type": "let fileConcat: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Infix", "name": "/+", "type": "let /+: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Infix", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>/+\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fileConcat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|.!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?#\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?<\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?>\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?>>\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|??\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|??#", "docs": null, "kind": "module"}, {"path": "Files", "name": "split", "type": "let split: (string, string) => list(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "absify", "type": "let absify: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "removeExtraDots", "type": "let removeExtraDots: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Files", "name": "relpath", "type": "let relpath: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "symlink", "type": "let symlink: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "maybeStat", "type": "let maybeStat: string => option(Unix.stats)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readFile", "type": "let readFile: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readFileExn", "type": "let readFileExn: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "writeFile", "type": "let writeFile: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "writeFileExn", "type": "let writeFileExn: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "copy", "type": "let copy: (~source: string, ~dest: string) => bool", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "copyExn", "type": "let copyExn: (~source: string, ~dest: string) => unit", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "exists", "type": "let exists: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "ifExists", "type": "let ifExists: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "isFile", "type": "let isFile: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "isDirectory", "type": "let isDirectory: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readDirectory", "type": "let readDirectory: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "mkdirp", "type": "let mkdirp: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "copyDeep", "type": "let copyDeep: (~source: string, ~dest: string) => unit", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "removeDeep", "type": "let removeDeep: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "walk", "type": "let walk: (string, string => unit) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string => unit"]]}, {"path": "Files", "name": "collectDirs", "type": "let collectDirs: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "collect", "type": "let collect: (~?checkDir: option(string => bool), string, string => bool) => list(string)", "docs": null, "kind": "value", "args": [["?checkDir", "option(string => bool)"], ["", "string"], ["", "string => bool"]]}, {"path": "", "name": "Files", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>absify\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collect\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copy\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copyDeep\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copyExn\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>exists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ifExists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDirectory\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>maybeStat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mkdirp\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readDirectory\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readFileExn\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relpath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeDeep\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeExtraDots\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>symlink\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>walk\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeFileExn", "docs": null, "kind": "module"}, {"path": "Commands", "name": "execFull", "type": "let execFull: (~?input: option(string), ~?env: option(array(string)), string) => (\n  list(string),\n  list(string),\n  bool\n)", "docs": null, "kind": "value", "args": [["?input", "option(string)"], ["?env", "option(array(string))"], ["", "string"]]}, {"path": "Commands", "name": "execSync", "type": "let execSync: string => (list(string), bool)", "docs": "<ul><li>Get the output of a command, in lines.\n</li></ul>", "kind": "value", "args": [["", "string"]]}, {"path": "Commands", "name": "execWithInput", "type": "let execWithInput: (string, string) => (list(string), bool)", "docs": "<ul><li>Get the output of a command, in lines.\n</li></ul>", "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Commands", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execFull\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execSync\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execWithInput", "docs": null, "kind": "module"}, {"path": "SearchScript", "name": "framework", "type": "let framework: string", "docs": null, "kind": "value"}, {"path": "SearchScript", "name": "js", "type": "let js: string", "docs": null, "kind": "value"}, {"path": "", "name": "SearchScript", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>framework\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>js", "docs": null, "kind": "module"}, {"path": "Template", "name": "header", "type": "let header: string", "docs": null, "kind": "value"}, {"path": "Template", "name": "final", "type": "let final: string", "docs": null, "kind": "value"}, {"path": "Template", "name": "make", "type": "let make: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Template", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>final\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>header\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make", "docs": null, "kind": "module"}, {"path": "Sidebar", "name": "makeToc", "type": "let makeToc: list((int, string, string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((int, string, string, string))"]]}, {"path": "Sidebar", "name": "showPackage", "type": "let showPackage: list((string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string))"]]}, {"path": "Sidebar", "name": "makeMarkdowns", "type": "let makeMarkdowns: list((string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string))"]]}, {"path": "Sidebar", "name": "generate", "type": "let generate: (\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string,\n  ~playgroundPath: option(string)\n) => string", "docs": null, "kind": "value", "args": [["", "'a"], ["", "list((int, string, string, string))"], ["", "list((string, string))"], ["", "list((string, string))"], ["", "string"], ["playgroundPath", "option(string)"]]}, {"path": "", "name": "Sidebar", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generate\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeMarkdowns\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeToc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPackage", "docs": null, "kind": "module"}, {"path": "PrintType", "name": "collectArgs", "type": "let collectArgs: (list((Asttypes.label, Types.type_expr)), Types.type_expr) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)", "docs": null, "kind": "value", "args": [["", "list((Asttypes.label, Types.type_expr))"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "pathType", "type": "type pathType = | PModule | PModuleType | PValue | PType\n", "docs": null, "kind": "type"}, {"path": "PrintType.T", "name": "stringifier", "type": "type stringifier = {\n  path: (stringifier, Path.t, pathType) => Pretty.doc,\n  expr: (stringifier, Types.type_expr) => Pretty.doc,\n  ident: (stringifier, Ident.t) => Pretty.doc,\n  decl: (stringifier, string, string, Types.type_declaration) => Pretty.doc,\n  value: (stringifier, string, string, Types.type_expr) => Pretty.doc\n}", "docs": null, "kind": "type"}, {"path": "PrintType", "name": "T", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>stringifier", "docs": null, "kind": "module"}, {"path": "PrintType", "name": "break", "type": "let break: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "space", "type": "let space: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "dedent", "type": "let dedent: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "str", "type": "let str: (~?len: option(int), string) => Pretty.doc", "docs": null, "kind": "value", "args": [["len", "int (optional)"], ["", "string"]]}, {"path": "PrintType", "name": "@!", "type": "let @!: (Pretty.doc, Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"], ["", "Pretty.doc"]]}, {"path": "PrintType", "name": "sepd_list", "type": "let sepd_list: (Pretty.doc, list('a), 'a => Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"], ["", "list('a)"], ["", "'a => Pretty.doc"]]}, {"path": "PrintType", "name": "commad_list", "type": "let commad_list: ('a => Pretty.doc, list('a)) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "'a => Pretty.doc"], ["", "list('a)"]]}, {"path": "PrintType", "name": "indentGroup", "type": "let indentGroup: Pretty.doc => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"]]}, {"path": "PrintType", "name": "tuple_list", "type": "let tuple_list: (list('a), 'a => Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "'a => Pretty.doc"]]}, {"path": "PrintType", "name": "replace", "type": "let replace: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "PrintType", "name": "htmlEscape", "type": "let htmlEscape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrintType", "name": "print_expr", "type": "let print_expr: (T.stringifier, Types.type_expr) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "print_constructor", "type": "let print_constructor: (Types.type_expr => Pretty.doc, Types.constructor_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Types.type_expr => Pretty.doc"], ["", "Types.constructor_declaration"]]}, {"path": "PrintType", "name": "print_attr", "type": "let print_attr: (T.stringifier, Types.label_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "Types.label_declaration"]]}, {"path": "PrintType", "name": "print_value", "type": "let print_value: (T.stringifier, string, string, Types.type_expr) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "string"], ["", "string"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "print_decl", "type": "let print_decl: (T.stringifier, string, string, Types.type_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "string"], ["", "string"], ["", "Types.type_declaration"]]}, {"path": "PrintType", "name": "default", "type": "let default: T.stringifier", "docs": null, "kind": "value"}, {"path": "", "name": "PrintType", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>@!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>break\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectArgs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>commad_list\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>dedent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>default\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmlEscape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indentGroup\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_attr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_constructor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_decl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_expr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_value\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>replace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sepd_list\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>space\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>str\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>tuple_list\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>pathType\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>T", "docs": null, "kind": "module"}, {"path": "Pretty", "name": "doc", "type": "type doc", "docs": "<p>Represents documents to be pretty-printed</p>\n", "kind": "type"}, {"path": "Pretty", "name": "append", "type": "let append: (doc, doc) => doc", "docs": "<p>Sequentially appends two documents</p>\n", "kind": "value", "args": [["", "doc"], ["", "doc"]]}, {"path": "Pretty", "name": "empty", "type": "let empty: doc", "docs": "<p>The empty document</p>\n", "kind": "value"}, {"path": "Pretty", "name": "group", "type": "let group: doc => doc", "docs": "<p>Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.</p>\n", "kind": "value", "args": [["", "doc"]]}, {"path": "Pretty", "name": "indent", "type": "let indent: (int, doc) => doc", "docs": "<p>Adds a level of indentation to a document</p>\n", "kind": "value", "args": [["", "int"], ["", "doc"]]}, {"path": "Pretty", "name": "line", "type": "let line: string => doc", "docs": "<p>Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Pretty", "name": "text", "type": "let text: (~?len: option(int), string) => doc", "docs": "<p>Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines</p>\n", "kind": "value", "args": [["len", "int (optional)"], ["", "string"]]}, {"path": "Pretty", "name": "back", "type": "let back: (int, string) => doc", "docs": "<p>Constructs a linebreak that dedents</p>\n", "kind": "value", "args": [["", "int"], ["", "string"]]}, {"path": "Pretty", "name": "print", "type": "let print: (\n  ~?width: option(int),\n  ~?output: option(string => unit),\n  ~?indent: option(int => unit),\n  doc\n) => unit", "docs": "<p>Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.</p>\n", "kind": "value", "args": [["width", "int (optional)"], ["output", "string => unit (optional)"], ["indent", "int => unit (optional)"], ["", "doc"]]}, {"path": "", "name": "Pretty", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>append\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>back\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>empty\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>group\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>line\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>text\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>doc", "docs": null, "kind": "module"}, {"path": "GenerateDoc", "name": "findByName", "type": "let findByName: (list(('a, 'a, 'a)), 'a) => option(('a, 'a, 'a))", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, 'a))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "findTypeByName", "type": "let findTypeByName: (list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "findValueByName", "type": "let findValueByName: (list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "isUpperCase", "type": "let isUpperCase: char => bool", "docs": null, "kind": "value", "args": [["", "char"]]}, {"path": "GenerateDoc", "name": "processPath", "type": "let processPath: (list((int, (string, list(string), 'a))), list(string), Path.t, 'a) => (\n  string,\n  list(string),\n  'a\n)", "docs": null, "kind": "value", "args": [["", "list((int, (string, list(string), 'a)))"], ["", "list(string)"], ["", "Path.t"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "printer", "type": "let printer: (\n  (string, list(string), PrintType.pathType) => option(string),\n  list((int, (string, list(string), 'a)))\n) => PrintType.T.stringifier", "docs": null, "kind": "value", "args": [["", "(string, list(string), PrintType.pathType) => option(string)"], ["", "list((int, (string, list(string), 'a)))"]]}, {"path": "GenerateDoc", "name": "ptypePrefix", "type": "let ptypePrefix: CmtFindStamps.T.pathType => string", "docs": null, "kind": "value", "args": [["", "CmtFindStamps.T.pathType"]]}, {"path": "GenerateDoc", "name": "makeId", "type": "let makeId: (list(string), CmtFindStamps.T.pathType) => string", "docs": null, "kind": "value", "args": [["", "list(string)"], ["", "CmtFindStamps.T.pathType"]]}, {"path": "GenerateDoc", "name": "defaultMain", "type": "let defaultMain: (~?addHeading: option(bool), string) => string", "docs": null, "kind": "value", "args": [["?addHeading", "option(bool)"], ["", "string"]]}, {"path": "GenerateDoc", "name": "prettyString", "type": "let prettyString: (~?width: option(int), Pretty.doc) => string", "docs": null, "kind": "value", "args": [["?width", "option(int)"], ["", "Pretty.doc"]]}, {"path": "GenerateDoc", "name": "cleanForLink", "type": "let cleanForLink: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "GenerateDoc", "name": "uniqueItems", "type": "let uniqueItems: list(('a, 'a, State.Model.Docs.docItem)) => list(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"]]}, {"path": "GenerateDoc", "name": "trackToc", "type": "let trackToc: (\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (Pervasives.ref(list((int, string, string, string))), Omd.element => option(string))", "docs": null, "kind": "value", "args": [["?lower", "option(bool)"], ["", "int"], ["", "(\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)"]]}, {"path": "GenerateDoc", "name": "div", "type": "let div: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "GenerateDoc", "name": "marked", "type": "let marked: (Omd_representation.element => option(string), string) => string", "docs": null, "kind": "value", "args": [["", "Omd_representation.element => option(string)"], ["", "string"]]}, {"path": "GenerateDoc", "name": "link", "type": "let link: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "GenerateDoc", "name": "t", "type": "type t = (\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string", "docs": null, "kind": "type"}, {"path": "GenerateDoc", "name": "generateDoc", "type": "let generateDoc: (PrintType.T.stringifier, t, list(string), int, State.Model.Docs.doc) => (\n  string,\n  list((int, string, string, string))\n)", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"], ["", "t"], ["", "list(string)"], ["", "int"], ["", "State.Model.Docs.doc"]]}, {"path": "GenerateDoc", "name": "docsForModule", "type": "let docsForModule: (\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"], ["", "t"], ["", "list(string)"], ["", "int"], ["", "string"], ["", "Omd.t"], ["", "list(State.Model.Docs.doc)"]]}, {"path": "", "name": "GenerateDoc", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cleanForLink\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultMain\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>div\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docsForModule\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findTypeByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findValueByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generateDoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isUpperCase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>link\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>marked\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>prettyString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>printer\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ptypePrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>trackToc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>uniqueItems\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t", "docs": null, "kind": "module"}, {"path": "DocsTemplate", "name": "searchStyle", "type": "let searchStyle: string", "docs": null, "kind": "value"}, {"path": "DocsTemplate", "name": "head", "type": "let head: (~relativeToRoot: string, string) => string", "docs": null, "kind": "value", "args": [["relativeToRoot", "string"], ["", "string"]]}, {"path": "", "name": "DocsTemplate", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>head\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>searchStyle", "docs": null, "kind": "module"}, {"path": "Docs", "name": "allGlobals", "type": "let allGlobals: list(string)", "docs": null, "kind": "value"}, {"path": "Docs", "name": "formatHref", "type": "let formatHref: (\n  ~warnMissing: bool,\n  string,\n  list(string),\n  (string, list(string), CmtFindStamps.T.pathType)\n) => option(string)", "docs": null, "kind": "value", "args": [["warnMissing", "bool"], ["", "string"], ["", "list(string)"], ["", "(string, list(string), CmtFindStamps.T.pathType)"]]}, {"path": "Docs", "name": "page", "type": "let page: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string", "docs": null, "kind": "value", "args": [["sourceUrl", "option(string)"], ["relativeToRoot", "string"], ["playgroundEnabled", "bool"], ["?checkHashes", "option(bool)"], ["", "string"], ["", "list((int, string, string, string))"], ["", "list((string, string))"], ["", "list((string, string))"], ["", "string"]]}, {"path": "Docs", "name": "generate", "type": "let generate: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~processDocString: GenerateDoc.t,\n  string,\n  option(Omd.t),\n  list((int, (string, list(string), 'a))),\n  list(State.Model.Docs.doc),\n  list(string),\n  list((string, string))\n) => string", "docs": null, "kind": "value", "args": [["sourceUrl", "option(string)"], ["relativeToRoot", "string"], ["playgroundEnabled", "bool"], ["processDocString", "GenerateDoc.t"], ["", "string"], ["", "option(Omd.t)"], ["", "list((int, (string, list(string), 'a)))"], ["", "list(State.Model.Docs.doc)"], ["", "list(string)"], ["", "list((string, string))"]]}, {"path": "", "name": "Docs", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>allGlobals\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>formatHref\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generate\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>page", "docs": null, "kind": "module"}, {"path": "CodeSnippets", "name": "codeBlockPrefix", "type": "let codeBlockPrefix: string", "docs": null, "kind": "value"}, {"path": "CodeSnippets", "name": "matchOption", "type": "let matchOption: (string, string) => option(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "parseCodeOptions", "type": "let parseCodeOptions: (string, 'a) => option(State.Model.codeOptions)", "docs": null, "kind": "value", "args": [["", "string"], ["", "'a"]]}, {"path": "CodeSnippets", "name": "codeBlock", "type": "type codeBlock = {\n  el: Omd.element,\n  id: int,\n  fileName: string,\n  options: State.Model.codeOptions,\n  content: string\n}", "docs": null, "kind": "type"}, {"path": "CodeSnippets", "name": "compiledBlock", "type": "type compiledBlock = {block: codeBlock, status: State.Model.compilationResult}", "docs": null, "kind": "type"}, {"path": "CodeSnippets", "name": "sprintf", "type": "let sprintf: Pervasives.format('a, unit, string) => 'a", "docs": null, "kind": "value", "args": [["", "Pervasives.format('a, unit, string)"]]}, {"path": "CodeSnippets", "name": "html", "type": "let html: (~?md: option(bool), string) => string", "docs": null, "kind": "value", "args": [["md", "bool (optional)"], ["", "string"]]}, {"path": "CodeSnippets", "name": "escapeScript", "type": "let escapeScript: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "shouldBundle", "type": "let shouldBundle: State.Model.expectation => bool", "docs": null, "kind": "value", "args": [["", "State.Model.expectation"]]}, {"path": "CodeSnippets", "name": "highlight", "type": "let highlight: (\n  ~editingEnabled: bool,\n  string,\n  string,\n  State.Model.codeOptions,\n  State.Model.compilationResult,\n  string => option(string)\n) => string", "docs": null, "kind": "value", "args": [["editingEnabled", "bool"], ["", "string"], ["", "string"], ["", "State.Model.codeOptions"], ["", "State.Model.compilationResult"], ["", "string => option(string)"]]}, {"path": "CodeSnippets", "name": "splitLines", "type": "let splitLines: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "CodeSnippets", "name": "removeHashes", "type": "let removeHashes: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "hashAll", "type": "let hashAll: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "CodeSnippets", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "fullContent", "type": "let fullContent: (string => string, State.Model.codeOptions, string) => string", "docs": null, "kind": "value", "args": [["", "string => string"], ["", "State.Model.codeOptions"], ["", "string"]]}, {"path": "CodeSnippets", "name": "optMap", "type": "let optMap: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "CodeSnippets", "name": "getSourceDirectories", "type": "let getSourceDirectories: (string, Json.t) => list(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CodeSnippets", "name": "isNative", "type": "let isNative: Json.t => bool", "docs": null, "kind": "value", "args": [["", "Json.t"]]}, {"path": "CodeSnippets", "name": "getDependencyDirs", "type": "let getDependencyDirs: (string, Json.t) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CodeSnippets", "name": "invert", "type": "let invert: ('a => bool, 'a) => bool", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a"]]}, {"path": "CodeSnippets", "name": "unique", "type": "let unique: list('a) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"]]}, {"path": "CodeSnippets", "name": "writeDeps", "type": "let writeDeps: (\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit", "docs": null, "kind": "value", "args": [["output_string", "string => unit"], ["dependencyDirs", "list((string, string))"], ["stdlibRequires", "list(string)"], ["bsRoot", "'a"], ["base", "string"]]}, {"path": "CodeSnippets", "name": "refmtCommand", "type": "let refmtCommand: (string, string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "justBscCommand", "type": "let justBscCommand: (string, string, list(string)) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "list(string)"]]}, {"path": "CodeSnippets", "name": "processBlock", "type": "let processBlock: (\n  ~?debug: option(bool),\n  ~?silentFailures: option(bool),\n  string,\n  string,\n  string,\n  string,\n  State.Model.codeOptions,\n  string,\n  list(string)\n) => State.Model.compilationResult", "docs": null, "kind": "value", "args": [["?debug", "option(bool)"], ["?silentFailures", "option(bool)"], ["", "string"], ["", "string"], ["", "string"], ["", "string"], ["", "State.Model.codeOptions"], ["", "string"], ["", "list(string)"]]}, {"path": "CodeSnippets", "name": "escape", "type": "let escape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "shouldTest", "type": "let shouldTest: State.Model.expectation => bool", "docs": null, "kind": "value", "args": [["", "State.Model.expectation"]]}, {"path": "CodeSnippets", "name": "snippetLoader", "type": "let snippetLoader: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "testBlock", "type": "let testBlock: (\n  string,\n  ~base: string,\n  State.Model.compilationResult,\n  State.Model.codeOptions,\n  string,\n  int\n) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["base", "string"], ["", "State.Model.compilationResult"], ["", "State.Model.codeOptions"], ["", "string"], ["", "int"]]}, {"path": "", "name": "CodeSnippets", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeBlockPrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escapeScript\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fullContent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getDependencyDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getSourceDirectories\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hashAll\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlight\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>html\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>invert\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isNative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>justBscCommand\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>matchOption\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>optMap\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parseCodeOptions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processBlock\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>refmtCommand\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeHashes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldBundle\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldTest\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>snippetLoader\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>splitLines\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sprintf\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>testBlock\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unique\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeDeps\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeBlock\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>compiledBlock", "docs": null, "kind": "module"}, {"path": "CodeHighlight", "name": "addHtmlEscapedToBuffer", "type": "let addHtmlEscapedToBuffer: (Buffer.t, char) => unit", "docs": null, "kind": "value", "args": [["", "Buffer.t"], ["", "char"]]}, {"path": "CodeHighlight", "name": "annotateText", "type": "let annotateText: (list((int, int, string)), list((int, string)), string, int, int) => string", "docs": null, "kind": "value", "args": [["", "list((int, int, string))"], ["", "list((int, string))"], ["", "string"], ["", "int"], ["", "int"]]}, {"path": "CodeHighlight", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "CodeHighlight", "name": "iterTags", "type": "let iterTags: (Cmt_format.binary_annots, (Location.t, string) => unit) => unit", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"], ["", "(Location.t, string) => unit"]]}, {"path": "CodeHighlight", "name": "collectRanges", "type": "let collectRanges: Cmt_format.binary_annots => list((Location.t, string))", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"]]}, {"path": "CodeHighlight", "name": "removeIfThere", "type": "let removeIfThere: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "CodeHighlight", "name": "isHashed", "type": "let isHashed: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "unHash", "type": "let unHash: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "separateHashed", "type": "let separateHashed: (int, list(string), list(string)) => (int, list(string), list(string))", "docs": null, "kind": "value", "args": [["", "int"], ["", "list(string)"], ["", "list(string)"]]}, {"path": "CodeHighlight", "name": "codeSections", "type": "let codeSections: string => (string, int, string, string, int)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "highlight", "type": "let highlight: (string, string) => (string, string, string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "CodeHighlight", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addHtmlEscapedToBuffer\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>annotateText\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeSections\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectRanges\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlight\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isHashed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterTags\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeIfThere\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>separateHashed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unHash", "docs": null, "kind": "module"}, {"path": "MakeIndex", "name": "source", "type": "let source: string", "docs": null, "kind": "value"}, {"path": "MakeIndex", "name": "run", "type": "let run: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "MakeIndex", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>run\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>source", "docs": null, "kind": "module"}, {"path": "ElasticRaw", "name": "raw", "type": "let raw: string", "docs": null, "kind": "value"}, {"path": "", "name": "ElasticRaw", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>raw", "docs": null, "kind": "module"}, {"path": "Descartes", "name": "filterNil", "type": "let filterNil: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "Descartes", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Descartes", "name": "tag", "type": "type tag = \n  | TypeHover(Types.type_expr)\n  | Cls(string)\n  | TypeDef(Ident.t)\n  | ValueDef(Ident.t)\n  | TypeRef(Path.t)\n  | ValueRef(Path.t)\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "iterTags", "type": "let iterTags: (Location.t, list(tag)) => unit => (module TypedtreeIter.IteratorArgument)", "docs": null, "kind": "value", "args": [["", "(Location.t, list(tag)) => unit"]]}, {"path": "Descartes", "name": "highlightItem", "type": "let highlightItem: Typedtree.structure_item => (\n  list((Location.t, list(tag))),\n  list(Path.t),\n  list(Path.t)\n)", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Descartes", "name": "markdownTags", "type": "type markdownTags = (Location.t, list(tag))", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "node", "type": "type node = \n  | Item(Location.t, item, list((Location.t, list(tag))), list(Path.t), list(Path.t))\n  | Module(string, list((int, node)))\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "item", "type": "type item = | Value(string, string) | Type(string, string)\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "chart", "type": "let chart: list(Typedtree.structure_item) => list((int, node))", "docs": null, "kind": "value", "args": [["", "list(Typedtree.structure_item)"]]}, {"path": "Descartes", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "Descartes", "name": "fullItem", "type": "type fullItem = {\n  id: string,\n  name: string,\n  moduleName: string,\n  typ: string,\n  loc: Location.t,\n  tags: list((Location.t, list(tag))),\n  vals: list(Path.t),\n  typs: list(Path.t),\n  text: string\n}", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "process", "type": "let process: (\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (string, (list((string, string)), list((string, string)), list((string, string))))\n  ),\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(string, fullItem)\n) => (list((string, string)), list((string, string)), list((string, string)))", "docs": null, "kind": "value", "args": [["", "string"], ["", "list(Typedtree.structure_item)"], ["", "string"], ["", "Hashtbl.t(\n  string,\n  (string, (list((string, string)), list((string, string)), list((string, string))))\n)"], ["", "Hashtbl.t(string, fullItem)"], ["", "Hashtbl.t(string, fullItem)"]]}, {"path": "Descartes", "name": "fold", "type": "let fold: ('a, 'a => 'a, option('a)) => 'a", "docs": null, "kind": "value", "args": [["", "'a"], ["", "'a => 'a"], ["", "option('a)"]]}, {"path": "Descartes", "name": "flatten", "type": "let flatten: Path.t => (Ident.t, list(string))", "docs": null, "kind": "value", "args": [["", "Path.t"]]}, {"path": "Descartes", "name": "toId", "type": "let toId: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Descartes", "name": "deepValue", "type": "let deepValue: (\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))\n) => [&gt; `Global of 'o1 | `Missing ]", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "('a, ('a, list(('a, 'a)), list(('a, 'a))))"], ["", "'a"], ["", "Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))"]]}, {"path": "Descartes", "name": "deepType", "type": "let deepType: (\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))\n) => [&gt; `Global of 'n1 | `Missing ]", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "('a, (list(('a, 'a)), 'a, list(('a, 'a))))"], ["", "'a"], ["", "Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))"]]}, {"path": "Descartes", "name": "resolveValue", "type": "let resolveValue: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string))))),\n  Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string))))),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]", "docs": null, "kind": "value", "args": [["", "string"], ["", "Hashtbl.t(string, 'a)"], ["", "Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string)))))"], ["", "Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string)))))"], ["", "Path.t"]]}, {"path": "Descartes", "name": "resolveType", "type": "let resolveType: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string))))),\n  Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string))))),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]", "docs": null, "kind": "value", "args": [["", "string"], ["", "Hashtbl.t(string, 'a)"], ["", "Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string)))))"], ["", "Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string)))))"], ["", "Path.t"]]}, {"path": "Descartes", "name": "unique", "type": "let unique: list('a) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"]]}, {"path": "Descartes", "name": "processMany", "type": "let processMany: list((string, list(Typedtree.structure_item), string)) => (\n  list((string, string, string, string, Location.t, string, list(fullItem), list(fullItem))),\n  list((string, string, list(string)))\n)", "docs": null, "kind": "value", "args": [["", "list((string, list(Typedtree.structure_item), string))"]]}, {"path": "Descartes", "name": "gatherCmts", "type": "let gatherCmts: (string, string, list(string)) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "list(string)"]]}, {"path": "Descartes", "name": "main", "type": "let main: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "", "name": "Descartes", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>chart\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deepType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deepValue\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterNil\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>flatten\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>gatherCmts\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlightItem\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterTags\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>process\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processMany\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveValue\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unique\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fullItem\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>item\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>markdownTags\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>node\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "Typing", "name": "tag", "type": "type tag = | Type | Value | Module | Constructor(string) | Attribute(string)\n", "docs": null, "kind": "type"}, {"path": "Typing", "name": "ident", "type": "type ident('a) = ('a, tag)", "docs": null, "kind": "type"}, {"path": "Typing", "name": "mapIdent", "type": "let mapIdent: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "Typing", "name": "contents", "type": "let contents: ('a, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "('a, 'a)"]]}, {"path": "Typing", "name": "toString", "type": "let toString: ('a => string, ('a, tag)) => string", "docs": null, "kind": "value", "args": [["", "'a => string"], ["", "('a, tag)"]]}, {"path": "Typing", "name": "showPath", "type": "let showPath: (~?paren: option(string => bool), Path.t) => string", "docs": null, "kind": "value", "args": [["paren", "string => bool (optional)"], ["", "Path.t"]]}, {"path": "Typing", "name": "showLident", "type": "let showLident: Longident.t => string", "docs": null, "kind": "value", "args": [["", "Longident.t"]]}, {"path": "Typing", "name": "showLoc", "type": "let showLoc: Location.t => string", "docs": null, "kind": "value", "args": [["", "Location.t"]]}, {"path": "Typing", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing", "name": "openn", "type": "type openn = {mut used: list(ident(Longident.t)), path: Path.t, loc: Location.t}", "docs": null, "kind": "type"}, {"path": "Typing", "name": "open_stack", "type": "type open_stack = {mut closed: list(openn), mut opens: list(openn), parent: option(open_stack)}", "docs": null, "kind": "type"}, {"path": "Typing", "name": "pathToLident", "type": "let pathToLident: Path.t => Longident.t", "docs": null, "kind": "value", "args": [["", "Path.t"]]}, {"path": "Typing", "name": "addLidentToPath", "type": "let addLidentToPath: (Path.t, Longident.t) => Path.t", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing", "name": "usesOpen", "type": "let usesOpen: (Longident.t, Path.t) => bool", "docs": null, "kind": "value", "args": [["", "Longident.t"], ["", "Path.t"]]}, {"path": "Typing", "name": "relative", "type": "let relative: (Longident.t, Path.t) => Path.t", "docs": null, "kind": "value", "args": [["", "Longident.t"], ["", "Path.t"]]}, {"path": "Typing.F", "name": "enter_structure", "type": "let enter_structure: Typedtree.structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure"]]}, {"path": "Typing.F", "name": "enter_value_description", "type": "let enter_value_description: Typedtree.value_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_description"]]}, {"path": "Typing.F", "name": "enter_type_extension", "type": "let enter_type_extension: Typedtree.type_extension => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_extension"]]}, {"path": "Typing.F", "name": "enter_extension_constructor", "type": "let enter_extension_constructor: Typedtree.extension_constructor => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.extension_constructor"]]}, {"path": "Typing.F", "name": "enter_pattern", "type": "let enter_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "enter_expression", "type": "let enter_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "enter_package_type", "type": "let enter_package_type: Typedtree.package_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.package_type"]]}, {"path": "Typing.F", "name": "enter_signature", "type": "let enter_signature: Typedtree.signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature"]]}, {"path": "Typing.F", "name": "enter_signature_item", "type": "let enter_signature_item: Typedtree.signature_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature_item"]]}, {"path": "Typing.F", "name": "enter_module_type_declaration", "type": "let enter_module_type_declaration: Typedtree.module_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type_declaration"]]}, {"path": "Typing.F", "name": "enter_module_type", "type": "let enter_module_type: Typedtree.module_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type"]]}, {"path": "Typing.F", "name": "enter_module_expr", "type": "let enter_module_expr: Typedtree.module_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_expr"]]}, {"path": "Typing.F", "name": "enter_with_constraint", "type": "let enter_with_constraint: Typedtree.with_constraint => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.with_constraint"]]}, {"path": "Typing.F", "name": "enter_class_expr", "type": "let enter_class_expr: Typedtree.class_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_expr"]]}, {"path": "Typing.F", "name": "enter_class_signature", "type": "let enter_class_signature: Typedtree.class_signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_signature"]]}, {"path": "Typing.F", "name": "enter_class_declaration", "type": "let enter_class_declaration: Typedtree.class_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_declaration"]]}, {"path": "Typing.F", "name": "enter_class_description", "type": "let enter_class_description: Typedtree.class_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_description"]]}, {"path": "Typing.F", "name": "enter_class_type_declaration", "type": "let enter_class_type_declaration: Typedtree.class_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_declaration"]]}, {"path": "Typing.F", "name": "enter_class_type", "type": "let enter_class_type: Typedtree.class_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type"]]}, {"path": "Typing.F", "name": "enter_class_type_field", "type": "let enter_class_type_field: Typedtree.class_type_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_field"]]}, {"path": "Typing.F", "name": "enter_core_type", "type": "let enter_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "enter_class_structure", "type": "let enter_class_structure: Typedtree.class_structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_structure"]]}, {"path": "Typing.F", "name": "enter_class_field", "type": "let enter_class_field: Typedtree.class_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_field"]]}, {"path": "Typing.F", "name": "enter_structure_item", "type": "let enter_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "leave_structure", "type": "let leave_structure: Typedtree.structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure"]]}, {"path": "Typing.F", "name": "leave_value_description", "type": "let leave_value_description: Typedtree.value_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_description"]]}, {"path": "Typing.F", "name": "leave_type_extension", "type": "let leave_type_extension: Typedtree.type_extension => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_extension"]]}, {"path": "Typing.F", "name": "leave_extension_constructor", "type": "let leave_extension_constructor: Typedtree.extension_constructor => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.extension_constructor"]]}, {"path": "Typing.F", "name": "leave_pattern", "type": "let leave_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "leave_expression", "type": "let leave_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "leave_package_type", "type": "let leave_package_type: Typedtree.package_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.package_type"]]}, {"path": "Typing.F", "name": "leave_signature", "type": "let leave_signature: Typedtree.signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature"]]}, {"path": "Typing.F", "name": "leave_signature_item", "type": "let leave_signature_item: Typedtree.signature_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature_item"]]}, {"path": "Typing.F", "name": "leave_module_type_declaration", "type": "let leave_module_type_declaration: Typedtree.module_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type_declaration"]]}, {"path": "Typing.F", "name": "leave_module_type", "type": "let leave_module_type: Typedtree.module_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type"]]}, {"path": "Typing.F", "name": "leave_module_expr", "type": "let leave_module_expr: Typedtree.module_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_expr"]]}, {"path": "Typing.F", "name": "leave_with_constraint", "type": "let leave_with_constraint: Typedtree.with_constraint => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.with_constraint"]]}, {"path": "Typing.F", "name": "leave_class_expr", "type": "let leave_class_expr: Typedtree.class_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_expr"]]}, {"path": "Typing.F", "name": "leave_class_signature", "type": "let leave_class_signature: Typedtree.class_signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_signature"]]}, {"path": "Typing.F", "name": "leave_class_declaration", "type": "let leave_class_declaration: Typedtree.class_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_declaration"]]}, {"path": "Typing.F", "name": "leave_class_description", "type": "let leave_class_description: Typedtree.class_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_description"]]}, {"path": "Typing.F", "name": "leave_class_type_declaration", "type": "let leave_class_type_declaration: Typedtree.class_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_declaration"]]}, {"path": "Typing.F", "name": "leave_class_type", "type": "let leave_class_type: Typedtree.class_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type"]]}, {"path": "Typing.F", "name": "leave_class_type_field", "type": "let leave_class_type_field: Typedtree.class_type_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_field"]]}, {"path": "Typing.F", "name": "leave_core_type", "type": "let leave_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "leave_class_structure", "type": "let leave_class_structure: Typedtree.class_structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_structure"]]}, {"path": "Typing.F", "name": "leave_class_field", "type": "let leave_class_field: Typedtree.class_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_field"]]}, {"path": "Typing.F", "name": "leave_structure_item", "type": "let leave_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "enter_bindings", "type": "let enter_bindings: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_binding", "type": "let enter_binding: Typedtree.value_binding => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_binding"]]}, {"path": "Typing.F", "name": "leave_binding", "type": "let leave_binding: Typedtree.value_binding => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_binding"]]}, {"path": "Typing.F", "name": "leave_bindings", "type": "let leave_bindings: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_type_declarations", "type": "let enter_type_declarations: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_type_declaration", "type": "let enter_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "leave_type_declaration", "type": "let leave_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "leave_type_declarations", "type": "let leave_type_declarations: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "depth", "type": "let depth: Pervasives.ref(int)", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "root_stack", "type": "let root_stack: open_stack", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "closed_stacks", "type": "let closed_stacks: Pervasives.ref(list(open_stack))", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "open_stack", "type": "let open_stack: Pervasives.ref(open_stack)", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "new_stack", "type": "let new_stack: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "pop_stack", "type": "let pop_stack: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "add_open", "type": "let add_open: (Path.t, Location.t) => unit", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Location.t"]]}, {"path": "Typing.F", "name": "pop_open", "type": "let pop_open: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "add_use", "type": "let add_use: (~?inferable: option(bool), (Path.t, tag), Longident.t, Location.t) => unit", "docs": null, "kind": "value", "args": [["?inferable", "option(bool)"], ["", "(Path.t, tag)"], ["", "Longident.t"], ["", "Location.t"]]}, {"path": "Typing.F", "name": "dig", "type": "let dig: Types.type_expr => Types.type_expr", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing.F", "name": "enter_core_type", "type": "let enter_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "enter_type_declaration", "type": "let enter_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "handleConstructor", "type": "let handleConstructor: (Path.t, Longident.t) => (string, Longident.t)", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing.F", "name": "handleRecord", "type": "let handleRecord: (Path.t, Longident.t) => Longident.t", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing.F", "name": "enter_pattern", "type": "let enter_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "enter_structure_item", "type": "let enter_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "leave_structure_item", "type": "let leave_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "enter_expression", "type": "let enter_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "leave_expression", "type": "let leave_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing", "name": "F", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>add_open\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>add_use\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>closed_stacks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>depth\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>dig\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_core_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_expression\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_pattern\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_structure_item\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_type_declaration\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleConstructor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleRecord\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>leave_expression\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>leave_structure_item\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>new_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>open_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pop_open\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pop_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>root_stack", "docs": null, "kind": "module"}, {"path": "Typing", "name": "ppos", "type": "let ppos: Lexing.position => string", "docs": null, "kind": "value", "args": [["", "Lexing.position"]]}, {"path": "Typing", "name": "entry", "type": "let entry: (Location.t, ~depth: int, ~?mend: option(Lexing.position), string) => string", "docs": null, "kind": "value", "args": [["", "Location.t"], ["depth", "int"], ["?mend", "option(Lexing.position)"], ["", "string"]]}, {"path": "Typing", "name": "type_to_string", "type": "let type_to_string: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing", "name": "externalsUsed", "type": "type externalsUsed = list((Path.t, Location.t))", "docs": null, "kind": "type"}, {"path": "Typing", "name": "bindings", "type": "type bindings = Hashtbl.t(int, list((Ident.t, Location.t)))", "docs": null, "kind": "type"}, {"path": "Typing", "name": "truncateLoc", "type": "let truncateLoc: (int, Location.t) => Location.t", "docs": "<ul><li>Ok, so for things that have IDs, e.g. things in this file...\nwe will just have a mapping of {id: {declaration: opt(ident), usages: list((ident, loc))}}</li></ul>", "kind": "value", "args": [["", "int"], ["", "Location.t"]]}, {"path": "Typing", "name": "collectTypes", "type": "let collectTypes: Cmt_format.binary_annots => (\n  Hashtbl.t((Lexing.position, Lexing.position), Types.type_expr),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(openn),\n  Hashtbl.t((int, int), (Path.t, tag))\n)", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"]]}, {"path": "", "name": "Typing", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addLidentToPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectTypes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>contents\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>entry\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapIdent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pathToLident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ppos\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>truncateLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>type_to_string\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>usesOpen\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>bindings\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>externalsUsed\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>ident\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>open_stack\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>openn\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>F", "docs": null, "kind": "module"}, {"path": "PrepareUtils", "name": "addToPath", "type": "let addToPath: (('a, list('a)), 'a) => ('a, list('a))", "docs": null, "kind": "value", "args": [["", "('a, list('a))"], ["", "'a"]]}, {"path": "PrepareUtils", "name": "toFullPath", "type": "let toFullPath: ('a, ('a, 'a)) => ('a, 'a, 'a)", "docs": null, "kind": "value", "args": [["", "'a"], ["", "('a, 'a)"]]}, {"path": "PrepareUtils", "name": "filterNil", "type": "let filterNil: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "PrepareUtils", "name": "findStars", "type": "let findStars: string => option(int)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrepareUtils", "name": "combine", "type": "let combine: (option(int), option(int)) => option(int)", "docs": null, "kind": "value", "args": [["", "option(int)"], ["", "option(int)"]]}, {"path": "PrepareUtils", "name": "trimFirst", "type": "let trimFirst: (int, string) => string", "docs": null, "kind": "value", "args": [["", "int"], ["", "string"]]}, {"path": "PrepareUtils", "name": "cleanOffStars", "type": "let cleanOffStars: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrepareUtils", "name": "findDocAttribute", "type": "let findDocAttribute: (string => 'a, list((Asttypes.loc(string), Parsetree.payload))) => option('a)", "docs": null, "kind": "value", "args": [["", "string => 'a"], ["", "list((Asttypes.loc(string), Parsetree.payload))"]]}, {"path": "PrepareUtils", "name": "hasNoDoc", "type": "let hasNoDoc: list((Asttypes.loc(string), 'a)) => bool", "docs": null, "kind": "value", "args": [["", "list((Asttypes.loc(string), 'a))"]]}, {"path": "PrepareUtils", "name": "foldOpt", "type": "let foldOpt: ('a => option('a), list('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"], ["", "list('a)"]]}, {"path": "PrepareUtils", "name": "either", "type": "let either: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "PrepareUtils", "name": "mapFst", "type": "let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "PrepareUtils", "name": "eitherFirst", "type": "let eitherFirst: (option('a), (option('a), 'a)) => (option('a), 'a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "(option('a), 'a)"]]}, {"path": "PrepareUtils", "name": "compose", "type": "let compose: ('a => bool, 'a => option('a), 'a) => option('a)", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a => option('a)"], ["", "'a"]]}, {"path": "", "name": "PrepareUtils", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addToPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cleanOffStars\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>combine\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compose\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>either\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eitherFirst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterNil\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findDocAttribute\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findStars\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>foldOpt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hasNoDoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapFst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toFullPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>trimFirst", "docs": null, "kind": "module"}, {"path": "CmtFindStamps.T", "name": "pathType", "type": "type pathType = | PModule | PModuleType | PValue | PType\n = PrintType.pathType", "docs": null, "kind": "type"}, {"path": "CmtFindStamps.T", "name": "fullPath", "type": "type fullPath = (string, list(string), pathType)", "docs": null, "kind": "type"}, {"path": "CmtFindStamps.T", "name": "stamps", "type": "type stamps = list((int, fullPath))", "docs": null, "kind": "type"}, {"path": "CmtFindStamps", "name": "T", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fullPath\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>pathType\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>stamps", "docs": null, "kind": "module"}, {"path": "CmtFindStamps", "name": "stampsFromTypesSignature", "type": "let stampsFromTypesSignature: (('a, list(string)), list(Types.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Types.signature_item)"]]}, {"path": "CmtFindStamps", "name": "stampsFromTypedtreeInterface", "type": "let stampsFromTypedtreeInterface: (('a, list(string)), list(Typedtree.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Typedtree.signature_item)"]]}, {"path": "CmtFindStamps", "name": "stampsFromTypedtreeImplementation", "type": "let stampsFromTypedtreeImplementation: (('a, list(string)), list(Typedtree.structure_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Typedtree.structure_item)"]]}, {"path": "", "name": "CmtFindStamps", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypedtreeImplementation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypedtreeInterface\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypesSignature\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>T", "docs": null, "kind": "module"}, {"path": "CmtFindDocItems", "name": "iter", "type": "let iter: ((string, option(Omd.t), State.Model.Docs.docItem) => 'a, State.Model.Docs.doc) => unit", "docs": null, "kind": "value", "args": [["", "(string, option(Omd.t), State.Model.Docs.docItem) => 'a"], ["", "State.Model.Docs.doc"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromTypes", "type": "let docItemsFromTypes: (string => Omd.t, Types.signature) => list(State.Model.Docs.doc)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.signature"]]}, {"path": "CmtFindDocItems", "name": "moduleContents", "type": "let moduleContents: (string => Omd.t, Types.module_type) => State.Model.Docs.moduleContents", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.module_type"]]}, {"path": "CmtFindDocItems", "name": "either", "type": "let either: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "CmtFindDocItems", "name": "mapFst", "type": "let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "CmtFindDocItems", "name": "eitherFirst", "type": "let eitherFirst: (option('a), (option('a), 'a)) => (option('a), 'a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "(option('a), 'a)"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromStructure", "type": "let docItemsFromStructure: (string => Omd.t, list(Typedtree.structure_item)) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "list(Typedtree.structure_item)"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsStr", "type": "let moduleContentsStr: (string => Omd.t, Typedtree.module_expr) => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Typedtree.module_expr"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsType", "type": "let moduleContentsType: (string => Omd.t, Types.module_type) => State.Model.Docs.moduleContents", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.module_type"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromSignature", "type": "let docItemsFromSignature: (string => Omd.t, list(Typedtree.signature_item)) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "list(Typedtree.signature_item)"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsSig", "type": "let moduleContentsSig: (string => Omd.t, Typedtree.module_type) => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Typedtree.module_type"]]}, {"path": "", "name": "CmtFindDocItems", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromSignature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromStructure\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromTypes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>either\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eitherFirst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iter\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapFst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContents\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsSig\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsStr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsType", "docs": null, "kind": "module"}, {"path": "SerializeBinary", "name": "array_str1", "type": "let array_str1: array(string)", "docs": null, "kind": "value"}, {"path": "SerializeBinary", "name": "array_conv", "type": "let array_conv: array(string)", "docs": null, "kind": "value"}, {"path": "SerializeBinary", "name": "pp_string", "type": "let pp_string: (string => 'a, ~?quote: option(char), ~?utf: option(bool), string) => 'a", "docs": null, "kind": "value", "args": [["", "string => 'a"], ["?quote", "option(char)"], ["?utf", "option(bool)"], ["", "string"]]}, {"path": "", "name": "SerializeBinary", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>array_conv\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>array_str1\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pp_string", "docs": null, "kind": "module"}, {"path": "Infix", "name": "|!", "type": "let |!: (option('a), string) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "string"]]}, {"path": "Infix", "name": "|?", "type": "let |?: (option('a), 'a) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a"]]}, {"path": "Infix", "name": "|??", "type": "let |??: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "Infix", "name": "|?#", "type": "let |?#: (option('a), Lazy.t(option('a))) => option('a)", "docs": "<p> Lazy optional default operator</p>\n", "kind": "value", "args": [["", "option('a)"], ["", "Lazy.t(option('a))"]]}, {"path": "Infix", "name": "|??#", "type": "let |??#: (option('a), Lazy.t(option('a))) => option('a)", "docs": "<p> Lazy optional default wrapped operator</p>\n", "kind": "value", "args": [["", "option('a)"], ["", "Lazy.t(option('a))"]]}, {"path": "Infix", "name": "|?>", "type": "let |?>: (option('a), 'a => option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => option('a)"]]}, {"path": "Infix", "name": "|?>>", "type": "let |?>>: (option('a), 'a => 'a) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => 'a"]]}, {"path": "Infix", "name": "fold", "type": "let fold: (option('a), 'a, 'a => 'a) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a"], ["", "'a => 'a"]]}, {"path": "Infix", "name": "|.!", "type": "let |.!: ('a => option('a), string, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "string"], ["", "'a"]]}, {"path": "Infix", "name": "|?<", "type": "let |?<: (option('a), 'a => unit) => unit", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => unit"]]}, {"path": "Infix", "name": "fileConcat", "type": "let fileConcat: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Infix", "name": "/+", "type": "let /+: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Infix", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>/+\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fileConcat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|.!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?#\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?<\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?>\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?>>\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|??\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|??#", "docs": null, "kind": "module"}, {"path": "Files", "name": "split", "type": "let split: (string, string) => list(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "absify", "type": "let absify: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "removeExtraDots", "type": "let removeExtraDots: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Files", "name": "relpath", "type": "let relpath: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "symlink", "type": "let symlink: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "maybeStat", "type": "let maybeStat: string => option(Unix.stats)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readFile", "type": "let readFile: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readFileExn", "type": "let readFileExn: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "writeFile", "type": "let writeFile: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "writeFileExn", "type": "let writeFileExn: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "copy", "type": "let copy: (~source: string, ~dest: string) => bool", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "copyExn", "type": "let copyExn: (~source: string, ~dest: string) => unit", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "exists", "type": "let exists: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "ifExists", "type": "let ifExists: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "isFile", "type": "let isFile: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "isDirectory", "type": "let isDirectory: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readDirectory", "type": "let readDirectory: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "mkdirp", "type": "let mkdirp: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "copyDeep", "type": "let copyDeep: (~source: string, ~dest: string) => unit", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "removeDeep", "type": "let removeDeep: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "walk", "type": "let walk: (string, string => unit) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string => unit"]]}, {"path": "Files", "name": "collectDirs", "type": "let collectDirs: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "collect", "type": "let collect: (~?checkDir: option(string => bool), string, string => bool) => list(string)", "docs": null, "kind": "value", "args": [["?checkDir", "option(string => bool)"], ["", "string"], ["", "string => bool"]]}, {"path": "", "name": "Files", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>absify\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collect\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copy\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copyDeep\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copyExn\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>exists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ifExists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDirectory\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>maybeStat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mkdirp\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readDirectory\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readFileExn\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relpath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeDeep\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeExtraDots\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>symlink\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>walk\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeFileExn", "docs": null, "kind": "module"}, {"path": "Commands", "name": "execFull", "type": "let execFull: (~?input: option(string), ~?env: option(array(string)), string) => (\n  list(string),\n  list(string),\n  bool\n)", "docs": null, "kind": "value", "args": [["?input", "option(string)"], ["?env", "option(array(string))"], ["", "string"]]}, {"path": "Commands", "name": "execSync", "type": "let execSync: string => (list(string), bool)", "docs": "<ul><li>Get the output of a command, in lines.\n</li></ul>", "kind": "value", "args": [["", "string"]]}, {"path": "Commands", "name": "execWithInput", "type": "let execWithInput: (string, string) => (list(string), bool)", "docs": "<ul><li>Get the output of a command, in lines.\n</li></ul>", "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Commands", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execFull\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execSync\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execWithInput", "docs": null, "kind": "module"}, {"path": "SearchScript", "name": "framework", "type": "let framework: string", "docs": null, "kind": "value"}, {"path": "SearchScript", "name": "js", "type": "let js: string", "docs": null, "kind": "value"}, {"path": "", "name": "SearchScript", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>framework\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>js", "docs": null, "kind": "module"}, {"path": "Template", "name": "header", "type": "let header: string", "docs": null, "kind": "value"}, {"path": "Template", "name": "final", "type": "let final: string", "docs": null, "kind": "value"}, {"path": "Template", "name": "make", "type": "let make: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Template", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>final\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>header\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make", "docs": null, "kind": "module"}, {"path": "Sidebar", "name": "makeToc", "type": "let makeToc: list((int, string, string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((int, string, string, string))"]]}, {"path": "Sidebar", "name": "showPackage", "type": "let showPackage: list((string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string))"]]}, {"path": "Sidebar", "name": "makeMarkdowns", "type": "let makeMarkdowns: list((string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string))"]]}, {"path": "Sidebar", "name": "generate", "type": "let generate: (\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string,\n  ~playgroundPath: option(string)\n) => string", "docs": null, "kind": "value", "args": [["", "'a"], ["", "list((int, string, string, string))"], ["", "list((string, string))"], ["", "list((string, string))"], ["", "string"], ["playgroundPath", "option(string)"]]}, {"path": "", "name": "Sidebar", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generate\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeMarkdowns\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeToc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPackage", "docs": null, "kind": "module"}, {"path": "PrintType", "name": "collectArgs", "type": "let collectArgs: (list((Asttypes.label, Types.type_expr)), Types.type_expr) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)", "docs": null, "kind": "value", "args": [["", "list((Asttypes.label, Types.type_expr))"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "pathType", "type": "type pathType = | PModule | PModuleType | PValue | PType\n", "docs": null, "kind": "type"}, {"path": "PrintType.T", "name": "stringifier", "type": "type stringifier = {\n  path: (stringifier, Path.t, pathType) => Pretty.doc,\n  expr: (stringifier, Types.type_expr) => Pretty.doc,\n  ident: (stringifier, Ident.t) => Pretty.doc,\n  decl: (stringifier, string, string, Types.type_declaration) => Pretty.doc,\n  value: (stringifier, string, string, Types.type_expr) => Pretty.doc\n}", "docs": null, "kind": "type"}, {"path": "PrintType", "name": "T", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>stringifier", "docs": null, "kind": "module"}, {"path": "PrintType", "name": "break", "type": "let break: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "space", "type": "let space: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "dedent", "type": "let dedent: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "str", "type": "let str: (~?len: option(int), string) => Pretty.doc", "docs": null, "kind": "value", "args": [["len", "int (optional)"], ["", "string"]]}, {"path": "PrintType", "name": "@!", "type": "let @!: (Pretty.doc, Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"], ["", "Pretty.doc"]]}, {"path": "PrintType", "name": "sepd_list", "type": "let sepd_list: (Pretty.doc, list('a), 'a => Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"], ["", "list('a)"], ["", "'a => Pretty.doc"]]}, {"path": "PrintType", "name": "commad_list", "type": "let commad_list: ('a => Pretty.doc, list('a)) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "'a => Pretty.doc"], ["", "list('a)"]]}, {"path": "PrintType", "name": "indentGroup", "type": "let indentGroup: Pretty.doc => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"]]}, {"path": "PrintType", "name": "tuple_list", "type": "let tuple_list: (list('a), 'a => Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "'a => Pretty.doc"]]}, {"path": "PrintType", "name": "replace", "type": "let replace: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "PrintType", "name": "htmlEscape", "type": "let htmlEscape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrintType", "name": "print_expr", "type": "let print_expr: (T.stringifier, Types.type_expr) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "print_constructor", "type": "let print_constructor: (Types.type_expr => Pretty.doc, Types.constructor_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Types.type_expr => Pretty.doc"], ["", "Types.constructor_declaration"]]}, {"path": "PrintType", "name": "print_attr", "type": "let print_attr: (T.stringifier, Types.label_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "Types.label_declaration"]]}, {"path": "PrintType", "name": "print_value", "type": "let print_value: (T.stringifier, string, string, Types.type_expr) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "string"], ["", "string"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "print_decl", "type": "let print_decl: (T.stringifier, string, string, Types.type_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "string"], ["", "string"], ["", "Types.type_declaration"]]}, {"path": "PrintType", "name": "default", "type": "let default: T.stringifier", "docs": null, "kind": "value"}, {"path": "", "name": "PrintType", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>@!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>break\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectArgs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>commad_list\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>dedent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>default\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmlEscape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indentGroup\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_attr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_constructor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_decl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_expr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_value\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>replace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sepd_list\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>space\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>str\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>tuple_list\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>pathType\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>T", "docs": null, "kind": "module"}, {"path": "Pretty", "name": "doc", "type": "type doc", "docs": "<p>Represents documents to be pretty-printed</p>\n", "kind": "type"}, {"path": "Pretty", "name": "append", "type": "let append: (doc, doc) => doc", "docs": "<p>Sequentially appends two documents</p>\n", "kind": "value", "args": [["", "doc"], ["", "doc"]]}, {"path": "Pretty", "name": "empty", "type": "let empty: doc", "docs": "<p>The empty document</p>\n", "kind": "value"}, {"path": "Pretty", "name": "group", "type": "let group: doc => doc", "docs": "<p>Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.</p>\n", "kind": "value", "args": [["", "doc"]]}, {"path": "Pretty", "name": "indent", "type": "let indent: (int, doc) => doc", "docs": "<p>Adds a level of indentation to a document</p>\n", "kind": "value", "args": [["", "int"], ["", "doc"]]}, {"path": "Pretty", "name": "line", "type": "let line: string => doc", "docs": "<p>Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Pretty", "name": "text", "type": "let text: (~?len: option(int), string) => doc", "docs": "<p>Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines</p>\n", "kind": "value", "args": [["len", "int (optional)"], ["", "string"]]}, {"path": "Pretty", "name": "back", "type": "let back: (int, string) => doc", "docs": "<p>Constructs a linebreak that dedents</p>\n", "kind": "value", "args": [["", "int"], ["", "string"]]}, {"path": "Pretty", "name": "print", "type": "let print: (\n  ~?width: option(int),\n  ~?output: option(string => unit),\n  ~?indent: option(int => unit),\n  doc\n) => unit", "docs": "<p>Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.</p>\n", "kind": "value", "args": [["width", "int (optional)"], ["output", "string => unit (optional)"], ["indent", "int => unit (optional)"], ["", "doc"]]}, {"path": "", "name": "Pretty", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>append\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>back\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>empty\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>group\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>line\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>text\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>doc", "docs": null, "kind": "module"}, {"path": "GenerateDoc", "name": "findByName", "type": "let findByName: (list(('a, 'a, 'a)), 'a) => option(('a, 'a, 'a))", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, 'a))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "findTypeByName", "type": "let findTypeByName: (list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "findValueByName", "type": "let findValueByName: (list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "isUpperCase", "type": "let isUpperCase: char => bool", "docs": null, "kind": "value", "args": [["", "char"]]}, {"path": "GenerateDoc", "name": "processPath", "type": "let processPath: (list((int, (string, list(string), 'a))), list(string), Path.t, 'a) => (\n  string,\n  list(string),\n  'a\n)", "docs": null, "kind": "value", "args": [["", "list((int, (string, list(string), 'a)))"], ["", "list(string)"], ["", "Path.t"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "printer", "type": "let printer: (\n  (string, list(string), PrintType.pathType) => option(string),\n  list((int, (string, list(string), 'a)))\n) => PrintType.T.stringifier", "docs": null, "kind": "value", "args": [["", "(string, list(string), PrintType.pathType) => option(string)"], ["", "list((int, (string, list(string), 'a)))"]]}, {"path": "GenerateDoc", "name": "ptypePrefix", "type": "let ptypePrefix: CmtFindStamps.T.pathType => string", "docs": null, "kind": "value", "args": [["", "CmtFindStamps.T.pathType"]]}, {"path": "GenerateDoc", "name": "makeId", "type": "let makeId: (list(string), CmtFindStamps.T.pathType) => string", "docs": null, "kind": "value", "args": [["", "list(string)"], ["", "CmtFindStamps.T.pathType"]]}, {"path": "GenerateDoc", "name": "defaultMain", "type": "let defaultMain: (~?addHeading: option(bool), string) => string", "docs": null, "kind": "value", "args": [["?addHeading", "option(bool)"], ["", "string"]]}, {"path": "GenerateDoc", "name": "prettyString", "type": "let prettyString: (~?width: option(int), Pretty.doc) => string", "docs": null, "kind": "value", "args": [["?width", "option(int)"], ["", "Pretty.doc"]]}, {"path": "GenerateDoc", "name": "cleanForLink", "type": "let cleanForLink: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "GenerateDoc", "name": "uniqueItems", "type": "let uniqueItems: list(('a, 'a, State.Model.Docs.docItem)) => list(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"]]}, {"path": "GenerateDoc", "name": "trackToc", "type": "let trackToc: (\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (Pervasives.ref(list((int, string, string, string))), Omd.element => option(string))", "docs": null, "kind": "value", "args": [["?lower", "option(bool)"], ["", "int"], ["", "(\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)"]]}, {"path": "GenerateDoc", "name": "div", "type": "let div: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "GenerateDoc", "name": "marked", "type": "let marked: (Omd_representation.element => option(string), string) => string", "docs": null, "kind": "value", "args": [["", "Omd_representation.element => option(string)"], ["", "string"]]}, {"path": "GenerateDoc", "name": "link", "type": "let link: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "GenerateDoc", "name": "t", "type": "type t = (\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string", "docs": null, "kind": "type"}, {"path": "GenerateDoc", "name": "generateDoc", "type": "let generateDoc: (PrintType.T.stringifier, t, list(string), int, State.Model.Docs.doc) => (\n  string,\n  list((int, string, string, string))\n)", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"], ["", "t"], ["", "list(string)"], ["", "int"], ["", "State.Model.Docs.doc"]]}, {"path": "GenerateDoc", "name": "docsForModule", "type": "let docsForModule: (\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"], ["", "t"], ["", "list(string)"], ["", "int"], ["", "string"], ["", "Omd.t"], ["", "list(State.Model.Docs.doc)"]]}, {"path": "", "name": "GenerateDoc", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cleanForLink\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultMain\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>div\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docsForModule\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findTypeByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findValueByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generateDoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isUpperCase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>link\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>marked\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>prettyString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>printer\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ptypePrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>trackToc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>uniqueItems\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t", "docs": null, "kind": "module"}, {"path": "DocsTemplate", "name": "searchStyle", "type": "let searchStyle: string", "docs": null, "kind": "value"}, {"path": "DocsTemplate", "name": "head", "type": "let head: (~relativeToRoot: string, string) => string", "docs": null, "kind": "value", "args": [["relativeToRoot", "string"], ["", "string"]]}, {"path": "", "name": "DocsTemplate", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>head\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>searchStyle", "docs": null, "kind": "module"}, {"path": "Docs", "name": "allGlobals", "type": "let allGlobals: list(string)", "docs": null, "kind": "value"}, {"path": "Docs", "name": "formatHref", "type": "let formatHref: (\n  ~warnMissing: bool,\n  string,\n  list(string),\n  (string, list(string), CmtFindStamps.T.pathType)\n) => option(string)", "docs": null, "kind": "value", "args": [["warnMissing", "bool"], ["", "string"], ["", "list(string)"], ["", "(string, list(string), CmtFindStamps.T.pathType)"]]}, {"path": "Docs", "name": "page", "type": "let page: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string", "docs": null, "kind": "value", "args": [["sourceUrl", "option(string)"], ["relativeToRoot", "string"], ["playgroundEnabled", "bool"], ["?checkHashes", "option(bool)"], ["", "string"], ["", "list((int, string, string, string))"], ["", "list((string, string))"], ["", "list((string, string))"], ["", "string"]]}, {"path": "Docs", "name": "generate", "type": "let generate: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~processDocString: GenerateDoc.t,\n  string,\n  option(Omd.t),\n  list((int, (string, list(string), 'a))),\n  list(State.Model.Docs.doc),\n  list(string),\n  list((string, string))\n) => string", "docs": null, "kind": "value", "args": [["sourceUrl", "option(string)"], ["relativeToRoot", "string"], ["playgroundEnabled", "bool"], ["processDocString", "GenerateDoc.t"], ["", "string"], ["", "option(Omd.t)"], ["", "list((int, (string, list(string), 'a)))"], ["", "list(State.Model.Docs.doc)"], ["", "list(string)"], ["", "list((string, string))"]]}, {"path": "", "name": "Docs", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>allGlobals\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>formatHref\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generate\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>page", "docs": null, "kind": "module"}, {"path": "CodeSnippets", "name": "codeBlockPrefix", "type": "let codeBlockPrefix: string", "docs": null, "kind": "value"}, {"path": "CodeSnippets", "name": "matchOption", "type": "let matchOption: (string, string) => option(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "parseCodeOptions", "type": "let parseCodeOptions: (string, 'a) => option(State.Model.codeOptions)", "docs": null, "kind": "value", "args": [["", "string"], ["", "'a"]]}, {"path": "CodeSnippets", "name": "codeBlock", "type": "type codeBlock = {\n  el: Omd.element,\n  id: int,\n  fileName: string,\n  options: State.Model.codeOptions,\n  content: string\n}", "docs": null, "kind": "type"}, {"path": "CodeSnippets", "name": "compiledBlock", "type": "type compiledBlock = {block: codeBlock, status: State.Model.compilationResult}", "docs": null, "kind": "type"}, {"path": "CodeSnippets", "name": "sprintf", "type": "let sprintf: Pervasives.format('a, unit, string) => 'a", "docs": null, "kind": "value", "args": [["", "Pervasives.format('a, unit, string)"]]}, {"path": "CodeSnippets", "name": "html", "type": "let html: (~?md: option(bool), string) => string", "docs": null, "kind": "value", "args": [["md", "bool (optional)"], ["", "string"]]}, {"path": "CodeSnippets", "name": "escapeScript", "type": "let escapeScript: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "shouldBundle", "type": "let shouldBundle: State.Model.expectation => bool", "docs": null, "kind": "value", "args": [["", "State.Model.expectation"]]}, {"path": "CodeSnippets", "name": "highlight", "type": "let highlight: (\n  ~editingEnabled: bool,\n  string,\n  string,\n  State.Model.codeOptions,\n  State.Model.compilationResult,\n  string => option(string)\n) => string", "docs": null, "kind": "value", "args": [["editingEnabled", "bool"], ["", "string"], ["", "string"], ["", "State.Model.codeOptions"], ["", "State.Model.compilationResult"], ["", "string => option(string)"]]}, {"path": "CodeSnippets", "name": "splitLines", "type": "let splitLines: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "CodeSnippets", "name": "removeHashes", "type": "let removeHashes: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "hashAll", "type": "let hashAll: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "CodeSnippets", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "fullContent", "type": "let fullContent: (string => string, State.Model.codeOptions, string) => string", "docs": null, "kind": "value", "args": [["", "string => string"], ["", "State.Model.codeOptions"], ["", "string"]]}, {"path": "CodeSnippets", "name": "optMap", "type": "let optMap: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "CodeSnippets", "name": "getSourceDirectories", "type": "let getSourceDirectories: (string, Json.t) => list(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CodeSnippets", "name": "isNative", "type": "let isNative: Json.t => bool", "docs": null, "kind": "value", "args": [["", "Json.t"]]}, {"path": "CodeSnippets", "name": "getDependencyDirs", "type": "let getDependencyDirs: (string, Json.t) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CodeSnippets", "name": "invert", "type": "let invert: ('a => bool, 'a) => bool", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a"]]}, {"path": "CodeSnippets", "name": "unique", "type": "let unique: list('a) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"]]}, {"path": "CodeSnippets", "name": "writeDeps", "type": "let writeDeps: (\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit", "docs": null, "kind": "value", "args": [["output_string", "string => unit"], ["dependencyDirs", "list((string, string))"], ["stdlibRequires", "list(string)"], ["bsRoot", "'a"], ["base", "string"]]}, {"path": "CodeSnippets", "name": "refmtCommand", "type": "let refmtCommand: (string, string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "justBscCommand", "type": "let justBscCommand: (string, string, list(string)) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "list(string)"]]}, {"path": "CodeSnippets", "name": "processBlock", "type": "let processBlock: (\n  ~?debug: option(bool),\n  ~?silentFailures: option(bool),\n  string,\n  string,\n  string,\n  string,\n  State.Model.codeOptions,\n  string,\n  list(string)\n) => State.Model.compilationResult", "docs": null, "kind": "value", "args": [["?debug", "option(bool)"], ["?silentFailures", "option(bool)"], ["", "string"], ["", "string"], ["", "string"], ["", "string"], ["", "State.Model.codeOptions"], ["", "string"], ["", "list(string)"]]}, {"path": "CodeSnippets", "name": "escape", "type": "let escape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "shouldTest", "type": "let shouldTest: State.Model.expectation => bool", "docs": null, "kind": "value", "args": [["", "State.Model.expectation"]]}, {"path": "CodeSnippets", "name": "snippetLoader", "type": "let snippetLoader: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "testBlock", "type": "let testBlock: (\n  string,\n  ~base: string,\n  State.Model.compilationResult,\n  State.Model.codeOptions,\n  string,\n  int\n) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["base", "string"], ["", "State.Model.compilationResult"], ["", "State.Model.codeOptions"], ["", "string"], ["", "int"]]}, {"path": "", "name": "CodeSnippets", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeBlockPrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escapeScript\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fullContent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getDependencyDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getSourceDirectories\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hashAll\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlight\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>html\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>invert\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isNative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>justBscCommand\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>matchOption\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>optMap\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parseCodeOptions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processBlock\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>refmtCommand\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeHashes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldBundle\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldTest\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>snippetLoader\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>splitLines\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sprintf\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>testBlock\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unique\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeDeps\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeBlock\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>compiledBlock", "docs": null, "kind": "module"}, {"path": "CodeHighlight", "name": "addHtmlEscapedToBuffer", "type": "let addHtmlEscapedToBuffer: (Buffer.t, char) => unit", "docs": null, "kind": "value", "args": [["", "Buffer.t"], ["", "char"]]}, {"path": "CodeHighlight", "name": "annotateText", "type": "let annotateText: (list((int, int, string)), list((int, string)), string, int, int) => string", "docs": null, "kind": "value", "args": [["", "list((int, int, string))"], ["", "list((int, string))"], ["", "string"], ["", "int"], ["", "int"]]}, {"path": "CodeHighlight", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "CodeHighlight", "name": "iterTags", "type": "let iterTags: (Cmt_format.binary_annots, (Location.t, string) => unit) => unit", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"], ["", "(Location.t, string) => unit"]]}, {"path": "CodeHighlight", "name": "collectRanges", "type": "let collectRanges: Cmt_format.binary_annots => list((Location.t, string))", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"]]}, {"path": "CodeHighlight", "name": "removeIfThere", "type": "let removeIfThere: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "CodeHighlight", "name": "isHashed", "type": "let isHashed: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "unHash", "type": "let unHash: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "separateHashed", "type": "let separateHashed: (int, list(string), list(string)) => (int, list(string), list(string))", "docs": null, "kind": "value", "args": [["", "int"], ["", "list(string)"], ["", "list(string)"]]}, {"path": "CodeHighlight", "name": "codeSections", "type": "let codeSections: string => (string, int, string, string, int)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "highlight", "type": "let highlight: (string, string) => (string, string, string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "CodeHighlight", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addHtmlEscapedToBuffer\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>annotateText\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeSections\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectRanges\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlight\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isHashed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterTags\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeIfThere\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>separateHashed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unHash", "docs": null, "kind": "module"}, {"path": "MakeIndex", "name": "source", "type": "let source: string", "docs": null, "kind": "value"}, {"path": "MakeIndex", "name": "run", "type": "let run: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "MakeIndex", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>run\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>source", "docs": null, "kind": "module"}, {"path": "ElasticRaw", "name": "raw", "type": "let raw: string", "docs": null, "kind": "value"}, {"path": "", "name": "ElasticRaw", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>raw", "docs": null, "kind": "module"}, {"path": "Descartes", "name": "filterNil", "type": "let filterNil: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "Descartes", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Descartes", "name": "tag", "type": "type tag = \n  | TypeHover(Types.type_expr)\n  | Cls(string)\n  | TypeDef(Ident.t)\n  | ValueDef(Ident.t)\n  | TypeRef(Path.t)\n  | ValueRef(Path.t)\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "iterTags", "type": "let iterTags: (Location.t, list(tag)) => unit => (module TypedtreeIter.IteratorArgument)", "docs": null, "kind": "value", "args": [["", "(Location.t, list(tag)) => unit"]]}, {"path": "Descartes", "name": "highlightItem", "type": "let highlightItem: Typedtree.structure_item => (\n  list((Location.t, list(tag))),\n  list(Path.t),\n  list(Path.t)\n)", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Descartes", "name": "markdownTags", "type": "type markdownTags = (Location.t, list(tag))", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "node", "type": "type node = \n  | Item(Location.t, item, list((Location.t, list(tag))), list(Path.t), list(Path.t))\n  | Module(string, list((int, node)))\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "item", "type": "type item = | Value(string, string) | Type(string, string)\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "chart", "type": "let chart: list(Typedtree.structure_item) => list((int, node))", "docs": null, "kind": "value", "args": [["", "list(Typedtree.structure_item)"]]}, {"path": "Descartes", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "Descartes", "name": "fullItem", "type": "type fullItem = {\n  id: string,\n  name: string,\n  moduleName: string,\n  typ: string,\n  loc: Location.t,\n  tags: list((Location.t, list(tag))),\n  vals: list(Path.t),\n  typs: list(Path.t),\n  text: string\n}", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "process", "type": "let process: (\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (string, (list((string, string)), list((string, string)), list((string, string))))\n  ),\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(string, fullItem)\n) => (list((string, string)), list((string, string)), list((string, string)))", "docs": null, "kind": "value", "args": [["", "string"], ["", "list(Typedtree.structure_item)"], ["", "string"], ["", "Hashtbl.t(\n  string,\n  (string, (list((string, string)), list((string, string)), list((string, string))))\n)"], ["", "Hashtbl.t(string, fullItem)"], ["", "Hashtbl.t(string, fullItem)"]]}, {"path": "Descartes", "name": "fold", "type": "let fold: ('a, 'a => 'a, option('a)) => 'a", "docs": null, "kind": "value", "args": [["", "'a"], ["", "'a => 'a"], ["", "option('a)"]]}, {"path": "Descartes", "name": "flatten", "type": "let flatten: Path.t => (Ident.t, list(string))", "docs": null, "kind": "value", "args": [["", "Path.t"]]}, {"path": "Descartes", "name": "toId", "type": "let toId: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Descartes", "name": "deepValue", "type": "let deepValue: (\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))\n) => [&gt; `Global of 'm1 | `Missing ]", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "('a, ('a, list(('a, 'a)), list(('a, 'a))))"], ["", "'a"], ["", "Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))"]]}, {"path": "Descartes", "name": "deepType", "type": "let deepType: (\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))\n) => [&gt; `Global of 'l1 | `Missing ]", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "('a, (list(('a, 'a)), 'a, list(('a, 'a))))"], ["", "'a"], ["", "Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))"]]}, {"path": "Descartes", "name": "resolveValue", "type": "let resolveValue: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string))))),\n  Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string))))),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]", "docs": null, "kind": "value", "args": [["", "string"], ["", "Hashtbl.t(string, 'a)"], ["", "Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string)))))"], ["", "Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string)))))"], ["", "Path.t"]]}, {"path": "Descartes", "name": "resolveType", "type": "let resolveType: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string))))),\n  Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string))))),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]", "docs": null, "kind": "value", "args": [["", "string"], ["", "Hashtbl.t(string, 'a)"], ["", "Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string)))))"], ["", "Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string)))))"], ["", "Path.t"]]}, {"path": "Descartes", "name": "unique", "type": "let unique: list('a) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"]]}, {"path": "Descartes", "name": "processMany", "type": "let processMany: list((string, list(Typedtree.structure_item), string)) => (\n  list((string, string, string, string, Location.t, string, list(fullItem), list(fullItem))),\n  list((string, string, list(string)))\n)", "docs": null, "kind": "value", "args": [["", "list((string, list(Typedtree.structure_item), string))"]]}, {"path": "Descartes", "name": "gatherCmts", "type": "let gatherCmts: (string, string, list(string)) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "list(string)"]]}, {"path": "Descartes", "name": "main", "type": "let main: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "", "name": "Descartes", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>chart\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deepType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deepValue\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterNil\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>flatten\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>gatherCmts\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlightItem\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterTags\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>process\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processMany\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveValue\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unique\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fullItem\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>item\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>markdownTags\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>node\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "Typing", "name": "tag", "type": "type tag = | Type | Value | Module | Constructor(string) | Attribute(string)\n", "docs": null, "kind": "type"}, {"path": "Typing", "name": "ident", "type": "type ident('a) = ('a, tag)", "docs": null, "kind": "type"}, {"path": "Typing", "name": "mapIdent", "type": "let mapIdent: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "Typing", "name": "contents", "type": "let contents: ('a, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "('a, 'a)"]]}, {"path": "Typing", "name": "toString", "type": "let toString: ('a => string, ('a, tag)) => string", "docs": null, "kind": "value", "args": [["", "'a => string"], ["", "('a, tag)"]]}, {"path": "Typing", "name": "showPath", "type": "let showPath: (~?paren: option(string => bool), Path.t) => string", "docs": null, "kind": "value", "args": [["paren", "string => bool (optional)"], ["", "Path.t"]]}, {"path": "Typing", "name": "showLident", "type": "let showLident: Longident.t => string", "docs": null, "kind": "value", "args": [["", "Longident.t"]]}, {"path": "Typing", "name": "showLoc", "type": "let showLoc: Location.t => string", "docs": null, "kind": "value", "args": [["", "Location.t"]]}, {"path": "Typing", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing", "name": "openn", "type": "type openn = {mut used: list(ident(Longident.t)), path: Path.t, loc: Location.t}", "docs": null, "kind": "type"}, {"path": "Typing", "name": "open_stack", "type": "type open_stack = {mut closed: list(openn), mut opens: list(openn), parent: option(open_stack)}", "docs": null, "kind": "type"}, {"path": "Typing", "name": "pathToLident", "type": "let pathToLident: Path.t => Longident.t", "docs": null, "kind": "value", "args": [["", "Path.t"]]}, {"path": "Typing", "name": "addLidentToPath", "type": "let addLidentToPath: (Path.t, Longident.t) => Path.t", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing", "name": "usesOpen", "type": "let usesOpen: (Longident.t, Path.t) => bool", "docs": null, "kind": "value", "args": [["", "Longident.t"], ["", "Path.t"]]}, {"path": "Typing", "name": "relative", "type": "let relative: (Longident.t, Path.t) => Path.t", "docs": null, "kind": "value", "args": [["", "Longident.t"], ["", "Path.t"]]}, {"path": "Typing.F", "name": "enter_structure", "type": "let enter_structure: Typedtree.structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure"]]}, {"path": "Typing.F", "name": "enter_value_description", "type": "let enter_value_description: Typedtree.value_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_description"]]}, {"path": "Typing.F", "name": "enter_type_extension", "type": "let enter_type_extension: Typedtree.type_extension => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_extension"]]}, {"path": "Typing.F", "name": "enter_extension_constructor", "type": "let enter_extension_constructor: Typedtree.extension_constructor => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.extension_constructor"]]}, {"path": "Typing.F", "name": "enter_pattern", "type": "let enter_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "enter_expression", "type": "let enter_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "enter_package_type", "type": "let enter_package_type: Typedtree.package_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.package_type"]]}, {"path": "Typing.F", "name": "enter_signature", "type": "let enter_signature: Typedtree.signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature"]]}, {"path": "Typing.F", "name": "enter_signature_item", "type": "let enter_signature_item: Typedtree.signature_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature_item"]]}, {"path": "Typing.F", "name": "enter_module_type_declaration", "type": "let enter_module_type_declaration: Typedtree.module_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type_declaration"]]}, {"path": "Typing.F", "name": "enter_module_type", "type": "let enter_module_type: Typedtree.module_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type"]]}, {"path": "Typing.F", "name": "enter_module_expr", "type": "let enter_module_expr: Typedtree.module_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_expr"]]}, {"path": "Typing.F", "name": "enter_with_constraint", "type": "let enter_with_constraint: Typedtree.with_constraint => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.with_constraint"]]}, {"path": "Typing.F", "name": "enter_class_expr", "type": "let enter_class_expr: Typedtree.class_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_expr"]]}, {"path": "Typing.F", "name": "enter_class_signature", "type": "let enter_class_signature: Typedtree.class_signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_signature"]]}, {"path": "Typing.F", "name": "enter_class_declaration", "type": "let enter_class_declaration: Typedtree.class_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_declaration"]]}, {"path": "Typing.F", "name": "enter_class_description", "type": "let enter_class_description: Typedtree.class_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_description"]]}, {"path": "Typing.F", "name": "enter_class_type_declaration", "type": "let enter_class_type_declaration: Typedtree.class_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_declaration"]]}, {"path": "Typing.F", "name": "enter_class_type", "type": "let enter_class_type: Typedtree.class_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type"]]}, {"path": "Typing.F", "name": "enter_class_type_field", "type": "let enter_class_type_field: Typedtree.class_type_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_field"]]}, {"path": "Typing.F", "name": "enter_core_type", "type": "let enter_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "enter_class_structure", "type": "let enter_class_structure: Typedtree.class_structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_structure"]]}, {"path": "Typing.F", "name": "enter_class_field", "type": "let enter_class_field: Typedtree.class_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_field"]]}, {"path": "Typing.F", "name": "enter_structure_item", "type": "let enter_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "leave_structure", "type": "let leave_structure: Typedtree.structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure"]]}, {"path": "Typing.F", "name": "leave_value_description", "type": "let leave_value_description: Typedtree.value_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_description"]]}, {"path": "Typing.F", "name": "leave_type_extension", "type": "let leave_type_extension: Typedtree.type_extension => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_extension"]]}, {"path": "Typing.F", "name": "leave_extension_constructor", "type": "let leave_extension_constructor: Typedtree.extension_constructor => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.extension_constructor"]]}, {"path": "Typing.F", "name": "leave_pattern", "type": "let leave_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "leave_expression", "type": "let leave_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "leave_package_type", "type": "let leave_package_type: Typedtree.package_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.package_type"]]}, {"path": "Typing.F", "name": "leave_signature", "type": "let leave_signature: Typedtree.signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature"]]}, {"path": "Typing.F", "name": "leave_signature_item", "type": "let leave_signature_item: Typedtree.signature_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature_item"]]}, {"path": "Typing.F", "name": "leave_module_type_declaration", "type": "let leave_module_type_declaration: Typedtree.module_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type_declaration"]]}, {"path": "Typing.F", "name": "leave_module_type", "type": "let leave_module_type: Typedtree.module_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type"]]}, {"path": "Typing.F", "name": "leave_module_expr", "type": "let leave_module_expr: Typedtree.module_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_expr"]]}, {"path": "Typing.F", "name": "leave_with_constraint", "type": "let leave_with_constraint: Typedtree.with_constraint => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.with_constraint"]]}, {"path": "Typing.F", "name": "leave_class_expr", "type": "let leave_class_expr: Typedtree.class_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_expr"]]}, {"path": "Typing.F", "name": "leave_class_signature", "type": "let leave_class_signature: Typedtree.class_signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_signature"]]}, {"path": "Typing.F", "name": "leave_class_declaration", "type": "let leave_class_declaration: Typedtree.class_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_declaration"]]}, {"path": "Typing.F", "name": "leave_class_description", "type": "let leave_class_description: Typedtree.class_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_description"]]}, {"path": "Typing.F", "name": "leave_class_type_declaration", "type": "let leave_class_type_declaration: Typedtree.class_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_declaration"]]}, {"path": "Typing.F", "name": "leave_class_type", "type": "let leave_class_type: Typedtree.class_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type"]]}, {"path": "Typing.F", "name": "leave_class_type_field", "type": "let leave_class_type_field: Typedtree.class_type_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_field"]]}, {"path": "Typing.F", "name": "leave_core_type", "type": "let leave_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "leave_class_structure", "type": "let leave_class_structure: Typedtree.class_structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_structure"]]}, {"path": "Typing.F", "name": "leave_class_field", "type": "let leave_class_field: Typedtree.class_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_field"]]}, {"path": "Typing.F", "name": "leave_structure_item", "type": "let leave_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "enter_bindings", "type": "let enter_bindings: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_binding", "type": "let enter_binding: Typedtree.value_binding => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_binding"]]}, {"path": "Typing.F", "name": "leave_binding", "type": "let leave_binding: Typedtree.value_binding => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_binding"]]}, {"path": "Typing.F", "name": "leave_bindings", "type": "let leave_bindings: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_type_declarations", "type": "let enter_type_declarations: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_type_declaration", "type": "let enter_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "leave_type_declaration", "type": "let leave_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "leave_type_declarations", "type": "let leave_type_declarations: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "depth", "type": "let depth: Pervasives.ref(int)", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "root_stack", "type": "let root_stack: open_stack", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "closed_stacks", "type": "let closed_stacks: Pervasives.ref(list(open_stack))", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "open_stack", "type": "let open_stack: Pervasives.ref(open_stack)", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "new_stack", "type": "let new_stack: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "pop_stack", "type": "let pop_stack: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "add_open", "type": "let add_open: (Path.t, Location.t) => unit", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Location.t"]]}, {"path": "Typing.F", "name": "pop_open", "type": "let pop_open: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "add_use", "type": "let add_use: (~?inferable: option(bool), (Path.t, tag), Longident.t, Location.t) => unit", "docs": null, "kind": "value", "args": [["?inferable", "option(bool)"], ["", "(Path.t, tag)"], ["", "Longident.t"], ["", "Location.t"]]}, {"path": "Typing.F", "name": "dig", "type": "let dig: Types.type_expr => Types.type_expr", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing.F", "name": "enter_core_type", "type": "let enter_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "enter_type_declaration", "type": "let enter_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "handleConstructor", "type": "let handleConstructor: (Path.t, Longident.t) => (string, Longident.t)", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing.F", "name": "handleRecord", "type": "let handleRecord: (Path.t, Longident.t) => Longident.t", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing.F", "name": "enter_pattern", "type": "let enter_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "enter_structure_item", "type": "let enter_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "leave_structure_item", "type": "let leave_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "enter_expression", "type": "let enter_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "leave_expression", "type": "let leave_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing", "name": "F", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>add_open\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>add_use\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>closed_stacks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>depth\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>dig\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_core_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_expression\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_pattern\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_structure_item\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_type_declaration\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleConstructor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleRecord\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>leave_expression\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>leave_structure_item\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>new_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>open_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pop_open\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pop_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>root_stack", "docs": null, "kind": "module"}, {"path": "Typing", "name": "ppos", "type": "let ppos: Lexing.position => string", "docs": null, "kind": "value", "args": [["", "Lexing.position"]]}, {"path": "Typing", "name": "entry", "type": "let entry: (Location.t, ~depth: int, ~?mend: option(Lexing.position), string) => string", "docs": null, "kind": "value", "args": [["", "Location.t"], ["depth", "int"], ["?mend", "option(Lexing.position)"], ["", "string"]]}, {"path": "Typing", "name": "type_to_string", "type": "let type_to_string: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing", "name": "externalsUsed", "type": "type externalsUsed = list((Path.t, Location.t))", "docs": null, "kind": "type"}, {"path": "Typing", "name": "bindings", "type": "type bindings = Hashtbl.t(int, list((Ident.t, Location.t)))", "docs": null, "kind": "type"}, {"path": "Typing", "name": "truncateLoc", "type": "let truncateLoc: (int, Location.t) => Location.t", "docs": "<ul><li>Ok, so for things that have IDs, e.g. things in this file...\nwe will just have a mapping of {id: {declaration: opt(ident), usages: list((ident, loc))}}</li></ul>", "kind": "value", "args": [["", "int"], ["", "Location.t"]]}, {"path": "Typing", "name": "collectTypes", "type": "let collectTypes: Cmt_format.binary_annots => (\n  Hashtbl.t((Lexing.position, Lexing.position), Types.type_expr),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(openn),\n  Hashtbl.t((int, int), (Path.t, tag))\n)", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"]]}, {"path": "", "name": "Typing", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addLidentToPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectTypes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>contents\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>entry\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapIdent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pathToLident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ppos\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>truncateLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>type_to_string\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>usesOpen\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>bindings\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>externalsUsed\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>ident\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>open_stack\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>openn\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>F", "docs": null, "kind": "module"}, {"path": "PrepareUtils", "name": "addToPath", "type": "let addToPath: (('a, list('a)), 'a) => ('a, list('a))", "docs": null, "kind": "value", "args": [["", "('a, list('a))"], ["", "'a"]]}, {"path": "PrepareUtils", "name": "toFullPath", "type": "let toFullPath: ('a, ('a, 'a)) => ('a, 'a, 'a)", "docs": null, "kind": "value", "args": [["", "'a"], ["", "('a, 'a)"]]}, {"path": "PrepareUtils", "name": "filterNil", "type": "let filterNil: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "PrepareUtils", "name": "findStars", "type": "let findStars: string => option(int)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrepareUtils", "name": "combine", "type": "let combine: (option(int), option(int)) => option(int)", "docs": null, "kind": "value", "args": [["", "option(int)"], ["", "option(int)"]]}, {"path": "PrepareUtils", "name": "trimFirst", "type": "let trimFirst: (int, string) => string", "docs": null, "kind": "value", "args": [["", "int"], ["", "string"]]}, {"path": "PrepareUtils", "name": "cleanOffStars", "type": "let cleanOffStars: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrepareUtils", "name": "findDocAttribute", "type": "let findDocAttribute: (string => 'a, list((Asttypes.loc(string), Parsetree.payload))) => option('a)", "docs": null, "kind": "value", "args": [["", "string => 'a"], ["", "list((Asttypes.loc(string), Parsetree.payload))"]]}, {"path": "PrepareUtils", "name": "hasNoDoc", "type": "let hasNoDoc: list((Asttypes.loc(string), 'a)) => bool", "docs": null, "kind": "value", "args": [["", "list((Asttypes.loc(string), 'a))"]]}, {"path": "PrepareUtils", "name": "foldOpt", "type": "let foldOpt: ('a => option('a), list('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"], ["", "list('a)"]]}, {"path": "PrepareUtils", "name": "either", "type": "let either: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "PrepareUtils", "name": "mapFst", "type": "let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "PrepareUtils", "name": "eitherFirst", "type": "let eitherFirst: (option('a), (option('a), 'a)) => (option('a), 'a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "(option('a), 'a)"]]}, {"path": "PrepareUtils", "name": "compose", "type": "let compose: ('a => bool, 'a => option('a), 'a) => option('a)", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a => option('a)"], ["", "'a"]]}, {"path": "", "name": "PrepareUtils", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addToPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cleanOffStars\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>combine\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compose\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>either\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eitherFirst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterNil\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findDocAttribute\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findStars\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>foldOpt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hasNoDoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapFst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toFullPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>trimFirst", "docs": null, "kind": "module"}, {"path": "CmtFindStamps.T", "name": "pathType", "type": "type pathType = | PModule | PModuleType | PValue | PType\n = PrintType.pathType", "docs": null, "kind": "type"}, {"path": "CmtFindStamps.T", "name": "fullPath", "type": "type fullPath = (string, list(string), pathType)", "docs": null, "kind": "type"}, {"path": "CmtFindStamps.T", "name": "stamps", "type": "type stamps = list((int, fullPath))", "docs": null, "kind": "type"}, {"path": "CmtFindStamps", "name": "T", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fullPath\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>pathType\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>stamps", "docs": null, "kind": "module"}, {"path": "CmtFindStamps", "name": "stampsFromTypesSignature", "type": "let stampsFromTypesSignature: (('a, list(string)), list(Types.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Types.signature_item)"]]}, {"path": "CmtFindStamps", "name": "stampsFromTypedtreeInterface", "type": "let stampsFromTypedtreeInterface: (('a, list(string)), list(Typedtree.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Typedtree.signature_item)"]]}, {"path": "CmtFindStamps", "name": "stampsFromTypedtreeImplementation", "type": "let stampsFromTypedtreeImplementation: (('a, list(string)), list(Typedtree.structure_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Typedtree.structure_item)"]]}, {"path": "", "name": "CmtFindStamps", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypedtreeImplementation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypedtreeInterface\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypesSignature\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>T", "docs": null, "kind": "module"}, {"path": "CmtFindDocItems", "name": "iter", "type": "let iter: ((string, option(Omd.t), State.Model.Docs.docItem) => 'a, State.Model.Docs.doc) => unit", "docs": null, "kind": "value", "args": [["", "(string, option(Omd.t), State.Model.Docs.docItem) => 'a"], ["", "State.Model.Docs.doc"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromTypes", "type": "let docItemsFromTypes: (string => Omd.t, Types.signature) => list(State.Model.Docs.doc)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.signature"]]}, {"path": "CmtFindDocItems", "name": "moduleContents", "type": "let moduleContents: (string => Omd.t, Types.module_type) => State.Model.Docs.moduleContents", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.module_type"]]}, {"path": "CmtFindDocItems", "name": "either", "type": "let either: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "CmtFindDocItems", "name": "mapFst", "type": "let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "CmtFindDocItems", "name": "eitherFirst", "type": "let eitherFirst: (option('a), (option('a), 'a)) => (option('a), 'a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "(option('a), 'a)"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromStructure", "type": "let docItemsFromStructure: (string => Omd.t, list(Typedtree.structure_item)) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "list(Typedtree.structure_item)"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsStr", "type": "let moduleContentsStr: (string => Omd.t, Typedtree.module_expr) => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Typedtree.module_expr"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsType", "type": "let moduleContentsType: (string => Omd.t, Types.module_type) => State.Model.Docs.moduleContents", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.module_type"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromSignature", "type": "let docItemsFromSignature: (string => Omd.t, list(Typedtree.signature_item)) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "list(Typedtree.signature_item)"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsSig", "type": "let moduleContentsSig: (string => Omd.t, Typedtree.module_type) => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Typedtree.module_type"]]}, {"path": "", "name": "CmtFindDocItems", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromSignature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromStructure\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromTypes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>either\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eitherFirst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iter\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapFst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContents\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsSig\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsStr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsType", "docs": null, "kind": "module"}, {"path": "State", "name": "indent", "type": "let indent: string => string", "docs": "<ul><li>Grand theory of everything.\n*</li></ul>\n\n<p>The basic idea is a page\nAlso, larger than that we have packages\nbut let&#39;s talk about pages for now</p>\n<p>Markdown page</p>\n<ul><li>gets parsed into bits</li><li>including some code snippets</li><li>its then represented as <code>(Omd.t, list(lang, block))</code>? maybe</li></ul>\n\n<p>A markdown page can embed items\nan item is a module, type, value, or include\n(module types too probably)</p>\n<p>an item can have documentation, which is in turn a markdown page(?) or markdown thing</p>\n<p>Custom markdown things I want to represent:</p>\n<ul><li>@doc [items]</li><li>@all</li><li>@rest</li></ul>\n\n<p>umm @includes? How can I do that...</p>\n<p>Also, to what extent do I want to build everything into a globally addressable map?</p>\n<p>Each @doc&#39;able item should have a canonical home, where it can be expected to live.\nIt&#39;s possible to display the docs elsewhere, but it has to be shown there as well.</p>\n<p>A markdown page is either part of the custom docs, or the api docs.\nIf part of the api docs, then listed in the sidebar there, and exists under api/\nif in the custom docs, then listed in the custom docs portion\nwhich takes up the top section of the sidebar</p>\n<p>I want to mess with the sidebar to allow showing more or less of each section\n(custom docs list, table of contents, api docs list)</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "State", "name": "showOption", "type": "let showOption: (option('a), 'a => string) => string", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => string"]]}, {"path": "State", "name": "showOptionString", "type": "let showOptionString: option(string) => string", "docs": null, "kind": "value", "args": [["", "option(string)"]]}, {"path": "State", "name": "bucklescriptOptions", "type": "type bucklescriptOptions = {\n  packageRoot: string,\n  bsRoot: string,\n  refmt: string,\n  version: string,\n  browserCompilerPath: option(string),\n  silentFailures: bool,\n  tmp: string,\n  compiledDependencyDirectories: list((string, string)),\n  packageJsonName: string\n}", "docs": null, "kind": "type"}, {"path": "State", "name": "showBucklescriptOptions", "type": "let showBucklescriptOptions: bucklescriptOptions => string", "docs": null, "kind": "value", "args": [["", "bucklescriptOptions"]]}, {"path": "State", "name": "backend", "type": "type backend = | NoBackend | Bucklescript(bucklescriptOptions)\n", "docs": null, "kind": "type"}, {"path": "State", "name": "showBackend", "type": "let showBackend: backend => string", "docs": null, "kind": "value", "args": [["", "backend"]]}, {"path": "State.Model", "name": "codeContext", "type": "type codeContext = | Normal | Node | Window | Iframe | Canvas | Div | Log\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "contextString", "type": "let contextString: codeContext => string", "docs": null, "kind": "value", "args": [["", "codeContext"]]}, {"path": "State.Model", "name": "expectation", "type": "type expectation = | Succeed | Raise | DontRun | TypeFail | DontType | ParseFail | Skip\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "codeDisplay", "type": "type codeDisplay = {prefix: int, suffix: int, noEdit: bool, hide: bool}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "lang", "type": "type lang = | Reason | OCaml | Txt | OtherLang(string)\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "showLang", "type": "let showLang: lang => string", "docs": null, "kind": "value", "args": [["", "lang"]]}, {"path": "State.Model", "name": "codeOptions", "type": "type codeOptions = {\n  context: codeContext,\n  lang: lang,\n  expectation: expectation,\n  codeDisplay: codeDisplay,\n  inferred: bool,\n  sharedAs: option(string),\n  uses: list(string)\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "defaultOptions", "type": "let defaultOptions: codeOptions", "docs": null, "kind": "value"}, {"path": "State.Model", "name": "compilationResult", "type": "type compilationResult = \n  | Skipped\n  | ParseError(string)\n  | TypeError(string, string)\n  | Success(string, string)\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "codeBlock", "type": "type codeBlock = {\n  langLine: string,\n  raw: string,\n  html: string,\n  page: string,\n  filePath: string,\n  compilationResult: compilationResult\n}", "docs": "<p> This represents the final result of a code block, all that&#39;s needed to render it</p>\n", "kind": "type"}, {"path": "State.Model", "name": "id", "type": "type id = string", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "docWithExamples", "type": "type docWithExamples = Omd.t", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "docItem", "type": "type docItem = \n  | Value(Types.type_expr)\n  | Type(Types.type_declaration)\n  | Module(moduleContents)\n  | Include(option(Path.t), list(doc))\n  | StandaloneDoc(Omd.t)\n", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "moduleContents", "type": "type moduleContents = | Items(list(doc)) | Alias(Path.t)\n", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "doc", "type": "type doc = (string, option(Omd.t), docItem)", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "itemName", "type": "let itemName: docItem => string", "docs": null, "kind": "value", "args": [["", "docItem"]]}, {"path": "State.Model.Docs", "name": "iter", "type": "let iter: ((string, option(Omd.t), docItem) => 'a, doc) => unit", "docs": null, "kind": "value", "args": [["", "(string, option(Omd.t), docItem) => 'a"], ["", "doc"]]}, {"path": "State.Model.Docs", "name": "iterWithPath", "type": "let iterWithPath: (\n  ~modulesAtPath: Hashtbl.t(string, list(doc)),\n  list(string),\n  (list(string), (string, option(Omd.t), docItem)) => 'a,\n  doc\n) => unit", "docs": null, "kind": "value", "args": [["modulesAtPath", "Hashtbl.t(string, list(doc))"], ["", "list(string)"], ["", "(list(string), (string, option(Omd.t), docItem)) => 'a"], ["", "doc"]]}, {"path": "State.Model", "name": "Docs", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>itemName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iter\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterWithPath\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>doc\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docItem\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>moduleContents", "docs": null, "kind": "module"}, {"path": "State.Model", "name": "customPage", "type": "type customPage = {\n  title: string,\n  sourcePath: option(string),\n  destPath: string,\n  contents: docWithExamples\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "sidebar", "type": "type sidebar = | SidebarItem(string) | SidebarHeader(string, list(sidebar))\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "topModule", "type": "type topModule = {\n  name: string,\n  sourcePath: string,\n  docs: option(docWithExamples),\n  items: list(Docs.doc),\n  stamps: CmtFindStamps.T.stamps\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "package", "type": "type package = {\n  name: string,\n  repo: option(string),\n  custom: list(customPage),\n  sidebar: option(list(sidebar)),\n  modules: list(topModule),\n  canBundle: bool,\n  noPlayground: bool,\n  namespaced: bool,\n  backend: backend,\n  defaultCodeOptions: option(codeOptions)\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "codeBlocks", "type": "type codeBlocks = Hashtbl.t((string, string, string), codeBlock)", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "world", "type": "type world = {packages: list((string, package))}", "docs": null, "kind": "type"}, {"path": "State", "name": "Model", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>contextString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultOptions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLang\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeBlock\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeBlocks\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeContext\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeDisplay\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeOptions\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>compilationResult\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>customPage\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docWithExamples\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>expectation\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>id\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>lang\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>package\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>sidebar\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>topModule\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>world\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Docs", "docs": null, "kind": "module"}, {"path": "State.Input", "name": "env", "type": "type env = {static: string, debug: bool}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "showEnv", "type": "let showEnv: env => string", "docs": null, "kind": "value", "args": [["", "env"]]}, {"path": "State.Input", "name": "meta", "type": "type meta = {packageName: string, repo: option(string)}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "showMeta", "type": "let showMeta: meta => string", "docs": null, "kind": "value", "args": [["", "meta"]]}, {"path": "State.Input", "name": "packageInput", "type": "type packageInput = {\n  root: string,\n  meta: meta,\n  backend: backend,\n  sidebarFile: option(string),\n  customFiles: list((string, option(string), string)),\n  moduleFiles: list((string, string)),\n  defaultCodeOptions: option(Model.codeOptions),\n  namespaced: bool,\n  canBundle: bool,\n  noPlayground: bool\n}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "showPackageInput", "type": "let showPackageInput: packageInput => string", "docs": null, "kind": "value", "args": [["", "packageInput"]]}, {"path": "State.Input", "name": "target", "type": "type target = {\n  directory: string,\n  template: option(string),\n  skipStdlibCompletions: bool,\n  search: bool\n}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "t", "type": "type t = {target: target, packageInput: packageInput, env: env}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "show", "type": "let show: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "State", "name": "Input", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>show\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showEnv\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showMeta\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPackageInput\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>env\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>meta\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>packageInput\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>target", "docs": "<ul><li>Ok folks, so the above is what I think I want as the middle stage</li></ul>\n\n<p>From this middle stage I&#39;m confident I can produce some nice documentation.\nNot 100% sure when compilation (code block processing) happens tho</p>\n<p>And now, how do I go from &quot;cli args&quot; to &quot;that middle stage&quot;</p>\n<p>There&#39;s probably a &quot;first stage&quot; that we get from cli args</p>\n", "kind": "module"}, {"path": "", "name": "State", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showBackend\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showBucklescriptOptions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showOption\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showOptionString\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>backend\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>bucklescriptOptions\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Input\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Model", "docs": null, "kind": "module"}, {"path": "Search", "name": "escape", "type": "let escape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Search", "name": "replace", "type": "let replace: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "Search", "name": "serializeSearchable", "type": "let serializeSearchable: (string, string, string, string, string) => string", "docs": null, "kind": "value", "args": [["", "(string, string, string, string, string)"]]}, {"path": "Search", "name": "serializeSearchables", "type": "let serializeSearchables: list((string, string, string, string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string, string, string, string))"]]}, {"path": "", "name": "Search", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>replace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>serializeSearchable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>serializeSearchables", "docs": null, "kind": "module"}, {"path": "ProcessCode", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "ProcessCode", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "ProcessCode", "name": "iterDocBlocks", "type": "let iterDocBlocks: ((string, string) => 'a, Omd.t) => unit", "docs": null, "kind": "value", "args": [["", "(string, string) => 'a"], ["", "Omd.t"]]}, {"path": "ProcessCode", "name": "iterBlocks", "type": "let iterBlocks: (\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  (string, option(string), string, string) => 'a\n) => unit", "docs": null, "kind": "value", "args": [["", "list(State.Model.topModule)"], ["", "list(State.Model.customPage)"], ["", "(string, option(string), string, string) => 'a"]]}, {"path": "ProcessCode", "name": "collectBlocks", "type": "let collectBlocks: (\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  option(State.Model.codeOptions)\n) => list(\n  (\n    string,\n    option(string),\n    string,\n    string,\n    State.Model.codeOptions,\n    option((string, string, State.Model.codeOptions))\n  )\n)", "docs": null, "kind": "value", "args": [["", "list(State.Model.topModule)"], ["", "list(State.Model.customPage)"], ["", "option(State.Model.codeOptions)"]]}, {"path": "ProcessCode", "name": "resolveShared", "type": "let resolveShared: list(('a, 'a, 'a, string, State.Model.codeOptions, option('a))) => Hashtbl.t(\n  string,\n  string\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, 'a, string, State.Model.codeOptions, option('a)))"]]}, {"path": "ProcessCode", "name": "openPrefix", "type": "let openPrefix: (State.Model.lang, string) => string", "docs": null, "kind": "value", "args": [["", "State.Model.lang"], ["", "string"]]}, {"path": "ProcessCode", "name": "otherSyntax", "type": "let otherSyntax: State.Model.lang => State.Model.lang", "docs": null, "kind": "value", "args": [["", "State.Model.lang"]]}, {"path": "ProcessCode", "name": "codeFromPackage", "type": "let codeFromPackage: State.Model.package => list(\n  (\n    string,\n    string,\n    string,\n    string,\n    State.Model.codeOptions,\n    option((State.Model.codeOptions, string))\n  )\n)", "docs": null, "kind": "value", "args": [["", "State.Model.package"]]}, {"path": "", "name": "ProcessCode", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeFromPackage\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectBlocks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterBlocks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterDocBlocks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>openPrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>otherSyntax\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveShared\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "ParseConfig", "name": "fromGitUrl", "type": "let fromGitUrl: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "ParseConfig", "name": "getUrl", "type": "let getUrl: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "", "name": "ParseConfig", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fromGitUrl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getUrl", "docs": null, "kind": "module"}, {"path": "ModelToOutput", "name": "takeN", "type": "let takeN: (list('a), int) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "int"]]}, {"path": "ModelToOutput", "name": "itemColor", "type": "let itemColor: State.Model.Docs.docItem => string", "docs": null, "kind": "value", "args": [["", "State.Model.Docs.docItem"]]}, {"path": "ModelToOutput", "name": "prefix", "type": "let prefix: State.Model.Docs.docItem => string", "docs": null, "kind": "value", "args": [["", "State.Model.Docs.docItem"]]}, {"path": "ModelToOutput", "name": "firstFewItems", "type": "let firstFewItems: list((string, 'a, State.Model.Docs.docItem)) => string", "docs": null, "kind": "value", "args": [["", "list((string, 'a, State.Model.Docs.docItem))"]]}, {"path": "ModelToOutput", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "ModelToOutput", "name": "getFunctionArgs", "type": "let getFunctionArgs: Types.type_expr => option(list((Asttypes.label, string)))", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "ModelToOutput", "name": "showItemType", "type": "let showItemType: (\n  string,\n  State.Model.Docs.docItem,\n  Hashtbl.t(string, list((string, 'a, State.Model.Docs.docItem)))\n) => (option(Json.t), Json.t)", "docs": null, "kind": "value", "args": [["", "string"], ["", "State.Model.Docs.docItem"], ["", "Hashtbl.t(string, list((string, 'a, State.Model.Docs.docItem)))"]]}, {"path": "ModelToOutput", "name": "getCompletionData", "type": "let getCompletionData: list(State.Model.topModule) => list(\n  (list(string), string, (option(Json.t), Json.t), option(string), string)\n)", "docs": null, "kind": "value", "args": [["", "list(State.Model.topModule)"]]}, {"path": "ModelToOutput", "name": "writeEditorSupport", "type": "let writeEditorSupport: (\n  ~skipStdlibCompletions: bool,\n  string,\n  string,\n  list(State.Model.topModule),\n  (string, Buffer.t)\n) => unit", "docs": null, "kind": "value", "args": [["skipStdlibCompletions", "bool"], ["", "string"], ["", "string"], ["", "list(State.Model.topModule)"], ["", "(string, Buffer.t)"]]}, {"path": "ModelToOutput", "name": "makeSearchPage", "type": "let makeSearchPage: (\n  ~playgroundEnabled: bool,\n  ~markdowns: list(State.Model.customPage),\n  ~names: list(string),\n  string,\n  Pervasives.ref(list((string, string, string, string, string)))\n) => unit", "docs": null, "kind": "value", "args": [["playgroundEnabled", "bool"], ["markdowns", "list(State.Model.customPage)"], ["names", "list(string)"], ["", "string"], ["", "Pervasives.ref(list((string, string, string, string, string)))"]]}, {"path": "ModelToOutput", "name": "outputCustom", "type": "let outputCustom: (\n  ~playgroundEnabled: bool,\n  string,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(string),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.t\n  ) => string,\n  list(string),\n  State.Model.customPage\n) => unit", "docs": null, "kind": "value", "args": [["playgroundEnabled", "bool"], ["", "string"], ["", "list(State.Model.customPage)"], ["", "(string, list(string), PrintType.pathType) => option(string)"], ["", "option(string)"], ["", "(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string"], ["", "list(string)"], ["", "State.Model.customPage"]]}, {"path": "ModelToOutput", "name": "outputModule", "type": "let outputModule: (\n  ~playgroundEnabled: bool,\n  string,\n  'a,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(string),\n  option(string),\n  (PrintType.T.stringifier, string, string) => GenerateDoc.t,\n  list(string),\n  State.Model.topModule\n) => unit", "docs": null, "kind": "value", "args": [["playgroundEnabled", "bool"], ["", "string"], ["", "'a"], ["", "list(State.Model.customPage)"], ["", "(string, list(string), PrintType.pathType) => option(string)"], ["", "option(string)"], ["", "(PrintType.T.stringifier, string, string) => GenerateDoc.t"], ["", "list(string)"], ["", "State.Model.topModule"]]}, {"path": "ModelToOutput", "name": "makeCodeBlocksMap", "type": "let makeCodeBlocksMap: list(State.Model.codeBlock) => Hashtbl.t(\n  (string, string),\n  State.Model.codeBlock\n)", "docs": null, "kind": "value", "args": [["", "list(State.Model.codeBlock)"]]}, {"path": "ModelToOutput", "name": "searchHref", "type": "let searchHref: (list(string), (string, list(string), CmtFindStamps.T.pathType)) => option(string)", "docs": null, "kind": "value", "args": [["", "list(string)"], ["", "(string, list(string), CmtFindStamps.T.pathType)"]]}, {"path": "ModelToOutput", "name": "package", "type": "let package: (\n  State.Model.package,\n  option((list(State.Model.codeBlock), option((string, option((string, Buffer.t)))))),\n  State.Input.target,\n  State.Input.env\n) => unit", "docs": null, "kind": "value", "args": [["", "State.Model.package"], ["", "option((list(State.Model.codeBlock), option((string, option((string, Buffer.t))))))"], ["", "State.Input.target"], ["", "State.Input.env"]]}, {"path": "", "name": "ModelToOutput", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>firstFewItems\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getCompletionData\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getFunctionArgs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>itemColor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeCodeBlocksMap\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeSearchPage\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>outputCustom\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>outputModule\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>package\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>prefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>searchHref\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showItemType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>takeN\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeEditorSupport", "docs": null, "kind": "module"}, {"path": "MarkdownOfOCamldoc", "name": "withStyle", "type": "let withStyle: (\n  [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ],\n  Omd.t\n) => Omd.element", "docs": null, "kind": "value", "args": [["", "[&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]"], ["", "Omd.t"]]}, {"path": "MarkdownOfOCamldoc", "name": "stripLoc", "type": "let stripLoc: ('a => 'a, Location_.with_location('a)) => 'a", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "Location_.with_location('a)"]]}, {"path": "MarkdownOfOCamldoc", "name": "whiteLeft", "type": "let whiteLeft: string => int", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "MarkdownOfOCamldoc", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "MarkdownOfOCamldoc", "name": "stripLeft", "type": "let stripLeft: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "MarkdownOfOCamldoc", "name": "makeHeader", "type": "let makeHeader: ([&lt; `Section | `Subsection | `Subsubsection | `Title ], 'a, Omd.t) => Omd.element", "docs": null, "kind": "value", "args": [["", "[&lt; `Section | `Subsection | `Subsubsection | `Title ]"], ["", "'a"], ["", "Omd.t"]]}, {"path": "MarkdownOfOCamldoc", "name": "handleRef", "type": "let handleRef: Paths.Reference.t(\n  [&lt; Paths.Reference.kind\n &gt; `Class `ClassType `Constructor `Exception `Extension `Field `Method\n   `Module `ModuleType `Type `Value ]\n) => string", "docs": null, "kind": "value", "args": [["", "Paths.Reference.t(\n  [&lt; Paths.Reference.kind\n &gt; `Class `ClassType `Constructor `Exception `Extension `Field `Method\n   `Module `ModuleType `Type `Value ]\n)"]]}, {"path": "MarkdownOfOCamldoc", "name": "convertItem", "type": "let convertItem: (\n  'a,\n  Location_.with_location(\n    [&lt; `Code_block of string\n | `Doc of string\n | `Example of Omd.name * string\n | `Heading of\n     [&lt; `Section | `Subsection | `Subsubsection | `Title ] * 'j1 *\n     Comment.non_link_inline_element Comment.with_location list\n | `List of\n     [ `Ordered | `Unordered ] *\n     Comment.nestable_block_element Comment.with_location list list\n | `Modules of Comment.Reference.module_ list\n | `Paragraph of Comment.inline_element Comment.with_location list\n | `Tag of\n     [&gt; `Author of string\n      | `Deprecated of\n          Comment.nestable_block_element Location_.with_location list\n      | `Param of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Raise of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Return of\n          Comment.nestable_block_element Location_.with_location list\n      | `See of\n          'k1 * Omd.href *\n          Comment.nestable_block_element Location_.with_location list\n      | `Since of string ]\n | `Verbatim of string ]\n  )\n) => Omd.element", "docs": null, "kind": "value", "args": [["", "'a"], ["", "Location_.with_location(\n  [&lt; `Code_block of string\n | `Doc of string\n | `Example of Omd.name * string\n | `Heading of\n     [&lt; `Section | `Subsection | `Subsubsection | `Title ] * 'j1 *\n     Comment.non_link_inline_element Comment.with_location list\n | `List of\n     [ `Ordered | `Unordered ] *\n     Comment.nestable_block_element Comment.with_location list list\n | `Modules of Comment.Reference.module_ list\n | `Paragraph of Comment.inline_element Comment.with_location list\n | `Tag of\n     [&gt; `Author of string\n      | `Deprecated of\n          Comment.nestable_block_element Location_.with_location list\n      | `Param of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Raise of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Return of\n          Comment.nestable_block_element Location_.with_location list\n      | `See of\n          'k1 * Omd.href *\n          Comment.nestable_block_element Location_.with_location list\n      | `Since of string ]\n | `Verbatim of string ]\n)"]]}, {"path": "MarkdownOfOCamldoc", "name": "convert", "type": "let convert: ('a, string) => list(Omd.element)", "docs": null, "kind": "value", "args": [["", "'a"], ["", "string"]]}, {"path": "", "name": "MarkdownOfOCamldoc", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>convert\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>convertItem\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleRef\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeHeader\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stripLeft\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stripLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>whiteLeft\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>withStyle", "docs": null, "kind": "module"}, {"path": "Markdown", "name": "linkifyMarkdown", "type": "let linkifyMarkdown: (\n  string,\n  string,\n  'a,\n  'a,\n  Omd_representation.element => option(string),\n  Omd.element\n) => option(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "'a"], ["", "'a"], ["", "Omd_representation.element => option(string)"], ["", "Omd.element"]]}, {"path": "Markdown", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Markdown", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "Markdown", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Markdown", "name": "makeTokenCollector", "type": "let makeTokenCollector: PrintType.T.stringifier => (\n  Pervasives.ref(list(Asttypes.label)),\n  PrintType.T.stringifier\n)", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"]]}, {"path": "Markdown", "name": "makeDocStringProcessor", "type": "let makeDocStringProcessor: (string, Omd_representation.element => option(string)) => (\n  Pervasives.ref(list((string, string, string, string, string))),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd_representation.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.Representation.t\n  ) => string\n)", "docs": null, "kind": "value", "args": [["", "string"], ["", "Omd_representation.element => option(string)"]]}, {"path": "", "name": "Markdown", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>linkifyMarkdown\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeDocStringProcessor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeTokenCollector\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "Main", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Main", "name": "invert", "type": "let invert: ('a => bool, 'a) => bool", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a"]]}, {"path": "Main", "name": "compileBucklescript", "type": "let compileBucklescript: (~debug: bool, State.bucklescriptOptions, State.Model.package) => (\n  list(State.Model.codeBlock),\n  option((string, option((string, Buffer.t))))\n)", "docs": null, "kind": "value", "args": [["debug", "bool"], ["", "State.bucklescriptOptions"], ["", "State.Model.package"]]}, {"path": "Main", "name": "compilePackage", "type": "let compilePackage: (~debug: bool, State.Model.package) => option(\n  (list(State.Model.codeBlock), option((string, option((string, Buffer.t)))))\n)", "docs": null, "kind": "value", "args": [["debug", "bool"], ["", "State.Model.package"]]}, {"path": "Main", "name": "main", "type": "let main: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "", "name": "Main", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compileBucklescript\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compilePackage\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>invert\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "InputToModel", "name": "parseSidebar", "type": "let parseSidebar: string => list(State.Model.sidebar)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "getName", "type": "let getName: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "isReadme", "type": "let isReadme: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "asHtml", "type": "let asHtml: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "htmlName", "type": "let htmlName: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "getTitle", "type": "let getTitle: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "InputToModel", "name": "parseCustom", "type": "let parseCustom: (string, (string, option(string), string)) => State.Model.customPage", "docs": null, "kind": "value", "args": [["", "string"], ["", "(string, option(string), string)"]]}, {"path": "InputToModel", "name": "processCmt", "type": "let processCmt: ('a, string, bool) => (\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "'a"], ["", "string"], ["", "bool"]]}, {"path": "InputToModel", "name": "processModules", "type": "let processModules: (~namespaced: bool, list((string, string))) => list(State.Model.topModule)", "docs": null, "kind": "value", "args": [["namespaced", "bool"], ["", "list((string, string))"]]}, {"path": "InputToModel", "name": "package", "type": "let package: (~namespaced: bool, ~canBundle: bool, State.Input.packageInput) => State.Model.package", "docs": null, "kind": "value", "args": [["namespaced", "bool"], ["canBundle", "bool"], ["", "State.Input.packageInput"]]}, {"path": "", "name": "InputToModel", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>asHtml\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getTitle\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmlName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isReadme\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>package\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parseCustom\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parseSidebar\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processCmt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processModules", "docs": null, "kind": "module"}, {"path": "CompileCode", "name": "sanitize", "type": "let sanitize: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CompileCode", "name": "toReason", "type": "let toReason: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CompileCode", "name": "toMl", "type": "let toMl: (string, string, string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"], ["", "string"], ["", "string"]]}, {"path": "CompileCode", "name": "withSections", "type": "let withSections: ('a => 'a, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "'a"]]}, {"path": "CompileCode", "name": "block", "type": "let block: (\n  ~debug: bool,\n  ~editingEnabled: bool,\n  ~bundle: string => option(string),\n  State.bucklescriptOptions,\n  State.Model.package,\n  int,\n  (\n    string,\n    string,\n    string,\n    string,\n    State.Model.codeOptions,\n    option((State.Model.codeOptions, string))\n  )\n) => State.Model.codeBlock", "docs": null, "kind": "value", "args": [["debug", "bool"], ["editingEnabled", "bool"], ["bundle", "string => option(string)"], ["", "State.bucklescriptOptions"], ["", "State.Model.package"], ["", "int"], ["", "(string, string, string, string, State.Model.codeOptions, option((State.Model.codeOptions, string)))"]]}, {"path": "", "name": "CompileCode", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>block\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sanitize\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toMl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toReason\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>withSections", "docs": null, "kind": "module"}, {"path": "CliToInput", "name": "fail", "type": "let fail: string => 'a", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "optMap", "type": "let optMap: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "CliToInput", "name": "shouldExist", "type": "let shouldExist: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CliToInput", "name": "oneShouldExist", "type": "let oneShouldExist: (string, list(string)) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "list(string)"]]}, {"path": "CliToInput", "name": "ifOneExists", "type": "let ifOneExists: list(string) => option(string)", "docs": null, "kind": "value", "args": [["", "list(string)"]]}, {"path": "CliToInput", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CliToInput", "name": "findMarkdownFiles", "type": "let findMarkdownFiles: ('a, string, string) => list((string, option(string), string))", "docs": null, "kind": "value", "args": [["", "'a"], ["", "string"], ["", "string"]]}, {"path": "CliToInput", "name": "getSourceDirectories", "type": "let getSourceDirectories: (string, Json.t) => list(string)", "docs": "<ul><li>Returns a list of paths, relative to the provided <code>base</code>\n</li></ul>", "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CliToInput", "name": "isNative", "type": "let isNative: Json.t => bool", "docs": null, "kind": "value", "args": [["", "Json.t"]]}, {"path": "CliToInput", "name": "getDependencyDirs", "type": "let getDependencyDirs: (string, Json.t) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CliToInput", "name": "isCompiledFile", "type": "let isCompiledFile: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "isSourceFile", "type": "let isSourceFile: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "compiledNameSpace", "type": "let compiledNameSpace: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "compiledName", "type": "let compiledName: (~namespace: option(string), string) => string", "docs": null, "kind": "value", "args": [["namespace", "option(string)"], ["", "string"]]}, {"path": "CliToInput", "name": "getName", "type": "let getName: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "filterDuplicates", "type": "let filterDuplicates: list(string) => list(string)", "docs": null, "kind": "value", "args": [["", "list(string)"]]}, {"path": "CliToInput", "name": "ifDebug", "type": "let ifDebug: (bool, string, 'a => string, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "bool"], ["", "string"], ["", "'a => string"], ["", "'a"]]}, {"path": "CliToInput", "name": "findProjectFiles", "type": "let findProjectFiles: (~debug: bool, ~namespace: option(string), string) => list((string, string))", "docs": null, "kind": "value", "args": [["debug", "bool"], ["namespace", "option(string)"], ["", "string"]]}, {"path": "CliToInput", "name": "findDependencyDirectories", "type": "let findDependencyDirectories: string => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "help", "type": "let help: string", "docs": null, "kind": "value"}, {"path": "CliToInput", "name": "fail", "type": "let fail: string => 'a", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "parse", "type": "let parse: (\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)", "docs": null, "kind": "value", "args": [["bools", "list(Minimist.StrSet.elt) (optional)"], ["floats", "list(Minimist.StrSet.elt) (optional)"], ["ints", "list(Minimist.StrSet.elt) (optional)"], ["", "list(string)"]]}, {"path": "CliToInput", "name": "getRefmt", "type": "let getRefmt: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "getPackageJsonName", "type": "let getPackageJsonName: Json.t => option(string)", "docs": null, "kind": "value", "args": [["", "Json.t"]]}, {"path": "CliToInput", "name": "getBsbVersion", "type": "let getBsbVersion: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "optsToInput", "type": "let optsToInput: (string, Minimist.opts) => State.Input.t", "docs": null, "kind": "value", "args": [["", "string"], ["", "Minimist.opts"]]}, {"path": "CliToInput", "name": "parse", "type": "let parse: array(string) => State.Input.t", "docs": null, "kind": "value", "args": [["", "array(string)"]]}, {"path": "", "name": "CliToInput", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compiledName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compiledNameSpace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fail\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fail\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterDuplicates\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findDependencyDirectories\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findMarkdownFiles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findProjectFiles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getBsbVersion\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getDependencyDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getPackageJsonName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getRefmt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getSourceDirectories\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>help\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ifDebug\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ifOneExists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isCompiledFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isNative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isSourceFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>oneShouldExist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>optMap\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>optsToInput\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldExist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "SerializeBinary", "name": "array_str1", "type": "let array_str1: array(string)", "docs": null, "kind": "value"}, {"path": "SerializeBinary", "name": "array_conv", "type": "let array_conv: array(string)", "docs": null, "kind": "value"}, {"path": "SerializeBinary", "name": "pp_string", "type": "let pp_string: (string => 'a, ~?quote: option(char), ~?utf: option(bool), string) => 'a", "docs": null, "kind": "value", "args": [["", "string => 'a"], ["?quote", "option(char)"], ["?utf", "option(bool)"], ["", "string"]]}, {"path": "", "name": "SerializeBinary", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>array_conv\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>array_str1\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pp_string", "docs": null, "kind": "module"}, {"path": "Infix", "name": "|!", "type": "let |!: (option('a), string) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "string"]]}, {"path": "Infix", "name": "|?", "type": "let |?: (option('a), 'a) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a"]]}, {"path": "Infix", "name": "|??", "type": "let |??: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "Infix", "name": "|?#", "type": "let |?#: (option('a), Lazy.t(option('a))) => option('a)", "docs": "<p> Lazy optional default operator</p>\n", "kind": "value", "args": [["", "option('a)"], ["", "Lazy.t(option('a))"]]}, {"path": "Infix", "name": "|??#", "type": "let |??#: (option('a), Lazy.t(option('a))) => option('a)", "docs": "<p> Lazy optional default wrapped operator</p>\n", "kind": "value", "args": [["", "option('a)"], ["", "Lazy.t(option('a))"]]}, {"path": "Infix", "name": "|?>", "type": "let |?>: (option('a), 'a => option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => option('a)"]]}, {"path": "Infix", "name": "|?>>", "type": "let |?>>: (option('a), 'a => 'a) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => 'a"]]}, {"path": "Infix", "name": "fold", "type": "let fold: (option('a), 'a, 'a => 'a) => 'a", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a"], ["", "'a => 'a"]]}, {"path": "Infix", "name": "|.!", "type": "let |.!: ('a => option('a), string, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "string"], ["", "'a"]]}, {"path": "Infix", "name": "|?<", "type": "let |?<: (option('a), 'a => unit) => unit", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => unit"]]}, {"path": "Infix", "name": "fileConcat", "type": "let fileConcat: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Infix", "name": "/+", "type": "let /+: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Infix", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>/+\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fileConcat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|.!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?#\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?<\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?>\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|?>>\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|??\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>|??#", "docs": null, "kind": "module"}, {"path": "Files", "name": "split", "type": "let split: (string, string) => list(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "absify", "type": "let absify: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "removeExtraDots", "type": "let removeExtraDots: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Files", "name": "relpath", "type": "let relpath: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "symlink", "type": "let symlink: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "maybeStat", "type": "let maybeStat: string => option(Unix.stats)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readFile", "type": "let readFile: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readFileExn", "type": "let readFileExn: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "writeFile", "type": "let writeFile: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "writeFileExn", "type": "let writeFileExn: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Files", "name": "copy", "type": "let copy: (~source: string, ~dest: string) => bool", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "copyExn", "type": "let copyExn: (~source: string, ~dest: string) => unit", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "exists", "type": "let exists: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "ifExists", "type": "let ifExists: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "isFile", "type": "let isFile: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "isDirectory", "type": "let isDirectory: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "readDirectory", "type": "let readDirectory: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "mkdirp", "type": "let mkdirp: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "copyDeep", "type": "let copyDeep: (~source: string, ~dest: string) => unit", "docs": null, "kind": "value", "args": [["source", "string"], ["dest", "string"]]}, {"path": "Files", "name": "removeDeep", "type": "let removeDeep: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "walk", "type": "let walk: (string, string => unit) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string => unit"]]}, {"path": "Files", "name": "collectDirs", "type": "let collectDirs: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Files", "name": "collect", "type": "let collect: (~?checkDir: option(string => bool), string, string => bool) => list(string)", "docs": null, "kind": "value", "args": [["?checkDir", "option(string => bool)"], ["", "string"], ["", "string => bool"]]}, {"path": "", "name": "Files", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>absify\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collect\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copy\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copyDeep\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>copyExn\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>exists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ifExists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDirectory\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>maybeStat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mkdirp\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readDirectory\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>readFileExn\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relpath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeDeep\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeExtraDots\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>symlink\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>walk\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeFileExn", "docs": null, "kind": "module"}, {"path": "Commands", "name": "execFull", "type": "let execFull: (~?input: option(string), ~?env: option(array(string)), string) => (\n  list(string),\n  list(string),\n  bool\n)", "docs": null, "kind": "value", "args": [["?input", "option(string)"], ["?env", "option(array(string))"], ["", "string"]]}, {"path": "Commands", "name": "execSync", "type": "let execSync: string => (list(string), bool)", "docs": "<ul><li>Get the output of a command, in lines.\n</li></ul>", "kind": "value", "args": [["", "string"]]}, {"path": "Commands", "name": "execWithInput", "type": "let execWithInput: (string, string) => (list(string), bool)", "docs": "<ul><li>Get the output of a command, in lines.\n</li></ul>", "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Commands", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execFull\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execSync\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>execWithInput", "docs": null, "kind": "module"}, {"path": "SearchScript", "name": "framework", "type": "let framework: string", "docs": null, "kind": "value"}, {"path": "SearchScript", "name": "js", "type": "let js: string", "docs": null, "kind": "value"}, {"path": "", "name": "SearchScript", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>framework\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>js", "docs": null, "kind": "module"}, {"path": "Template", "name": "header", "type": "let header: string", "docs": null, "kind": "value"}, {"path": "Template", "name": "final", "type": "let final: string", "docs": null, "kind": "value"}, {"path": "Template", "name": "make", "type": "let make: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "Template", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>final\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>header\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make", "docs": null, "kind": "module"}, {"path": "Sidebar", "name": "makeToc", "type": "let makeToc: list((int, string, string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((int, string, string, string))"]]}, {"path": "Sidebar", "name": "showPackage", "type": "let showPackage: list((string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string))"]]}, {"path": "Sidebar", "name": "makeMarkdowns", "type": "let makeMarkdowns: list((string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string))"]]}, {"path": "Sidebar", "name": "generate", "type": "let generate: (\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string,\n  ~playgroundPath: option(string)\n) => string", "docs": null, "kind": "value", "args": [["", "'a"], ["", "list((int, string, string, string))"], ["", "list((string, string))"], ["", "list((string, string))"], ["", "string"], ["playgroundPath", "option(string)"]]}, {"path": "", "name": "Sidebar", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generate\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeMarkdowns\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeToc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPackage", "docs": null, "kind": "module"}, {"path": "PrintType", "name": "collectArgs", "type": "let collectArgs: (list((Asttypes.label, Types.type_expr)), Types.type_expr) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)", "docs": null, "kind": "value", "args": [["", "list((Asttypes.label, Types.type_expr))"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "pathType", "type": "type pathType = | PModule | PModuleType | PValue | PType\n", "docs": null, "kind": "type"}, {"path": "PrintType.T", "name": "stringifier", "type": "type stringifier = {\n  path: (stringifier, Path.t, pathType) => Pretty.doc,\n  expr: (stringifier, Types.type_expr) => Pretty.doc,\n  ident: (stringifier, Ident.t) => Pretty.doc,\n  decl: (stringifier, string, string, Types.type_declaration) => Pretty.doc,\n  value: (stringifier, string, string, Types.type_expr) => Pretty.doc\n}", "docs": null, "kind": "type"}, {"path": "PrintType", "name": "T", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>stringifier", "docs": null, "kind": "module"}, {"path": "PrintType", "name": "break", "type": "let break: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "space", "type": "let space: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "dedent", "type": "let dedent: Pretty.doc", "docs": null, "kind": "value"}, {"path": "PrintType", "name": "str", "type": "let str: (~?len: option(int), string) => Pretty.doc", "docs": null, "kind": "value", "args": [["len", "int (optional)"], ["", "string"]]}, {"path": "PrintType", "name": "@!", "type": "let @!: (Pretty.doc, Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"], ["", "Pretty.doc"]]}, {"path": "PrintType", "name": "sepd_list", "type": "let sepd_list: (Pretty.doc, list('a), 'a => Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"], ["", "list('a)"], ["", "'a => Pretty.doc"]]}, {"path": "PrintType", "name": "commad_list", "type": "let commad_list: ('a => Pretty.doc, list('a)) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "'a => Pretty.doc"], ["", "list('a)"]]}, {"path": "PrintType", "name": "indentGroup", "type": "let indentGroup: Pretty.doc => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Pretty.doc"]]}, {"path": "PrintType", "name": "tuple_list", "type": "let tuple_list: (list('a), 'a => Pretty.doc) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "'a => Pretty.doc"]]}, {"path": "PrintType", "name": "replace", "type": "let replace: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "PrintType", "name": "htmlEscape", "type": "let htmlEscape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrintType", "name": "print_expr", "type": "let print_expr: (T.stringifier, Types.type_expr) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "print_constructor", "type": "let print_constructor: (Types.type_expr => Pretty.doc, Types.constructor_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "Types.type_expr => Pretty.doc"], ["", "Types.constructor_declaration"]]}, {"path": "PrintType", "name": "print_attr", "type": "let print_attr: (T.stringifier, Types.label_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "Types.label_declaration"]]}, {"path": "PrintType", "name": "print_value", "type": "let print_value: (T.stringifier, string, string, Types.type_expr) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "string"], ["", "string"], ["", "Types.type_expr"]]}, {"path": "PrintType", "name": "print_decl", "type": "let print_decl: (T.stringifier, string, string, Types.type_declaration) => Pretty.doc", "docs": null, "kind": "value", "args": [["", "T.stringifier"], ["", "string"], ["", "string"], ["", "Types.type_declaration"]]}, {"path": "PrintType", "name": "default", "type": "let default: T.stringifier", "docs": null, "kind": "value"}, {"path": "", "name": "PrintType", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>@!\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>break\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectArgs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>commad_list\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>dedent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>default\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmlEscape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indentGroup\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_attr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_constructor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_decl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_expr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print_value\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>replace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sepd_list\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>space\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>str\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>tuple_list\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>pathType\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>T", "docs": null, "kind": "module"}, {"path": "Pretty", "name": "doc", "type": "type doc", "docs": "<p>Represents documents to be pretty-printed</p>\n", "kind": "type"}, {"path": "Pretty", "name": "append", "type": "let append: (doc, doc) => doc", "docs": "<p>Sequentially appends two documents</p>\n", "kind": "value", "args": [["", "doc"], ["", "doc"]]}, {"path": "Pretty", "name": "empty", "type": "let empty: doc", "docs": "<p>The empty document</p>\n", "kind": "value"}, {"path": "Pretty", "name": "group", "type": "let group: doc => doc", "docs": "<p>Constructs a group based on a given document. The printer has two ways to print a group: it either prints exactly as the defining document, or prints as its flattened version where all newlines are collapsed. The choice is made by the printer based on available space.</p>\n", "kind": "value", "args": [["", "doc"]]}, {"path": "Pretty", "name": "indent", "type": "let indent: (int, doc) => doc", "docs": "<p>Adds a level of indentation to a document</p>\n", "kind": "value", "args": [["", "int"], ["", "doc"]]}, {"path": "Pretty", "name": "line", "type": "let line: string => doc", "docs": "<p>Constructs a primitive document that prints as a newline unless the printer chooses to flatten the enclosing group. In the later case, the document prints as a given string.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Pretty", "name": "text", "type": "let text: (~?len: option(int), string) => doc", "docs": "<p>Constructs a primitive document that prints as the given string. For best results, the string should not contain newlines</p>\n", "kind": "value", "args": [["len", "int (optional)"], ["", "string"]]}, {"path": "Pretty", "name": "back", "type": "let back: (int, string) => doc", "docs": "<p>Constructs a linebreak that dedents</p>\n", "kind": "value", "args": [["", "int"], ["", "string"]]}, {"path": "Pretty", "name": "print", "type": "let print: (\n  ~?width: option(int),\n  ~?output: option(string => unit),\n  ~?indent: option(int => unit),\n  doc\n) => unit", "docs": "<p>Pretty-prints the document. You can override the device width, the &quot;output&quot; function that defines how to output text, and the &quot;indent&quot; function that defines how to print a newline and indent to a desired level. The default arguments print to stdout.</p>\n", "kind": "value", "args": [["width", "int (optional)"], ["output", "string => unit (optional)"], ["indent", "int => unit (optional)"], ["", "doc"]]}, {"path": "", "name": "Pretty", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>append\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>back\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>empty\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>group\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>line\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>text\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>doc", "docs": null, "kind": "module"}, {"path": "GenerateDoc", "name": "findByName", "type": "let findByName: (list(('a, 'a, 'a)), 'a) => option(('a, 'a, 'a))", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, 'a))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "findTypeByName", "type": "let findTypeByName: (list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "findValueByName", "type": "let findValueByName: (list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "isUpperCase", "type": "let isUpperCase: char => bool", "docs": null, "kind": "value", "args": [["", "char"]]}, {"path": "GenerateDoc", "name": "processPath", "type": "let processPath: (list((int, (string, list(string), 'a))), list(string), Path.t, 'a) => (\n  string,\n  list(string),\n  'a\n)", "docs": null, "kind": "value", "args": [["", "list((int, (string, list(string), 'a)))"], ["", "list(string)"], ["", "Path.t"], ["", "'a"]]}, {"path": "GenerateDoc", "name": "printer", "type": "let printer: (\n  (string, list(string), PrintType.pathType) => option(string),\n  list((int, (string, list(string), 'a)))\n) => PrintType.T.stringifier", "docs": null, "kind": "value", "args": [["", "(string, list(string), PrintType.pathType) => option(string)"], ["", "list((int, (string, list(string), 'a)))"]]}, {"path": "GenerateDoc", "name": "ptypePrefix", "type": "let ptypePrefix: CmtFindStamps.T.pathType => string", "docs": null, "kind": "value", "args": [["", "CmtFindStamps.T.pathType"]]}, {"path": "GenerateDoc", "name": "makeId", "type": "let makeId: (list(string), CmtFindStamps.T.pathType) => string", "docs": null, "kind": "value", "args": [["", "list(string)"], ["", "CmtFindStamps.T.pathType"]]}, {"path": "GenerateDoc", "name": "defaultMain", "type": "let defaultMain: (~?addHeading: option(bool), string) => string", "docs": null, "kind": "value", "args": [["?addHeading", "option(bool)"], ["", "string"]]}, {"path": "GenerateDoc", "name": "prettyString", "type": "let prettyString: (~?width: option(int), Pretty.doc) => string", "docs": null, "kind": "value", "args": [["?width", "option(int)"], ["", "Pretty.doc"]]}, {"path": "GenerateDoc", "name": "cleanForLink", "type": "let cleanForLink: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "GenerateDoc", "name": "uniqueItems", "type": "let uniqueItems: list(('a, 'a, State.Model.Docs.docItem)) => list(\n  ('a, 'a, State.Model.Docs.docItem)\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, State.Model.Docs.docItem))"]]}, {"path": "GenerateDoc", "name": "trackToc", "type": "let trackToc: (\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (Pervasives.ref(list((int, string, string, string))), Omd.element => option(string))", "docs": null, "kind": "value", "args": [["?lower", "option(bool)"], ["", "int"], ["", "(\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)"]]}, {"path": "GenerateDoc", "name": "div", "type": "let div: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "GenerateDoc", "name": "marked", "type": "let marked: (Omd_representation.element => option(string), string) => string", "docs": null, "kind": "value", "args": [["", "Omd_representation.element => option(string)"], ["", "string"]]}, {"path": "GenerateDoc", "name": "link", "type": "let link: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "GenerateDoc", "name": "t", "type": "type t = (\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string", "docs": null, "kind": "type"}, {"path": "GenerateDoc", "name": "generateDoc", "type": "let generateDoc: (PrintType.T.stringifier, t, list(string), int, State.Model.Docs.doc) => (\n  string,\n  list((int, string, string, string))\n)", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"], ["", "t"], ["", "list(string)"], ["", "int"], ["", "State.Model.Docs.doc"]]}, {"path": "GenerateDoc", "name": "docsForModule", "type": "let docsForModule: (\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"], ["", "t"], ["", "list(string)"], ["", "int"], ["", "string"], ["", "Omd.t"], ["", "list(State.Model.Docs.doc)"]]}, {"path": "", "name": "GenerateDoc", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cleanForLink\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultMain\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>div\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docsForModule\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findTypeByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findValueByName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generateDoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isUpperCase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>link\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>marked\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>prettyString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>printer\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ptypePrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>trackToc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>uniqueItems\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t", "docs": null, "kind": "module"}, {"path": "DocsTemplate", "name": "searchStyle", "type": "let searchStyle: string", "docs": null, "kind": "value"}, {"path": "DocsTemplate", "name": "head", "type": "let head: (~relativeToRoot: string, string) => string", "docs": null, "kind": "value", "args": [["relativeToRoot", "string"], ["", "string"]]}, {"path": "", "name": "DocsTemplate", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>head\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>searchStyle", "docs": null, "kind": "module"}, {"path": "Docs", "name": "allGlobals", "type": "let allGlobals: list(string)", "docs": null, "kind": "value"}, {"path": "Docs", "name": "formatHref", "type": "let formatHref: (\n  ~warnMissing: bool,\n  string,\n  list(string),\n  (string, list(string), CmtFindStamps.T.pathType)\n) => option(string)", "docs": null, "kind": "value", "args": [["warnMissing", "bool"], ["", "string"], ["", "list(string)"], ["", "(string, list(string), CmtFindStamps.T.pathType)"]]}, {"path": "Docs", "name": "page", "type": "let page: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string", "docs": null, "kind": "value", "args": [["sourceUrl", "option(string)"], ["relativeToRoot", "string"], ["playgroundEnabled", "bool"], ["?checkHashes", "option(bool)"], ["", "string"], ["", "list((int, string, string, string))"], ["", "list((string, string))"], ["", "list((string, string))"], ["", "string"]]}, {"path": "Docs", "name": "generate", "type": "let generate: (\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~playgroundEnabled: bool,\n  ~processDocString: GenerateDoc.t,\n  string,\n  option(Omd.t),\n  list((int, (string, list(string), 'a))),\n  list(State.Model.Docs.doc),\n  list(string),\n  list((string, string))\n) => string", "docs": null, "kind": "value", "args": [["sourceUrl", "option(string)"], ["relativeToRoot", "string"], ["playgroundEnabled", "bool"], ["processDocString", "GenerateDoc.t"], ["", "string"], ["", "option(Omd.t)"], ["", "list((int, (string, list(string), 'a)))"], ["", "list(State.Model.Docs.doc)"], ["", "list(string)"], ["", "list((string, string))"]]}, {"path": "", "name": "Docs", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>allGlobals\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>formatHref\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>generate\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>page", "docs": null, "kind": "module"}, {"path": "CodeSnippets", "name": "codeBlockPrefix", "type": "let codeBlockPrefix: string", "docs": null, "kind": "value"}, {"path": "CodeSnippets", "name": "matchOption", "type": "let matchOption: (string, string) => option(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "parseCodeOptions", "type": "let parseCodeOptions: (string, 'a) => option(State.Model.codeOptions)", "docs": null, "kind": "value", "args": [["", "string"], ["", "'a"]]}, {"path": "CodeSnippets", "name": "codeBlock", "type": "type codeBlock = {\n  el: Omd.element,\n  id: int,\n  fileName: string,\n  options: State.Model.codeOptions,\n  content: string\n}", "docs": null, "kind": "type"}, {"path": "CodeSnippets", "name": "compiledBlock", "type": "type compiledBlock = {block: codeBlock, status: State.Model.compilationResult}", "docs": null, "kind": "type"}, {"path": "CodeSnippets", "name": "sprintf", "type": "let sprintf: Pervasives.format('a, unit, string) => 'a", "docs": null, "kind": "value", "args": [["", "Pervasives.format('a, unit, string)"]]}, {"path": "CodeSnippets", "name": "html", "type": "let html: (~?md: option(bool), string) => string", "docs": null, "kind": "value", "args": [["md", "bool (optional)"], ["", "string"]]}, {"path": "CodeSnippets", "name": "escapeScript", "type": "let escapeScript: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "shouldBundle", "type": "let shouldBundle: State.Model.expectation => bool", "docs": null, "kind": "value", "args": [["", "State.Model.expectation"]]}, {"path": "CodeSnippets", "name": "highlight", "type": "let highlight: (\n  ~editingEnabled: bool,\n  string,\n  string,\n  State.Model.codeOptions,\n  State.Model.compilationResult,\n  string => option(string)\n) => string", "docs": null, "kind": "value", "args": [["editingEnabled", "bool"], ["", "string"], ["", "string"], ["", "State.Model.codeOptions"], ["", "State.Model.compilationResult"], ["", "string => option(string)"]]}, {"path": "CodeSnippets", "name": "splitLines", "type": "let splitLines: string => list(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "CodeSnippets", "name": "removeHashes", "type": "let removeHashes: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "hashAll", "type": "let hashAll: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "CodeSnippets", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "fullContent", "type": "let fullContent: (string => string, State.Model.codeOptions, string) => string", "docs": null, "kind": "value", "args": [["", "string => string"], ["", "State.Model.codeOptions"], ["", "string"]]}, {"path": "CodeSnippets", "name": "optMap", "type": "let optMap: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "CodeSnippets", "name": "getSourceDirectories", "type": "let getSourceDirectories: (string, Json.t) => list(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CodeSnippets", "name": "isNative", "type": "let isNative: Json.t => bool", "docs": null, "kind": "value", "args": [["", "Json.t"]]}, {"path": "CodeSnippets", "name": "getDependencyDirs", "type": "let getDependencyDirs: (string, Json.t) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CodeSnippets", "name": "invert", "type": "let invert: ('a => bool, 'a) => bool", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a"]]}, {"path": "CodeSnippets", "name": "unique", "type": "let unique: list('a) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"]]}, {"path": "CodeSnippets", "name": "writeDeps", "type": "let writeDeps: (\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit", "docs": null, "kind": "value", "args": [["output_string", "string => unit"], ["dependencyDirs", "list((string, string))"], ["stdlibRequires", "list(string)"], ["bsRoot", "'a"], ["base", "string"]]}, {"path": "CodeSnippets", "name": "refmtCommand", "type": "let refmtCommand: (string, string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "justBscCommand", "type": "let justBscCommand: (string, string, list(string)) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "list(string)"]]}, {"path": "CodeSnippets", "name": "processBlock", "type": "let processBlock: (\n  ~?debug: option(bool),\n  ~?silentFailures: option(bool),\n  string,\n  string,\n  string,\n  string,\n  State.Model.codeOptions,\n  string,\n  list(string)\n) => State.Model.compilationResult", "docs": null, "kind": "value", "args": [["?debug", "option(bool)"], ["?silentFailures", "option(bool)"], ["", "string"], ["", "string"], ["", "string"], ["", "string"], ["", "State.Model.codeOptions"], ["", "string"], ["", "list(string)"]]}, {"path": "CodeSnippets", "name": "escape", "type": "let escape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeSnippets", "name": "shouldTest", "type": "let shouldTest: State.Model.expectation => bool", "docs": null, "kind": "value", "args": [["", "State.Model.expectation"]]}, {"path": "CodeSnippets", "name": "snippetLoader", "type": "let snippetLoader: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "CodeSnippets", "name": "testBlock", "type": "let testBlock: (\n  string,\n  ~base: string,\n  State.Model.compilationResult,\n  State.Model.codeOptions,\n  string,\n  int\n) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["base", "string"], ["", "State.Model.compilationResult"], ["", "State.Model.codeOptions"], ["", "string"], ["", "int"]]}, {"path": "", "name": "CodeSnippets", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeBlockPrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escapeScript\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fullContent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getDependencyDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getSourceDirectories\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hashAll\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlight\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>html\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>invert\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isNative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>justBscCommand\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>matchOption\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>optMap\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parseCodeOptions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processBlock\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>refmtCommand\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeHashes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldBundle\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldTest\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>snippetLoader\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>splitLines\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sprintf\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>testBlock\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unique\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeDeps\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeBlock\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>compiledBlock", "docs": null, "kind": "module"}, {"path": "CodeHighlight", "name": "addHtmlEscapedToBuffer", "type": "let addHtmlEscapedToBuffer: (Buffer.t, char) => unit", "docs": null, "kind": "value", "args": [["", "Buffer.t"], ["", "char"]]}, {"path": "CodeHighlight", "name": "annotateText", "type": "let annotateText: (list((int, int, string)), list((int, string)), string, int, int) => string", "docs": null, "kind": "value", "args": [["", "list((int, int, string))"], ["", "list((int, string))"], ["", "string"], ["", "int"], ["", "int"]]}, {"path": "CodeHighlight", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "CodeHighlight", "name": "iterTags", "type": "let iterTags: (Cmt_format.binary_annots, (Location.t, string) => unit) => unit", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"], ["", "(Location.t, string) => unit"]]}, {"path": "CodeHighlight", "name": "collectRanges", "type": "let collectRanges: Cmt_format.binary_annots => list((Location.t, string))", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"]]}, {"path": "CodeHighlight", "name": "removeIfThere", "type": "let removeIfThere: string => unit", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "CodeHighlight", "name": "isHashed", "type": "let isHashed: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "unHash", "type": "let unHash: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "separateHashed", "type": "let separateHashed: (int, list(string), list(string)) => (int, list(string), list(string))", "docs": null, "kind": "value", "args": [["", "int"], ["", "list(string)"], ["", "list(string)"]]}, {"path": "CodeHighlight", "name": "codeSections", "type": "let codeSections: string => (string, int, string, string, int)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CodeHighlight", "name": "highlight", "type": "let highlight: (string, string) => (string, string, string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "CodeHighlight", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addHtmlEscapedToBuffer\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>annotateText\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeSections\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectRanges\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlight\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isHashed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterTags\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>removeIfThere\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>separateHashed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unHash", "docs": null, "kind": "module"}, {"path": "MakeIndex", "name": "source", "type": "let source: string", "docs": null, "kind": "value"}, {"path": "MakeIndex", "name": "run", "type": "let run: (string, string) => unit", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "", "name": "MakeIndex", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>run\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>source", "docs": null, "kind": "module"}, {"path": "ElasticRaw", "name": "raw", "type": "let raw: string", "docs": null, "kind": "value"}, {"path": "", "name": "ElasticRaw", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>raw", "docs": null, "kind": "module"}, {"path": "Descartes", "name": "filterNil", "type": "let filterNil: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "Descartes", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Descartes", "name": "tag", "type": "type tag = \n  | TypeHover(Types.type_expr)\n  | Cls(string)\n  | TypeDef(Ident.t)\n  | ValueDef(Ident.t)\n  | TypeRef(Path.t)\n  | ValueRef(Path.t)\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "iterTags", "type": "let iterTags: (Location.t, list(tag)) => unit => (module TypedtreeIter.IteratorArgument)", "docs": null, "kind": "value", "args": [["", "(Location.t, list(tag)) => unit"]]}, {"path": "Descartes", "name": "highlightItem", "type": "let highlightItem: Typedtree.structure_item => (\n  list((Location.t, list(tag))),\n  list(Path.t),\n  list(Path.t)\n)", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Descartes", "name": "markdownTags", "type": "type markdownTags = (Location.t, list(tag))", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "node", "type": "type node = \n  | Item(Location.t, item, list((Location.t, list(tag))), list(Path.t), list(Path.t))\n  | Module(string, list((int, node)))\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "item", "type": "type item = | Value(string, string) | Type(string, string)\n", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "chart", "type": "let chart: list(Typedtree.structure_item) => list((int, node))", "docs": null, "kind": "value", "args": [["", "list(Typedtree.structure_item)"]]}, {"path": "Descartes", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "Descartes", "name": "fullItem", "type": "type fullItem = {\n  id: string,\n  name: string,\n  moduleName: string,\n  typ: string,\n  loc: Location.t,\n  tags: list((Location.t, list(tag))),\n  vals: list(Path.t),\n  typs: list(Path.t),\n  text: string\n}", "docs": null, "kind": "type"}, {"path": "Descartes", "name": "process", "type": "let process: (\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (string, (list((string, string)), list((string, string)), list((string, string))))\n  ),\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(string, fullItem)\n) => (list((string, string)), list((string, string)), list((string, string)))", "docs": null, "kind": "value", "args": [["", "string"], ["", "list(Typedtree.structure_item)"], ["", "string"], ["", "Hashtbl.t(\n  string,\n  (string, (list((string, string)), list((string, string)), list((string, string))))\n)"], ["", "Hashtbl.t(string, fullItem)"], ["", "Hashtbl.t(string, fullItem)"]]}, {"path": "Descartes", "name": "fold", "type": "let fold: ('a, 'a => 'a, option('a)) => 'a", "docs": null, "kind": "value", "args": [["", "'a"], ["", "'a => 'a"], ["", "option('a)"]]}, {"path": "Descartes", "name": "flatten", "type": "let flatten: Path.t => (Ident.t, list(string))", "docs": null, "kind": "value", "args": [["", "Path.t"]]}, {"path": "Descartes", "name": "toId", "type": "let toId: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Descartes", "name": "deepValue", "type": "let deepValue: (\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))\n) => [&gt; `Global of 'i1 | `Missing ]", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "('a, ('a, list(('a, 'a)), list(('a, 'a))))"], ["", "'a"], ["", "Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))"]]}, {"path": "Descartes", "name": "deepType", "type": "let deepType: (\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))\n) => [&gt; `Global of 'h1 | `Missing ]", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "('a, (list(('a, 'a)), 'a, list(('a, 'a))))"], ["", "'a"], ["", "Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))"]]}, {"path": "Descartes", "name": "resolveValue", "type": "let resolveValue: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string))))),\n  Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string))))),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]", "docs": null, "kind": "value", "args": [["", "string"], ["", "Hashtbl.t(string, 'a)"], ["", "Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string)))))"], ["", "Hashtbl.t(string, ('a, ('a, list((string, string)), list((string, string)))))"], ["", "Path.t"]]}, {"path": "Descartes", "name": "resolveType", "type": "let resolveType: (\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string))))),\n  Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string))))),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]", "docs": null, "kind": "value", "args": [["", "string"], ["", "Hashtbl.t(string, 'a)"], ["", "Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string)))))"], ["", "Hashtbl.t(string, ('a, (list((string, string)), 'a, list((string, string)))))"], ["", "Path.t"]]}, {"path": "Descartes", "name": "unique", "type": "let unique: list('a) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"]]}, {"path": "Descartes", "name": "processMany", "type": "let processMany: list((string, list(Typedtree.structure_item), string)) => (\n  list((string, string, string, string, Location.t, string, list(fullItem), list(fullItem))),\n  list((string, string, list(string)))\n)", "docs": null, "kind": "value", "args": [["", "list((string, list(Typedtree.structure_item), string))"]]}, {"path": "Descartes", "name": "gatherCmts", "type": "let gatherCmts: (string, string, list(string)) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "list(string)"]]}, {"path": "Descartes", "name": "main", "type": "let main: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "", "name": "Descartes", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>chart\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deepType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deepValue\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterNil\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>flatten\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>gatherCmts\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>highlightItem\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterTags\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>process\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processMany\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveValue\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unique\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fullItem\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>item\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>markdownTags\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>node\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "Typing", "name": "tag", "type": "type tag = | Type | Value | Module | Constructor(string) | Attribute(string)\n", "docs": null, "kind": "type"}, {"path": "Typing", "name": "ident", "type": "type ident('a) = ('a, tag)", "docs": null, "kind": "type"}, {"path": "Typing", "name": "mapIdent", "type": "let mapIdent: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "Typing", "name": "contents", "type": "let contents: ('a, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "('a, 'a)"]]}, {"path": "Typing", "name": "toString", "type": "let toString: ('a => string, ('a, tag)) => string", "docs": null, "kind": "value", "args": [["", "'a => string"], ["", "('a, tag)"]]}, {"path": "Typing", "name": "showPath", "type": "let showPath: (~?paren: option(string => bool), Path.t) => string", "docs": null, "kind": "value", "args": [["paren", "string => bool (optional)"], ["", "Path.t"]]}, {"path": "Typing", "name": "showLident", "type": "let showLident: Longident.t => string", "docs": null, "kind": "value", "args": [["", "Longident.t"]]}, {"path": "Typing", "name": "showLoc", "type": "let showLoc: Location.t => string", "docs": null, "kind": "value", "args": [["", "Location.t"]]}, {"path": "Typing", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing", "name": "openn", "type": "type openn = {mut used: list(ident(Longident.t)), path: Path.t, loc: Location.t}", "docs": null, "kind": "type"}, {"path": "Typing", "name": "open_stack", "type": "type open_stack = {mut closed: list(openn), mut opens: list(openn), parent: option(open_stack)}", "docs": null, "kind": "type"}, {"path": "Typing", "name": "pathToLident", "type": "let pathToLident: Path.t => Longident.t", "docs": null, "kind": "value", "args": [["", "Path.t"]]}, {"path": "Typing", "name": "addLidentToPath", "type": "let addLidentToPath: (Path.t, Longident.t) => Path.t", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing", "name": "usesOpen", "type": "let usesOpen: (Longident.t, Path.t) => bool", "docs": null, "kind": "value", "args": [["", "Longident.t"], ["", "Path.t"]]}, {"path": "Typing", "name": "relative", "type": "let relative: (Longident.t, Path.t) => Path.t", "docs": null, "kind": "value", "args": [["", "Longident.t"], ["", "Path.t"]]}, {"path": "Typing.F", "name": "enter_structure", "type": "let enter_structure: Typedtree.structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure"]]}, {"path": "Typing.F", "name": "enter_value_description", "type": "let enter_value_description: Typedtree.value_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_description"]]}, {"path": "Typing.F", "name": "enter_type_extension", "type": "let enter_type_extension: Typedtree.type_extension => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_extension"]]}, {"path": "Typing.F", "name": "enter_extension_constructor", "type": "let enter_extension_constructor: Typedtree.extension_constructor => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.extension_constructor"]]}, {"path": "Typing.F", "name": "enter_pattern", "type": "let enter_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "enter_expression", "type": "let enter_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "enter_package_type", "type": "let enter_package_type: Typedtree.package_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.package_type"]]}, {"path": "Typing.F", "name": "enter_signature", "type": "let enter_signature: Typedtree.signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature"]]}, {"path": "Typing.F", "name": "enter_signature_item", "type": "let enter_signature_item: Typedtree.signature_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature_item"]]}, {"path": "Typing.F", "name": "enter_module_type_declaration", "type": "let enter_module_type_declaration: Typedtree.module_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type_declaration"]]}, {"path": "Typing.F", "name": "enter_module_type", "type": "let enter_module_type: Typedtree.module_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type"]]}, {"path": "Typing.F", "name": "enter_module_expr", "type": "let enter_module_expr: Typedtree.module_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_expr"]]}, {"path": "Typing.F", "name": "enter_with_constraint", "type": "let enter_with_constraint: Typedtree.with_constraint => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.with_constraint"]]}, {"path": "Typing.F", "name": "enter_class_expr", "type": "let enter_class_expr: Typedtree.class_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_expr"]]}, {"path": "Typing.F", "name": "enter_class_signature", "type": "let enter_class_signature: Typedtree.class_signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_signature"]]}, {"path": "Typing.F", "name": "enter_class_declaration", "type": "let enter_class_declaration: Typedtree.class_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_declaration"]]}, {"path": "Typing.F", "name": "enter_class_description", "type": "let enter_class_description: Typedtree.class_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_description"]]}, {"path": "Typing.F", "name": "enter_class_type_declaration", "type": "let enter_class_type_declaration: Typedtree.class_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_declaration"]]}, {"path": "Typing.F", "name": "enter_class_type", "type": "let enter_class_type: Typedtree.class_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type"]]}, {"path": "Typing.F", "name": "enter_class_type_field", "type": "let enter_class_type_field: Typedtree.class_type_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_field"]]}, {"path": "Typing.F", "name": "enter_core_type", "type": "let enter_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "enter_class_structure", "type": "let enter_class_structure: Typedtree.class_structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_structure"]]}, {"path": "Typing.F", "name": "enter_class_field", "type": "let enter_class_field: Typedtree.class_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_field"]]}, {"path": "Typing.F", "name": "enter_structure_item", "type": "let enter_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "leave_structure", "type": "let leave_structure: Typedtree.structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure"]]}, {"path": "Typing.F", "name": "leave_value_description", "type": "let leave_value_description: Typedtree.value_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_description"]]}, {"path": "Typing.F", "name": "leave_type_extension", "type": "let leave_type_extension: Typedtree.type_extension => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_extension"]]}, {"path": "Typing.F", "name": "leave_extension_constructor", "type": "let leave_extension_constructor: Typedtree.extension_constructor => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.extension_constructor"]]}, {"path": "Typing.F", "name": "leave_pattern", "type": "let leave_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "leave_expression", "type": "let leave_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "leave_package_type", "type": "let leave_package_type: Typedtree.package_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.package_type"]]}, {"path": "Typing.F", "name": "leave_signature", "type": "let leave_signature: Typedtree.signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature"]]}, {"path": "Typing.F", "name": "leave_signature_item", "type": "let leave_signature_item: Typedtree.signature_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.signature_item"]]}, {"path": "Typing.F", "name": "leave_module_type_declaration", "type": "let leave_module_type_declaration: Typedtree.module_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type_declaration"]]}, {"path": "Typing.F", "name": "leave_module_type", "type": "let leave_module_type: Typedtree.module_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_type"]]}, {"path": "Typing.F", "name": "leave_module_expr", "type": "let leave_module_expr: Typedtree.module_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.module_expr"]]}, {"path": "Typing.F", "name": "leave_with_constraint", "type": "let leave_with_constraint: Typedtree.with_constraint => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.with_constraint"]]}, {"path": "Typing.F", "name": "leave_class_expr", "type": "let leave_class_expr: Typedtree.class_expr => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_expr"]]}, {"path": "Typing.F", "name": "leave_class_signature", "type": "let leave_class_signature: Typedtree.class_signature => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_signature"]]}, {"path": "Typing.F", "name": "leave_class_declaration", "type": "let leave_class_declaration: Typedtree.class_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_declaration"]]}, {"path": "Typing.F", "name": "leave_class_description", "type": "let leave_class_description: Typedtree.class_description => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_description"]]}, {"path": "Typing.F", "name": "leave_class_type_declaration", "type": "let leave_class_type_declaration: Typedtree.class_type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_declaration"]]}, {"path": "Typing.F", "name": "leave_class_type", "type": "let leave_class_type: Typedtree.class_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type"]]}, {"path": "Typing.F", "name": "leave_class_type_field", "type": "let leave_class_type_field: Typedtree.class_type_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_type_field"]]}, {"path": "Typing.F", "name": "leave_core_type", "type": "let leave_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "leave_class_structure", "type": "let leave_class_structure: Typedtree.class_structure => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_structure"]]}, {"path": "Typing.F", "name": "leave_class_field", "type": "let leave_class_field: Typedtree.class_field => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.class_field"]]}, {"path": "Typing.F", "name": "leave_structure_item", "type": "let leave_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "enter_bindings", "type": "let enter_bindings: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_binding", "type": "let enter_binding: Typedtree.value_binding => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_binding"]]}, {"path": "Typing.F", "name": "leave_binding", "type": "let leave_binding: Typedtree.value_binding => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.value_binding"]]}, {"path": "Typing.F", "name": "leave_bindings", "type": "let leave_bindings: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_type_declarations", "type": "let enter_type_declarations: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "enter_type_declaration", "type": "let enter_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "leave_type_declaration", "type": "let leave_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "leave_type_declarations", "type": "let leave_type_declarations: Asttypes.rec_flag => unit", "docs": null, "kind": "value", "args": [["", "Asttypes.rec_flag"]]}, {"path": "Typing.F", "name": "depth", "type": "let depth: Pervasives.ref(int)", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "root_stack", "type": "let root_stack: open_stack", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "closed_stacks", "type": "let closed_stacks: Pervasives.ref(list(open_stack))", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "open_stack", "type": "let open_stack: Pervasives.ref(open_stack)", "docs": null, "kind": "value"}, {"path": "Typing.F", "name": "new_stack", "type": "let new_stack: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "pop_stack", "type": "let pop_stack: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "add_open", "type": "let add_open: (Path.t, Location.t) => unit", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Location.t"]]}, {"path": "Typing.F", "name": "pop_open", "type": "let pop_open: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "Typing.F", "name": "add_use", "type": "let add_use: (~?inferable: option(bool), (Path.t, tag), Longident.t, Location.t) => unit", "docs": null, "kind": "value", "args": [["?inferable", "option(bool)"], ["", "(Path.t, tag)"], ["", "Longident.t"], ["", "Location.t"]]}, {"path": "Typing.F", "name": "dig", "type": "let dig: Types.type_expr => Types.type_expr", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing.F", "name": "enter_core_type", "type": "let enter_core_type: Typedtree.core_type => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.core_type"]]}, {"path": "Typing.F", "name": "enter_type_declaration", "type": "let enter_type_declaration: Typedtree.type_declaration => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.type_declaration"]]}, {"path": "Typing.F", "name": "handleConstructor", "type": "let handleConstructor: (Path.t, Longident.t) => (string, Longident.t)", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing.F", "name": "handleRecord", "type": "let handleRecord: (Path.t, Longident.t) => Longident.t", "docs": null, "kind": "value", "args": [["", "Path.t"], ["", "Longident.t"]]}, {"path": "Typing.F", "name": "enter_pattern", "type": "let enter_pattern: Typedtree.pattern => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.pattern"]]}, {"path": "Typing.F", "name": "enter_structure_item", "type": "let enter_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "leave_structure_item", "type": "let leave_structure_item: Typedtree.structure_item => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.structure_item"]]}, {"path": "Typing.F", "name": "enter_expression", "type": "let enter_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing.F", "name": "leave_expression", "type": "let leave_expression: Typedtree.expression => unit", "docs": null, "kind": "value", "args": [["", "Typedtree.expression"]]}, {"path": "Typing", "name": "F", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>add_open\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>add_use\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>closed_stacks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>depth\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>dig\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_core_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_expression\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_pattern\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_structure_item\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>enter_type_declaration\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleConstructor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleRecord\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>leave_expression\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>leave_structure_item\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>new_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>open_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pop_open\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pop_stack\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>root_stack", "docs": null, "kind": "module"}, {"path": "Typing", "name": "ppos", "type": "let ppos: Lexing.position => string", "docs": null, "kind": "value", "args": [["", "Lexing.position"]]}, {"path": "Typing", "name": "entry", "type": "let entry: (Location.t, ~depth: int, ~?mend: option(Lexing.position), string) => string", "docs": null, "kind": "value", "args": [["", "Location.t"], ["depth", "int"], ["?mend", "option(Lexing.position)"], ["", "string"]]}, {"path": "Typing", "name": "type_to_string", "type": "let type_to_string: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "Typing", "name": "externalsUsed", "type": "type externalsUsed = list((Path.t, Location.t))", "docs": null, "kind": "type"}, {"path": "Typing", "name": "bindings", "type": "type bindings = Hashtbl.t(int, list((Ident.t, Location.t)))", "docs": null, "kind": "type"}, {"path": "Typing", "name": "truncateLoc", "type": "let truncateLoc: (int, Location.t) => Location.t", "docs": "<ul><li>Ok, so for things that have IDs, e.g. things in this file...\nwe will just have a mapping of {id: {declaration: opt(ident), usages: list((ident, loc))}}</li></ul>", "kind": "value", "args": [["", "int"], ["", "Location.t"]]}, {"path": "Typing", "name": "collectTypes", "type": "let collectTypes: Cmt_format.binary_annots => (\n  Hashtbl.t((Lexing.position, Lexing.position), Types.type_expr),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(openn),\n  Hashtbl.t((int, int), (Path.t, tag))\n)", "docs": null, "kind": "value", "args": [["", "Cmt_format.binary_annots"]]}, {"path": "", "name": "Typing", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addLidentToPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectTypes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>contents\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>entry\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapIdent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pathToLident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ppos\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>truncateLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>type_to_string\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>usesOpen\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>bindings\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>externalsUsed\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>ident\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>open_stack\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>openn\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>F", "docs": null, "kind": "module"}, {"path": "PrepareUtils", "name": "addToPath", "type": "let addToPath: (('a, list('a)), 'a) => ('a, list('a))", "docs": null, "kind": "value", "args": [["", "('a, list('a))"], ["", "'a"]]}, {"path": "PrepareUtils", "name": "toFullPath", "type": "let toFullPath: ('a, ('a, 'a)) => ('a, 'a, 'a)", "docs": null, "kind": "value", "args": [["", "'a"], ["", "('a, 'a)"]]}, {"path": "PrepareUtils", "name": "filterNil", "type": "let filterNil: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "PrepareUtils", "name": "findStars", "type": "let findStars: string => option(int)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrepareUtils", "name": "combine", "type": "let combine: (option(int), option(int)) => option(int)", "docs": null, "kind": "value", "args": [["", "option(int)"], ["", "option(int)"]]}, {"path": "PrepareUtils", "name": "trimFirst", "type": "let trimFirst: (int, string) => string", "docs": null, "kind": "value", "args": [["", "int"], ["", "string"]]}, {"path": "PrepareUtils", "name": "cleanOffStars", "type": "let cleanOffStars: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "PrepareUtils", "name": "findDocAttribute", "type": "let findDocAttribute: (string => 'a, list((Asttypes.loc(string), Parsetree.payload))) => option('a)", "docs": null, "kind": "value", "args": [["", "string => 'a"], ["", "list((Asttypes.loc(string), Parsetree.payload))"]]}, {"path": "PrepareUtils", "name": "hasNoDoc", "type": "let hasNoDoc: list((Asttypes.loc(string), 'a)) => bool", "docs": null, "kind": "value", "args": [["", "list((Asttypes.loc(string), 'a))"]]}, {"path": "PrepareUtils", "name": "foldOpt", "type": "let foldOpt: ('a => option('a), list('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"], ["", "list('a)"]]}, {"path": "PrepareUtils", "name": "either", "type": "let either: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "PrepareUtils", "name": "mapFst", "type": "let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "PrepareUtils", "name": "eitherFirst", "type": "let eitherFirst: (option('a), (option('a), 'a)) => (option('a), 'a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "(option('a), 'a)"]]}, {"path": "PrepareUtils", "name": "compose", "type": "let compose: ('a => bool, 'a => option('a), 'a) => option('a)", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a => option('a)"], ["", "'a"]]}, {"path": "", "name": "PrepareUtils", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>addToPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cleanOffStars\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>combine\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compose\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>either\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eitherFirst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterNil\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findDocAttribute\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findStars\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>foldOpt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hasNoDoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapFst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toFullPath\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>trimFirst", "docs": null, "kind": "module"}, {"path": "CmtFindStamps.T", "name": "pathType", "type": "type pathType = | PModule | PModuleType | PValue | PType\n = PrintType.pathType", "docs": null, "kind": "type"}, {"path": "CmtFindStamps.T", "name": "fullPath", "type": "type fullPath = (string, list(string), pathType)", "docs": null, "kind": "type"}, {"path": "CmtFindStamps.T", "name": "stamps", "type": "type stamps = list((int, fullPath))", "docs": null, "kind": "type"}, {"path": "CmtFindStamps", "name": "T", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fullPath\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>pathType\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>stamps", "docs": null, "kind": "module"}, {"path": "CmtFindStamps", "name": "stampsFromTypesSignature", "type": "let stampsFromTypesSignature: (('a, list(string)), list(Types.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Types.signature_item)"]]}, {"path": "CmtFindStamps", "name": "stampsFromTypedtreeInterface", "type": "let stampsFromTypedtreeInterface: (('a, list(string)), list(Typedtree.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Typedtree.signature_item)"]]}, {"path": "CmtFindStamps", "name": "stampsFromTypedtreeImplementation", "type": "let stampsFromTypedtreeImplementation: (('a, list(string)), list(Typedtree.structure_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)", "docs": null, "kind": "value", "args": [["", "('a, list(string))"], ["", "list(Typedtree.structure_item)"]]}, {"path": "", "name": "CmtFindStamps", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypedtreeImplementation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypedtreeInterface\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stampsFromTypesSignature\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>T", "docs": null, "kind": "module"}, {"path": "CmtFindDocItems", "name": "iter", "type": "let iter: ((string, option(Omd.t), State.Model.Docs.docItem) => 'a, State.Model.Docs.doc) => unit", "docs": null, "kind": "value", "args": [["", "(string, option(Omd.t), State.Model.Docs.docItem) => 'a"], ["", "State.Model.Docs.doc"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromTypes", "type": "let docItemsFromTypes: (string => Omd.t, Types.signature) => list(State.Model.Docs.doc)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.signature"]]}, {"path": "CmtFindDocItems", "name": "moduleContents", "type": "let moduleContents: (string => Omd.t, Types.module_type) => State.Model.Docs.moduleContents", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.module_type"]]}, {"path": "CmtFindDocItems", "name": "either", "type": "let either: (option('a), option('a)) => option('a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "option('a)"]]}, {"path": "CmtFindDocItems", "name": "mapFst", "type": "let mapFst: ('a => 'a, ('a, 'a)) => ('a, 'a)", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "('a, 'a)"]]}, {"path": "CmtFindDocItems", "name": "eitherFirst", "type": "let eitherFirst: (option('a), (option('a), 'a)) => (option('a), 'a)", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "(option('a), 'a)"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromStructure", "type": "let docItemsFromStructure: (string => Omd.t, list(Typedtree.structure_item)) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "list(Typedtree.structure_item)"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsStr", "type": "let moduleContentsStr: (string => Omd.t, Typedtree.module_expr) => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Typedtree.module_expr"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsType", "type": "let moduleContentsType: (string => Omd.t, Types.module_type) => State.Model.Docs.moduleContents", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Types.module_type"]]}, {"path": "CmtFindDocItems", "name": "docItemsFromSignature", "type": "let docItemsFromSignature: (string => Omd.t, list(Typedtree.signature_item)) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "list(Typedtree.signature_item)"]]}, {"path": "CmtFindDocItems", "name": "moduleContentsSig", "type": "let moduleContentsSig: (string => Omd.t, Typedtree.module_type) => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)", "docs": null, "kind": "value", "args": [["", "string => Omd.t"], ["", "Typedtree.module_type"]]}, {"path": "", "name": "CmtFindDocItems", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromSignature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromStructure\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>docItemsFromTypes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>either\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eitherFirst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iter\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>mapFst\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContents\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsSig\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsStr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>moduleContentsType", "docs": null, "kind": "module"}, {"path": "State", "name": "indent", "type": "let indent: string => string", "docs": "<ul><li>Grand theory of everything.\n*</li></ul>\n\n<p>The basic idea is a page\nAlso, larger than that we have packages\nbut let&#39;s talk about pages for now</p>\n<p>Markdown page</p>\n<ul><li>gets parsed into bits</li><li>including some code snippets</li><li>its then represented as <code>(Omd.t, list(lang, block))</code>? maybe</li></ul>\n\n<p>A markdown page can embed items\nan item is a module, type, value, or include\n(module types too probably)</p>\n<p>an item can have documentation, which is in turn a markdown page(?) or markdown thing</p>\n<p>Custom markdown things I want to represent:</p>\n<ul><li>@doc [items]</li><li>@all</li><li>@rest</li></ul>\n\n<p>umm @includes? How can I do that...</p>\n<p>Also, to what extent do I want to build everything into a globally addressable map?</p>\n<p>Each @doc&#39;able item should have a canonical home, where it can be expected to live.\nIt&#39;s possible to display the docs elsewhere, but it has to be shown there as well.</p>\n<p>A markdown page is either part of the custom docs, or the api docs.\nIf part of the api docs, then listed in the sidebar there, and exists under api/\nif in the custom docs, then listed in the custom docs portion\nwhich takes up the top section of the sidebar</p>\n<p>I want to mess with the sidebar to allow showing more or less of each section\n(custom docs list, table of contents, api docs list)</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "State", "name": "showOption", "type": "let showOption: (option('a), 'a => string) => string", "docs": null, "kind": "value", "args": [["", "option('a)"], ["", "'a => string"]]}, {"path": "State", "name": "showOptionString", "type": "let showOptionString: option(string) => string", "docs": null, "kind": "value", "args": [["", "option(string)"]]}, {"path": "State", "name": "bucklescriptOptions", "type": "type bucklescriptOptions = {\n  packageRoot: string,\n  bsRoot: string,\n  refmt: string,\n  version: string,\n  browserCompilerPath: option(string),\n  silentFailures: bool,\n  tmp: string,\n  compiledDependencyDirectories: list((string, string)),\n  packageJsonName: string\n}", "docs": null, "kind": "type"}, {"path": "State", "name": "showBucklescriptOptions", "type": "let showBucklescriptOptions: bucklescriptOptions => string", "docs": null, "kind": "value", "args": [["", "bucklescriptOptions"]]}, {"path": "State", "name": "backend", "type": "type backend = | NoBackend | Bucklescript(bucklescriptOptions)\n", "docs": null, "kind": "type"}, {"path": "State", "name": "showBackend", "type": "let showBackend: backend => string", "docs": null, "kind": "value", "args": [["", "backend"]]}, {"path": "State.Model", "name": "codeContext", "type": "type codeContext = | Normal | Node | Window | Iframe | Canvas | Div | Log\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "contextString", "type": "let contextString: codeContext => string", "docs": null, "kind": "value", "args": [["", "codeContext"]]}, {"path": "State.Model", "name": "expectation", "type": "type expectation = | Succeed | Raise | DontRun | TypeFail | DontType | ParseFail | Skip\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "codeDisplay", "type": "type codeDisplay = {prefix: int, suffix: int, noEdit: bool, hide: bool}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "lang", "type": "type lang = | Reason | OCaml | Txt | OtherLang(string)\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "showLang", "type": "let showLang: lang => string", "docs": null, "kind": "value", "args": [["", "lang"]]}, {"path": "State.Model", "name": "codeOptions", "type": "type codeOptions = {\n  context: codeContext,\n  lang: lang,\n  expectation: expectation,\n  codeDisplay: codeDisplay,\n  inferred: bool,\n  sharedAs: option(string),\n  uses: list(string)\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "defaultOptions", "type": "let defaultOptions: codeOptions", "docs": null, "kind": "value"}, {"path": "State.Model", "name": "compilationResult", "type": "type compilationResult = \n  | Skipped\n  | ParseError(string)\n  | TypeError(string, string)\n  | Success(string, string)\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "codeBlock", "type": "type codeBlock = {\n  langLine: string,\n  raw: string,\n  html: string,\n  page: string,\n  filePath: string,\n  compilationResult: compilationResult\n}", "docs": "<p> This represents the final result of a code block, all that&#39;s needed to render it</p>\n", "kind": "type"}, {"path": "State.Model", "name": "id", "type": "type id = string", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "docWithExamples", "type": "type docWithExamples = Omd.t", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "docItem", "type": "type docItem = \n  | Value(Types.type_expr)\n  | Type(Types.type_declaration)\n  | Module(moduleContents)\n  | Include(option(Path.t), list(doc))\n  | StandaloneDoc(Omd.t)\n", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "moduleContents", "type": "type moduleContents = | Items(list(doc)) | Alias(Path.t)\n", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "doc", "type": "type doc = (string, option(Omd.t), docItem)", "docs": null, "kind": "type"}, {"path": "State.Model.Docs", "name": "itemName", "type": "let itemName: docItem => string", "docs": null, "kind": "value", "args": [["", "docItem"]]}, {"path": "State.Model.Docs", "name": "iter", "type": "let iter: ((string, option(Omd.t), docItem) => 'a, doc) => unit", "docs": null, "kind": "value", "args": [["", "(string, option(Omd.t), docItem) => 'a"], ["", "doc"]]}, {"path": "State.Model.Docs", "name": "iterWithPath", "type": "let iterWithPath: (\n  ~modulesAtPath: Hashtbl.t(string, list(doc)),\n  list(string),\n  (list(string), (string, option(Omd.t), docItem)) => 'a,\n  doc\n) => unit", "docs": null, "kind": "value", "args": [["modulesAtPath", "Hashtbl.t(string, list(doc))"], ["", "list(string)"], ["", "(list(string), (string, option(Omd.t), docItem)) => 'a"], ["", "doc"]]}, {"path": "State.Model", "name": "Docs", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>itemName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iter\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterWithPath\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>doc\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docItem\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>moduleContents", "docs": null, "kind": "module"}, {"path": "State.Model", "name": "customPage", "type": "type customPage = {\n  title: string,\n  sourcePath: option(string),\n  destPath: string,\n  contents: docWithExamples\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "sidebar", "type": "type sidebar = | SidebarItem(string) | SidebarHeader(string, list(sidebar))\n", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "topModule", "type": "type topModule = {\n  name: string,\n  sourcePath: string,\n  docs: option(docWithExamples),\n  items: list(Docs.doc),\n  stamps: CmtFindStamps.T.stamps\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "package", "type": "type package = {\n  name: string,\n  repo: option(string),\n  custom: list(customPage),\n  sidebar: option(list(sidebar)),\n  modules: list(topModule),\n  canBundle: bool,\n  noPlayground: bool,\n  namespaced: bool,\n  backend: backend,\n  defaultCodeOptions: option(codeOptions)\n}", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "codeBlocks", "type": "type codeBlocks = Hashtbl.t((string, string, string), codeBlock)", "docs": null, "kind": "type"}, {"path": "State.Model", "name": "world", "type": "type world = {packages: list((string, package))}", "docs": null, "kind": "type"}, {"path": "State", "name": "Model", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>contextString\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultOptions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showLang\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeBlock\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeBlocks\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeContext\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeDisplay\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>codeOptions\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>compilationResult\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>customPage\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docWithExamples\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>expectation\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>id\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>lang\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>package\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>sidebar\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>topModule\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>world\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Docs", "docs": null, "kind": "module"}, {"path": "State.Input", "name": "env", "type": "type env = {static: string, debug: bool}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "showEnv", "type": "let showEnv: env => string", "docs": null, "kind": "value", "args": [["", "env"]]}, {"path": "State.Input", "name": "meta", "type": "type meta = {packageName: string, repo: option(string)}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "showMeta", "type": "let showMeta: meta => string", "docs": null, "kind": "value", "args": [["", "meta"]]}, {"path": "State.Input", "name": "packageInput", "type": "type packageInput = {\n  root: string,\n  meta: meta,\n  backend: backend,\n  sidebarFile: option(string),\n  customFiles: list((string, option(string), string)),\n  moduleFiles: list((string, string)),\n  defaultCodeOptions: option(Model.codeOptions),\n  namespaced: bool,\n  canBundle: bool,\n  noPlayground: bool\n}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "showPackageInput", "type": "let showPackageInput: packageInput => string", "docs": null, "kind": "value", "args": [["", "packageInput"]]}, {"path": "State.Input", "name": "target", "type": "type target = {\n  directory: string,\n  template: option(string),\n  skipStdlibCompletions: bool,\n  search: bool\n}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "t", "type": "type t = {target: target, packageInput: packageInput, env: env}", "docs": null, "kind": "type"}, {"path": "State.Input", "name": "show", "type": "let show: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "State", "name": "Input", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>show\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showEnv\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showMeta\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showPackageInput\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>env\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>meta\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>packageInput\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>target", "docs": "<ul><li>Ok folks, so the above is what I think I want as the middle stage</li></ul>\n\n<p>From this middle stage I&#39;m confident I can produce some nice documentation.\nNot 100% sure when compilation (code block processing) happens tho</p>\n<p>And now, how do I go from &quot;cli args&quot; to &quot;that middle stage&quot;</p>\n<p>There&#39;s probably a &quot;first stage&quot; that we get from cli args</p>\n", "kind": "module"}, {"path": "", "name": "State", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>indent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showBackend\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showBucklescriptOptions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showOption\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showOptionString\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>backend\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>bucklescriptOptions\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Input\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Model", "docs": null, "kind": "module"}, {"path": "Search", "name": "escape", "type": "let escape: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Search", "name": "replace", "type": "let replace: (string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"]]}, {"path": "Search", "name": "serializeSearchable", "type": "let serializeSearchable: (string, string, string, string, string) => string", "docs": null, "kind": "value", "args": [["", "(string, string, string, string, string)"]]}, {"path": "Search", "name": "serializeSearchables", "type": "let serializeSearchables: list((string, string, string, string, string)) => string", "docs": null, "kind": "value", "args": [["", "list((string, string, string, string, string))"]]}, {"path": "", "name": "Search", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escape\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>replace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>serializeSearchable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>serializeSearchables", "docs": null, "kind": "module"}, {"path": "ProcessCode", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "ProcessCode", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "ProcessCode", "name": "iterDocBlocks", "type": "let iterDocBlocks: ((string, string) => 'a, Omd.t) => unit", "docs": null, "kind": "value", "args": [["", "(string, string) => 'a"], ["", "Omd.t"]]}, {"path": "ProcessCode", "name": "iterBlocks", "type": "let iterBlocks: (\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  (string, option(string), string, string) => 'a\n) => unit", "docs": null, "kind": "value", "args": [["", "list(State.Model.topModule)"], ["", "list(State.Model.customPage)"], ["", "(string, option(string), string, string) => 'a"]]}, {"path": "ProcessCode", "name": "collectBlocks", "type": "let collectBlocks: (\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  option(State.Model.codeOptions)\n) => list(\n  (\n    string,\n    option(string),\n    string,\n    string,\n    State.Model.codeOptions,\n    option((string, string, State.Model.codeOptions))\n  )\n)", "docs": null, "kind": "value", "args": [["", "list(State.Model.topModule)"], ["", "list(State.Model.customPage)"], ["", "option(State.Model.codeOptions)"]]}, {"path": "ProcessCode", "name": "resolveShared", "type": "let resolveShared: list(('a, 'a, 'a, string, State.Model.codeOptions, option('a))) => Hashtbl.t(\n  string,\n  string\n)", "docs": null, "kind": "value", "args": [["", "list(('a, 'a, 'a, string, State.Model.codeOptions, option('a)))"]]}, {"path": "ProcessCode", "name": "openPrefix", "type": "let openPrefix: (State.Model.lang, string) => string", "docs": null, "kind": "value", "args": [["", "State.Model.lang"], ["", "string"]]}, {"path": "ProcessCode", "name": "otherSyntax", "type": "let otherSyntax: State.Model.lang => State.Model.lang", "docs": null, "kind": "value", "args": [["", "State.Model.lang"]]}, {"path": "ProcessCode", "name": "codeFromPackage", "type": "let codeFromPackage: State.Model.package => list(\n  (\n    string,\n    string,\n    string,\n    string,\n    State.Model.codeOptions,\n    option((State.Model.codeOptions, string))\n  )\n)", "docs": null, "kind": "value", "args": [["", "State.Model.package"]]}, {"path": "", "name": "ProcessCode", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>codeFromPackage\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>collectBlocks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterBlocks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>iterDocBlocks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>openPrefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>otherSyntax\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>resolveShared\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "ParseConfig", "name": "fromGitUrl", "type": "let fromGitUrl: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "ParseConfig", "name": "getUrl", "type": "let getUrl: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "", "name": "ParseConfig", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fromGitUrl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getUrl", "docs": null, "kind": "module"}, {"path": "ModelToOutput", "name": "takeN", "type": "let takeN: (list('a), int) => list('a)", "docs": null, "kind": "value", "args": [["", "list('a)"], ["", "int"]]}, {"path": "ModelToOutput", "name": "itemColor", "type": "let itemColor: State.Model.Docs.docItem => string", "docs": null, "kind": "value", "args": [["", "State.Model.Docs.docItem"]]}, {"path": "ModelToOutput", "name": "prefix", "type": "let prefix: State.Model.Docs.docItem => string", "docs": null, "kind": "value", "args": [["", "State.Model.Docs.docItem"]]}, {"path": "ModelToOutput", "name": "firstFewItems", "type": "let firstFewItems: list((string, 'a, State.Model.Docs.docItem)) => string", "docs": null, "kind": "value", "args": [["", "list((string, 'a, State.Model.Docs.docItem))"]]}, {"path": "ModelToOutput", "name": "showType", "type": "let showType: Types.type_expr => string", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "ModelToOutput", "name": "getFunctionArgs", "type": "let getFunctionArgs: Types.type_expr => option(list((Asttypes.label, string)))", "docs": null, "kind": "value", "args": [["", "Types.type_expr"]]}, {"path": "ModelToOutput", "name": "showItemType", "type": "let showItemType: (\n  string,\n  State.Model.Docs.docItem,\n  Hashtbl.t(string, list((string, 'a, State.Model.Docs.docItem)))\n) => (option(Json.t), Json.t)", "docs": null, "kind": "value", "args": [["", "string"], ["", "State.Model.Docs.docItem"], ["", "Hashtbl.t(string, list((string, 'a, State.Model.Docs.docItem)))"]]}, {"path": "ModelToOutput", "name": "getCompletionData", "type": "let getCompletionData: list(State.Model.topModule) => list(\n  (list(string), string, (option(Json.t), Json.t), option(string), string)\n)", "docs": null, "kind": "value", "args": [["", "list(State.Model.topModule)"]]}, {"path": "ModelToOutput", "name": "writeEditorSupport", "type": "let writeEditorSupport: (\n  ~skipStdlibCompletions: bool,\n  string,\n  string,\n  list(State.Model.topModule),\n  (string, Buffer.t)\n) => unit", "docs": null, "kind": "value", "args": [["skipStdlibCompletions", "bool"], ["", "string"], ["", "string"], ["", "list(State.Model.topModule)"], ["", "(string, Buffer.t)"]]}, {"path": "ModelToOutput", "name": "makeSearchPage", "type": "let makeSearchPage: (\n  ~playgroundEnabled: bool,\n  ~markdowns: list(State.Model.customPage),\n  ~names: list(string),\n  string,\n  Pervasives.ref(list((string, string, string, string, string)))\n) => unit", "docs": null, "kind": "value", "args": [["playgroundEnabled", "bool"], ["markdowns", "list(State.Model.customPage)"], ["names", "list(string)"], ["", "string"], ["", "Pervasives.ref(list((string, string, string, string, string)))"]]}, {"path": "ModelToOutput", "name": "outputCustom", "type": "let outputCustom: (\n  ~playgroundEnabled: bool,\n  string,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(string),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.t\n  ) => string,\n  list(string),\n  State.Model.customPage\n) => unit", "docs": null, "kind": "value", "args": [["playgroundEnabled", "bool"], ["", "string"], ["", "list(State.Model.customPage)"], ["", "(string, list(string), PrintType.pathType) => option(string)"], ["", "option(string)"], ["", "(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string"], ["", "list(string)"], ["", "State.Model.customPage"]]}, {"path": "ModelToOutput", "name": "outputModule", "type": "let outputModule: (\n  ~playgroundEnabled: bool,\n  string,\n  'a,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(string),\n  option(string),\n  (PrintType.T.stringifier, string, string) => GenerateDoc.t,\n  list(string),\n  State.Model.topModule\n) => unit", "docs": null, "kind": "value", "args": [["playgroundEnabled", "bool"], ["", "string"], ["", "'a"], ["", "list(State.Model.customPage)"], ["", "(string, list(string), PrintType.pathType) => option(string)"], ["", "option(string)"], ["", "(PrintType.T.stringifier, string, string) => GenerateDoc.t"], ["", "list(string)"], ["", "State.Model.topModule"]]}, {"path": "ModelToOutput", "name": "makeCodeBlocksMap", "type": "let makeCodeBlocksMap: list(State.Model.codeBlock) => Hashtbl.t(\n  (string, string),\n  State.Model.codeBlock\n)", "docs": null, "kind": "value", "args": [["", "list(State.Model.codeBlock)"]]}, {"path": "ModelToOutput", "name": "searchHref", "type": "let searchHref: (list(string), (string, list(string), CmtFindStamps.T.pathType)) => option(string)", "docs": null, "kind": "value", "args": [["", "list(string)"], ["", "(string, list(string), CmtFindStamps.T.pathType)"]]}, {"path": "ModelToOutput", "name": "package", "type": "let package: (\n  State.Model.package,\n  option((list(State.Model.codeBlock), option((string, option((string, Buffer.t)))))),\n  State.Input.target,\n  State.Input.env\n) => unit", "docs": null, "kind": "value", "args": [["", "State.Model.package"], ["", "option((list(State.Model.codeBlock), option((string, option((string, Buffer.t))))))"], ["", "State.Input.target"], ["", "State.Input.env"]]}, {"path": "", "name": "ModelToOutput", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>firstFewItems\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getCompletionData\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getFunctionArgs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>itemColor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeCodeBlocksMap\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeSearchPage\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>outputCustom\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>outputModule\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>package\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>prefix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>searchHref\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showItemType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>showType\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>takeN\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>writeEditorSupport", "docs": null, "kind": "module"}, {"path": "MarkdownOfOCamldoc", "name": "withStyle", "type": "let withStyle: (\n  [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ],\n  Omd.t\n) => Omd.element", "docs": null, "kind": "value", "args": [["", "[&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]"], ["", "Omd.t"]]}, {"path": "MarkdownOfOCamldoc", "name": "stripLoc", "type": "let stripLoc: ('a => 'a, Location_.with_location('a)) => 'a", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "Location_.with_location('a)"]]}, {"path": "MarkdownOfOCamldoc", "name": "whiteLeft", "type": "let whiteLeft: string => int", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "MarkdownOfOCamldoc", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "MarkdownOfOCamldoc", "name": "stripLeft", "type": "let stripLeft: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "MarkdownOfOCamldoc", "name": "makeHeader", "type": "let makeHeader: ([&lt; `Section | `Subsection | `Subsubsection | `Title ], 'a, Omd.t) => Omd.element", "docs": null, "kind": "value", "args": [["", "[&lt; `Section | `Subsection | `Subsubsection | `Title ]"], ["", "'a"], ["", "Omd.t"]]}, {"path": "MarkdownOfOCamldoc", "name": "handleRef", "type": "let handleRef: Paths.Reference.t(\n  [&lt; Paths.Reference.kind\n &gt; `Class `ClassType `Constructor `Exception `Extension `Field `Method\n   `Module `ModuleType `Type `Value ]\n) => string", "docs": null, "kind": "value", "args": [["", "Paths.Reference.t(\n  [&lt; Paths.Reference.kind\n &gt; `Class `ClassType `Constructor `Exception `Extension `Field `Method\n   `Module `ModuleType `Type `Value ]\n)"]]}, {"path": "MarkdownOfOCamldoc", "name": "convertItem", "type": "let convertItem: (\n  'a,\n  Location_.with_location(\n    [&lt; `Code_block of string\n | `Doc of string\n | `Example of Omd.name * string\n | `Heading of\n     [&lt; `Section | `Subsection | `Subsubsection | `Title ] * 'f1 *\n     Comment.non_link_inline_element Comment.with_location list\n | `List of\n     [ `Ordered | `Unordered ] *\n     Comment.nestable_block_element Comment.with_location list list\n | `Modules of Comment.Reference.module_ list\n | `Paragraph of Comment.inline_element Comment.with_location list\n | `Tag of\n     [&gt; `Author of string\n      | `Deprecated of\n          Comment.nestable_block_element Location_.with_location list\n      | `Param of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Raise of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Return of\n          Comment.nestable_block_element Location_.with_location list\n      | `See of\n          'g1 * Omd.href *\n          Comment.nestable_block_element Location_.with_location list\n      | `Since of string ]\n | `Verbatim of string ]\n  )\n) => Omd.element", "docs": null, "kind": "value", "args": [["", "'a"], ["", "Location_.with_location(\n  [&lt; `Code_block of string\n | `Doc of string\n | `Example of Omd.name * string\n | `Heading of\n     [&lt; `Section | `Subsection | `Subsubsection | `Title ] * 'f1 *\n     Comment.non_link_inline_element Comment.with_location list\n | `List of\n     [ `Ordered | `Unordered ] *\n     Comment.nestable_block_element Comment.with_location list list\n | `Modules of Comment.Reference.module_ list\n | `Paragraph of Comment.inline_element Comment.with_location list\n | `Tag of\n     [&gt; `Author of string\n      | `Deprecated of\n          Comment.nestable_block_element Location_.with_location list\n      | `Param of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Raise of\n          string *\n          Comment.nestable_block_element Location_.with_location list\n      | `Return of\n          Comment.nestable_block_element Location_.with_location list\n      | `See of\n          'g1 * Omd.href *\n          Comment.nestable_block_element Location_.with_location list\n      | `Since of string ]\n | `Verbatim of string ]\n)"]]}, {"path": "MarkdownOfOCamldoc", "name": "convert", "type": "let convert: ('a, string) => list(Omd.element)", "docs": null, "kind": "value", "args": [["", "'a"], ["", "string"]]}, {"path": "", "name": "MarkdownOfOCamldoc", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>convert\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>convertItem\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>handleRef\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeHeader\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stripLeft\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stripLoc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>whiteLeft\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>withStyle", "docs": null, "kind": "module"}, {"path": "Markdown", "name": "linkifyMarkdown", "type": "let linkifyMarkdown: (\n  string,\n  string,\n  'a,\n  'a,\n  Omd_representation.element => option(string),\n  Omd.element\n) => option(string)", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "'a"], ["", "'a"], ["", "Omd_representation.element => option(string)"], ["", "Omd.element"]]}, {"path": "Markdown", "name": "sliceToEnd", "type": "let sliceToEnd: (string, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"]]}, {"path": "Markdown", "name": "slice", "type": "let slice: (string, int, int) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "int"], ["", "int"]]}, {"path": "Markdown", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Markdown", "name": "makeTokenCollector", "type": "let makeTokenCollector: PrintType.T.stringifier => (\n  Pervasives.ref(list(Asttypes.label)),\n  PrintType.T.stringifier\n)", "docs": null, "kind": "value", "args": [["", "PrintType.T.stringifier"]]}, {"path": "Markdown", "name": "makeDocStringProcessor", "type": "let makeDocStringProcessor: (string, Omd_representation.element => option(string)) => (\n  Pervasives.ref(list((string, string, string, string, string))),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd_representation.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.Representation.t\n  ) => string\n)", "docs": null, "kind": "value", "args": [["", "string"], ["", "Omd_representation.element => option(string)"]]}, {"path": "", "name": "Markdown", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>linkifyMarkdown\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeDocStringProcessor\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>makeTokenCollector\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>slice\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sliceToEnd\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "Main", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Main", "name": "invert", "type": "let invert: ('a => bool, 'a) => bool", "docs": null, "kind": "value", "args": [["", "'a => bool"], ["", "'a"]]}, {"path": "Main", "name": "compileBucklescript", "type": "let compileBucklescript: (~debug: bool, State.bucklescriptOptions, State.Model.package) => (\n  list(State.Model.codeBlock),\n  option((string, option((string, Buffer.t))))\n)", "docs": null, "kind": "value", "args": [["debug", "bool"], ["", "State.bucklescriptOptions"], ["", "State.Model.package"]]}, {"path": "Main", "name": "compilePackage", "type": "let compilePackage: (~debug: bool, State.Model.package) => option(\n  (list(State.Model.codeBlock), option((string, option((string, Buffer.t)))))\n)", "docs": null, "kind": "value", "args": [["debug", "bool"], ["", "State.Model.package"]]}, {"path": "Main", "name": "main", "type": "let main: unit => unit", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "", "name": "Main", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compileBucklescript\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compilePackage\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>invert\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "InputToModel", "name": "parseSidebar", "type": "let parseSidebar: string => list(State.Model.sidebar)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "getName", "type": "let getName: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "isReadme", "type": "let isReadme: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "asHtml", "type": "let asHtml: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "htmlName", "type": "let htmlName: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "InputToModel", "name": "getTitle", "type": "let getTitle: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "InputToModel", "name": "parseCustom", "type": "let parseCustom: (string, (string, option(string), string)) => State.Model.customPage", "docs": null, "kind": "value", "args": [["", "string"], ["", "(string, option(string), string)"]]}, {"path": "InputToModel", "name": "processCmt", "type": "let processCmt: ('a, string, bool) => (\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)", "docs": null, "kind": "value", "args": [["", "'a"], ["", "string"], ["", "bool"]]}, {"path": "InputToModel", "name": "processModules", "type": "let processModules: (~namespaced: bool, list((string, string))) => list(State.Model.topModule)", "docs": null, "kind": "value", "args": [["namespaced", "bool"], ["", "list((string, string))"]]}, {"path": "InputToModel", "name": "package", "type": "let package: (~namespaced: bool, ~canBundle: bool, State.Input.packageInput) => State.Model.package", "docs": null, "kind": "value", "args": [["namespaced", "bool"], ["canBundle", "bool"], ["", "State.Input.packageInput"]]}, {"path": "", "name": "InputToModel", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>asHtml\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getTitle\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmlName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isReadme\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>package\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parseCustom\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parseSidebar\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processCmt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>processModules", "docs": null, "kind": "module"}, {"path": "CompileCode", "name": "sanitize", "type": "let sanitize: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CompileCode", "name": "toReason", "type": "let toReason: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CompileCode", "name": "toMl", "type": "let toMl: (string, string, string, string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"], ["", "string"], ["", "string"], ["", "string"]]}, {"path": "CompileCode", "name": "withSections", "type": "let withSections: ('a => 'a, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "'a => 'a"], ["", "'a"]]}, {"path": "CompileCode", "name": "block", "type": "let block: (\n  ~debug: bool,\n  ~editingEnabled: bool,\n  ~bundle: string => option(string),\n  State.bucklescriptOptions,\n  State.Model.package,\n  int,\n  (\n    string,\n    string,\n    string,\n    string,\n    State.Model.codeOptions,\n    option((State.Model.codeOptions, string))\n  )\n) => State.Model.codeBlock", "docs": null, "kind": "value", "args": [["debug", "bool"], ["editingEnabled", "bool"], ["bundle", "string => option(string)"], ["", "State.bucklescriptOptions"], ["", "State.Model.package"], ["", "int"], ["", "(string, string, string, string, State.Model.codeOptions, option((State.Model.codeOptions, string)))"]]}, {"path": "", "name": "CompileCode", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>block\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sanitize\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toMl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toReason\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>withSections", "docs": null, "kind": "module"}, {"path": "CliToInput", "name": "fail", "type": "let fail: string => 'a", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "optMap", "type": "let optMap: ('a => option('a), list('a)) => list('a)", "docs": null, "kind": "value", "args": [["", "'a => option('a)"], ["", "list('a)"]]}, {"path": "CliToInput", "name": "shouldExist", "type": "let shouldExist: (string, string) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CliToInput", "name": "oneShouldExist", "type": "let oneShouldExist: (string, list(string)) => string", "docs": null, "kind": "value", "args": [["", "string"], ["", "list(string)"]]}, {"path": "CliToInput", "name": "ifOneExists", "type": "let ifOneExists: list(string) => option(string)", "docs": null, "kind": "value", "args": [["", "list(string)"]]}, {"path": "CliToInput", "name": "startsWith", "type": "let startsWith: (string, string) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "CliToInput", "name": "findMarkdownFiles", "type": "let findMarkdownFiles: ('a, string, string) => list((string, option(string), string))", "docs": null, "kind": "value", "args": [["", "'a"], ["", "string"], ["", "string"]]}, {"path": "CliToInput", "name": "getSourceDirectories", "type": "let getSourceDirectories: (string, Json.t) => list(string)", "docs": "<ul><li>Returns a list of paths, relative to the provided <code>base</code>\n</li></ul>", "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CliToInput", "name": "isNative", "type": "let isNative: Json.t => bool", "docs": null, "kind": "value", "args": [["", "Json.t"]]}, {"path": "CliToInput", "name": "getDependencyDirs", "type": "let getDependencyDirs: (string, Json.t) => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"], ["", "Json.t"]]}, {"path": "CliToInput", "name": "isCompiledFile", "type": "let isCompiledFile: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "isSourceFile", "type": "let isSourceFile: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "compiledNameSpace", "type": "let compiledNameSpace: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "compiledName", "type": "let compiledName: (~namespace: option(string), string) => string", "docs": null, "kind": "value", "args": [["namespace", "option(string)"], ["", "string"]]}, {"path": "CliToInput", "name": "getName", "type": "let getName: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "filterDuplicates", "type": "let filterDuplicates: list(string) => list(string)", "docs": null, "kind": "value", "args": [["", "list(string)"]]}, {"path": "CliToInput", "name": "ifDebug", "type": "let ifDebug: (bool, string, 'a => string, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "bool"], ["", "string"], ["", "'a => string"], ["", "'a"]]}, {"path": "CliToInput", "name": "findProjectFiles", "type": "let findProjectFiles: (~debug: bool, ~namespace: option(string), string) => list((string, string))", "docs": null, "kind": "value", "args": [["debug", "bool"], ["namespace", "option(string)"], ["", "string"]]}, {"path": "CliToInput", "name": "findDependencyDirectories", "type": "let findDependencyDirectories: string => list((string, string))", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "help", "type": "let help: string", "docs": null, "kind": "value"}, {"path": "CliToInput", "name": "fail", "type": "let fail: string => 'a", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "parse", "type": "let parse: (\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)", "docs": null, "kind": "value", "args": [["bools", "list(Minimist.StrSet.elt) (optional)"], ["floats", "list(Minimist.StrSet.elt) (optional)"], ["ints", "list(Minimist.StrSet.elt) (optional)"], ["", "list(string)"]]}, {"path": "CliToInput", "name": "getRefmt", "type": "let getRefmt: string => option(string)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "getPackageJsonName", "type": "let getPackageJsonName: Json.t => option(string)", "docs": null, "kind": "value", "args": [["", "Json.t"]]}, {"path": "CliToInput", "name": "getBsbVersion", "type": "let getBsbVersion: string => string", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "CliToInput", "name": "optsToInput", "type": "let optsToInput: (string, Minimist.opts) => State.Input.t", "docs": null, "kind": "value", "args": [["", "string"], ["", "Minimist.opts"]]}, {"path": "CliToInput", "name": "parse", "type": "let parse: array(string) => State.Input.t", "docs": null, "kind": "value", "args": [["", "array(string)"]]}, {"path": "", "name": "CliToInput", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compiledName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>compiledNameSpace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fail\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fail\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filterDuplicates\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findDependencyDirectories\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findMarkdownFiles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findProjectFiles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getBsbVersion\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getDependencyDirs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getPackageJsonName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getRefmt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getSourceDirectories\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>help\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ifDebug\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ifOneExists\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isCompiledFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isNative\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isSourceFile\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>oneShouldExist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>optMap\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>optsToInput\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shouldExist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>startsWith", "docs": null, "kind": "module"}, {"path": "", "name": "Omd_xtxt", "type": "", "docs": null, "kind": "module"}, {"path": "Omd_utils", "name": "debug", "type": "let debug: bool", "docs": "<p>Equals <code>true</code> if the environment variable DEBUG is set, or if the environment variable OMD_DEBUG is set to a string that is not <code>&quot;false&quot;</code>.</p>\n", "kind": "value"}, {"path": "Omd_utils", "name": "trackfix", "type": "let trackfix: bool", "docs": null, "kind": "value"}, {"path": "Omd_utils", "name": "raise", "type": "let raise: exn => 'a", "docs": "<p>Same as <code>Pervasives.raise</code> except if <code>debug</code> equals true, in which case it prints a trace on stderr before raising the exception.</p>\n", "kind": "value", "args": [["", "exn"]]}, {"path": "Omd_utils", "name": "warn", "type": "let warn: (~?we: option(bool), string) => unit", "docs": "<p><code>warn we x</code> prints a warning with the message <code>x</code> if <code>we</code> is true, else raises <code>Omd_utils.Error x</code>.</p>\n", "kind": "value", "args": [["we", "bool (optional)"], ["", "string"]]}, {"path": "Omd_utils.StringSet", "name": "elt", "type": "type elt = string", "docs": null, "kind": "type"}, {"path": "Omd_utils.StringSet", "name": "t", "type": "type t", "docs": null, "kind": "type"}, {"path": "Omd_utils.StringSet", "name": "empty", "type": "let empty: t", "docs": null, "kind": "value"}, {"path": "Omd_utils.StringSet", "name": "is_empty", "type": "let is_empty: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "mem", "type": "let mem: (elt, t) => bool", "docs": null, "kind": "value", "args": [["", "elt"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "add", "type": "let add: (elt, t) => t", "docs": null, "kind": "value", "args": [["", "elt"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "singleton", "type": "let singleton: elt => t", "docs": null, "kind": "value", "args": [["", "elt"]]}, {"path": "Omd_utils.StringSet", "name": "remove", "type": "let remove: (elt, t) => t", "docs": null, "kind": "value", "args": [["", "elt"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "union", "type": "let union: (t, t) => t", "docs": null, "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "inter", "type": "let inter: (t, t) => t", "docs": null, "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "diff", "type": "let diff: (t, t) => t", "docs": null, "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "compare", "type": "let compare: (t, t) => int", "docs": null, "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "equal", "type": "let equal: (t, t) => bool", "docs": null, "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "subset", "type": "let subset: (t, t) => bool", "docs": null, "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "iter", "type": "let iter: (elt => unit, t) => unit", "docs": null, "kind": "value", "args": [["", "elt => unit"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "fold", "type": "let fold: ((elt, 'a) => 'a, t, 'a) => 'a", "docs": null, "kind": "value", "args": [["", "(elt, 'a) => 'a"], ["", "t"], ["", "'a"]]}, {"path": "Omd_utils.StringSet", "name": "for_all", "type": "let for_all: (elt => bool, t) => bool", "docs": null, "kind": "value", "args": [["", "elt => bool"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "exists", "type": "let exists: (elt => bool, t) => bool", "docs": null, "kind": "value", "args": [["", "elt => bool"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "filter", "type": "let filter: (elt => bool, t) => t", "docs": null, "kind": "value", "args": [["", "elt => bool"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "partition", "type": "let partition: (elt => bool, t) => (t, t)", "docs": null, "kind": "value", "args": [["", "elt => bool"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "cardinal", "type": "let cardinal: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "elements", "type": "let elements: t => list(elt)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "min_elt", "type": "let min_elt: t => elt", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "max_elt", "type": "let max_elt: t => elt", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "choose", "type": "let choose: t => elt", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "split", "type": "let split: (elt, t) => (t, bool, t)", "docs": null, "kind": "value", "args": [["", "elt"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "find", "type": "let find: (elt, t) => elt", "docs": null, "kind": "value", "args": [["", "elt"], ["", "t"]]}, {"path": "Omd_utils.StringSet", "name": "of_list", "type": "let of_list: list(elt) => t", "docs": null, "kind": "value", "args": [["", "list(elt)"]]}, {"path": "Omd_utils.StringSet", "name": "of_list", "type": "let of_list: list(elt) => t", "docs": null, "kind": "value", "args": [["", "list(elt)"]]}, {"path": "Omd_utils", "name": "StringSet", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>of_list", "docs": "<p>Set of <code>string</code>. Cf. documentation of S</p>\n", "kind": "module"}, {"path": "Omd_utils", "name": "split", "type": "type split('a) = list('a) => split_action('a)", "docs": "<p>Type of a split function</p>\n", "kind": "type"}, {"path": "Omd_utils", "name": "split_action", "type": "type split_action('a) = | Continue | Continue_with(list('a), list('a)) | Split(list('a), list('a))\n", "docs": null, "kind": "type"}, {"path": "Omd_utils", "name": "fsplit_rev", "type": "let fsplit_rev: (~?excl: option(list('a) => bool), ~f: split('a), list('a)) => option(\n  (list('a), list('a))\n)", "docs": "failed to parse: File &quot;&quot;, line 6, characters 13-14:\nunpaired &#39;]&#39; (end of code)", "kind": "value", "args": [["excl", "list('a) => bool (optional)"], ["f", "split('a)"], ["", "list('a)"]]}, {"path": "Omd_utils", "name": "fsplit", "type": "let fsplit: (~?excl: option(list('a) => bool), ~f: split('a), list('a)) => option(\n  (list('a), list('a))\n)", "docs": "<p><code>fsplit ?excl ~f l</code> returns <code>Some(List.rev x, y)</code> if <code>fsplit ?excl ~f l</code> returns <code>Some(x,y)</code>, else it returns <code>None</code>.</p>\n", "kind": "value", "args": [["excl", "list('a) => bool (optional)"], ["f", "split('a)"], ["", "list('a)"]]}, {"path": "Omd_utils", "name": "id_of_string", "type": "let id_of_string: (&lt; mangle : string -&gt; string; .. &gt;, string) => string", "docs": "<p><code>id_of_string ids id</code> returns a mangled version of <code>id</code>, using the method <code>ids#mangle</code>. If you don&#39;t need mangling, you may use <code>object method mangle x = x end</code> for <code>ids</code>. However, the name <code>ids</code> also means that your object should have knowledge of all IDs it has issued, in order to avoid collision. This is why <code>id_of_string</code> asks for an object rather than &quot;just a function&quot;.</p>\n", "kind": "value", "args": [["", "&lt; mangle : string -&gt; string; .. &gt;"], ["", "string"]]}, {"path": "Omd_utils", "name": "htmlentities", "type": "let htmlentities: (~?md: option(bool), string) => string", "docs": "<p><code>htmlentities s</code> returns a new string in which html-significant characters have been converted to html entities. For instance, &quot;&lt;Foo&amp;Bar&gt;&quot; is converted to &quot;&lt;Foo&amp;Bar&gt;&quot;.</p>\n", "kind": "value", "args": [["md", "bool (optional)"], ["", "string"]]}, {"path": "Omd_utils", "name": "minimalize_blanks", "type": "let minimalize_blanks: string => string", "docs": "<p><code>minimalize_blanks s</code> returns a copy of <code>s</code> in which the first and last characters are never blank, and two consecutive blanks never happen.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Omd_utils", "name": "eat", "type": "let eat: ('a => bool, list('a)) => list('a)", "docs": "<p><code>eat f l</code> returns <code>l</code> where elements satisfying <code>f</code> have been removed, but it stops removing as soon as one element doesn&#39;t satisfy <code>f</code>.</p>\n", "kind": "value", "args": [["", "'a => bool"], ["", "list('a)"]]}, {"path": "Omd_utils", "name": "extract_html_attributes", "type": "let extract_html_attributes: string => list((string, string))", "docs": "<p>Takes some HTML and returns the list of attributes of the first ML tag. tes: Doesn&#39;t check the validity of HTML tags or attributes. Doesn&#39;t support backslash escaping. Attribute names are delimited by the space and equal characters. Attribute values are either delimited by the double quote or the simple quote character.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Omd_utils", "name": "extract_inner_html", "type": "let extract_inner_html: string => string", "docs": "<p>Takes an HTML node and returns the contents of the node. If it&#39;s not given a node, it returns something rubbish.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Omd_utils", "name": "html_void_elements", "type": "let html_void_elements: StringSet.t", "docs": "<p>HTML void elements</p>\n", "kind": "value"}, {"path": "Omd_utils", "name": "@", "type": "let @: (list('a), list('a)) => list('a)", "docs": "<p>Tail-recursive version of <code>Pervasives.(@)</code>.</p>\n", "kind": "value", "args": [["", "list('a)"], ["", "list('a)"]]}, {"path": "", "name": "Omd_utils", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>@\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>debug\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>extract_html_attributes\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>extract_inner_html\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fsplit\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>fsplit_rev\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>html_void_elements\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmlentities\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>id_of_string\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>minimalize_blanks\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>raise\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>trackfix\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>warn\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>split\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>split_action\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>StringSet", "docs": null, "kind": "module"}, {"path": "Omd_types", "name": "name", "type": "type name = string", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "url", "type": "type url = string", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "title", "type": "type title = string", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "alt", "type": "type alt = string", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "el", "type": "type el(\n  'a\n) = [ `Url of url * 'a0 * title\n| `Bold of 'a0\n| `Comment of string\n| `Html of string\n| `Br\n| `Emph of 'a0\n| `Code of name * string\n| `Img of url * alt * title\n| `Text of string ]", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "phrasing_no_NL", "type": "type phrasing_no_NL = list(el(phrasing_no_NL))", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "phrasing", "type": "type phrasing = list(\n  [ `Bold of phrasing\n| `Url of url * phrasing * title\n| `Comment of string\n| `NL\n| `Html of string\n| `Br\n| `Emph of phrasing\n| `Code of name * string\n| `Img of url * alt * title\n| `Text of string ]\n)", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "reference", "type": "type reference", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "flow", "type": "type flow = [ `Bold of phrasing\n| `Url of url * phrasing * title\n| `H5 of phrasing_no_NL\n| `Paragraph of phrasing\n| `Comment of string\n| `Html_block of string\n| `Html of string\n| `Br\n| `Ul of t\n| `Hr\n| `Emph of phrasing\n| `Quote of t\n| `H1 of phrasing_no_NL\n| `Ref of reference\n| `Code of name * string\n| `Ol of t\n| `H3 of phrasing_no_NL\n| `Code_block of name * string\n| `H6 of phrasing_no_NL\n| `H2 of phrasing_no_NL\n| `Img of url * alt * title\n| `Text of string\n| `H4 of phrasing_no_NL\n| `Img_ref of reference ]", "docs": null, "kind": "type"}, {"path": "Omd_types", "name": "t", "type": "type t = list(flow)", "docs": null, "kind": "type"}, {"path": "", "name": "Omd_types", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>alt\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>el\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>flow\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>name\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>phrasing\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>phrasing_no_NL\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>title\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>url", "docs": null, "kind": "module"}, {"path": "Omd_representation", "name": "R", "type": "", "docs": null, "kind": "module"}, {"path": "Omd_representation", "name": "element", "type": "type element = \n  | H1(t)\n  | H2(t)\n  | H3(t)\n  | H4(t)\n  | H5(t)\n  | H6(t)\n  | Paragraph(t)\n  | Text(string)\n  | Emph(t)\n  | Bold(t)\n  | Ul(list(t))\n  | Ol(list(t))\n  | Ulp(list(t))\n  | Olp(list(t))\n  | Code(name, string)\n  | Code_block(name, string)\n  | Br\n  | Hr\n  | NL\n  | Url(href, t, title)\n  | Ref(ref_container, name, string, fallback)\n  | Img_ref(ref_container, name, alt, fallback)\n  | Html(name, list((string, option(string))), t)\n  | Html_block(name, list((string, option(string))), t)\n  | Html_comment(string)\n  | Raw(string)\n  | Raw_block(string)\n  | Blockquote(t)\n  | Img(alt, src, title)\n  | X(\n    &lt; name : string;\n  to_html : ?indent:int -&gt; (t -&gt; string) -&gt; t -&gt; string option;\n  to_sexpr : (t -&gt; string) -&gt; t -&gt; string option; to_t : t -&gt; t option &gt;\n  )\n", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "fallback", "type": "type fallback = &lt; to_string : string; to_t : t &gt;", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "name", "type": "type name = string", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "alt", "type": "type alt = string", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "src", "type": "type src = string", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "href", "type": "type href = string", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "title", "type": "type title = string", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "t", "type": "type t = list(element)", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "tok", "type": "type tok = \n  | Ampersand\n  | Ampersands(int)\n  | At\n  | Ats(int)\n  | Backquote\n  | Backquotes(int)\n  | Backslash\n  | Backslashs(int)\n  | Bar\n  | Bars(int)\n  | Caret\n  | Carets(int)\n  | Cbrace\n  | Cbraces(int)\n  | Colon\n  | Colons(int)\n  | Comma\n  | Commas(int)\n  | Cparenthesis\n  | Cparenthesiss(int)\n  | Cbracket\n  | Cbrackets(int)\n  | Dollar\n  | Dollars(int)\n  | Dot\n  | Dots(int)\n  | Doublequote\n  | Doublequotes(int)\n  | Exclamation\n  | Exclamations(int)\n  | Equal\n  | Equals(int)\n  | Greaterthan\n  | Greaterthans(int)\n  | Hash\n  | Hashs(int)\n  | Lessthan\n  | Lessthans(int)\n  | Minus\n  | Minuss(int)\n  | Newline\n  | Newlines(int)\n  | Number(string)\n  | Obrace\n  | Obraces(int)\n  | Oparenthesis\n  | Oparenthesiss(int)\n  | Obracket\n  | Obrackets(int)\n  | Percent\n  | Percents(int)\n  | Plus\n  | Pluss(int)\n  | Question\n  | Questions(int)\n  | Quote\n  | Quotes(int)\n  | Semicolon\n  | Semicolons(int)\n  | Slash\n  | Slashs(int)\n  | Space\n  | Spaces(int)\n  | Star\n  | Stars(int)\n  | Tab\n  | Tabs(int)\n  | Tilde\n  | Tildes(int)\n  | Underscore\n  | Underscores(int)\n  | Word(string)\n  | Tag(name, extension)\n", "docs": null, "kind": "type"}, {"path": "Omd_representation", "name": "extension", "type": "type extension = &lt; parser_extension : t -&gt;\n                     tok list -&gt; tok list -&gt; (t * tok list * tok list) option;\n  to_string : string &gt;", "docs": "<ul><li><p><code>parser_extension</code> is a method that takes the current state of the parser&#39;s data and returns None if nothing has been changed, otherwise it returns the new state. The current state of the parser&#39;s data is <code>(r, p, l)</code> where <code>r</code> is the result so far, <code>p</code> is the list of the previous tokens (it&#39;s typically empty or contains information on how many newlines we&#39;ve just seen), and <code>l</code> is the remaining tokens to parse.</p>\n</li><li><p>and <code>to_string</code> is a method that returns directly a string representation of the object (it&#39;s normal if it returns the empty string).</p>\n</li></ul>", "kind": "type"}, {"path": "Omd_representation", "name": "extensions", "type": "type extensions = list(extension)", "docs": "<p>One must use this type to extend the parser. It&#39;s a list of functions of type <code>extension</code>. They are processed in order (the head is applied first), so be careful about it. If you use it wrong, it will behave wrong.</p>\n", "kind": "type"}, {"path": "Omd_representation", "name": "empty_extension", "type": "let empty_extension: extension", "docs": "<p>An empty extension</p>\n", "kind": "value"}, {"path": "Omd_representation", "name": "loose_compare", "type": "let loose_compare: (t, t) => int", "docs": "<p><code>loose_compare t1 t2</code> returns <code>0</code> if <code>t1</code> and <code>t2</code> are equivalent, otherwise it returns another number.</p>\n", "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd_representation", "name": "normalise_md", "type": "let normalise_md: t => t", "docs": "<p><code>normalise_md md</code> returns a copy of <code>md</code> where some elements have been factorized.</p>\n", "kind": "value", "args": [["", "t"]]}, {"path": "Omd_representation", "name": "visit", "type": "let visit: (element => option(t), t) => t", "docs": "<p>visitor for structures of type t: <code>visit f md</code> will return a new potentially altered copy of <code>md</code> that has been created by the visit of <code>md</code> by <code>f</code>.</p>\n<p>The function <code>f</code> takes each <code>element</code> (from <code>md</code>) and returns <code>Some t</code> if it has effectively been applied to <code>element</code>, and <code>None</code> otherwise. When it returns <code>Some t</code>, <code>t</code> replaces <code>element</code> in the copy of <code>md</code>, and when it returns <code>None</code>, either <code>element</code> is copied as it is in the copy of <code>md</code> or a visited version is copied instead (well, that depends on if <code>element</code> has elements inside of it or not).</p>\n", "kind": "value", "args": [["", "element => option(t)"], ["", "t"]]}, {"path": "", "name": "Omd_representation", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>empty_extension\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>loose_compare\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>normalise_md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>visit\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>alt\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>extensions\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fallback\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>href\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>name\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>src\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>title\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tok\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>R", "docs": null, "kind": "module"}, {"path": "Omd_parser", "name": "r", "type": "type r = Omd_representation.t", "docs": "<p>accumulator (beware, reversed tokens)</p>\n", "kind": "type"}, {"path": "Omd_parser", "name": "p", "type": "type p = list(Omd_representation.tok)", "docs": "<p>context information: previous elements</p>\n", "kind": "type"}, {"path": "Omd_parser", "name": "l", "type": "type l = list(Omd_representation.tok)", "docs": "<p>tokens to parse</p>\n", "kind": "type"}, {"path": "Omd_parser", "name": "main_loop", "type": "type main_loop = (~?html: option(bool), r, p, l) => Omd_representation.t", "docs": "<p>most important loop, which has to be given as an argument</p>\n", "kind": "type"}, {"path": "Omd_parser", "name": "default_parse", "type": "let default_parse: (\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(string),\n  l\n) => Omd_representation.t", "docs": "<p>Translate tokens to Markdown representation.</p>\n<p>Param: lang<p>language for blocks of code where it was not specified. Default: <code>&quot;&quot;</code>.</p></p>\n", "kind": "value", "args": [["extensions", "Omd_representation.extensions (optional)"], ["default_lang", "string (optional)"], ["", "l"]]}, {"path": "Omd_parser", "name": "Default_env", "type": "", "docs": null, "kind": "module"}, {"path": "Omd_parser.Make", "name": "rc", "type": "let rc: Omd_representation.ref_container", "docs": "<p>reference container</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "extensions", "type": "let extensions: Omd_representation.extensions", "docs": "<p>reference container</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "default_lang", "type": "let default_lang: string", "docs": "<p>list of parser extensions</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "gh_uemph_or_bold_style", "type": "let gh_uemph_or_bold_style: bool", "docs": "<p>default language for code blocks</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "blind_html", "type": "let blind_html: bool", "docs": "<p>flag: bold/emph using using underscores is by default github-style, which means that underscores inside words are left as underscore, rather than special characters, because it&#39;s more convenient. However it is also less expressive because then you can&#39;t bold/emph a part of a word. You might want to set this flag to false.</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "strict_html", "type": "let strict_html: bool", "docs": "<p>flag: if true, will not check whether a used HTML tag actually exists in HTML.</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "htmlcodes_set", "type": "let htmlcodes_set: Omd_utils.StringSet.t", "docs": "<p>set of known HTML codes</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "inline_htmltags_set", "type": "let inline_htmltags_set: Omd_utils.StringSet.t", "docs": "<p>set of known inline HTML tags</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "htmltags_set", "type": "let htmltags_set: Omd_utils.StringSet.t", "docs": "<p>All known HTML tags</p>\n", "kind": "value"}, {"path": "Omd_parser.Make", "name": "unindent_rev", "type": "let unindent_rev: (int, list(Omd_representation.tok)) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": "<p><code>unindent_rev n l</code> returns the same couple as <code>unindent n l</code> except that the first element (which is a list) is reversed. This function is used for lists.</p>\n", "kind": "value", "args": [["", "int"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "unindent", "type": "let unindent: (int, list(Omd_representation.tok)) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": "<p><code>unindent n l</code> returns <code>(unindented, rest)</code> where <code>unindented</code> is consecutive lines of <code>l</code> that are indented with at least <code>n</code> ces, and de-indented by <code>n</code> spaces. If <code>l</code> starts with a line t is indented by less than <code>n</code> spaces, then it returns <code>([], l)</code>.</p>\n<p>This function is used for lists, so it does not require <code>n</code> *) spaces on every single line, but only on some specific ones of them. *)</p>\n<p>s function is used for lists and blockquotes.</p>\n", "kind": "value", "args": [["", "int"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "is_blank", "type": "let is_blank: list(Omd_representation.tok) => bool", "docs": "<p><code>is_blank l</code> returns <code>true</code> if <code>l</code> only contains blanks, which are spaces and newlines.</p>\n", "kind": "value", "args": [["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "semph_or_bold", "type": "let semph_or_bold: (int, list(Omd_representation.tok)) => option(\n  (list(Omd_representation.tok), list(Omd_representation.tok))\n)", "docs": "<p><code>semph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using stars), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>.</p>\n", "kind": "value", "args": [["", "int"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "sm_uemph_or_bold", "type": "let sm_uemph_or_bold: (int, list(Omd_representation.tok)) => option(\n  (list(Omd_representation.tok), list(Omd_representation.tok))\n)", "docs": "<p><code>sm_uemph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>.</p>\n", "kind": "value", "args": [["", "int"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "gh_uemph_or_bold", "type": "let gh_uemph_or_bold: (int, list(Omd_representation.tok)) => option(\n  (list(Omd_representation.tok), list(Omd_representation.tok))\n)", "docs": "<p><code>gh_uemph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>.</p>\n", "kind": "value", "args": [["", "int"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "uemph_or_bold", "type": "let uemph_or_bold: (int, list(Omd_representation.tok)) => option(\n  (list(Omd_representation.tok), list(Omd_representation.tok))\n)", "docs": "<p><code>uemph_or_bold n l</code> returns <code>None</code> if <code>l</code> doesn&#39;t start with a bold/emph phrase (marked using underscores), else it returns <code>Some(x,y)</code> where <code>x</code> is the emph and/or bold phrase at the beginning of <code>l</code> and <code>y</code> is the rest of <code>l</code>. N.B. if <code>!gh_uemph_or_bold_style</code> then in Github style (i.e., underscores inside words are considered as underscores).</p>\n", "kind": "value", "args": [["", "int"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "eat_blank", "type": "let eat_blank: list(Omd_representation.tok) => list(Omd_representation.tok)", "docs": "<p><code>eat_blank l</code> returns <code>l</code> where all blanks at the beginning of the list have been removed (it stops removing as soon as it meets an element that is not a blank). Blanks are spaces and newlines only.</p>\n", "kind": "value", "args": [["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "tag__maybe_h1", "type": "let tag__maybe_h1: main_loop => Omd_representation.tok", "docs": "<p><code>tag__maybe_h1 main_loop</code> is a tag that is injected everywhere that might preceed a H1 title. It needs <code>main_loop</code> as argument because it is used to parse the contents of the titles.</p>\n", "kind": "value", "args": [["", "main_loop"]]}, {"path": "Omd_parser.Make", "name": "tag__maybe_h2", "type": "let tag__maybe_h2: main_loop => Omd_representation.tok", "docs": "<p><code>tag__maybe_h2 main_loop</code> is the same as <code>tag__maybe_h1 main_loop</code> but for H2.</p>\n", "kind": "value", "args": [["", "main_loop"]]}, {"path": "Omd_parser.Make", "name": "tag__md", "type": "let tag__md: Omd_representation.t => Omd_representation.tok", "docs": "<p><code>tag__md md</code> encapsulates <code>md</code> to make it a value of type <code>tok</code>. Its purpose is to inject some pre-parsed markdown (i.e., <code>md</code> of type <code>t</code>) in a yet-to-parse token stream of type <code>tok</code>.</p>\n", "kind": "value", "args": [["", "Omd_representation.t"]]}, {"path": "Omd_parser.Make", "name": "tag_setext", "type": "let tag_setext: (main_loop, list(Omd_representation.tok)) => list(Omd_representation.tok)", "docs": "<p>Tag used for the lines that *might* be titles using setext-style.</p>\n", "kind": "value", "args": [["", "main_loop"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "hr_m", "type": "let hr_m: l => option(l)", "docs": "<p><code>hr_m l</code> returns <code>Some nl</code> where <code>nl</code> is the remaining of <code>l</code> if <code>l</code> contains a horizontal rule &quot;drawn&quot; with dashes. If there&#39;s no HR, then returns <code>None</code>.</p>\n", "kind": "value", "args": [["", "l"]]}, {"path": "Omd_parser.Make", "name": "hr_s", "type": "let hr_s: l => option(l)", "docs": "<p><code>hr_s l</code> is the same as <code>hr_m l</code> but for horizontal rules &quot;drawn&quot; with stars instead.</p>\n", "kind": "value", "args": [["", "l"]]}, {"path": "Omd_parser.Make", "name": "read_until_gt", "type": "let read_until_gt: (~?bq: option(bool), ~?no_nl: option(bool), list(Omd_representation.tok)) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_lt", "type": "let read_until_lt: (~?bq: option(bool), ~?no_nl: option(bool), list(Omd_representation.tok)) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_cparenth", "type": "let read_until_cparenth: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(Omd_representation.tok)\n) => (list(Omd_representation.tok), list(Omd_representation.tok))", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_oparenth", "type": "let read_until_oparenth: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(Omd_representation.tok)\n) => (list(Omd_representation.tok), list(Omd_representation.tok))", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_dq", "type": "let read_until_dq: (~?bq: option(bool), ~?no_nl: option(bool), list(Omd_representation.tok)) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_q", "type": "let read_until_q: (~?bq: option(bool), ~?no_nl: option(bool), list(Omd_representation.tok)) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_obracket", "type": "let read_until_obracket: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(Omd_representation.tok)\n) => (list(Omd_representation.tok), list(Omd_representation.tok))", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_cbracket", "type": "let read_until_cbracket: (\n  ~?bq: option(bool),\n  ~?no_nl: option(bool),\n  list(Omd_representation.tok)\n) => (list(Omd_representation.tok), list(Omd_representation.tok))", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_space", "type": "let read_until_space: (~?bq: option(bool), ~?no_nl: option(bool), list(Omd_representation.tok)) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": null, "kind": "value", "args": [["bq", "bool (optional)"], ["no_nl", "bool (optional)"], ["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_until_newline", "type": "let read_until_newline: list(Omd_representation.tok) => (\n  list(Omd_representation.tok),\n  list(Omd_representation.tok)\n)", "docs": "failed to parse: File &quot;&quot;, line 20, characters 2-3:\nunpaired &#39;]&#39; (end of code)", "kind": "value", "args": [["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "read_title", "type": "let read_title: (main_loop, int, r, p, l) => option((r, p, l))", "docs": "<p><code>read_title main_loop n r p l</code> returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.</p>\n<p><code>read_title main_loop n r p l</code> expects to read a <code>n</code>-level hash-declared title from <code>l</code>, where the hashes have *already* been *removed*. If <code>n</code> is not between 1 and 6 (included), then it returns <code>None</code>.</p>\n<p><code>main_loop</code> is used to parse the contents of the title.</p>\n<p><code>r</code> and <code>p</code> are the classical &quot;result&quot; and &quot;previous&quot; parameters.</p>\n", "kind": "value", "args": [["", "main_loop"], ["", "int"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "maybe_extension", "type": "let maybe_extension: (Omd_representation.extensions, r, p, l) => option((r, p, l))", "docs": "<p><code>maybe_extension e r p l</code> returns <code>None</code> if there is no extension or if extensions haven&#39;t had any effect, returns <code>Some(nr, np, nl)</code> if at least one extension has applied successfully.</p>\n", "kind": "value", "args": [["", "Omd_representation.extensions"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "emailstyle_quoting", "type": "let emailstyle_quoting: (main_loop, r, p, l) => option((r, p, l))", "docs": "<p><code>emailstyle_quoting main_loop r p l</code> returns <code>Some(r,p,l)</code> with <code>r</code> being the updated result, <code>p</code> being the last parsed token and <code>l</code> being the remaining tokens to parse. If <code>emailstyle_quoting</code> fails, then it returns <code>None</code>, in which case its user is advise to investigate why it returns <code>None</code> because there&#39;s possibly a real problem.</p>\n", "kind": "value", "args": [["", "main_loop"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "maybe_reference", "type": "let maybe_reference: (main_loop, Omd_representation.ref_container, r, p, l) => option((r, p, l))", "docs": "<p><code>maybe_reference</code> tries to parse a reference, a reference definition or a github-style short reference (e.g., <code>foo</code> as a shortcut for <code>foo</code><code></code>), and returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.</p>\n", "kind": "value", "args": [["", "main_loop"], ["", "Omd_representation.ref_container"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "maybe_link", "type": "let maybe_link: (main_loop, r, p, l) => option((r, p, l))", "docs": "<p><code>maybe_link</code> tries to parse a link, and returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.</p>\n", "kind": "value", "args": [["", "main_loop"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "parse_list", "type": "let parse_list: (main_loop, r, p, l) => (r, p, l)", "docs": "<p><code>parse_list main_loop r p l</code> parses a list from <code>l</code>.</p>\n<p>***Important property*** It is considered in Omd that a sub-list is always more indented than the item that contains it (so, 2 items with different indentations cannot have the direct same parent).</p>\n", "kind": "value", "args": [["", "main_loop"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "make_paragraphs", "type": "let make_paragraphs: Omd_representation.t => Omd_representation.t", "docs": "<p>Since <code>Omd_parser.parse</code> doesn&#39;t build paragraphs, if you want Markdown-style paragraphs, you need to apply this function to the result of <code>Omd_parser.parse</code>.</p>\n", "kind": "value", "args": [["", "Omd_representation.t"]]}, {"path": "Omd_parser.Make", "name": "bcode", "type": "let bcode: (~?default_lang: option(Omd_representation.name), r, p, l) => option((r, p, l))", "docs": "<p><code>bcode default_lang r p l</code> tries to parse some code that&#39;s delimited by backquotes, and returns <code>Some(r,p,l)</code> if it succeeds, <code>None</code> otherwise.</p>\n", "kind": "value", "args": [["default_lang", "Omd_representation.name (optional)"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "icode", "type": "let icode: (~?default_lang: option(Omd_representation.name), r, p, l) => option((r, p, l))", "docs": "<p><code>icode default_lang r p l</code> tries to parse some code that&#39;s delimited by space indentation. It should always return <code>Some(r,p,l)</code>, if it returns <code>None</code> it means that it&#39;s been misused or there&#39;s a bug.</p>\n", "kind": "value", "args": [["default_lang", "Omd_representation.name (optional)"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "main_loop_rev", "type": "let main_loop_rev: (~?html: option(bool), r, p, l) => r", "docs": null, "kind": "value", "args": [["html", "bool (optional)"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "main_loop", "type": "let main_loop: (~?html: option(bool), r, p, l) => Omd_representation.t", "docs": null, "kind": "value", "args": [["html", "bool (optional)"], ["", "r"], ["", "p"], ["", "l"]]}, {"path": "Omd_parser.Make", "name": "main_parse", "type": "let main_parse: list(Omd_representation.tok) => Omd_representation.t", "docs": null, "kind": "value", "args": [["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser.Make", "name": "parse", "type": "let parse: list(Omd_representation.tok) => Omd_representation.t", "docs": null, "kind": "value", "args": [["", "list(Omd_representation.tok)"]]}, {"path": "Omd_parser", "name": "Make", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bcode\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>blind_html\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>default_lang\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eat_blank\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>emailstyle_quoting\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>extensions\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>gh_uemph_or_bold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>gh_uemph_or_bold_style\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hr_m\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hr_s\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmlcodes_set\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>htmltags_set\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>icode\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>inline_htmltags_set\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>is_blank\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main_loop\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main_loop_rev\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>main_parse\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make_paragraphs\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>maybe_extension\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>maybe_link\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>maybe_reference\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse_list\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>rc\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_title\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_cbracket\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_cparenth\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_dq\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_gt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_lt\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_newline\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_obracket\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_oparenth\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_q\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_until_space\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>semph_or_bold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sm_uemph_or_bold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>strict_html\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>tag__maybe_h1\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>tag__maybe_h2\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>tag__md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>tag_setext\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>uemph_or_bold\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unindent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unindent_rev", "docs": null, "kind": "module"}, {"path": "", "name": "Omd_parser", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>default_parse\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>l\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>main_loop\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>p\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>r\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Default_env\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Make", "docs": null, "kind": "module"}, {"path": "Omd_lexer", "name": "token", "type": "type token = Omd_representation.tok", "docs": null, "kind": "type"}, {"path": "Omd_lexer", "name": "t", "type": "type t = list(token)", "docs": null, "kind": "type"}, {"path": "Omd_lexer", "name": "lex", "type": "let lex: string => t", "docs": "<p>Translate a raw string into tokens for the parser. To implement an extension to the lexer, one may process its result before giving it to the parser. To implement an extension to the parser, one may extend it using the constructor <code>Tag</code> from type <code>tok</code> and/or using the extensions mechanism of the parser (cf. the optional argument <code>extensions</code>). The main difference is that <code>Tag</code> is processed by the parser in highest priority whereas functions in <code>extensions</code> are applied with lowest priority.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Omd_lexer", "name": "bigstring", "type": "type bigstring = Bigarray.Array1.t(char, Bigarray.int8_unsigned_elt, Bigarray.c_layout)", "docs": null, "kind": "type"}, {"path": "Omd_lexer", "name": "lex_bigarray", "type": "let lex_bigarray: bigstring => t", "docs": "<p>As lex, but read input from a bigarray rather than from a string.</p>\n", "kind": "value", "args": [["", "bigstring"]]}, {"path": "Omd_lexer", "name": "string_of_tokens", "type": "let string_of_tokens: t => string", "docs": "<p><code>string_of_tokens t</code> return the string corresponding to the token list <code>t</code>.</p>\n", "kind": "value", "args": [["", "t"]]}, {"path": "Omd_lexer", "name": "length", "type": "let length: token => int", "docs": "<p><code>length t</code> number of characters of the string represented as <code>t</code> (i.e. <code>String.length(string_of_token t)</code>).</p>\n", "kind": "value", "args": [["", "token"]]}, {"path": "Omd_lexer", "name": "string_of_token", "type": "let string_of_token: token => string", "docs": "<p><code>string_of_token tk</code> return the string corresponding to the token <code>tk</code>.</p>\n", "kind": "value", "args": [["", "token"]]}, {"path": "Omd_lexer", "name": "make_space", "type": "let make_space: int => token", "docs": null, "kind": "value", "args": [["", "int"]]}, {"path": "Omd_lexer", "name": "split_first", "type": "let split_first: token => (token, token)", "docs": "<p><code>split_first(Xs n)</code> returns <code>(X, X(n-1))</code> where <code>X</code> is a token carrying an int count.</p>\n<p>Raises: Invalid_argument<p>is passed a single token.</p></p>\n", "kind": "value", "args": [["", "token"]]}, {"path": "Omd_lexer", "name": "destring_of_tokens", "type": "let destring_of_tokens: (~?limit: option(int), t) => string", "docs": "<p>Converts the tokens to a simple string representation useful for debugging.</p>\n", "kind": "value", "args": [["limit", "int (optional)"], ["", "t"]]}, {"path": "", "name": "Omd_lexer", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>destring_of_tokens\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>length\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>lex\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>lex_bigarray\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make_space\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split_first\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>string_of_token\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>string_of_tokens\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>bigstring\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>token", "docs": null, "kind": "module"}, {"path": "Omd_html", "name": "html", "type": "type html = list(html_node)", "docs": null, "kind": "type"}, {"path": "Omd_html", "name": "html_node", "type": "type html_node = \n  | Node(nodename, attributes, html)\n  | Data(string)\n  | Rawdata(string)\n  | Comment(string)\n", "docs": null, "kind": "type"}, {"path": "Omd_html", "name": "nodename", "type": "type nodename = string", "docs": null, "kind": "type"}, {"path": "Omd_html", "name": "attributes", "type": "type attributes = list(attribute)", "docs": null, "kind": "type"}, {"path": "Omd_html", "name": "attribute", "type": "type attribute = (string, option(string))", "docs": null, "kind": "type"}, {"path": "Omd_html", "name": "to_string", "type": "let to_string: list(html_node) => string", "docs": null, "kind": "value", "args": [["", "list(html_node)"]]}, {"path": "", "name": "Omd_html", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_string\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>attribute\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>attributes\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>html\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>html_node\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>nodename", "docs": null, "kind": "module"}, {"path": "Omd_backend", "name": "code_stylist", "type": "type code_stylist = (~lang: string, string) => string", "docs": "<p>Function that takes a language name and some code and returns that code with style.</p>\n", "kind": "type"}, {"path": "Omd_backend", "name": "default_language", "type": "let default_language: Pervasives.ref(string)", "docs": "<p>default language for code blocks can be set to any name, by default it is the empty string</p>\n", "kind": "value"}, {"path": "Omd_backend", "name": "html_of_md", "type": "let html_of_md: (\n  ~?override: option(Omd_representation.element => option(string)),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(code_stylist),\n  Omd_representation.t\n) => string", "docs": "<p><code>html_of_md md</code> returns a string containing the HTML version of <code>md</code>. Note that <code>md</code> uses the internal representation of Markdown.</p>\n<p>The optional parameter <code>override</code> allows to override an precise behaviour for a constructor of Omd_representation.element, as in the following example:</p>\n<p>let customized_to_html = Omd.html_of_md ~override:(function | Url (href,s,title) -&gt; Some(&quot;&lt;a href=&#39;&quot; ^ (Omd_utils.htmlentities ~md:true href) ^ &quot;&#39;&quot; ^ (if title &lt;&gt; &quot;&quot; then &quot; title=&#39;&quot; ^ (Omd_utils.htmlentities ~md:true title) ^ &quot;&#39;&quot; else &quot;&quot;) ^ &quot;&gt;&quot; ^ Omd_backend.html_of_md s ^ &quot; target=&#39;_blank&#39;&lt;/a&gt;&quot;) | _ -&gt; None)</p>\n", "kind": "value", "args": [["override", "Omd_representation.element => option(string) (optional)"], ["pindent", "bool (optional)"], ["nl2br", "bool (optional)"], ["cs", "code_stylist (optional)"], ["", "Omd_representation.t"]]}, {"path": "Omd_backend", "name": "headers_of_md", "type": "let headers_of_md: (~?remove_header_links: option(bool), Omd_representation.t) => list(\n  (Omd_representation.element, string, string)\n)", "docs": "<p><code>headers_of_md md</code> returns a list of 3-tuples; in each of them the first element is the header (e.g., <code>H1(foo)</code>), the second is the HTML id (as produced by <code>html_of_md</code>), and the third element is the HTML version of <code>foo</code>. The third elements of those 3-tuples exist because if you use <code>html_and_headers_of_md</code>, then you have the guarantee that the HTML version of <code>foo</code> is the same for both the headers and the HTML version of <code>md</code>. If <code>remove_header_links</code>, then remove links inside headers (h1, h2, ...). Default value of <code>remove_header_links</code>: cf. <code>html_and_headers_of_md</code>.</p>\n", "kind": "value", "args": [["remove_header_links", "bool (optional)"], ["", "Omd_representation.t"]]}, {"path": "Omd_backend", "name": "html_and_headers_of_md", "type": "let html_and_headers_of_md: (\n  ~?remove_header_links: option(bool),\n  ~?override: option(Omd_representation.element => option(string)),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(code_stylist),\n  Omd_representation.t\n) => (string, list((Omd_representation.element, Omd_utils.StringSet.elt, string)))", "docs": "<p><code>html_and_headers_of_md md</code> is the same as <code>(html_of_md md,\n    headers_of_md md)</code> except that it&#39;s two times faster. If you need both headers and html, don&#39;t use <code>html_of_md</code> and <code>headers_of_md</code> but this function instead. If <code>remove_header_links</code>, then remove links inside headers (h1, h2, ...). Default value of <code>remove_header_links</code>: false.</p>\n", "kind": "value", "args": [["remove_header_links", "bool (optional)"], ["override", "Omd_representation.element => option(string) (optional)"], ["pindent", "bool (optional)"], ["nl2br", "bool (optional)"], ["cs", "code_stylist (optional)"], ["", "Omd_representation.t"]]}, {"path": "Omd_backend", "name": "escape_markdown_characters", "type": "let escape_markdown_characters: string => string", "docs": "<p><code>escape_markdown_characters s</code> returns a string where markdown-significant characters in <code>s</code> have been backslash-escaped. Note that <code>escape_markdown_characters</code> takes a &quot;raw&quot; string, therefore it doesn&#39;t have the whole context in which the string appears, thus the escaping cannot really be minimal. However the implementation tries to minimalise the extra escaping.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "Omd_backend", "name": "text_of_md", "type": "let text_of_md: Omd_representation.t => string", "docs": "<p><code>text_of_md md</code> is basically the same as <code>html_of_md md</code> but without the HTML tags in the output.</p>\n", "kind": "value", "args": [["", "Omd_representation.t"]]}, {"path": "Omd_backend", "name": "markdown_of_md", "type": "let markdown_of_md: Omd_representation.t => string", "docs": "<p><code>markdown_of_md md</code> is basically the same as <code>html_of_md md</code> but with the output in Markdown syntax rather than HTML.</p>\n", "kind": "value", "args": [["", "Omd_representation.t"]]}, {"path": "Omd_backend", "name": "sexpr_of_md", "type": "let sexpr_of_md: Omd_representation.t => string", "docs": "<p><code>sexpr_of_md md</code> is basically the same as <code>html_of_md md</code> but with the output in s-expressions rather than HTML. This is mainly used for debugging.</p>\n", "kind": "value", "args": [["", "Omd_representation.t"]]}, {"path": "", "name": "Omd_backend", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>default_language\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>escape_markdown_characters\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>headers_of_md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>html_and_headers_of_md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>html_of_md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>markdown_of_md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sexpr_of_md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>text_of_md\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>code_stylist", "docs": null, "kind": "module"}, {"path": "Omd.Representation", "name": "R", "type": "", "docs": null, "kind": "module"}, {"path": "Omd.Representation", "name": "element", "type": "type element = \n  | H1(t)\n  | H2(t)\n  | H3(t)\n  | H4(t)\n  | H5(t)\n  | H6(t)\n  | Paragraph(t)\n  | Text(string)\n  | Emph(t)\n  | Bold(t)\n  | Ul(list(t))\n  | Ol(list(t))\n  | Ulp(list(t))\n  | Olp(list(t))\n  | Code(name, string)\n  | Code_block(name, string)\n  | Br\n  | Hr\n  | NL\n  | Url(href, t, title)\n  | Ref(ref_container, name, string, fallback)\n  | Img_ref(ref_container, name, alt, fallback)\n  | Html(name, list((string, option(string))), t)\n  | Html_block(name, list((string, option(string))), t)\n  | Html_comment(string)\n  | Raw(string)\n  | Raw_block(string)\n  | Blockquote(t)\n  | Img(alt, src, title)\n  | X(\n    &lt; name : string;\n  to_html : ?indent:int -&gt; (t -&gt; string) -&gt; t -&gt; string option;\n  to_sexpr : (t -&gt; string) -&gt; t -&gt; string option; to_t : t -&gt; t option &gt;\n  )\n", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "fallback", "type": "type fallback = &lt; to_string : string; to_t : t &gt;", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "name", "type": "type name = string", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "alt", "type": "type alt = string", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "src", "type": "type src = string", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "href", "type": "type href = string", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "title", "type": "type title = string", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "t", "type": "type t = list(element)", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "tok", "type": "type tok = \n  | Ampersand\n  | Ampersands(int)\n  | At\n  | Ats(int)\n  | Backquote\n  | Backquotes(int)\n  | Backslash\n  | Backslashs(int)\n  | Bar\n  | Bars(int)\n  | Caret\n  | Carets(int)\n  | Cbrace\n  | Cbraces(int)\n  | Colon\n  | Colons(int)\n  | Comma\n  | Commas(int)\n  | Cparenthesis\n  | Cparenthesiss(int)\n  | Cbracket\n  | Cbrackets(int)\n  | Dollar\n  | Dollars(int)\n  | Dot\n  | Dots(int)\n  | Doublequote\n  | Doublequotes(int)\n  | Exclamation\n  | Exclamations(int)\n  | Equal\n  | Equals(int)\n  | Greaterthan\n  | Greaterthans(int)\n  | Hash\n  | Hashs(int)\n  | Lessthan\n  | Lessthans(int)\n  | Minus\n  | Minuss(int)\n  | Newline\n  | Newlines(int)\n  | Number(string)\n  | Obrace\n  | Obraces(int)\n  | Oparenthesis\n  | Oparenthesiss(int)\n  | Obracket\n  | Obrackets(int)\n  | Percent\n  | Percents(int)\n  | Plus\n  | Pluss(int)\n  | Question\n  | Questions(int)\n  | Quote\n  | Quotes(int)\n  | Semicolon\n  | Semicolons(int)\n  | Slash\n  | Slashs(int)\n  | Space\n  | Spaces(int)\n  | Star\n  | Stars(int)\n  | Tab\n  | Tabs(int)\n  | Tilde\n  | Tildes(int)\n  | Underscore\n  | Underscores(int)\n  | Word(string)\n  | Tag(name, extension)\n", "docs": null, "kind": "type"}, {"path": "Omd.Representation", "name": "extension", "type": "type extension = &lt; parser_extension : t -&gt;\n                     tok list -&gt; tok list -&gt; (t * tok list * tok list) option;\n  to_string : string &gt;", "docs": "<ul><li><p><code>parser_extension</code> is a method that takes the current state of the parser&#39;s data and returns None if nothing has been changed, otherwise it returns the new state. The current state of the parser&#39;s data is <code>(r, p, l)</code> where <code>r</code> is the result so far, <code>p</code> is the list of the previous tokens (it&#39;s typically empty or contains information on how many newlines we&#39;ve just seen), and <code>l</code> is the remaining tokens to parse.</p>\n</li><li><p>and <code>to_string</code> is a method that returns directly a string representation of the object (it&#39;s normal if it returns the empty string).</p>\n</li></ul>", "kind": "type"}, {"path": "Omd.Representation", "name": "extensions", "type": "type extensions = list(extension)", "docs": "<p>One must use this type to extend the parser. It&#39;s a list of functions of type <code>extension</code>. They are processed in order (the head is applied first), so be careful about it. If you use it wrong, it will behave wrong.</p>\n", "kind": "type"}, {"path": "Omd.Representation", "name": "empty_extension", "type": "let empty_extension: extension", "docs": "<p>An empty extension</p>\n", "kind": "value"}, {"path": "Omd.Representation", "name": "loose_compare", "type": "let loose_compare: (t, t) => int", "docs": "<p><code>loose_compare t1 t2</code> returns <code>0</code> if <code>t1</code> and <code>t2</code> are equivalent, otherwise it returns another number.</p>\n", "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Omd.Representation", "name": "normalise_md", "type": "let normalise_md: t => t", "docs": "<p><code>normalise_md md</code> returns a copy of <code>md</code> where some elements have been factorized.</p>\n", "kind": "value", "args": [["", "t"]]}, {"path": "Omd.Representation", "name": "visit", "type": "let visit: (element => option(t), t) => t", "docs": "<p>visitor for structures of type t: <code>visit f md</code> will return a new potentially altered copy of <code>md</code> that has been created by the visit of <code>md</code> by <code>f</code>.</p>\n<p>The function <code>f</code> takes each <code>element</code> (from <code>md</code>) and returns <code>Some t</code> if it has effectively been applied to <code>element</code>, and <code>None</code> otherwise. When it returns <code>Some t</code>, <code>t</code> replaces <code>element</code> in the copy of <code>md</code>, and when it returns <code>None</code>, either <code>element</code> is copied as it is in the copy of <code>md</code> or a visited version is copied instead (well, that depends on if <code>element</code> has elements inside of it or not).</p>\n", "kind": "value", "args": [["", "element => option(t)"], ["", "t"]]}, {"path": "Omd", "name": "Representation", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>empty_extension\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>loose_compare\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>normalise_md\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>visit\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>alt\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>extensions\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fallback\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>href\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>name\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>src\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>title\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tok\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>R", "docs": null, "kind": "module"}, {"path": "Omd", "name": "t", "type": "type t = list(element)", "docs": "<p>Representation of a Markdown document.</p>\n", "kind": "type"}, {"path": "Omd", "name": "ref_container", "type": "type ref_container = &lt; add_ref : string -&gt; string -&gt; string -&gt; unit;\n  get_all : (string * (string * string)) list;\n  get_ref : string -&gt; (string * string) option &gt;", "docs": null, "kind": "type"}, {"path": "Omd", "name": "element", "type": "type element = \n  | H1(t)\n  | H2(t)\n  | H3(t)\n  | H4(t)\n  | H5(t)\n  | H6(t)\n  | Paragraph(t)\n  | Text(string)\n  | Emph(t)\n  | Bold(t)\n  | Ul(list(t))\n  | Ol(list(t))\n  | Ulp(list(t))\n  | Olp(list(t))\n  | Code(name, string)\n  | Code_block(name, string)\n  | Br\n  | Hr\n  | NL\n  | Url(href, t, title)\n  | Ref(ref_container, name, string, fallback)\n  | Img_ref(ref_container, name, alt, fallback)\n  | Html(name, list((string, option(string))), t)\n  | Html_block(name, list((string, option(string))), t)\n  | Html_comment(string)\n  | Raw(string)\n  | Raw_block(string)\n  | Blockquote(t)\n  | Img(alt, src, title)\n  | X(\n    &lt; name : string;\n  to_html : ?indent:int -&gt; (t -&gt; string) -&gt; t -&gt; string option;\n  to_sexpr : (t -&gt; string) -&gt; t -&gt; string option; to_t : t -&gt; t option &gt;\n  )\n = Omd_representation.element", "docs": "<p>A element of a Markdown document.</p>\n", "kind": "type"}, {"path": "Omd", "name": "fallback", "type": "type fallback = &lt; to_string : string; to_t : t &gt;", "docs": "<p>Fallback for references in case they refer to non-existant references</p>\n", "kind": "type"}, {"path": "Omd", "name": "name", "type": "type name = string", "docs": "<p>Markdown reference name.</p>\n", "kind": "type"}, {"path": "Omd", "name": "alt", "type": "type alt = string", "docs": "<p>HTML img tag attribute.</p>\n", "kind": "type"}, {"path": "Omd", "name": "src", "type": "type src = string", "docs": "<p>HTML attribute.</p>\n", "kind": "type"}, {"path": "Omd", "name": "href", "type": "type href = string", "docs": "<p>HTML attribute.</p>\n", "kind": "type"}, {"path": "Omd", "name": "title", "type": "type title = string", "docs": "<p>HTML attribute.</p>\n", "kind": "type"}, {"path": "Omd", "name": "code_stylist", "type": "type code_stylist = (~lang: string, string) => string", "docs": "<p>Function that takes a language name and some code and returns that code with style.</p>\n", "kind": "type"}, {"path": "Omd", "name": "of_string", "type": "let of_string: (\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(name),\n  string\n) => t", "docs": "<p><code>of_string s</code> returns the Markdown representation of the string <code>s</code>.</p>\n<p>Param: lang<p>language for blocks of code where it was not specified. Default: <code>&quot;&quot;</code>.</p>\n<p>If you want to use a custom lexer or parser, use lex and parse.</p></p>\n", "kind": "value", "args": [["extensions", "Omd_representation.extensions (optional)"], ["default_lang", "name (optional)"], ["", "string"]]}, {"path": "Omd", "name": "of_bigarray", "type": "let of_bigarray: (\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(name),\n  Omd_lexer.bigstring\n) => t", "docs": "<p>As of_string, but read input from a bigarray rather than from a string.</p>\n", "kind": "value", "args": [["extensions", "Omd_representation.extensions (optional)"], ["default_lang", "name (optional)"], ["", "Omd_lexer.bigstring"]]}, {"path": "Omd", "name": "set_default_lang", "type": "let set_default_lang: (name, t) => t", "docs": "<p><code>set_default_lang lang md</code> return a copy of <code>md</code> where the language of all <code>Code</code> or <code>Code_block</code> with an empty language is set to <code>lang</code>.</p>\n", "kind": "value", "args": [["", "name"], ["", "t"]]}, {"path": "Omd", "name": "to_html", "type": "let to_html: (\n  ~?override: option(Omd_representation.element => option(string)),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(code_stylist),\n  t\n) => string", "docs": "<p>Translate markdown representation into raw HTML. If you need a full HTML representation, you mainly have to figure out how to convert <code>Html of string</code> and <code>Html_block of string</code> into your HTML representation.</p>\n", "kind": "value", "args": [["override", "Omd_representation.element => option(string) (optional)"], ["pindent", "bool (optional)"], ["nl2br", "bool (optional)"], ["cs", "code_stylist (optional)"], ["", "t"]]}, {"path": "Omd", "name": "to_markdown", "type": "let to_markdown: t => string", "docs": "<p>Translate markdown representation into textual markdown.</p>\n", "kind": "value", "args": [["", "t"]]}, {"path": "Omd", "name": "to_text", "type": "let to_text: t => string", "docs": "<p>Translate markdown representation into raw text.</p>\n", "kind": "value", "args": [["", "t"]]}, {"path": "Omd", "name": "toc", "type": "let toc: (~?start: option(list(int)), ~?depth: option(int), t) => t", "docs": "<p><code>toc md</code> returns <code>toc</code> a table of contents for <code>md</code>.</p>\n<p>Param: start<p>gives the section for which the TOC must be built. For example <code>~start:[2;3]</code> will build the TOC for subsections of the second <code>H1</code> header, and within that section, the third <code>h2</code> header. If a number is <code>0</code>, it means to look for the first section at that level but stop if one encounters any other subsection. If no subsection exists, an empty TOC <code>[]</code> will be returned. Default: <code>[]</code> i.e. list all sections, starting with the first <code>H1</code>.</p></p>\n<p>Param: depth<p>the table of contents. Default: <code>2</code>.</p></p>\n", "kind": "value", "args": [["start", "list(int) (optional)"], ["depth", "int (optional)"], ["", "t"]]}, {"path": "", "name": "Omd", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>of_bigarray\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>of_string\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>set_default_lang\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_html\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_markdown\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_text\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toc\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>alt\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>code_stylist\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fallback\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>href\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>name\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>ref_container\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>src\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>title\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Representation", "docs": null, "kind": "module"}, {"path": "Html_characters", "name": "characters_htmlentities_descriptions", "type": "let characters_htmlentities_descriptions: list((string, string, string))", "docs": null, "kind": "value"}, {"path": "", "name": "Html_characters", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>characters_htmlentities_descriptions", "docs": null, "kind": "module"}, {"path": "Token", "name": "section_heading", "type": "type section_heading = [ `Begin_section_heading of int * string option ]", "docs": null, "kind": "type"}, {"path": "Token", "name": "tag", "type": "type tag = [ `Tag of\n    [ `Param of string\n    | `Return\n    | `See of [ `Url | `Document | `File ] * string\n    | `Closed\n    | `Open\n    | `Before of string\n    | `Canonical of string\n    | `Version of string\n    | `Deprecated\n    | `Inline\n    | `Raise of string\n    | `Since of string\n    | `Author of string ] ]", "docs": null, "kind": "type"}, {"path": "Token", "name": "t", "type": "type t = [ `Code_span of string\n| `Begin_style of Comment.style\n| `Tag of\n    [ `Param of string\n    | `Return\n    | `See of [ `Url | `Document | `File ] * string\n    | `Closed\n    | `Open\n    | `Before of string\n    | `Canonical of string\n    | `Version of string\n    | `Deprecated\n    | `Inline\n    | `Raise of string\n    | `Since of string\n    | `Author of string ]\n| `Simple_link of string\n| `Word of string\n| `Begin_section_heading of int * string option\n| `Right_brace\n| `Minus\n| `Doc of string\n| `Modules of string\n| `Begin_reference_with_replacement_text of string\n| `Begin_list of [ `Unordered | `Ordered ]\n| `End\n| `Example of string * string\n| `Code_block of string\n| `Space\n| `Verbatim of string\n| `Plus\n| `Begin_list_item of [ `Dash | `Li ]\n| `Begin_link_with_replacement_text of string\n| `Blank_line\n| `Simple_reference of string\n| `Single_newline ]", "docs": null, "kind": "type"}, {"path": "Token", "name": "print", "type": "let print: [&lt; `Begin_link_with_replacement_text of string & 't\n | `Begin_list_item of [ `Dash | `Li ] & [&lt; `Dash | `Li ]\n | `Begin_reference_with_replacement_text of string & 'u\n | `Begin_section_heading of int * string option\n | `Begin_style of\n     Comment.style &\n     [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]\n | `Doc of string & 'v\n | `Example of string * string & 'w\n | `Minus\n | `Plus\n | `Tag of\n     [ `Author of string\n     | `Before of string\n     | `Canonical of string\n     | `Closed\n     | `Deprecated\n     | `Inline\n     | `Open\n     | `Param of string\n     | `Raise of string\n     | `Return\n     | `See of [ `Document | `File | `Url ] * string\n     | `Since of string\n     | `Version of string ] &\n     [&lt; `Author of 'x\n      | `Before of 'y\n      | `Canonical of 'z\n      | `Closed\n      | `Deprecated\n      | `Inline\n      | `Open\n      | `Param of 'a1\n      | `Raise of 'b1\n      | `Return\n      | `See of 'c1\n      | `Since of 'd1\n      | `Version of 'e1 ] ] => string", "docs": null, "kind": "value", "args": [["", "[&lt; `Begin_link_with_replacement_text of string & 't\n | `Begin_list_item of [ `Dash | `Li ] & [&lt; `Dash | `Li ]\n | `Begin_reference_with_replacement_text of string & 'u\n | `Begin_section_heading of int * string option\n | `Begin_style of\n     Comment.style &\n     [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]\n | `Doc of string & 'v\n | `Example of string * string & 'w\n | `Minus\n | `Plus\n | `Tag of\n     [ `Author of string\n     | `Before of string\n     | `Canonical of string\n     | `Closed\n     | `Deprecated\n     | `Inline\n     | `Open\n     | `Param of string\n     | `Raise of string\n     | `Return\n     | `See of [ `Document | `File | `Url ] * string\n     | `Since of string\n     | `Version of string ] &\n     [&lt; `Author of 'x\n      | `Before of 'y\n      | `Canonical of 'z\n      | `Closed\n      | `Deprecated\n      | `Inline\n      | `Open\n      | `Param of 'a1\n      | `Raise of 'b1\n      | `Return\n      | `See of 'c1\n      | `Since of 'd1\n      | `Version of 'e1 ] ]"]]}, {"path": "Token", "name": "describe", "type": "let describe: [&lt; `Begin_link_with_replacement_text of string & 'a\n | `Begin_list of [ `Ordered | `Unordered ] & [&lt; `Ordered | `Unordered ]\n | `Begin_list_item of [ `Dash | `Li ] & [&lt; `Dash | `Li ]\n | `Begin_reference_with_replacement_text of string & 'b\n | `Begin_section_heading of int * string option & int * 'c\n | `Begin_style of\n     Comment.style &\n     [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]\n | `Blank_line\n | `Code_block of string & 'd\n | `Code_span of string & 'e\n | `Comment\n | `Doc of string & 'f\n | `End\n | `Example of string * string & 'g\n | `Minus\n | `Modules of string & 'h\n | `Plus\n | `Right_brace\n | `Simple_link of string & 'i\n | `Simple_reference of string & 'j\n | `Single_newline\n | `Space\n | `Tag of\n     [ `Author of string\n     | `Before of string\n     | `Canonical of string\n     | `Closed\n     | `Deprecated\n     | `Inline\n     | `Open\n     | `Param of string\n     | `Raise of string\n     | `Return\n     | `See of [ `Document | `File | `Url ] * string\n     | `Since of string\n     | `Version of string ] &\n     [&lt; `Author of 'k\n      | `Before of 'l\n      | `Canonical of 'm\n      | `Closed\n      | `Deprecated\n      | `Inline\n      | `Open\n      | `Param of 'n\n      | `Raise of 'o\n      | `Return\n      | `See of 'p\n      | `Since of 'q\n      | `Version of 'r ]\n | `Verbatim of string & 's\n | `Word of string ] => string", "docs": null, "kind": "value", "args": [["", "[&lt; `Begin_link_with_replacement_text of string & 'a\n | `Begin_list of [ `Ordered | `Unordered ] & [&lt; `Ordered | `Unordered ]\n | `Begin_list_item of [ `Dash | `Li ] & [&lt; `Dash | `Li ]\n | `Begin_reference_with_replacement_text of string & 'b\n | `Begin_section_heading of int * string option & int * 'c\n | `Begin_style of\n     Comment.style &\n     [&lt; `Bold | `Emphasis | `Italic | `Subscript | `Superscript ]\n | `Blank_line\n | `Code_block of string & 'd\n | `Code_span of string & 'e\n | `Comment\n | `Doc of string & 'f\n | `End\n | `Example of string * string & 'g\n | `Minus\n | `Modules of string & 'h\n | `Plus\n | `Right_brace\n | `Simple_link of string & 'i\n | `Simple_reference of string & 'j\n | `Single_newline\n | `Space\n | `Tag of\n     [ `Author of string\n     | `Before of string\n     | `Canonical of string\n     | `Closed\n     | `Deprecated\n     | `Inline\n     | `Open\n     | `Param of string\n     | `Raise of string\n     | `Return\n     | `See of [ `Document | `File | `Url ] * string\n     | `Since of string\n     | `Version of string ] &\n     [&lt; `Author of 'k\n      | `Before of 'l\n      | `Canonical of 'm\n      | `Closed\n      | `Deprecated\n      | `Inline\n      | `Open\n      | `Param of 'n\n      | `Raise of 'o\n      | `Return\n      | `See of 'p\n      | `Since of 'q\n      | `Version of 'r ]\n | `Verbatim of string & 's\n | `Word of string ]"]]}, {"path": "", "name": "Token", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>describe\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>print\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>section_heading\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "Syntax", "name": "parse", "type": "let parse: Stream.t(Location_.with_location(Token.t)) => Error.result(Ast.docs, Error.t)", "docs": null, "kind": "value", "args": [["", "Stream.t(Location_.with_location(Token.t))"]]}, {"path": "", "name": "Syntax", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse", "docs": null, "kind": "module"}, {"path": "Semantics", "name": "ast_to_comment", "type": "let ast_to_comment: (\n  ~permissive: bool,\n  ~sections_allowed: Ast.sections_allowed,\n  ~parent_of_sections: Paths.Identifier.label_parent,\n  Ast.docs\n) => Error.with_warnings(Error.result(Comment.docs, Error.t))", "docs": null, "kind": "value", "args": [["permissive", "bool"], ["sections_allowed", "Ast.sections_allowed"], ["parent_of_sections", "Paths.Identifier.label_parent"], ["", "Ast.docs"]]}, {"path": "", "name": "Semantics", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ast_to_comment", "docs": null, "kind": "module"}, {"path": "Root.Package", "name": "t", "type": "type t = string", "docs": null, "kind": "type"}, {"path": "Root", "name": "Package", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t", "docs": null, "kind": "module"}, {"path": "Root.Odoc_file", "name": "m", "type": "type m = {name: string, hidden: bool}", "docs": null, "kind": "type"}, {"path": "Root.Odoc_file", "name": "t", "type": "type t = | Page(string) | Compilation_unit(m)\n", "docs": null, "kind": "type"}, {"path": "Root.Odoc_file", "name": "create_unit", "type": "let create_unit: (~force_hidden: bool, string) => t", "docs": null, "kind": "value", "args": [["force_hidden", "bool"], ["", "string"]]}, {"path": "Root.Odoc_file", "name": "create_page", "type": "let create_page: string => t", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Root.Odoc_file", "name": "name", "type": "let name: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Root", "name": "Odoc_file", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>create_page\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>create_unit\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>name\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>m\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t", "docs": null, "kind": "module"}, {"path": "Root", "name": "t", "type": "type t = {package: Package.t, file: Odoc_file.t, digest: Digest.t}", "docs": null, "kind": "type"}, {"path": "Root", "name": "equal", "type": "let equal: (t, t) => bool", "docs": null, "kind": "value", "args": [["", "t"], ["", "t"]]}, {"path": "Root", "name": "hash", "type": "let hash: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Root", "name": "to_string", "type": "let to_string: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Root", "name": "Hash_table", "type": "", "docs": null, "kind": "module"}, {"path": "Root", "name": "contains_double_underscore", "type": "let contains_double_underscore: string => bool", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "", "name": "Root", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>contains_double_underscore\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_string\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Hash_table\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Odoc_file\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Package", "docs": null, "kind": "module"}, {"path": "Paths_types.Kind", "name": "any", "type": "type any = [ `InstanceVariable\n| `Module\n| `ModuleType\n| `Method\n| `Field\n| `Label\n| `Type\n| `Exception\n| `Class\n| `Page\n| `ClassType\n| `Value\n| `Constructor\n| `Extension ]", "docs": "<p>Any possible referent</p>\n", "kind": "type"}, {"path": "Paths_types.Kind", "name": "signature", "type": "type signature = [ `Module | `ModuleType ]", "docs": "<p>A referent that can contain signature items</p>\n", "kind": "type"}, {"path": "Paths_types.Kind", "name": "class_signature", "type": "type class_signature = [ `Class | `ClassType ]", "docs": "<p>A referent that can contain class signature items</p>\n", "kind": "type"}, {"path": "Paths_types.Kind", "name": "datatype", "type": "type datatype = [ `Type ]", "docs": "<p>A referent that can contain datatype items</p>\n", "kind": "type"}, {"path": "Paths_types.Kind", "name": "page", "type": "type page = [ `Page ]", "docs": "<p>A referent that can contain page items</p>\n", "kind": "type"}, {"path": "Paths_types.Kind", "name": "parent", "type": "type parent = [ `Module | `ModuleType | `Type | `Class | `ClassType ]", "docs": "<p>A referent that can contain other items</p>\n", "kind": "type"}, {"path": "Paths_types.Kind", "name": "label_parent", "type": "type label_parent = [ `Module | `ModuleType | `Type | `Class | `Page | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier", "type": "type identifier = any", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_module", "type": "type identifier_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_module_type", "type": "type identifier_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_type", "type": "type identifier_type = [ `Type ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_constructor", "type": "type identifier_constructor = [ `Constructor ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_field", "type": "type identifier_field = [ `Field ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_extension", "type": "type identifier_extension = [ `Extension ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_exception", "type": "type identifier_exception = [ `Exception ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_value", "type": "type identifier_value = [ `Value ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_class", "type": "type identifier_class = [ `Class ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_class_type", "type": "type identifier_class_type = [ `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_method", "type": "type identifier_method = [ `Method ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_instance_variable", "type": "type identifier_instance_variable = [ `InstanceVariable ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_label", "type": "type identifier_label = [ `Label ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "identifier_page", "type": "type identifier_page = [ `Page ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "path", "type": "type path = [ `Module | `ModuleType | `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "path_module", "type": "type path_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "path_module_type", "type": "type path_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "path_type", "type": "type path_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "path_class_type", "type": "type path_class_type = [ `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "fragment", "type": "type fragment = [ `Module | `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "fragment_module", "type": "type fragment_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "fragment_type", "type": "type fragment_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference", "type": "type reference = any", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_module", "type": "type reference_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_module_type", "type": "type reference_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_type", "type": "type reference_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_constructor", "type": "type reference_constructor = [ `Exception | `Constructor | `Extension ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_field", "type": "type reference_field = [ `Field ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_extension", "type": "type reference_extension = [ `Exception | `Extension ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_exception", "type": "type reference_exception = [ `Exception ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_value", "type": "type reference_value = [ `Value ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_class", "type": "type reference_class = [ `Class ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_class_type", "type": "type reference_class_type = [ `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_method", "type": "type reference_method = [ `Method ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_instance_variable", "type": "type reference_instance_variable = [ `InstanceVariable ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_label", "type": "type reference_label = [ `Label ]", "docs": null, "kind": "type"}, {"path": "Paths_types.Kind", "name": "reference_page", "type": "type reference_page = [ `Page ]", "docs": null, "kind": "type"}, {"path": "Paths_types", "name": "Kind", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>any\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>class_signature\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>datatype\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_class\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_exception\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_method\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>label_parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_exception\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_method\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>signature", "docs": "<h4 id=\"General-purpose-kinds\">General purpose kinds</h4>", "kind": "module"}, {"path": "Paths_types.Identifier", "name": "kind", "type": "type kind = Kind.identifier", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "t", "type": "type t('kind) = \n  | Root(Root.t, string): t([&lt; kind &gt; `Module ])\n  | Page(Root.t, string): t([&lt; kind &gt; `Page ])\n  | Module(signature, string): t([&lt; kind &gt; `Module ])\n  | Argument(signature, int, string): t([&lt; kind &gt; `Module ])\n  | ModuleType(signature, string): t([&lt; kind &gt; `ModuleType ])\n  | Type(signature, string): t([&lt; kind &gt; `Type ])\n  | CoreType(string): t([&lt; kind &gt; `Type ])\n  | Constructor(datatype, string): t([&lt; kind &gt; `Constructor ])\n  | Field(parent, string): t([&lt; kind &gt; `Field ])\n  | Extension(signature, string): t([&lt; kind &gt; `Extension ])\n  | Exception(signature, string): t([&lt; kind &gt; `Exception ])\n  | CoreException(string): t([&lt; kind &gt; `Exception ])\n  | Value(signature, string): t([&lt; kind &gt; `Value ])\n  | Class(signature, string): t([&lt; kind &gt; `Class ])\n  | ClassType(signature, string): t([&lt; kind &gt; `ClassType ])\n  | Method(class_signature, string): t([&lt; kind &gt; `Method ])\n  | InstanceVariable(class_signature, string): t([&lt; kind &gt; `InstanceVariable ])\n  | Label(label_parent, string): t([&lt; kind &gt; `Label ])\n", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "signature", "type": "type signature = t(Kind.signature)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "class_signature", "type": "type class_signature = t(Kind.class_signature)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "datatype", "type": "type datatype = t(Kind.datatype)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "parent", "type": "type parent = t(Kind.parent)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "label_parent", "type": "type label_parent = t(Kind.label_parent)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "module_", "type": "type module_ = t(Kind.identifier_module)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "module_type", "type": "type module_type = t(Kind.identifier_module_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "type_", "type": "type type_ = t(Kind.identifier_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "constructor", "type": "type constructor = t(Kind.identifier_constructor)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "field", "type": "type field = t(Kind.identifier_field)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "extension", "type": "type extension = t(Kind.identifier_extension)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "exception_", "type": "type exception_ = t(Kind.identifier_exception)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "value", "type": "type value = t(Kind.identifier_value)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "class_", "type": "type class_ = t(Kind.identifier_class)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "class_type", "type": "type class_type = t(Kind.identifier_class_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "method_", "type": "type method_ = t(Kind.identifier_method)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "instance_variable", "type": "type instance_variable = t(Kind.identifier_instance_variable)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "label", "type": "type label = t(Kind.identifier_label)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "page", "type": "type page = t(Kind.identifier_page)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "path_module", "type": "type path_module = t(Kind.path_module)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "path_module_type", "type": "type path_module_type = t(Kind.path_module_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "path_type", "type": "type path_type = t(Kind.path_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "path_class_type", "type": "type path_class_type = t(Kind.path_class_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "fragment_module", "type": "type fragment_module = t(Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "fragment_type", "type": "type fragment_type = t(Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_module", "type": "type reference_module = t(Kind.reference_module)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_module_type", "type": "type reference_module_type = t(Kind.reference_module_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_type", "type": "type reference_type = t(Kind.reference_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_constructor", "type": "type reference_constructor = t(Kind.reference_constructor)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_field", "type": "type reference_field = t(Kind.reference_field)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_extension", "type": "type reference_extension = t(Kind.reference_extension)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_exception", "type": "type reference_exception = t(Kind.reference_exception)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_value", "type": "type reference_value = t(Kind.reference_value)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_class", "type": "type reference_class = t(Kind.reference_class)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_class_type", "type": "type reference_class_type = t(Kind.reference_class_type)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_method", "type": "type reference_method = t(Kind.reference_method)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_instance_variable", "type": "type reference_instance_variable = t(Kind.reference_instance_variable)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_label", "type": "type reference_label = t(Kind.reference_label)", "docs": null, "kind": "type"}, {"path": "Paths_types.Identifier", "name": "reference_page", "type": "type reference_page = t(Kind.reference_page)", "docs": null, "kind": "type"}, {"path": "Paths_types", "name": "Identifier", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>any\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>class_\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>class_signature\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>datatype\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>exception_\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>kind\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>label_parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>method_\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>module_\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_exception\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_method\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>signature\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>type_\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>value", "docs": null, "kind": "module"}, {"path": "", "name": "Paths_types", "type": "<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Identifier\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Kind", "docs": null, "kind": "module"}, {"path": "Paths.Kind", "name": "any", "type": "type any = [ `InstanceVariable\n| `Module\n| `ModuleType\n| `Method\n| `Field\n| `Label\n| `Type\n| `Exception\n| `Class\n| `Page\n| `ClassType\n| `Value\n| `Constructor\n| `Extension ]", "docs": "<p>Any possible referent</p>\n", "kind": "type"}, {"path": "Paths.Kind", "name": "signature", "type": "type signature = [ `Module | `ModuleType ]", "docs": "<p>A referent that can contain signature items</p>\n", "kind": "type"}, {"path": "Paths.Kind", "name": "class_signature", "type": "type class_signature = [ `Class | `ClassType ]", "docs": "<p>A referent that can contain class signature items</p>\n", "kind": "type"}, {"path": "Paths.Kind", "name": "datatype", "type": "type datatype = [ `Type ]", "docs": "<p>A referent that can contain datatype items</p>\n", "kind": "type"}, {"path": "Paths.Kind", "name": "page", "type": "type page = [ `Page ]", "docs": "<p>A referent that can contain page items</p>\n", "kind": "type"}, {"path": "Paths.Kind", "name": "parent", "type": "type parent = [ `Module | `ModuleType | `Type | `Class | `ClassType ]", "docs": "<p>A referent that can contain other items</p>\n", "kind": "type"}, {"path": "Paths.Kind", "name": "label_parent", "type": "type label_parent = [ `Module | `ModuleType | `Type | `Class | `Page | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier", "type": "type identifier = any", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_module", "type": "type identifier_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_module_type", "type": "type identifier_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_type", "type": "type identifier_type = [ `Type ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_constructor", "type": "type identifier_constructor = [ `Constructor ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_field", "type": "type identifier_field = [ `Field ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_extension", "type": "type identifier_extension = [ `Extension ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_exception", "type": "type identifier_exception = [ `Exception ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_value", "type": "type identifier_value = [ `Value ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_class", "type": "type identifier_class = [ `Class ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_class_type", "type": "type identifier_class_type = [ `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_method", "type": "type identifier_method = [ `Method ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_instance_variable", "type": "type identifier_instance_variable = [ `InstanceVariable ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_label", "type": "type identifier_label = [ `Label ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "identifier_page", "type": "type identifier_page = [ `Page ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "path", "type": "type path = [ `Module | `ModuleType | `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "path_module", "type": "type path_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "path_module_type", "type": "type path_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "path_type", "type": "type path_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "path_class_type", "type": "type path_class_type = [ `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "fragment", "type": "type fragment = [ `Module | `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "fragment_module", "type": "type fragment_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "fragment_type", "type": "type fragment_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference", "type": "type reference = any", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_module", "type": "type reference_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_module_type", "type": "type reference_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_type", "type": "type reference_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_constructor", "type": "type reference_constructor = [ `Exception | `Constructor | `Extension ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_field", "type": "type reference_field = [ `Field ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_extension", "type": "type reference_extension = [ `Exception | `Extension ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_exception", "type": "type reference_exception = [ `Exception ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_value", "type": "type reference_value = [ `Value ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_class", "type": "type reference_class = [ `Class ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_class_type", "type": "type reference_class_type = [ `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_method", "type": "type reference_method = [ `Method ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_instance_variable", "type": "type reference_instance_variable = [ `InstanceVariable ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_label", "type": "type reference_label = [ `Label ]", "docs": null, "kind": "type"}, {"path": "Paths.Kind", "name": "reference_page", "type": "type reference_page = [ `Page ]", "docs": null, "kind": "type"}, {"path": "Paths", "name": "Kind", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>any\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>class_signature\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>datatype\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_class\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_exception\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_method\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>label_parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_exception\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_method\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>signature", "docs": null, "kind": "module"}, {"path": "Paths.Identifier", "name": "kind", "type": "type kind = Paths_types.Kind.identifier", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "t", "type": "type t('kind) = \n  | Root(Root.t, string): t([&lt; kind &gt; `Module ])\n  | Page(Root.t, string): t([&lt; kind &gt; `Page ])\n  | Module(signature, string): t([&lt; kind &gt; `Module ])\n  | Argument(signature, int, string): t([&lt; kind &gt; `Module ])\n  | ModuleType(signature, string): t([&lt; kind &gt; `ModuleType ])\n  | Type(signature, string): t([&lt; kind &gt; `Type ])\n  | CoreType(string): t([&lt; kind &gt; `Type ])\n  | Constructor(datatype, string): t([&lt; kind &gt; `Constructor ])\n  | Field(parent, string): t([&lt; kind &gt; `Field ])\n  | Extension(signature, string): t([&lt; kind &gt; `Extension ])\n  | Exception(signature, string): t([&lt; kind &gt; `Exception ])\n  | CoreException(string): t([&lt; kind &gt; `Exception ])\n  | Value(signature, string): t([&lt; kind &gt; `Value ])\n  | Class(signature, string): t([&lt; kind &gt; `Class ])\n  | ClassType(signature, string): t([&lt; kind &gt; `ClassType ])\n  | Method(class_signature, string): t([&lt; kind &gt; `Method ])\n  | InstanceVariable(class_signature, string): t([&lt; kind &gt; `InstanceVariable ])\n  | Label(label_parent, string): t([&lt; kind &gt; `Label ])\n", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "signature", "type": "type signature = t(Paths_types.Kind.signature)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "class_signature", "type": "type class_signature = t(Paths_types.Kind.class_signature)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "datatype", "type": "type datatype = t(Paths_types.Kind.datatype)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "parent", "type": "type parent = t(Paths_types.Kind.parent)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "label_parent", "type": "type label_parent = t(Paths_types.Kind.label_parent)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "module_", "type": "type module_ = t(Paths_types.Kind.identifier_module)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "module_type", "type": "type module_type = t(Paths_types.Kind.identifier_module_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "type_", "type": "type type_ = t(Paths_types.Kind.identifier_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "constructor", "type": "type constructor = t(Paths_types.Kind.identifier_constructor)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "field", "type": "type field = t(Paths_types.Kind.identifier_field)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "extension", "type": "type extension = t(Paths_types.Kind.identifier_extension)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "exception_", "type": "type exception_ = t(Paths_types.Kind.identifier_exception)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "value", "type": "type value = t(Paths_types.Kind.identifier_value)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "class_", "type": "type class_ = t(Paths_types.Kind.identifier_class)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "class_type", "type": "type class_type = t(Paths_types.Kind.identifier_class_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "method_", "type": "type method_ = t(Paths_types.Kind.identifier_method)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "instance_variable", "type": "type instance_variable = t(Paths_types.Kind.identifier_instance_variable)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "label", "type": "type label = t(Paths_types.Kind.identifier_label)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "page", "type": "type page = t(Paths_types.Kind.identifier_page)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "path_module", "type": "type path_module = t(Paths_types.Kind.path_module)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "path_module_type", "type": "type path_module_type = t(Paths_types.Kind.path_module_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "path_type", "type": "type path_type = t(Paths_types.Kind.path_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "path_class_type", "type": "type path_class_type = t(Paths_types.Kind.path_class_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "fragment_module", "type": "type fragment_module = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "fragment_type", "type": "type fragment_type = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_module", "type": "type reference_module = t(Paths_types.Kind.reference_module)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_module_type", "type": "type reference_module_type = t(Paths_types.Kind.reference_module_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_type", "type": "type reference_type = t(Paths_types.Kind.reference_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_constructor", "type": "type reference_constructor = t(Paths_types.Kind.reference_constructor)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_field", "type": "type reference_field = t(Paths_types.Kind.reference_field)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_extension", "type": "type reference_extension = t(Paths_types.Kind.reference_extension)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_exception", "type": "type reference_exception = t(Paths_types.Kind.reference_exception)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_value", "type": "type reference_value = t(Paths_types.Kind.reference_value)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_class", "type": "type reference_class = t(Paths_types.Kind.reference_class)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_class_type", "type": "type reference_class_type = t(Paths_types.Kind.reference_class_type)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_method", "type": "type reference_method = t(Paths_types.Kind.reference_method)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_instance_variable", "type": "type reference_instance_variable = t(Paths_types.Kind.reference_instance_variable)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_label", "type": "type reference_label = t(Paths_types.Kind.reference_label)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "reference_page", "type": "type reference_page = t(Paths_types.Kind.reference_page)", "docs": null, "kind": "type"}, {"path": "Paths.Identifier", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Paths.Identifier", "name": "signature_of_module_type", "type": "let signature_of_module_type: module_type => signature", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Paths.Identifier", "name": "class_signature_of_class", "type": "let class_signature_of_class: class_ => class_signature", "docs": null, "kind": "value", "args": [["", "class_"]]}, {"path": "Paths.Identifier", "name": "class_signature_of_class_type", "type": "let class_signature_of_class_type: class_type => class_signature", "docs": null, "kind": "value", "args": [["", "class_type"]]}, {"path": "Paths.Identifier", "name": "datatype_of_type", "type": "let datatype_of_type: type_ => datatype", "docs": null, "kind": "value", "args": [["", "type_"]]}, {"path": "Paths.Identifier", "name": "parent_of_signature", "type": "let parent_of_signature: signature => parent", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Paths.Identifier", "name": "parent_of_class_signature", "type": "let parent_of_class_signature: class_signature => parent", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Paths.Identifier", "name": "parent_of_datatype", "type": "let parent_of_datatype: datatype => parent", "docs": null, "kind": "value", "args": [["", "datatype"]]}, {"path": "Paths.Identifier", "name": "label_parent_of_parent", "type": "let label_parent_of_parent: parent => label_parent", "docs": null, "kind": "value", "args": [["", "parent"]]}, {"path": "Paths.Identifier", "name": "label_parent_of_page", "type": "let label_parent_of_page: page => label_parent", "docs": null, "kind": "value", "args": [["", "page"]]}, {"path": "Paths.Identifier", "name": "any", "type": "let any: t('kind) => any", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Paths.Identifier", "name": "equal", "type": "let equal: (t('kind), t('kind)) => bool", "docs": null, "kind": "value", "args": [["", "t('kind)"], ["", "t('kind)"]]}, {"path": "Paths.Identifier", "name": "hash", "type": "let hash: t('kind) => int", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Paths.Identifier", "name": "name", "type": "let name: t('kind) => string", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Paths.Identifier", "name": "signature_root", "type": "let signature_root: signature => Root.t", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Paths.Identifier", "name": "module_root", "type": "let module_root: module_ => Root.t", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Paths.Identifier", "name": "module_type_root", "type": "let module_type_root: module_type => Root.t", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Paths.Identifier", "name": "class_signature_root", "type": "let class_signature_root: class_signature => Root.t", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Paths.Identifier", "name": "label_parent_root", "type": "let label_parent_root: label_parent => Root.t", "docs": null, "kind": "value", "args": [["", "label_parent"]]}, {"path": "Paths", "name": "Identifier", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>datatype_of_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_page\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_parent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_type_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>name\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_class_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_datatype\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_root", "docs": "<p>Identifiers for definitions</p>\n", "kind": "module"}, {"path": "Paths.Fragment.Resolved", "name": "kind", "type": "type kind = Paths_types.Kind.fragment", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "sort", "type": "type sort = [ `Branch | `Root ]", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "raw", "type": "type raw('b, 'c) = \n  | Root: raw('b, [&lt; sort &gt; `Root ])\n  | Subst(Paths_types.Resolved_path.module_type, module_): raw(\n    [&lt; kind &gt; `Module ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | SubstAlias(Paths_types.Resolved_path.module_, module_): raw(\n    [&lt; kind &gt; `Module ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | Module(signature, string): raw([&lt; kind &gt; `Module ], [&lt; sort &gt; `Branch ])\n  | Type(signature, string): raw([&lt; kind &gt; `Type ], [&lt; sort &gt; `Branch ])\n  | Class(signature, string): raw([&lt; kind &gt; `Class ], [&lt; sort &gt; `Branch ])\n  | ClassType(signature, string): raw([&lt; kind &gt; `ClassType ], [&lt; sort &gt; `Branch ])\n", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "t", "type": "type t('b) = raw('b, [ `Branch ])", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "signature", "type": "type signature = raw(Paths_types.Kind.fragment_module, [ `Branch | `Root ])", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "module_", "type": "type module_ = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "type_", "type": "type type_ = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Paths.Fragment.Resolved", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Paths.Fragment.Resolved", "name": "any", "type": "let any: t('b) => any", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Paths.Fragment.Resolved", "name": "any_sort", "type": "let any_sort: raw('b, 'c) => raw('b, sort)", "docs": null, "kind": "value", "args": [["", "raw('b, 'c)"]]}, {"path": "Paths.Fragment.Resolved", "name": "path", "type": "let path: (Path.module_, t('b)) => Path.t('b)", "docs": null, "kind": "value", "args": [["", "Path.module_"], ["", "t('b)"]]}, {"path": "Paths.Fragment.Resolved", "name": "identifier", "type": "let identifier: (Identifier.signature, t('b)) => Identifier.t('b)", "docs": null, "kind": "value", "args": [["", "Identifier.signature"], ["", "t('b)"]]}, {"path": "Paths.Fragment.Resolved", "name": "equal", "type": "let equal: (t('b), t('b)) => bool", "docs": null, "kind": "value", "args": [["", "t('b)"], ["", "t('b)"]]}, {"path": "Paths.Fragment.Resolved", "name": "hash", "type": "let hash: t('b) => int", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Paths.Fragment.Resolved", "name": "split", "type": "let split: t('b) => (string, option(t('b)))", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Paths.Fragment", "name": "Resolved", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any_sort\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>identifier\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>path\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split", "docs": null, "kind": "module"}, {"path": "Paths.Fragment", "name": "kind", "type": "type kind = Paths_types.Kind.fragment", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "sort", "type": "type sort = [ `Branch | `Root ]", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "raw", "type": "type raw('b, 'c) = \n  | Resolved(Paths_types.Resolved_fragment.raw('b, 'c)): raw('b, 'c)\n  | Dot(signature, string): raw([&lt; kind ], [&lt; sort &gt; `Branch ])\n", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "t", "type": "type t('b) = raw('b, [ `Branch ])", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "signature", "type": "type signature = raw(Paths_types.Kind.fragment_module, [ `Branch | `Root ])", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "module_", "type": "type module_ = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "type_", "type": "type type_ = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Paths.Fragment", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Paths.Fragment", "name": "any_sort", "type": "let any_sort: raw('b, 'c) => raw('b, sort)", "docs": null, "kind": "value", "args": [["", "raw('b, 'c)"]]}, {"path": "Paths.Fragment", "name": "any", "type": "let any: t('b) => any", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Paths.Fragment", "name": "path", "type": "let path: (Path.module_, t('b)) => Path.t('b)", "docs": null, "kind": "value", "args": [["", "Path.module_"], ["", "t('b)"]]}, {"path": "Paths.Fragment", "name": "equal", "type": "let equal: (t('b), t('b)) => bool", "docs": null, "kind": "value", "args": [["", "t('b)"], ["", "t('b)"]]}, {"path": "Paths.Fragment", "name": "hash", "type": "let hash: t('b) => int", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Paths.Fragment", "name": "split", "type": "let split: t('b) => (string, option(t('b)))", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Paths", "name": "Fragment", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any_sort\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>path\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Resolved", "docs": "<p>OCaml path fragments for specifying module substitutions</p>\n", "kind": "module"}, {"path": "", "name": "Paths", "type": "<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Fragment\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Identifier\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Kind", "docs": null, "kind": "module"}, {"path": "Parser_", "name": "sections_allowed", "type": "type sections_allowed = Ast.sections_allowed", "docs": null, "kind": "type"}, {"path": "Parser_", "name": "parse_comment", "type": "let parse_comment: (\n  ~permissive: bool,\n  ~sections_allowed: sections_allowed,\n  ~containing_definition: Paths.Identifier.label_parent,\n  ~location: Lexing.position,\n  ~text: string\n) => Error.with_warnings(Error.result(Comment.docs, Error.t))", "docs": null, "kind": "value", "args": [["permissive", "bool"], ["sections_allowed", "sections_allowed"], ["containing_definition", "Paths.Identifier.label_parent"], ["location", "Lexing.position"], ["text", "string"]]}, {"path": "Parser_", "name": "errors_to_warnings", "type": "let errors_to_warnings: Error.with_warnings(\n  Error.result(Comment.docs, Error.t)\n) => Error.with_warnings(Error.result(Comment.docs, Error.t))", "docs": "<p>Converts fatal errors to warnings for now, by emitting a blank comment. This is a temporary measure, because the code that drives the parser does not yet have proper error handling written.</p>\n", "kind": "value", "args": [["", "Error.with_warnings(Error.result(Comment.docs, Error.t))"]]}, {"path": "", "name": "Parser_", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>errors_to_warnings\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parse_comment\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>sections_allowed", "docs": null, "kind": "module"}, {"path": "Parse_error.Location", "name": "point", "type": "type point = {line: int, column: int}", "docs": null, "kind": "type"}, {"path": "Parse_error.Location", "name": "span", "type": "type span = {file: string, start: point, end_: point}", "docs": null, "kind": "type"}, {"path": "Parse_error.Location", "name": "with_location", "type": "type with_location('a) = {location: span, value: 'a}", "docs": null, "kind": "type"}, {"path": "Parse_error.Location", "name": "at", "type": "let at: (span, 'a) => with_location('a)", "docs": null, "kind": "value", "args": [["", "span"], ["", "'a"]]}, {"path": "Parse_error.Location", "name": "location", "type": "let location: with_location('a) => span", "docs": null, "kind": "value", "args": [["", "with_location('a)"]]}, {"path": "Parse_error.Location", "name": "value", "type": "let value: with_location('a) => 'a", "docs": null, "kind": "value", "args": [["", "with_location('a)"]]}, {"path": "Parse_error.Location", "name": "map", "type": "let map: ('a => 'b, with_location('a)) => with_location('b)", "docs": null, "kind": "value", "args": [["", "'a => 'b"], ["", "with_location('a)"]]}, {"path": "Parse_error.Location", "name": "same", "type": "let same: (with_location('a), 'b) => with_location('b)", "docs": null, "kind": "value", "args": [["", "with_location('a)"], ["", "'b"]]}, {"path": "Parse_error.Location", "name": "span", "type": "let span: list(span) => span", "docs": null, "kind": "value", "args": [["", "list(span)"]]}, {"path": "Parse_error", "name": "Location", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>at\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>location\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>map\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>same\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>span\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>point\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>span\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>with_location", "docs": null, "kind": "module"}, {"path": "Parse_error.Error", "name": "full_location_payload", "type": "type full_location_payload = {location: Location_.span, message: string}", "docs": null, "kind": "type"}, {"path": "Parse_error.Error", "name": "filename_only_payload", "type": "type filename_only_payload = {file: string, message: string}", "docs": null, "kind": "type"}, {"path": "Parse_error.Error", "name": "t", "type": "type t = [ `With_filename_only of filename_only_payload\n| `With_full_location of full_location_payload ]", "docs": null, "kind": "type"}, {"path": "Parse_error.Error", "name": "with_warnings", "type": "type with_warnings('a) = {result: 'a, warnings: list(t)}", "docs": null, "kind": "type"}, {"path": "Parse_error.Error", "name": "make", "type": "let make: (string, Location_.span) => t", "docs": null, "kind": "value", "args": [["", "string"], ["", "Location_.span"]]}, {"path": "Parse_error.Error", "name": "filename_only", "type": "let filename_only: (string, string) => t", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Parse_error.Error", "name": "format", "type": "let format: Pervasives.format4('a, unit, string, Location_.span => t) => 'a", "docs": null, "kind": "value", "args": [["", "Pervasives.format4('a, unit, string, Location_.span => t)"]]}, {"path": "Parse_error.Error", "name": "to_string", "type": "let to_string: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Parse_error.Error", "name": "result", "type": "type result('a, 'b) = | Ok('a) | Error('b)\n", "docs": null, "kind": "type"}, {"path": "Parse_error.Error", "name": "raise_exception", "type": "let raise_exception: t => 'a", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Parse_error.Error", "name": "to_exception", "type": "let to_exception: result('a, t) => 'a", "docs": null, "kind": "value", "args": [["", "result('a, t)"]]}, {"path": "Parse_error.Error", "name": "catch", "type": "let catch: unit => 'a => result('a, t)", "docs": null, "kind": "value", "args": [["", "unit => 'a"]]}, {"path": "Parse_error.Error", "name": "shed_warnings", "type": "let shed_warnings: with_warnings('a) => 'a", "docs": null, "kind": "value", "args": [["", "with_warnings('a)"]]}, {"path": "Parse_error", "name": "Error", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>catch\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filename_only\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>format\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>raise_exception\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shed_warnings\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_exception\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_string\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>filename_only_payload\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>full_location_payload\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>result\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>with_warnings", "docs": null, "kind": "module"}, {"path": "Parse_error", "name": "bad_markup", "type": "let bad_markup: (string, Location.span) => Error.t", "docs": null, "kind": "value", "args": [["", "string"], ["", "Location.span"]]}, {"path": "Parse_error", "name": "bad_section_level", "type": "let bad_section_level: (string, Location.span) => Error.t", "docs": null, "kind": "value", "args": [["", "string"], ["", "Location.span"]]}, {"path": "Parse_error", "name": "cannot_be_empty", "type": "let cannot_be_empty: (~what: string, Location.span) => Error.t", "docs": null, "kind": "value", "args": [["what", "string"], ["", "Location.span"]]}, {"path": "Parse_error", "name": "must_begin_on_its_own_line", "type": "let must_begin_on_its_own_line: (~what: string, Location.span) => Error.t", "docs": null, "kind": "value", "args": [["what", "string"], ["", "Location.span"]]}, {"path": "Parse_error", "name": "must_be_followed_by_whitespace", "type": "let must_be_followed_by_whitespace: (~what: string, Location.span) => Error.t", "docs": null, "kind": "value", "args": [["what", "string"], ["", "Location.span"]]}, {"path": "Parse_error", "name": "not_allowed", "type": "let not_allowed: (\n  ~?suggestion: option(string),\n  ~what: string,\n  ~in_what: string,\n  Location.span\n) => Error.t", "docs": null, "kind": "value", "args": [["suggestion", "string (optional)"], ["what", "string"], ["in_what", "string"], ["", "Location.span"]]}, {"path": "Parse_error", "name": "no_leading_whitespace_in_verbatim", "type": "let no_leading_whitespace_in_verbatim: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "no_trailing_whitespace_in_verbatim", "type": "let no_trailing_whitespace_in_verbatim: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "only_one_title_allowed", "type": "let only_one_title_allowed: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "sections_not_allowed", "type": "let sections_not_allowed: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "stray_at", "type": "let stray_at: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "stray_cr", "type": "let stray_cr: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "truncated_before", "type": "let truncated_before: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "truncated_param", "type": "let truncated_param: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "truncated_raise", "type": "let truncated_raise: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "truncated_see", "type": "let truncated_see: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "unknown_tag", "type": "let unknown_tag: (string, Location.span) => Error.t", "docs": null, "kind": "value", "args": [["", "string"], ["", "Location.span"]]}, {"path": "Parse_error", "name": "unpaired_right_brace", "type": "let unpaired_right_brace: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "Parse_error", "name": "unpaired_right_bracket", "type": "let unpaired_right_bracket: Location.span => Error.t", "docs": null, "kind": "value", "args": [["", "Location.span"]]}, {"path": "", "name": "Parse_error", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bad_markup\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bad_section_level\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cannot_be_empty\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>must_be_followed_by_whitespace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>must_begin_on_its_own_line\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>no_leading_whitespace_in_verbatim\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>no_trailing_whitespace_in_verbatim\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>not_allowed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>only_one_title_allowed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>sections_not_allowed\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stray_at\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stray_cr\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>truncated_before\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>truncated_param\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>truncated_raise\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>truncated_see\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unknown_tag\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unpaired_right_brace\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unpaired_right_bracket\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Error\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Location", "docs": null, "kind": "module"}, {"path": "Odoc_lexer", "name": "input", "type": "type input = {file: string, offset_to_location: int => Location_.point, lexbuf: Lexing.lexbuf}", "docs": null, "kind": "type"}, {"path": "Odoc_lexer", "name": "token", "type": "let token: (input, Lexing.lexbuf) => Location_.with_location(Token.t)", "docs": null, "kind": "value", "args": [["", "input"], ["", "Lexing.lexbuf"]]}, {"path": "", "name": "Odoc_lexer", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>token\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>input", "docs": null, "kind": "module"}, {"path": "Location_", "name": "point", "type": "type point = {line: int, column: int}", "docs": null, "kind": "type"}, {"path": "Location_", "name": "span", "type": "type span = {file: string, start: point, end_: point}", "docs": null, "kind": "type"}, {"path": "Location_", "name": "with_location", "type": "type with_location('a) = {location: span, value: 'a}", "docs": null, "kind": "type"}, {"path": "Location_", "name": "at", "type": "let at: (span, 'a) => with_location('a)", "docs": null, "kind": "value", "args": [["", "span"], ["", "'a"]]}, {"path": "Location_", "name": "location", "type": "let location: with_location('a) => span", "docs": null, "kind": "value", "args": [["", "with_location('a)"]]}, {"path": "Location_", "name": "value", "type": "let value: with_location('a) => 'a", "docs": null, "kind": "value", "args": [["", "with_location('a)"]]}, {"path": "Location_", "name": "map", "type": "let map: ('a => 'b, with_location('a)) => with_location('b)", "docs": null, "kind": "value", "args": [["", "'a => 'b"], ["", "with_location('a)"]]}, {"path": "Location_", "name": "same", "type": "let same: (with_location('a), 'b) => with_location('b)", "docs": null, "kind": "value", "args": [["", "with_location('a)"], ["", "'b"]]}, {"path": "Location_", "name": "span", "type": "let span: list(span) => span", "docs": null, "kind": "value", "args": [["", "list(span)"]]}, {"path": "", "name": "Location_", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>at\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>location\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>map\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>same\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>span\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>point\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>span\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>with_location", "docs": null, "kind": "module"}, {"path": "", "name": "Lang", "type": "", "docs": null, "kind": "module"}, {"path": "Helpers.Paths.Kind", "name": "any", "type": "type any = [ `InstanceVariable\n| `Module\n| `ModuleType\n| `Method\n| `Field\n| `Label\n| `Type\n| `Exception\n| `Class\n| `Page\n| `ClassType\n| `Value\n| `Constructor\n| `Extension ]", "docs": "<p>Any possible referent</p>\n", "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "signature", "type": "type signature = [ `Module | `ModuleType ]", "docs": "<p>A referent that can contain signature items</p>\n", "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "class_signature", "type": "type class_signature = [ `Class | `ClassType ]", "docs": "<p>A referent that can contain class signature items</p>\n", "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "datatype", "type": "type datatype = [ `Type ]", "docs": "<p>A referent that can contain datatype items</p>\n", "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "page", "type": "type page = [ `Page ]", "docs": "<p>A referent that can contain page items</p>\n", "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "parent", "type": "type parent = [ `Module | `ModuleType | `Type | `Class | `ClassType ]", "docs": "<p>A referent that can contain other items</p>\n", "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "label_parent", "type": "type label_parent = [ `Module | `ModuleType | `Type | `Class | `Page | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier", "type": "type identifier = any", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_module", "type": "type identifier_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_module_type", "type": "type identifier_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_type", "type": "type identifier_type = [ `Type ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_constructor", "type": "type identifier_constructor = [ `Constructor ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_field", "type": "type identifier_field = [ `Field ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_extension", "type": "type identifier_extension = [ `Extension ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_exception", "type": "type identifier_exception = [ `Exception ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_value", "type": "type identifier_value = [ `Value ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_class", "type": "type identifier_class = [ `Class ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_class_type", "type": "type identifier_class_type = [ `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_method", "type": "type identifier_method = [ `Method ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_instance_variable", "type": "type identifier_instance_variable = [ `InstanceVariable ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_label", "type": "type identifier_label = [ `Label ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "identifier_page", "type": "type identifier_page = [ `Page ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "path", "type": "type path = [ `Module | `ModuleType | `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "path_module", "type": "type path_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "path_module_type", "type": "type path_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "path_type", "type": "type path_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "path_class_type", "type": "type path_class_type = [ `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "fragment", "type": "type fragment = [ `Module | `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "fragment_module", "type": "type fragment_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "fragment_type", "type": "type fragment_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference", "type": "type reference = any", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_module", "type": "type reference_module = [ `Module ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_module_type", "type": "type reference_module_type = [ `ModuleType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_type", "type": "type reference_type = [ `Type | `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_constructor", "type": "type reference_constructor = [ `Exception | `Constructor | `Extension ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_field", "type": "type reference_field = [ `Field ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_extension", "type": "type reference_extension = [ `Exception | `Extension ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_exception", "type": "type reference_exception = [ `Exception ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_value", "type": "type reference_value = [ `Value ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_class", "type": "type reference_class = [ `Class ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_class_type", "type": "type reference_class_type = [ `Class | `ClassType ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_method", "type": "type reference_method = [ `Method ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_instance_variable", "type": "type reference_instance_variable = [ `InstanceVariable ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_label", "type": "type reference_label = [ `Label ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Kind", "name": "reference_page", "type": "type reference_page = [ `Page ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths", "name": "Kind", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>any\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>class_signature\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>datatype\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>fragment_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_class\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_exception\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_method\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>identifier_value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>label_parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>parent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>path_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_class_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_constructor\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_exception\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_extension\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_field\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_instance_variable\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_label\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_method\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_module_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_page\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_type\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_value\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>signature", "docs": null, "kind": "module"}, {"path": "Helpers.Paths.Identifier", "name": "kind", "type": "type kind = Paths_types.Kind.identifier", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "t", "type": "type t('kind) = \n  | Root(Root.t, string): t([&lt; kind &gt; `Module ])\n  | Page(Root.t, string): t([&lt; kind &gt; `Page ])\n  | Module(signature, string): t([&lt; kind &gt; `Module ])\n  | Argument(signature, int, string): t([&lt; kind &gt; `Module ])\n  | ModuleType(signature, string): t([&lt; kind &gt; `ModuleType ])\n  | Type(signature, string): t([&lt; kind &gt; `Type ])\n  | CoreType(string): t([&lt; kind &gt; `Type ])\n  | Constructor(datatype, string): t([&lt; kind &gt; `Constructor ])\n  | Field(parent, string): t([&lt; kind &gt; `Field ])\n  | Extension(signature, string): t([&lt; kind &gt; `Extension ])\n  | Exception(signature, string): t([&lt; kind &gt; `Exception ])\n  | CoreException(string): t([&lt; kind &gt; `Exception ])\n  | Value(signature, string): t([&lt; kind &gt; `Value ])\n  | Class(signature, string): t([&lt; kind &gt; `Class ])\n  | ClassType(signature, string): t([&lt; kind &gt; `ClassType ])\n  | Method(class_signature, string): t([&lt; kind &gt; `Method ])\n  | InstanceVariable(class_signature, string): t([&lt; kind &gt; `InstanceVariable ])\n  | Label(label_parent, string): t([&lt; kind &gt; `Label ])\n", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "signature", "type": "type signature = t(Paths_types.Kind.signature)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "class_signature", "type": "type class_signature = t(Paths_types.Kind.class_signature)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "datatype", "type": "type datatype = t(Paths_types.Kind.datatype)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "parent", "type": "type parent = t(Paths_types.Kind.parent)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "label_parent", "type": "type label_parent = t(Paths_types.Kind.label_parent)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "module_", "type": "type module_ = t(Paths_types.Kind.identifier_module)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "module_type", "type": "type module_type = t(Paths_types.Kind.identifier_module_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "type_", "type": "type type_ = t(Paths_types.Kind.identifier_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "constructor", "type": "type constructor = t(Paths_types.Kind.identifier_constructor)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "field", "type": "type field = t(Paths_types.Kind.identifier_field)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "extension", "type": "type extension = t(Paths_types.Kind.identifier_extension)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "exception_", "type": "type exception_ = t(Paths_types.Kind.identifier_exception)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "value", "type": "type value = t(Paths_types.Kind.identifier_value)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "class_", "type": "type class_ = t(Paths_types.Kind.identifier_class)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "class_type", "type": "type class_type = t(Paths_types.Kind.identifier_class_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "method_", "type": "type method_ = t(Paths_types.Kind.identifier_method)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "instance_variable", "type": "type instance_variable = t(Paths_types.Kind.identifier_instance_variable)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "label", "type": "type label = t(Paths_types.Kind.identifier_label)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "page", "type": "type page = t(Paths_types.Kind.identifier_page)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "path_module", "type": "type path_module = t(Paths_types.Kind.path_module)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "path_module_type", "type": "type path_module_type = t(Paths_types.Kind.path_module_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "path_type", "type": "type path_type = t(Paths_types.Kind.path_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "path_class_type", "type": "type path_class_type = t(Paths_types.Kind.path_class_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "fragment_module", "type": "type fragment_module = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "fragment_type", "type": "type fragment_type = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_module", "type": "type reference_module = t(Paths_types.Kind.reference_module)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_module_type", "type": "type reference_module_type = t(Paths_types.Kind.reference_module_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_type", "type": "type reference_type = t(Paths_types.Kind.reference_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_constructor", "type": "type reference_constructor = t(Paths_types.Kind.reference_constructor)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_field", "type": "type reference_field = t(Paths_types.Kind.reference_field)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_extension", "type": "type reference_extension = t(Paths_types.Kind.reference_extension)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_exception", "type": "type reference_exception = t(Paths_types.Kind.reference_exception)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_value", "type": "type reference_value = t(Paths_types.Kind.reference_value)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_class", "type": "type reference_class = t(Paths_types.Kind.reference_class)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_class_type", "type": "type reference_class_type = t(Paths_types.Kind.reference_class_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_method", "type": "type reference_method = t(Paths_types.Kind.reference_method)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_instance_variable", "type": "type reference_instance_variable = t(Paths_types.Kind.reference_instance_variable)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_label", "type": "type reference_label = t(Paths_types.Kind.reference_label)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "reference_page", "type": "type reference_page = t(Paths_types.Kind.reference_page)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Identifier", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Helpers.Paths.Identifier", "name": "signature_of_module_type", "type": "let signature_of_module_type: module_type => signature", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Helpers.Paths.Identifier", "name": "class_signature_of_class", "type": "let class_signature_of_class: class_ => class_signature", "docs": null, "kind": "value", "args": [["", "class_"]]}, {"path": "Helpers.Paths.Identifier", "name": "class_signature_of_class_type", "type": "let class_signature_of_class_type: class_type => class_signature", "docs": null, "kind": "value", "args": [["", "class_type"]]}, {"path": "Helpers.Paths.Identifier", "name": "datatype_of_type", "type": "let datatype_of_type: type_ => datatype", "docs": null, "kind": "value", "args": [["", "type_"]]}, {"path": "Helpers.Paths.Identifier", "name": "parent_of_signature", "type": "let parent_of_signature: signature => parent", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Helpers.Paths.Identifier", "name": "parent_of_class_signature", "type": "let parent_of_class_signature: class_signature => parent", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Helpers.Paths.Identifier", "name": "parent_of_datatype", "type": "let parent_of_datatype: datatype => parent", "docs": null, "kind": "value", "args": [["", "datatype"]]}, {"path": "Helpers.Paths.Identifier", "name": "label_parent_of_parent", "type": "let label_parent_of_parent: parent => label_parent", "docs": null, "kind": "value", "args": [["", "parent"]]}, {"path": "Helpers.Paths.Identifier", "name": "label_parent_of_page", "type": "let label_parent_of_page: page => label_parent", "docs": null, "kind": "value", "args": [["", "page"]]}, {"path": "Helpers.Paths.Identifier", "name": "any", "type": "let any: t('kind) => any", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Helpers.Paths.Identifier", "name": "equal", "type": "let equal: (t('kind), t('kind)) => bool", "docs": null, "kind": "value", "args": [["", "t('kind)"], ["", "t('kind)"]]}, {"path": "Helpers.Paths.Identifier", "name": "hash", "type": "let hash: t('kind) => int", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Helpers.Paths.Identifier", "name": "name", "type": "let name: t('kind) => string", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Helpers.Paths.Identifier", "name": "signature_root", "type": "let signature_root: signature => Root.t", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Helpers.Paths.Identifier", "name": "module_root", "type": "let module_root: module_ => Root.t", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Helpers.Paths.Identifier", "name": "module_type_root", "type": "let module_type_root: module_type => Root.t", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Helpers.Paths.Identifier", "name": "class_signature_root", "type": "let class_signature_root: class_signature => Root.t", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Helpers.Paths.Identifier", "name": "label_parent_root", "type": "let label_parent_root: label_parent => Root.t", "docs": null, "kind": "value", "args": [["", "label_parent"]]}, {"path": "Helpers.Paths", "name": "Identifier", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>datatype_of_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_page\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_parent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_type_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>name\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_class_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_datatype\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_root", "docs": "<p>Identifiers for definitions</p>\n", "kind": "module"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "kind", "type": "type kind = Paths_types.Kind.fragment", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "sort", "type": "type sort = [ `Branch | `Root ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "raw", "type": "type raw('b, 'c) = \n  | Root: raw('b, [&lt; sort &gt; `Root ])\n  | Subst(Paths_types.Resolved_path.module_type, module_): raw(\n    [&lt; kind &gt; `Module ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | SubstAlias(Paths_types.Resolved_path.module_, module_): raw(\n    [&lt; kind &gt; `Module ],\n    [&lt; sort &gt; `Branch ]\n  )\n  | Module(signature, string): raw([&lt; kind &gt; `Module ], [&lt; sort &gt; `Branch ])\n  | Type(signature, string): raw([&lt; kind &gt; `Type ], [&lt; sort &gt; `Branch ])\n  | Class(signature, string): raw([&lt; kind &gt; `Class ], [&lt; sort &gt; `Branch ])\n  | ClassType(signature, string): raw([&lt; kind &gt; `ClassType ], [&lt; sort &gt; `Branch ])\n", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "t", "type": "type t('b) = raw('b, [ `Branch ])", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "signature", "type": "type signature = raw(Paths_types.Kind.fragment_module, [ `Branch | `Root ])", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "module_", "type": "type module_ = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "type_", "type": "type type_ = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "any", "type": "let any: t('b) => any", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "any_sort", "type": "let any_sort: raw('b, 'c) => raw('b, sort)", "docs": null, "kind": "value", "args": [["", "raw('b, 'c)"]]}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "path", "type": "let path: (Path.module_, t('b)) => Path.t('b)", "docs": null, "kind": "value", "args": [["", "Path.module_"], ["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "identifier", "type": "let identifier: (Identifier.signature, t('b)) => Identifier.t('b)", "docs": null, "kind": "value", "args": [["", "Identifier.signature"], ["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "equal", "type": "let equal: (t('b), t('b)) => bool", "docs": null, "kind": "value", "args": [["", "t('b)"], ["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "hash", "type": "let hash: t('b) => int", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment.Resolved", "name": "split", "type": "let split: t('b) => (string, option(t('b)))", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment", "name": "Resolved", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any_sort\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>identifier\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>path\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split", "docs": null, "kind": "module"}, {"path": "Helpers.Paths.Fragment", "name": "kind", "type": "type kind = Paths_types.Kind.fragment", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "sort", "type": "type sort = [ `Branch | `Root ]", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "raw", "type": "type raw('b, 'c) = \n  | Resolved(Paths_types.Resolved_fragment.raw('b, 'c)): raw('b, 'c)\n  | Dot(signature, string): raw([&lt; kind ], [&lt; sort &gt; `Branch ])\n", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "t", "type": "type t('b) = raw('b, [ `Branch ])", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "signature", "type": "type signature = raw(Paths_types.Kind.fragment_module, [ `Branch | `Root ])", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "module_", "type": "type module_ = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "type_", "type": "type type_ = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Helpers.Paths.Fragment", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Helpers.Paths.Fragment", "name": "any_sort", "type": "let any_sort: raw('b, 'c) => raw('b, sort)", "docs": null, "kind": "value", "args": [["", "raw('b, 'c)"]]}, {"path": "Helpers.Paths.Fragment", "name": "any", "type": "let any: t('b) => any", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment", "name": "path", "type": "let path: (Path.module_, t('b)) => Path.t('b)", "docs": null, "kind": "value", "args": [["", "Path.module_"], ["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment", "name": "equal", "type": "let equal: (t('b), t('b)) => bool", "docs": null, "kind": "value", "args": [["", "t('b)"], ["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment", "name": "hash", "type": "let hash: t('b) => int", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Helpers.Paths.Fragment", "name": "split", "type": "let split: t('b) => (string, option(t('b)))", "docs": null, "kind": "value", "args": [["", "t('b)"]]}, {"path": "Helpers.Paths", "name": "Fragment", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any_sort\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>path\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>split\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Resolved", "docs": "<p>OCaml path fragments for specifying module substitutions</p>\n", "kind": "module"}, {"path": "Helpers", "name": "Paths", "type": "<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Fragment\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Identifier\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Kind", "docs": null, "kind": "module"}, {"path": "Helpers", "name": "read_qualifier", "type": "let read_qualifier: option(string) => Paths.Reference.tag(Paths.Reference.kind)", "docs": null, "kind": "value", "args": [["", "option(string)"]]}, {"path": "Helpers", "name": "read_longident", "type": "let read_longident: string => Paths.Reference.t(Paths.Reference.kind)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Helpers", "name": "read_reference", "type": "let read_reference: string => Paths.Reference.any", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Helpers", "name": "read_path_longident", "type": "let read_path_longident: string => Paths.Path.t([&lt; Paths.Path.kind &gt; `Module ])", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "Helpers", "name": "read_mod_longident", "type": "let read_mod_longident: string => Paths.Reference.module_", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "", "name": "Helpers", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_longident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_mod_longident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_path_longident\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_qualifier\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>read_reference\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Paths", "docs": null, "kind": "module"}, {"path": "Error", "name": "full_location_payload", "type": "type full_location_payload = {location: Location_.span, message: string}", "docs": null, "kind": "type"}, {"path": "Error", "name": "filename_only_payload", "type": "type filename_only_payload = {file: string, message: string}", "docs": null, "kind": "type"}, {"path": "Error", "name": "t", "type": "type t = [ `With_filename_only of filename_only_payload\n| `With_full_location of full_location_payload ]", "docs": null, "kind": "type"}, {"path": "Error", "name": "with_warnings", "type": "type with_warnings('a) = {result: 'a, warnings: list(t)}", "docs": null, "kind": "type"}, {"path": "Error", "name": "make", "type": "let make: (string, Location_.span) => t", "docs": null, "kind": "value", "args": [["", "string"], ["", "Location_.span"]]}, {"path": "Error", "name": "filename_only", "type": "let filename_only: (string, string) => t", "docs": null, "kind": "value", "args": [["", "string"], ["", "string"]]}, {"path": "Error", "name": "format", "type": "let format: Pervasives.format4('a, unit, string, Location_.span => t) => 'a", "docs": null, "kind": "value", "args": [["", "Pervasives.format4('a, unit, string, Location_.span => t)"]]}, {"path": "Error", "name": "to_string", "type": "let to_string: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Error", "name": "result", "type": "type result('a, 'b) = | Ok('a) | Error('b)\n", "docs": null, "kind": "type"}, {"path": "Error", "name": "raise_exception", "type": "let raise_exception: t => 'a", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "Error", "name": "to_exception", "type": "let to_exception: result('a, t) => 'a", "docs": null, "kind": "value", "args": [["", "result('a, t)"]]}, {"path": "Error", "name": "catch", "type": "let catch: unit => 'a => result('a, t)", "docs": null, "kind": "value", "args": [["", "unit => 'a"]]}, {"path": "Error", "name": "shed_warnings", "type": "let shed_warnings: with_warnings('a) => 'a", "docs": null, "kind": "value", "args": [["", "with_warnings('a)"]]}, {"path": "", "name": "Error", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>catch\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>filename_only\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>format\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>raise_exception\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shed_warnings\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_exception\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>to_string\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>filename_only_payload\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>full_location_payload\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>result\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>with_warnings", "docs": null, "kind": "module"}, {"path": "Comment", "name": "Path", "type": "", "docs": null, "kind": "module"}, {"path": "Comment", "name": "Reference", "type": "", "docs": null, "kind": "module"}, {"path": "Comment.Identifier", "name": "kind", "type": "type kind = Paths_types.Kind.identifier", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "t", "type": "type t('kind) = \n  | Root(Root.t, string): t([&lt; kind &gt; `Module ])\n  | Page(Root.t, string): t([&lt; kind &gt; `Page ])\n  | Module(signature, string): t([&lt; kind &gt; `Module ])\n  | Argument(signature, int, string): t([&lt; kind &gt; `Module ])\n  | ModuleType(signature, string): t([&lt; kind &gt; `ModuleType ])\n  | Type(signature, string): t([&lt; kind &gt; `Type ])\n  | CoreType(string): t([&lt; kind &gt; `Type ])\n  | Constructor(datatype, string): t([&lt; kind &gt; `Constructor ])\n  | Field(parent, string): t([&lt; kind &gt; `Field ])\n  | Extension(signature, string): t([&lt; kind &gt; `Extension ])\n  | Exception(signature, string): t([&lt; kind &gt; `Exception ])\n  | CoreException(string): t([&lt; kind &gt; `Exception ])\n  | Value(signature, string): t([&lt; kind &gt; `Value ])\n  | Class(signature, string): t([&lt; kind &gt; `Class ])\n  | ClassType(signature, string): t([&lt; kind &gt; `ClassType ])\n  | Method(class_signature, string): t([&lt; kind &gt; `Method ])\n  | InstanceVariable(class_signature, string): t([&lt; kind &gt; `InstanceVariable ])\n  | Label(label_parent, string): t([&lt; kind &gt; `Label ])\n", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "signature", "type": "type signature = t(Paths_types.Kind.signature)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "class_signature", "type": "type class_signature = t(Paths_types.Kind.class_signature)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "datatype", "type": "type datatype = t(Paths_types.Kind.datatype)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "parent", "type": "type parent = t(Paths_types.Kind.parent)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "label_parent", "type": "type label_parent = t(Paths_types.Kind.label_parent)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "module_", "type": "type module_ = t(Paths_types.Kind.identifier_module)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "module_type", "type": "type module_type = t(Paths_types.Kind.identifier_module_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "type_", "type": "type type_ = t(Paths_types.Kind.identifier_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "constructor", "type": "type constructor = t(Paths_types.Kind.identifier_constructor)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "field", "type": "type field = t(Paths_types.Kind.identifier_field)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "extension", "type": "type extension = t(Paths_types.Kind.identifier_extension)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "exception_", "type": "type exception_ = t(Paths_types.Kind.identifier_exception)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "value", "type": "type value = t(Paths_types.Kind.identifier_value)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "class_", "type": "type class_ = t(Paths_types.Kind.identifier_class)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "class_type", "type": "type class_type = t(Paths_types.Kind.identifier_class_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "method_", "type": "type method_ = t(Paths_types.Kind.identifier_method)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "instance_variable", "type": "type instance_variable = t(Paths_types.Kind.identifier_instance_variable)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "label", "type": "type label = t(Paths_types.Kind.identifier_label)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "page", "type": "type page = t(Paths_types.Kind.identifier_page)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "path_module", "type": "type path_module = t(Paths_types.Kind.path_module)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "path_module_type", "type": "type path_module_type = t(Paths_types.Kind.path_module_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "path_type", "type": "type path_type = t(Paths_types.Kind.path_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "path_class_type", "type": "type path_class_type = t(Paths_types.Kind.path_class_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "fragment_module", "type": "type fragment_module = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "fragment_type", "type": "type fragment_type = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_module", "type": "type reference_module = t(Paths_types.Kind.reference_module)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_module_type", "type": "type reference_module_type = t(Paths_types.Kind.reference_module_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_type", "type": "type reference_type = t(Paths_types.Kind.reference_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_constructor", "type": "type reference_constructor = t(Paths_types.Kind.reference_constructor)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_field", "type": "type reference_field = t(Paths_types.Kind.reference_field)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_extension", "type": "type reference_extension = t(Paths_types.Kind.reference_extension)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_exception", "type": "type reference_exception = t(Paths_types.Kind.reference_exception)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_value", "type": "type reference_value = t(Paths_types.Kind.reference_value)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_class", "type": "type reference_class = t(Paths_types.Kind.reference_class)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_class_type", "type": "type reference_class_type = t(Paths_types.Kind.reference_class_type)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_method", "type": "type reference_method = t(Paths_types.Kind.reference_method)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_instance_variable", "type": "type reference_instance_variable = t(Paths_types.Kind.reference_instance_variable)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_label", "type": "type reference_label = t(Paths_types.Kind.reference_label)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "reference_page", "type": "type reference_page = t(Paths_types.Kind.reference_page)", "docs": null, "kind": "type"}, {"path": "Comment.Identifier", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Comment.Identifier", "name": "signature_of_module_type", "type": "let signature_of_module_type: module_type => signature", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Comment.Identifier", "name": "class_signature_of_class", "type": "let class_signature_of_class: class_ => class_signature", "docs": null, "kind": "value", "args": [["", "class_"]]}, {"path": "Comment.Identifier", "name": "class_signature_of_class_type", "type": "let class_signature_of_class_type: class_type => class_signature", "docs": null, "kind": "value", "args": [["", "class_type"]]}, {"path": "Comment.Identifier", "name": "datatype_of_type", "type": "let datatype_of_type: type_ => datatype", "docs": null, "kind": "value", "args": [["", "type_"]]}, {"path": "Comment.Identifier", "name": "parent_of_signature", "type": "let parent_of_signature: signature => parent", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Comment.Identifier", "name": "parent_of_class_signature", "type": "let parent_of_class_signature: class_signature => parent", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Comment.Identifier", "name": "parent_of_datatype", "type": "let parent_of_datatype: datatype => parent", "docs": null, "kind": "value", "args": [["", "datatype"]]}, {"path": "Comment.Identifier", "name": "label_parent_of_parent", "type": "let label_parent_of_parent: parent => label_parent", "docs": null, "kind": "value", "args": [["", "parent"]]}, {"path": "Comment.Identifier", "name": "label_parent_of_page", "type": "let label_parent_of_page: page => label_parent", "docs": null, "kind": "value", "args": [["", "page"]]}, {"path": "Comment.Identifier", "name": "any", "type": "let any: t('kind) => any", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Comment.Identifier", "name": "equal", "type": "let equal: (t('kind), t('kind)) => bool", "docs": null, "kind": "value", "args": [["", "t('kind)"], ["", "t('kind)"]]}, {"path": "Comment.Identifier", "name": "hash", "type": "let hash: t('kind) => int", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Comment.Identifier", "name": "name", "type": "let name: t('kind) => string", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Comment.Identifier", "name": "signature_root", "type": "let signature_root: signature => Root.t", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Comment.Identifier", "name": "module_root", "type": "let module_root: module_ => Root.t", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Comment.Identifier", "name": "module_type_root", "type": "let module_type_root: module_type => Root.t", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Comment.Identifier", "name": "class_signature_root", "type": "let class_signature_root: class_signature => Root.t", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Comment.Identifier", "name": "label_parent_root", "type": "let label_parent_root: label_parent => Root.t", "docs": null, "kind": "value", "args": [["", "label_parent"]]}, {"path": "Comment", "name": "Identifier", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>datatype_of_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_page\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_parent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_type_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>name\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_class_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_datatype\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_root", "docs": null, "kind": "module"}, {"path": "Comment", "name": "with_location", "type": "type with_location('a) = Location_.with_location('a)", "docs": null, "kind": "type"}, {"path": "Comment", "name": "style", "type": "type style = [ `Bold | `Superscript | `Emphasis | `Subscript | `Italic ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "leaf_inline_element", "type": "type leaf_inline_element = [ `Code_span of string | `Word of string | `Space ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "non_link_inline_element", "type": "type non_link_inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Styled of style * non_link_inline_element with_location list ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "link_content", "type": "type link_content = list(with_location(non_link_inline_element))", "docs": null, "kind": "type"}, {"path": "Comment", "name": "inline_element", "type": "type inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Reference of Reference.any * link_content\n| `Link of string * link_content\n| `Styled of style * inline_element with_location list ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "nestable_block_element", "type": "type nestable_block_element = [ `Paragraph of inline_element with_location list\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Modules of Reference.module_ list\n| `Example of string * string\n| `Code_block of string\n| `Verbatim of string ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "tag", "type": "type tag = [ `Param of string * nestable_block_element with_location list\n| `Return of nestable_block_element with_location list\n| `See of\n    [ `Url | `Document | `File ] * string *\n    nestable_block_element with_location list\n| `Closed\n| `Open\n| `Before of string * nestable_block_element with_location list\n| `Canonical of Path.module_ * Reference.module_\n| `Version of string\n| `Deprecated of nestable_block_element with_location list\n| `Inline\n| `Raise of string * nestable_block_element with_location list\n| `Since of string\n| `Author of string ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "heading_level", "type": "type heading_level = [ `Subsubsection | `Section | `Title | `Subsection ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "block_element", "type": "type block_element = [ `Paragraph of inline_element with_location list\n| `Tag of tag\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Heading of heading_level * Identifier.label * link_content\n| `Modules of Reference.module_ list\n| `Code_block of string\n| `Example of string * string\n| `Verbatim of string ]", "docs": null, "kind": "type"}, {"path": "Comment", "name": "docs", "type": "type docs = list(with_location(block_element))", "docs": null, "kind": "type"}, {"path": "Comment", "name": "docs_or_stop", "type": "type docs_or_stop = [ `Stop | `Docs of docs ]", "docs": null, "kind": "type"}, {"path": "", "name": "Comment", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>block_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docs\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docs_or_stop\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>heading_level\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>inline_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>leaf_inline_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>link_content\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>nestable_block_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>non_link_inline_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>style\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>with_location\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Identifier\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Path\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Reference", "docs": null, "kind": "module"}, {"path": "Ast", "name": "Path", "type": "", "docs": null, "kind": "module"}, {"path": "Ast", "name": "Reference", "type": "", "docs": null, "kind": "module"}, {"path": "Ast.Identifier", "name": "kind", "type": "type kind = Paths_types.Kind.identifier", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "t", "type": "type t('kind) = \n  | Root(Root.t, string): t([&lt; kind &gt; `Module ])\n  | Page(Root.t, string): t([&lt; kind &gt; `Page ])\n  | Module(signature, string): t([&lt; kind &gt; `Module ])\n  | Argument(signature, int, string): t([&lt; kind &gt; `Module ])\n  | ModuleType(signature, string): t([&lt; kind &gt; `ModuleType ])\n  | Type(signature, string): t([&lt; kind &gt; `Type ])\n  | CoreType(string): t([&lt; kind &gt; `Type ])\n  | Constructor(datatype, string): t([&lt; kind &gt; `Constructor ])\n  | Field(parent, string): t([&lt; kind &gt; `Field ])\n  | Extension(signature, string): t([&lt; kind &gt; `Extension ])\n  | Exception(signature, string): t([&lt; kind &gt; `Exception ])\n  | CoreException(string): t([&lt; kind &gt; `Exception ])\n  | Value(signature, string): t([&lt; kind &gt; `Value ])\n  | Class(signature, string): t([&lt; kind &gt; `Class ])\n  | ClassType(signature, string): t([&lt; kind &gt; `ClassType ])\n  | Method(class_signature, string): t([&lt; kind &gt; `Method ])\n  | InstanceVariable(class_signature, string): t([&lt; kind &gt; `InstanceVariable ])\n  | Label(label_parent, string): t([&lt; kind &gt; `Label ])\n", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "signature", "type": "type signature = t(Paths_types.Kind.signature)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "class_signature", "type": "type class_signature = t(Paths_types.Kind.class_signature)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "datatype", "type": "type datatype = t(Paths_types.Kind.datatype)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "parent", "type": "type parent = t(Paths_types.Kind.parent)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "label_parent", "type": "type label_parent = t(Paths_types.Kind.label_parent)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "module_", "type": "type module_ = t(Paths_types.Kind.identifier_module)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "module_type", "type": "type module_type = t(Paths_types.Kind.identifier_module_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "type_", "type": "type type_ = t(Paths_types.Kind.identifier_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "constructor", "type": "type constructor = t(Paths_types.Kind.identifier_constructor)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "field", "type": "type field = t(Paths_types.Kind.identifier_field)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "extension", "type": "type extension = t(Paths_types.Kind.identifier_extension)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "exception_", "type": "type exception_ = t(Paths_types.Kind.identifier_exception)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "value", "type": "type value = t(Paths_types.Kind.identifier_value)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "class_", "type": "type class_ = t(Paths_types.Kind.identifier_class)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "class_type", "type": "type class_type = t(Paths_types.Kind.identifier_class_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "method_", "type": "type method_ = t(Paths_types.Kind.identifier_method)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "instance_variable", "type": "type instance_variable = t(Paths_types.Kind.identifier_instance_variable)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "label", "type": "type label = t(Paths_types.Kind.identifier_label)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "page", "type": "type page = t(Paths_types.Kind.identifier_page)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "path_module", "type": "type path_module = t(Paths_types.Kind.path_module)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "path_module_type", "type": "type path_module_type = t(Paths_types.Kind.path_module_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "path_type", "type": "type path_type = t(Paths_types.Kind.path_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "path_class_type", "type": "type path_class_type = t(Paths_types.Kind.path_class_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "fragment_module", "type": "type fragment_module = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "fragment_type", "type": "type fragment_type = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_module", "type": "type reference_module = t(Paths_types.Kind.reference_module)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_module_type", "type": "type reference_module_type = t(Paths_types.Kind.reference_module_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_type", "type": "type reference_type = t(Paths_types.Kind.reference_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_constructor", "type": "type reference_constructor = t(Paths_types.Kind.reference_constructor)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_field", "type": "type reference_field = t(Paths_types.Kind.reference_field)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_extension", "type": "type reference_extension = t(Paths_types.Kind.reference_extension)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_exception", "type": "type reference_exception = t(Paths_types.Kind.reference_exception)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_value", "type": "type reference_value = t(Paths_types.Kind.reference_value)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_class", "type": "type reference_class = t(Paths_types.Kind.reference_class)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_class_type", "type": "type reference_class_type = t(Paths_types.Kind.reference_class_type)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_method", "type": "type reference_method = t(Paths_types.Kind.reference_method)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_instance_variable", "type": "type reference_instance_variable = t(Paths_types.Kind.reference_instance_variable)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_label", "type": "type reference_label = t(Paths_types.Kind.reference_label)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "reference_page", "type": "type reference_page = t(Paths_types.Kind.reference_page)", "docs": null, "kind": "type"}, {"path": "Ast.Identifier", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Ast.Identifier", "name": "signature_of_module_type", "type": "let signature_of_module_type: module_type => signature", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Ast.Identifier", "name": "class_signature_of_class", "type": "let class_signature_of_class: class_ => class_signature", "docs": null, "kind": "value", "args": [["", "class_"]]}, {"path": "Ast.Identifier", "name": "class_signature_of_class_type", "type": "let class_signature_of_class_type: class_type => class_signature", "docs": null, "kind": "value", "args": [["", "class_type"]]}, {"path": "Ast.Identifier", "name": "datatype_of_type", "type": "let datatype_of_type: type_ => datatype", "docs": null, "kind": "value", "args": [["", "type_"]]}, {"path": "Ast.Identifier", "name": "parent_of_signature", "type": "let parent_of_signature: signature => parent", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Ast.Identifier", "name": "parent_of_class_signature", "type": "let parent_of_class_signature: class_signature => parent", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Ast.Identifier", "name": "parent_of_datatype", "type": "let parent_of_datatype: datatype => parent", "docs": null, "kind": "value", "args": [["", "datatype"]]}, {"path": "Ast.Identifier", "name": "label_parent_of_parent", "type": "let label_parent_of_parent: parent => label_parent", "docs": null, "kind": "value", "args": [["", "parent"]]}, {"path": "Ast.Identifier", "name": "label_parent_of_page", "type": "let label_parent_of_page: page => label_parent", "docs": null, "kind": "value", "args": [["", "page"]]}, {"path": "Ast.Identifier", "name": "any", "type": "let any: t('kind) => any", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Ast.Identifier", "name": "equal", "type": "let equal: (t('kind), t('kind)) => bool", "docs": null, "kind": "value", "args": [["", "t('kind)"], ["", "t('kind)"]]}, {"path": "Ast.Identifier", "name": "hash", "type": "let hash: t('kind) => int", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Ast.Identifier", "name": "name", "type": "let name: t('kind) => string", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Ast.Identifier", "name": "signature_root", "type": "let signature_root: signature => Root.t", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Ast.Identifier", "name": "module_root", "type": "let module_root: module_ => Root.t", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Ast.Identifier", "name": "module_type_root", "type": "let module_type_root: module_type => Root.t", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Ast.Identifier", "name": "class_signature_root", "type": "let class_signature_root: class_signature => Root.t", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Ast.Identifier", "name": "label_parent_root", "type": "let label_parent_root: label_parent => Root.t", "docs": null, "kind": "value", "args": [["", "label_parent"]]}, {"path": "Ast", "name": "Identifier", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>datatype_of_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_page\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_parent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_type_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>name\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_class_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_datatype\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_root", "docs": null, "kind": "module"}, {"path": "Ast.Comment", "name": "Path", "type": "", "docs": null, "kind": "module"}, {"path": "Ast.Comment", "name": "Reference", "type": "", "docs": null, "kind": "module"}, {"path": "Ast.Comment.Identifier", "name": "kind", "type": "type kind = Paths_types.Kind.identifier", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "t", "type": "type t('kind) = \n  | Root(Root.t, string): t([&lt; kind &gt; `Module ])\n  | Page(Root.t, string): t([&lt; kind &gt; `Page ])\n  | Module(signature, string): t([&lt; kind &gt; `Module ])\n  | Argument(signature, int, string): t([&lt; kind &gt; `Module ])\n  | ModuleType(signature, string): t([&lt; kind &gt; `ModuleType ])\n  | Type(signature, string): t([&lt; kind &gt; `Type ])\n  | CoreType(string): t([&lt; kind &gt; `Type ])\n  | Constructor(datatype, string): t([&lt; kind &gt; `Constructor ])\n  | Field(parent, string): t([&lt; kind &gt; `Field ])\n  | Extension(signature, string): t([&lt; kind &gt; `Extension ])\n  | Exception(signature, string): t([&lt; kind &gt; `Exception ])\n  | CoreException(string): t([&lt; kind &gt; `Exception ])\n  | Value(signature, string): t([&lt; kind &gt; `Value ])\n  | Class(signature, string): t([&lt; kind &gt; `Class ])\n  | ClassType(signature, string): t([&lt; kind &gt; `ClassType ])\n  | Method(class_signature, string): t([&lt; kind &gt; `Method ])\n  | InstanceVariable(class_signature, string): t([&lt; kind &gt; `InstanceVariable ])\n  | Label(label_parent, string): t([&lt; kind &gt; `Label ])\n", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "any", "type": "type any = t(kind)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "signature", "type": "type signature = t(Paths_types.Kind.signature)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "class_signature", "type": "type class_signature = t(Paths_types.Kind.class_signature)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "datatype", "type": "type datatype = t(Paths_types.Kind.datatype)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "parent", "type": "type parent = t(Paths_types.Kind.parent)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "label_parent", "type": "type label_parent = t(Paths_types.Kind.label_parent)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "module_", "type": "type module_ = t(Paths_types.Kind.identifier_module)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "module_type", "type": "type module_type = t(Paths_types.Kind.identifier_module_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "type_", "type": "type type_ = t(Paths_types.Kind.identifier_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "constructor", "type": "type constructor = t(Paths_types.Kind.identifier_constructor)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "field", "type": "type field = t(Paths_types.Kind.identifier_field)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "extension", "type": "type extension = t(Paths_types.Kind.identifier_extension)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "exception_", "type": "type exception_ = t(Paths_types.Kind.identifier_exception)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "value", "type": "type value = t(Paths_types.Kind.identifier_value)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "class_", "type": "type class_ = t(Paths_types.Kind.identifier_class)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "class_type", "type": "type class_type = t(Paths_types.Kind.identifier_class_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "method_", "type": "type method_ = t(Paths_types.Kind.identifier_method)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "instance_variable", "type": "type instance_variable = t(Paths_types.Kind.identifier_instance_variable)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "label", "type": "type label = t(Paths_types.Kind.identifier_label)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "page", "type": "type page = t(Paths_types.Kind.identifier_page)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "path_module", "type": "type path_module = t(Paths_types.Kind.path_module)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "path_module_type", "type": "type path_module_type = t(Paths_types.Kind.path_module_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "path_type", "type": "type path_type = t(Paths_types.Kind.path_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "path_class_type", "type": "type path_class_type = t(Paths_types.Kind.path_class_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "fragment_module", "type": "type fragment_module = t(Paths_types.Kind.fragment_module)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "fragment_type", "type": "type fragment_type = t(Paths_types.Kind.fragment_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_module", "type": "type reference_module = t(Paths_types.Kind.reference_module)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_module_type", "type": "type reference_module_type = t(Paths_types.Kind.reference_module_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_type", "type": "type reference_type = t(Paths_types.Kind.reference_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_constructor", "type": "type reference_constructor = t(Paths_types.Kind.reference_constructor)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_field", "type": "type reference_field = t(Paths_types.Kind.reference_field)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_extension", "type": "type reference_extension = t(Paths_types.Kind.reference_extension)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_exception", "type": "type reference_exception = t(Paths_types.Kind.reference_exception)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_value", "type": "type reference_value = t(Paths_types.Kind.reference_value)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_class", "type": "type reference_class = t(Paths_types.Kind.reference_class)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_class_type", "type": "type reference_class_type = t(Paths_types.Kind.reference_class_type)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_method", "type": "type reference_method = t(Paths_types.Kind.reference_method)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_instance_variable", "type": "type reference_instance_variable = t(Paths_types.Kind.reference_instance_variable)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_label", "type": "type reference_label = t(Paths_types.Kind.reference_label)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "reference_page", "type": "type reference_page = t(Paths_types.Kind.reference_page)", "docs": null, "kind": "type"}, {"path": "Ast.Comment.Identifier", "name": "signature_of_module", "type": "let signature_of_module: module_ => signature", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Ast.Comment.Identifier", "name": "signature_of_module_type", "type": "let signature_of_module_type: module_type => signature", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Ast.Comment.Identifier", "name": "class_signature_of_class", "type": "let class_signature_of_class: class_ => class_signature", "docs": null, "kind": "value", "args": [["", "class_"]]}, {"path": "Ast.Comment.Identifier", "name": "class_signature_of_class_type", "type": "let class_signature_of_class_type: class_type => class_signature", "docs": null, "kind": "value", "args": [["", "class_type"]]}, {"path": "Ast.Comment.Identifier", "name": "datatype_of_type", "type": "let datatype_of_type: type_ => datatype", "docs": null, "kind": "value", "args": [["", "type_"]]}, {"path": "Ast.Comment.Identifier", "name": "parent_of_signature", "type": "let parent_of_signature: signature => parent", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Ast.Comment.Identifier", "name": "parent_of_class_signature", "type": "let parent_of_class_signature: class_signature => parent", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Ast.Comment.Identifier", "name": "parent_of_datatype", "type": "let parent_of_datatype: datatype => parent", "docs": null, "kind": "value", "args": [["", "datatype"]]}, {"path": "Ast.Comment.Identifier", "name": "label_parent_of_parent", "type": "let label_parent_of_parent: parent => label_parent", "docs": null, "kind": "value", "args": [["", "parent"]]}, {"path": "Ast.Comment.Identifier", "name": "label_parent_of_page", "type": "let label_parent_of_page: page => label_parent", "docs": null, "kind": "value", "args": [["", "page"]]}, {"path": "Ast.Comment.Identifier", "name": "any", "type": "let any: t('kind) => any", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Ast.Comment.Identifier", "name": "equal", "type": "let equal: (t('kind), t('kind)) => bool", "docs": null, "kind": "value", "args": [["", "t('kind)"], ["", "t('kind)"]]}, {"path": "Ast.Comment.Identifier", "name": "hash", "type": "let hash: t('kind) => int", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Ast.Comment.Identifier", "name": "name", "type": "let name: t('kind) => string", "docs": null, "kind": "value", "args": [["", "t('kind)"]]}, {"path": "Ast.Comment.Identifier", "name": "signature_root", "type": "let signature_root: signature => Root.t", "docs": null, "kind": "value", "args": [["", "signature"]]}, {"path": "Ast.Comment.Identifier", "name": "module_root", "type": "let module_root: module_ => Root.t", "docs": null, "kind": "value", "args": [["", "module_"]]}, {"path": "Ast.Comment.Identifier", "name": "module_type_root", "type": "let module_type_root: module_type => Root.t", "docs": null, "kind": "value", "args": [["", "module_type"]]}, {"path": "Ast.Comment.Identifier", "name": "class_signature_root", "type": "let class_signature_root: class_signature => Root.t", "docs": null, "kind": "value", "args": [["", "class_signature"]]}, {"path": "Ast.Comment.Identifier", "name": "label_parent_root", "type": "let label_parent_root: label_parent => Root.t", "docs": null, "kind": "value", "args": [["", "label_parent"]]}, {"path": "Ast.Comment", "name": "Identifier", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>any\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_of_class_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>class_signature_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>datatype_of_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>equal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hash\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_page\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_of_parent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>label_parent_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>module_type_root\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>name\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_class_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_datatype\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>parent_of_signature\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_of_module_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>signature_root", "docs": null, "kind": "module"}, {"path": "Ast.Comment", "name": "with_location", "type": "type with_location('a) = Location_.with_location('a)", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "style", "type": "type style = [ `Bold | `Superscript | `Emphasis | `Subscript | `Italic ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "leaf_inline_element", "type": "type leaf_inline_element = [ `Code_span of string | `Word of string | `Space ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "non_link_inline_element", "type": "type non_link_inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Styled of style * non_link_inline_element with_location list ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "link_content", "type": "type link_content = list(with_location(non_link_inline_element))", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "inline_element", "type": "type inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Reference of Reference.any * link_content\n| `Link of string * link_content\n| `Styled of style * inline_element with_location list ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "nestable_block_element", "type": "type nestable_block_element = [ `Paragraph of inline_element with_location list\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Modules of Reference.module_ list\n| `Example of string * string\n| `Code_block of string\n| `Verbatim of string ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "tag", "type": "type tag = [ `Param of string * nestable_block_element with_location list\n| `Return of nestable_block_element with_location list\n| `See of\n    [ `Url | `Document | `File ] * string *\n    nestable_block_element with_location list\n| `Closed\n| `Open\n| `Before of string * nestable_block_element with_location list\n| `Canonical of Path.module_ * Reference.module_\n| `Version of string\n| `Deprecated of nestable_block_element with_location list\n| `Inline\n| `Raise of string * nestable_block_element with_location list\n| `Since of string\n| `Author of string ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "heading_level", "type": "type heading_level = [ `Subsubsection | `Section | `Title | `Subsection ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "block_element", "type": "type block_element = [ `Paragraph of inline_element with_location list\n| `Tag of tag\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Heading of heading_level * Identifier.label * link_content\n| `Modules of Reference.module_ list\n| `Code_block of string\n| `Example of string * string\n| `Verbatim of string ]", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "docs", "type": "type docs = list(with_location(block_element))", "docs": null, "kind": "type"}, {"path": "Ast.Comment", "name": "docs_or_stop", "type": "type docs_or_stop = [ `Stop | `Docs of docs ]", "docs": null, "kind": "type"}, {"path": "Ast", "name": "Comment", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>block_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docs\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docs_or_stop\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>heading_level\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>inline_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>leaf_inline_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>link_content\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>nestable_block_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>non_link_inline_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>style\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>with_location\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Identifier\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Path\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Reference", "docs": null, "kind": "module"}, {"path": "Ast", "name": "with_location", "type": "type with_location('a) = Location_.with_location('a)", "docs": null, "kind": "type"}, {"path": "Ast", "name": "reference_kind", "type": "type reference_kind = [ `Simple | `With_text ]", "docs": null, "kind": "type"}, {"path": "Ast", "name": "inline_element", "type": "type inline_element = [ `Code_span of string\n| `Word of string\n| `Space\n| `Reference of\n    reference_kind * Reference.any * inline_element with_location list\n| `Link of string * inline_element with_location list\n| `Styled of Comment.style * inline_element with_location list ]", "docs": null, "kind": "type"}, {"path": "Ast", "name": "nestable_block_element", "type": "type nestable_block_element = [ `Paragraph of inline_element with_location list\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Modules of Reference.module_ list\n| `Example of string * string\n| `Code_block of string\n| `Verbatim of string ]", "docs": null, "kind": "type"}, {"path": "Ast", "name": "tag", "type": "type tag = [ `Param of string * nestable_block_element with_location list\n| `Return of nestable_block_element with_location list\n| `See of\n    [ `Url | `Document | `File ] * string *\n    nestable_block_element with_location list\n| `Closed\n| `Open\n| `Before of string * nestable_block_element with_location list\n| `Canonical of Path.module_ * Reference.module_\n| `Version of string\n| `Deprecated of nestable_block_element with_location list\n| `Inline\n| `Raise of string * nestable_block_element with_location list\n| `Since of string\n| `Author of string ]", "docs": null, "kind": "type"}, {"path": "Ast", "name": "block_element", "type": "type block_element = [ `Paragraph of inline_element with_location list\n| `Tag of tag\n| `List of\n    [ `Unordered | `Ordered ] *\n    nestable_block_element with_location list list\n| `Doc of string\n| `Heading of int * string option * inline_element with_location list\n| `Modules of Reference.module_ list\n| `Code_block of string\n| `Example of string * string\n| `Verbatim of string ]", "docs": null, "kind": "type"}, {"path": "Ast", "name": "docs", "type": "type docs = list(with_location(block_element))", "docs": null, "kind": "type"}, {"path": "Ast", "name": "sections_allowed", "type": "type sections_allowed = [ `No_titles | `All | `None ]", "docs": null, "kind": "type"}, {"path": "", "name": "Ast", "type": "<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>block_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>docs\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>inline_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>nestable_block_element\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reference_kind\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>sections_allowed\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>with_location\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Comment\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Identifier\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Path\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Reference", "docs": null, "kind": "module"}])