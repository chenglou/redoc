window.DATA = {"ReadMlast/1012": {"name": "read_mli_ast", "moduleName": "ReadMlast", "html": "let <span class=\"pattern-ident\" data-local-define='ReadMlast/1012' data-type=\"Pervasives.in_channel => Parsetree.signature\">read_mli_ast</span>: <span class=\"type-constructor\" data-stamp-missing>in_channel</span> =&gt; <span class=\"type-constructor\" data-stamp-missing>Parsetree.signature</span> = <span class=\"pattern-ident\" data-local-define='ReadMlast/1013' data-type=\"Pervasives.in_channel\">ic</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ReadMlast/1014' data-type=\"string\">magic</span> = <span class=\"ident\" data-type=\"string\" data-stamp-missing>Config.ast_intf_magic_number</span>;\n  let <span class=\"pattern-ident\" data-local-define='ReadMlast/1015' data-type=\"string\">buffer</span> = <span class=\"ident\" data-type=\"(Pervasives.in_channel, int) => string\" data-stamp-missing>really_input_string</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1013'>ic</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1014'>magic</span>));\n  assert (<span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1015'>buffer</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1014'>magic</span>); /* already checked by apply_rewriter */\n  <span class=\"ident\" data-type=\"Pervasives.ref(string)\" data-stamp-missing>Location.input_name</span> <span class=\"operator\" data-type=\"(Pervasives.ref(string), string) => unit\" data-stamp-missing>:=</span> <span class=\"ident\" data-type=\"Pervasives.in_channel => string\" data-stamp-missing>input_value</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1013'>ic</span>);\n  <span class=\"ident\" data-type=\"Pervasives.in_channel => Parsetree.signature\" data-stamp-missing>input_value</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1013'>ic</span>);\n}", "values": [], "chars": 298, "lines": 6, "type": "Pervasives.in_channel => Parsetree.signature"},
"Highlighting/1266": {"name": "pushHashList", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1266' data-type=\"(Hashtbl.t('a, list('a)), 'a, 'a) => unit\">pushHashList</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1267' data-type=\"Hashtbl.t('a, list('a))\">hash</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1268' data-type=\"'a\">key</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1269' data-type=\"'a\">value</span>) =&gt; <span class=\"ident\" data-type=\"(Hashtbl.t('a, list('a)), 'a, list('a)) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, list('a))\" data-local-use='Highlighting/1267'>hash</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1268'>key</span>, switch (<span class=\"ident\" data-type=\"(Hashtbl.t('a, list('a)), 'a) => list('a)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, list('a))\" data-local-use='Highlighting/1267'>hash</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1268'>key</span>)) {\n| exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1269'><span class=\"constructor\" data-type=\"list('a)\">value</span></span></span>]\n| <span class=\"pattern-ident\" data-local-define='Highlighting/1270' data-type=\"list('a)\">items</span> =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1269'>value</span>, ...<span class=\"ident\" data-type=\"list('a)\" data-local-use='Highlighting/1270'>items</span></span>]\n})", "values": [], "chars": 167, "lines": 3, "type": "(Hashtbl.t('a, list('a)), 'a, 'a) => unit"},
"CliToInput/1056": {"name": "isNative", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1056' data-type=\"Json.t => bool\">isNative</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1057' data-type=\"Json.t\">config</span> =&gt; <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;entries&quot;</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1057'>config</span>) <span class=\"operator\" data-type=\"(option(Json.t), option(Json.t)) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"option(Json.t)\">None</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;allowed-build-kinds&quot;</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1057'>config</span>) <span class=\"operator\" data-type=\"(option(Json.t), option(Json.t)) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"option(Json.t)\">None</span>", "values": [], "chars": 111, "lines": 0, "type": "Json.t => bool"},
"CodeHighlight/1256": {"name": "collectRanges", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1256' data-type=\"Cmt_format.binary_annots => list((Location.t, string))\">collectRanges</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1257' data-type=\"Cmt_format.binary_annots\">cmt</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1258' data-type=\"Pervasives.ref(list((Location.t, string)))\">tags</span> = <span class=\"ident\" data-type=\"list((Location.t, string)) => Pervasives.ref(\n  list((Location.t, string))\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list((Location.t, string))\">[]</span>);\n  <span class=\"ident\" data-type=\"(\n  Cmt_format.binary_annots,\n  (Location.t, string) => unit\n) => unit\" data-global-use='CodeHighlight/1048'>iterTags</span>(<span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='CodeHighlight/1257'>cmt</span>, (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1259' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1260' data-type=\"string\">tag</span>) =&gt; <span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1259'>loc</span>.<span class=\"field\" data-type=\"bool\">Location.loc_ghost</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"constructor\" data-type=\"unit\">()</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"Pervasives.ref(list((Location.t, string)))\" data-local-use='CodeHighlight/1258'>tags</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list((Location.t, string))),\n  list((Location.t, string))\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list((Location.t, string))\">(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1259'>loc</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1260'>tag</span>), ...<span class=\"ident\" data-type=\"Pervasives.ref(list((Location.t, string)))\" data-local-use='CodeHighlight/1258'>tags</span><span class=\"operator\" data-type=\"Pervasives.ref(list((Location.t, string))) => list(\n  (Location.t, string)\n)\" data-stamp-missing>^</span></span>]);\n  <span class=\"ident\" data-type=\"Pervasives.ref(list((Location.t, string)))\" data-local-use='CodeHighlight/1258'>tags</span><span class=\"operator\" data-type=\"Pervasives.ref(list((Location.t, string))) => list(\n  (Location.t, string)\n)\" data-stamp-missing>^</span>;\n}", "values": [{"id": "CodeHighlight/1048", "name": "iterTags", "moduleName": "CodeHighlight"}], "chars": 156, "lines": 4, "type": "Cmt_format.binary_annots => list((Location.t, string))"},
"GenerateDoc/1130": {"name": "trackToc", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1130' data-type=\"(\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  Omd.element => option(string)\n)\">trackToc</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1132' data-type=\"bool\">~lower=<span class=\"constructor\" data-type=\"bool\">false</span></span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1134' data-type=\"int\">tocLevel</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1135' data-type=\"(\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)\">override</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1136' data-type=\"Pervasives.ref(list((int, string, string, string)))\">tocItems</span> = <span class=\"ident\" data-type=\"list((int, string, string, string)) => Pervasives.ref(\n  list((int, string, string, string))\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list((int, string, string, string))\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1137' data-type=\"(int, string, string, string) => unit\">addToc</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1138' data-type=\"(int, string, string, string)\">item</span> =&gt; <span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='GenerateDoc/1136'>tocItems</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list((int, string, string, string))),\n  list((int, string, string, string))\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list((int, string, string, string))\"><span class=\"ident\" data-type=\"(int, string, string, string)\" data-local-use='GenerateDoc/1138'>item</span>, ...<span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='GenerateDoc/1136'>tocItems</span><span class=\"operator\" data-type=\"Pervasives.ref(list((int, string, string, string))) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>^</span></span>];\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1139' data-type=\"list((int, string, string, string)) => unit\">addTocs</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1140' data-type=\"list((int, string, string, string))\">items</span> =&gt; <span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='GenerateDoc/1136'>tocItems</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list((int, string, string, string))),\n  list((int, string, string, string))\n) => unit\" data-stamp-missing>:=</span> <span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1140'>items</span> <span class=\"operator\" data-type=\"(\n  list((int, string, string, string)),\n  list((int, string, string, string))\n) => list((int, string, string, string))\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='GenerateDoc/1136'>tocItems</span><span class=\"operator\" data-type=\"Pervasives.ref(list((int, string, string, string))) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>^</span>;\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1141' data-type=\"Pervasives.ref(int)\">lastLevel</span> = <span class=\"ident\" data-type=\"int => Pervasives.ref(int)\" data-stamp-missing>ref</span>(<span class=\"int\" data-type=\"int\">0</span>);\n\n  let rec <span class=\"pattern-ident\" data-local-define='GenerateDoc/1142' data-type=\"Omd.element => option(string)\">fullOverride</span> =  (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1144' data-type=\"Omd.element\">element</span>) =&gt; switch <span class=\"ident\" data-type=\"Omd.element\" data-local-use='GenerateDoc/1144'>element</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Omd.element\">Omd.H1</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1145' data-type=\"Omd.t\">inner</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(int, Omd.t) => string\" data-local-use='GenerateDoc/1143'>addHeader</span>(<span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1145'>inner</span>))\n    | <span class=\"pattern-constructor\" data-type=\"Omd.element\">H2</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1146' data-type=\"Omd.t\">inner</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(int, Omd.t) => string\" data-local-use='GenerateDoc/1143'>addHeader</span>(<span class=\"int\" data-type=\"int\">2</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1146'>inner</span>))\n    | <span class=\"pattern-constructor\" data-type=\"Omd.element\">H3</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1147' data-type=\"Omd.t\">inner</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(int, Omd.t) => string\" data-local-use='GenerateDoc/1143'>addHeader</span>(<span class=\"int\" data-type=\"int\">3</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1147'>inner</span>))\n    | <span class=\"pattern-constructor\" data-type=\"Omd.element\">H4</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1148' data-type=\"Omd.t\">inner</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(int, Omd.t) => string\" data-local-use='GenerateDoc/1143'>addHeader</span>(<span class=\"int\" data-type=\"int\">4</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1148'>inner</span>))\n    | <span class=\"pattern-constructor\" data-type=\"Omd.element\">H5</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1149' data-type=\"Omd.t\">inner</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(int, Omd.t) => string\" data-local-use='GenerateDoc/1143'>addHeader</span>(<span class=\"int\" data-type=\"int\">5</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1149'>inner</span>))\n    | _ =&gt; <span class=\"ident\" data-type=\"(\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)\" data-local-use='GenerateDoc/1135'>override</span>(<span class=\"ident\" data-type=\"list((int, string, string, string)) => unit\" data-local-use='GenerateDoc/1139'>addTocs</span>, <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='GenerateDoc/1141'>lastLevel</span>, <span class=\"ident\" data-type=\"Omd.element => option(string)\" data-local-use='GenerateDoc/1142'>fullOverride</span>, <span class=\"ident\" data-type=\"Omd.element\" data-local-use='GenerateDoc/1144'>element</span>)\n  }\n  and <span class=\"pattern-ident\" data-local-define='GenerateDoc/1143' data-type=\"(int, Omd.t) => string\">addHeader</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1150' data-type=\"int\">num</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1151' data-type=\"Omd.t\">inner</span>) =&gt; {\n    <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='GenerateDoc/1141'>lastLevel</span> <span class=\"operator\" data-type=\"(Pervasives.ref(int), int) => unit\" data-stamp-missing>:=</span> <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1150'>num</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>;\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1152' data-type=\"string\">id</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='GenerateDoc/1085'>cleanForLink</span>(<span class=\"ident\" data-type=\"Omd.t => string\" data-stamp-missing>Omd.to_text</span>(<span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1151'>inner</span>));\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1153' data-type=\"string\">id</span> = <span class=\"ident\" data-type=\"bool\" data-local-use='GenerateDoc/1132'>lower</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1152'>id</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1152'>id</span>;\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1154' data-type=\"string\">html</span> = <span class=\"ident\" data-type=\"(\n  ~?override: option(Omd.element => option(string)),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(Omd.code_stylist),\n  Omd.t\n) => string\" data-stamp-missing>Omd.to_html</span>(~override=<span class=\"ident\" data-type=\"(\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)\" data-local-use='GenerateDoc/1135'>override</span>(<span class=\"ident\" data-type=\"list((int, string, string, string)) => unit\" data-local-use='GenerateDoc/1139'>addTocs</span>, <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='GenerateDoc/1141'>lastLevel</span>, <span class=\"ident\" data-type=\"Omd.element => option(string)\" data-local-use='GenerateDoc/1142'>fullOverride</span>), <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1151'>inner</span>);\n    <span class=\"ident\" data-type=\"(int, string, string, string) => unit\" data-local-use='GenerateDoc/1137'>addToc</span>((<span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1134'>tocLevel</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1150'>num</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1154'>html</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1153'>id</span>, <span class=\"string\" data-type=\"string\">&quot;header&quot;</span>));\n    <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, int, string, int) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  int,\n  string,\n  int\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, int, string, int) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, int, string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, int, string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, int, string, int) => string,\n  (string, string, int, string, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int, string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int, string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, int, string, int) => string,\n  (string, int, string, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string, int) => string,\n  (int, string, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string, int) => string,\n  (int, string, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, int) => string,\n  (string, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  int => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  int => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  int => string,\n  int => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  int => string,\n  int => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;#%s&quot; id=&quot;%s&quot;&gt;&lt;h%d&gt;%s&lt;/h%d&gt;&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1153'>id</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1153'>id</span>, <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1150'>num</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1154'>html</span>, <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1150'>num</span>)\n  };\n\n  (<span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='GenerateDoc/1136'>tocItems</span>, <span class=\"ident\" data-type=\"Omd.element => option(string)\" data-local-use='GenerateDoc/1142'>fullOverride</span>)\n}", "values": [{"id": "GenerateDoc/1085", "name": "cleanForLink", "moduleName": "GenerateDoc"}], "chars": 991, "lines": 24, "type": "(\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  Omd.element => option(string)\n)"},
"Markdown/1032": {"name": "makeTokenCollector", "moduleName": "Markdown", "html": "let <span class=\"pattern-ident\" data-local-define='Markdown/1032' data-type=\"PrintType.T.stringifier => (\n  Pervasives.ref(list(Asttypes.label)),\n  PrintType.T.stringifier\n)\">makeTokenCollector</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1033' data-type=\"PrintType.T.stringifier\">base</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Markdown/1034' data-type=\"Pervasives.ref(list(Asttypes.label))\">tokens</span> = <span class=\"ident\" data-type=\"list(Asttypes.label) => Pervasives.ref(list(Asttypes.label))\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list(Asttypes.label)\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Markdown/1035' data-type=\"Asttypes.label => unit\">addToken</span> = <span class=\"pattern-ident\" data-local-define='Markdown/1036' data-type=\"Asttypes.label\">n</span> =&gt; <span class=\"ident\" data-type=\"Pervasives.ref(list(Asttypes.label))\" data-local-use='Markdown/1034'>tokens</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list(Asttypes.label)),\n  list(Asttypes.label)\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list(Asttypes.label)\"><span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1036'>n</span>, ...<span class=\"ident\" data-type=\"Pervasives.ref(list(Asttypes.label))\" data-local-use='Markdown/1034'>tokens</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Asttypes.label)) => list(Asttypes.label)\" data-stamp-missing>^</span></span>];\n  open PrintType.T;\n  /* TODO collect arg labels from expressions */\n  (<span class=\"ident\" data-type=\"Pervasives.ref(list(Asttypes.label))\" data-local-use='Markdown/1034'>tokens</span>, <span data-type=\"PrintType.T.stringifier\">{\n    ...<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1033'>base</span>,\n    expr: (<span class=\"pattern-ident\" data-local-define='Markdown/1043' data-type=\"PrintType.T.stringifier\">printer</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1044' data-type=\"Types.type_expr\">expr</span>) =&gt; {\n      switch (<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Markdown/1044'>expr</span>.<span class=\"field\" data-type=\"Types.type_desc\">Types.desc</span>) {\n      | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tarrow</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1045' data-type=\"Asttypes.label\">label</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1046' data-type=\"Types.type_expr\">arg</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1047' data-type=\"Types.type_expr\">result</span>, _) =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='Markdown/1048' data-type=\"list((Asttypes.label, Types.type_expr))\">args</span>, _) = <span class=\"ident\" data-type=\"(\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)\" data-global-use='PrintType/1008'>PrintType.collectArgs</span>([<span data-type=\"list((Asttypes.label, Types.type_expr))\"><span class=\"constructor\" data-type=\"list((Asttypes.label, Types.type_expr))\">(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1045'>label</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Markdown/1046'>arg</span>)</span></span>], <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Markdown/1047'>result</span>);\n        <span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='Markdown/1048'>args</span> <span class=\"operator\" data-type=\"(\n  list((Asttypes.label, Types.type_expr)),\n  list((Asttypes.label, Types.type_expr)) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (Asttypes.label, Types.type_expr) => unit,\n  list((Asttypes.label, Types.type_expr))\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='Markdown/1049' data-type=\"Asttypes.label\">label</span>, _)) =&gt; {\n          let <span class=\"pattern-ident\" data-local-define='Markdown/1050' data-type=\"Asttypes.label\">label</span> = <span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1049'>label</span> <span class=\"operator\" data-type=\"(Asttypes.label, Asttypes.label) => bool\" data-stamp-missing>!=</span> <span class=\"string\" data-type=\"Asttypes.label\">&quot;&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(Asttypes.label, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1049'>label</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;?&#39; <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"(Asttypes.label, int, int) => Asttypes.label\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1049'>label</span>, <span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"Asttypes.label => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1049'>label</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1049'>label</span>;\n          <span class=\"ident\" data-type=\"Asttypes.label => unit\" data-local-use='Markdown/1035'>addToken</span>(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1050'>label</span>)\n        });\n      }\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      };\n      <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1033'>base</span>.<span class=\"field\" data-type=\"(PrintType.T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1043'>printer</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Markdown/1044'>expr</span>)\n    },\n    path: (<span class=\"pattern-ident\" data-local-define='Markdown/1038' data-type=\"PrintType.T.stringifier\">printer</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1039' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1040' data-type=\"PrintType.pathType\">pathType</span>) =&gt; {\n      switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='Markdown/1039'>path</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>({<span class=\"pattern-ident\" data-local-define='Markdown/1041' data-type=\"string\">name</span>})\n      | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(_, <span class=\"pattern-ident\" data-local-define='Markdown/1041' data-type=\"string\">name</span>, _) =&gt; <span class=\"ident\" data-type=\"Asttypes.label => unit\" data-local-use='Markdown/1035'>addToken</span>(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1041'>name</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_, _) =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      };\n      <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1033'>base</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  Path.t,\n  PrintType.pathType\n) => Pretty.doc\">path</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1038'>printer</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Markdown/1039'>path</span>, <span class=\"ident\" data-type=\"PrintType.pathType\" data-local-use='Markdown/1040'>pathType</span>)\n    },\n    ident: (<span class=\"pattern-ident\" data-local-define='Markdown/1051' data-type=\"PrintType.T.stringifier\">printer</span>, {<span class=\"pattern-ident\" data-local-define='Markdown/1052' data-type=\"string\">Ident.name</span>} as i) =&gt; {\n      <span class=\"ident\" data-type=\"Asttypes.label => unit\" data-local-use='Markdown/1035'>addToken</span>(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='Markdown/1052'>name</span>);\n      <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1033'>base</span>.<span class=\"field\" data-type=\"(PrintType.T.stringifier, Ident.t) => Pretty.doc\">ident</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1051'>printer</span>, <span class=\"ident\" data-type=\"Ident.t\" data-local-use='Markdown/1053'>i</span>)\n    }\n  }</span>)\n}", "values": [{"id": "PrintType/1008", "name": "collectArgs", "moduleName": "PrintType"}], "chars": 972, "lines": 33, "type": "PrintType.T.stringifier => (\n  Pervasives.ref(list(Asttypes.label)),\n  PrintType.T.stringifier\n)"},
"SerializeBinary/1012": {"name": "pp_string", "moduleName": "SerializeBinary", "html": "let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1012' data-type=\"(\n  string => 'a,\n  ~?quote: option(char),\n  ~?utf: option(bool),\n  string\n) => 'a\">pp_string</span> = (<span class=\"pattern-ident\" data-local-define='SerializeBinary/1013' data-type=\"string => 'a\">output_string</span>, <span class=\"pattern-ident\" data-local-define='SerializeBinary/1015' data-type=\"char\">~quote=&#39;&quot;&#39;</span>, <span class=\"pattern-ident\" data-local-define='SerializeBinary/1018' data-type=\"bool\">~utf=<span class=\"constructor\" data-type=\"bool\">false</span></span>, <span class=\"pattern-ident\" data-local-define='SerializeBinary/1020' data-type=\"string\">s</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1021' data-type=\"string\">quote_s</span> = <span class=\"ident\" data-type=\"(int, char) => string\" data-stamp-missing>String.make</span>(<span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1015'>quote</span>);\n  <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='SerializeBinary/1021'>quote_s</span>);\n  let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1022' data-type=\"int\">l</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='SerializeBinary/1020'>s</span>);\n  for (i in <span class=\"int\" data-type=\"int\">0</span> to <span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1022'>l</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>) {\n    let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1024' data-type=\"char\">c</span> = <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='SerializeBinary/1020'>s</span>.[<span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1023'>i</span>]</span>;\n    switch <span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1024'>c</span> {\n    | &#39;\\000&#39; when <span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1023'>i</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1022'>l</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='SerializeBinary/1020'>s</span>.[<span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1023'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&lt;</span> &#39;0&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='SerializeBinary/1020'>s</span>.[<span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1023'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&gt;</span> &#39;9&#39; =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\0&quot;</span>)\n    | &#39;\\b&#39; =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\b&quot;</span>)\n    | &#39;\\t&#39; =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\t&quot;</span>)\n    | &#39;\\n&#39; =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\n&quot;</span>)\n    /* This escape sequence is not supported by IE &lt; 9\n          | &#39;\\011&#39; -&gt; &quot;\\\\v&quot;\n       */\n    | &#39;\\012&#39; =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\f&quot;</span>)\n    | &#39;\\\\&#39; when <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span> <span class=\"ident\" data-type=\"bool\" data-local-use='SerializeBinary/1018'>utf</span> =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\\\\\&quot;</span>)\n    | &#39;\\r&#39; =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\r&quot;</span>)\n    | &#39;\\000&#39;..&#39;\\031&#39;\n    | &#39;\\127&#39; =&gt;\n      let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1025' data-type=\"int\">c</span> = <span class=\"ident\" data-type=\"char => int\" data-stamp-missing>Char.code</span>(<span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1024'>c</span>);\n      <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\x&quot;</span>);\n      <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing>Array.unsafe_get</span>(<span class=\"ident\" data-type=\"array(string)\" data-global-use='SerializeBinary/1010'>array_conv</span>, <span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1025'>c</span> <span class=\"ident\" data-type=\"(int, int) => int\" data-stamp-missing>lsr</span> <span class=\"int\" data-type=\"int\">4</span>));\n      <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing>Array.unsafe_get</span>(<span class=\"ident\" data-type=\"array(string)\" data-global-use='SerializeBinary/1010'>array_conv</span>, <span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1025'>c</span> <span class=\"ident\" data-type=\"(int, int) => int\" data-stamp-missing>land</span> <span class=\"int\" data-type=\"int\">15</span>));\n    | &#39;\\128&#39;..&#39;\\255&#39; when <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span> <span class=\"ident\" data-type=\"bool\" data-local-use='SerializeBinary/1018'>utf</span> =&gt;\n      let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1026' data-type=\"int\">c</span> = <span class=\"ident\" data-type=\"char => int\" data-stamp-missing>Char.code</span>(<span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1024'>c</span>);\n      <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\x&quot;</span>);\n      <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing>Array.unsafe_get</span>(<span class=\"ident\" data-type=\"array(string)\" data-global-use='SerializeBinary/1010'>array_conv</span>, <span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1026'>c</span> <span class=\"ident\" data-type=\"(int, int) => int\" data-stamp-missing>lsr</span> <span class=\"int\" data-type=\"int\">4</span>));\n      <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing>Array.unsafe_get</span>(<span class=\"ident\" data-type=\"array(string)\" data-global-use='SerializeBinary/1010'>array_conv</span>, <span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1026'>c</span> <span class=\"ident\" data-type=\"(int, int) => int\" data-stamp-missing>land</span> <span class=\"int\" data-type=\"int\">15</span>));\n    | _ =&gt;\n      if (<span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1024'>c</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1015'>quote</span>) {\n        <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\&quot;</span>);\n        <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing>Array.unsafe_get</span>(<span class=\"ident\" data-type=\"array(string)\" data-global-use='SerializeBinary/1008'>array_str1</span>, <span class=\"ident\" data-type=\"char => int\" data-stamp-missing>Char.code</span>(<span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1024'>c</span>)));\n      } else {\n        <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing>Array.unsafe_get</span>(<span class=\"ident\" data-type=\"array(string)\" data-global-use='SerializeBinary/1008'>array_str1</span>, <span class=\"ident\" data-type=\"char => int\" data-stamp-missing>Char.code</span>(<span class=\"ident\" data-type=\"char\" data-local-use='SerializeBinary/1024'>c</span>)));\n      }\n    };\n  };\n  <span class=\"ident\" data-type=\"string => 'a\" data-local-use='SerializeBinary/1013'>output_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='SerializeBinary/1021'>quote_s</span>);\n}", "values": [{"id": "SerializeBinary/1010", "name": "array_conv", "moduleName": "SerializeBinary"}, {"id": "SerializeBinary/1008", "name": "array_str1", "moduleName": "SerializeBinary"}], "chars": 1313, "lines": 38, "type": "(\n  string => 'a,\n  ~?quote: option(char),\n  ~?utf: option(bool),\n  string\n) => 'a"},
"ReadMlast/1019": {"name": "signature", "moduleName": "ReadMlast", "html": "let <span class=\"pattern-ident\" data-local-define='ReadMlast/1019' data-type=\"string => Parsetree.signature\">signature</span> = <span class=\"pattern-ident\" data-local-define='ReadMlast/1020' data-type=\"string\">fn</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ReadMlast/1021' data-type=\"Pervasives.in_channel\">ic</span> = <span class=\"ident\" data-type=\"string => Pervasives.in_channel\" data-stamp-missing>open_in_bin</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1020'>fn</span>);\n  try {\n    <span class=\"ident\" data-type=\"Pervasives.in_channel => unit\" data-global-use='ReadMlast/1016'>skip_header</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1021'>ic</span>);\n    let <span class=\"pattern-ident\" data-local-define='ReadMlast/1022' data-type=\"Parsetree.signature\">ast</span> = <span class=\"ident\" data-type=\"Pervasives.in_channel => Parsetree.signature\" data-global-use='ReadMlast/1012'>read_mli_ast</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1021'>ic</span>);\n    <span class=\"ident\" data-type=\"Pervasives.in_channel => unit\" data-stamp-missing>close_in</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1021'>ic</span>);\n    <span class=\"ident\" data-type=\"Parsetree.signature\" data-local-use='ReadMlast/1022'>ast</span>\n  } { | <span class=\"pattern-ident\" data-local-define='ReadMlast/1023' data-type=\"exn\">exn</span> =&gt; {<span class=\"ident\" data-type=\"Pervasives.in_channel => unit\" data-stamp-missing>close_in</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1021'>ic</span>); <span class=\"ident\" data-type=\"exn => Parsetree.signature\" data-stamp-missing>raise</span>(<span class=\"ident\" data-type=\"exn\" data-local-use='ReadMlast/1023'>exn</span>)}}\n}", "values": [{"id": "ReadMlast/1016", "name": "skip_header", "moduleName": "ReadMlast"}, {"id": "ReadMlast/1012", "name": "read_mli_ast", "moduleName": "ReadMlast"}], "chars": 183, "lines": 8, "type": "string => Parsetree.signature"},
"SearchScript/1009": {"name": "js", "moduleName": "SearchScript", "html": "let <span class=\"pattern-ident\" data-local-define='SearchScript/1009' data-type=\"string\">js</span> = <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|\n(function() {\n  %s\n\n  var input = document.getElementById(&#39;search-input&#39;);\n  var index = elasticlunr.Index.load(window.searchindex);\n  var config = {bool: &#39;AND&#39;, fields: {title: {boost: 2}, contents: {boost: 1}}, expand: true};\n\n  function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, &#39;\\\\$&amp;&#39;); // $&amp; means the whole matched string\n  }\n\n  var walk = (node, fn) =&gt; {\n    var nodes = [].slice.call(node.childNodes)\n    nodes.forEach(child =&gt; {\n      if (false === fn(child)) return;\n      if (child.parentNode === node) {\n        walk(child, fn)\n      }\n    })\n  }\n\n  var highlightNode = (node, token) =&gt; {\n    walk(node, node =&gt; {\n      if (node.nodeName === &#39;#text&#39;) {\n        let at = 0;\n        let pieces = [];\n        node.textContent.replace(new RegExp(escapeRegExp(token), &#39;gi&#39;), (matched, pos, full) =&gt; {\n          pieces.push(document.createTextNode(full.slice(at, pos)))\n          pieces.push(span({class: &#39;result-highlighted&#39;}, [matched]))\n          at = pos + matched.length\n        })\n        if (pieces.length === 0) {\n          return\n        }\n        if (at &lt; node.textContent.length) {\n          pieces.push(document.createTextNode(node.textContent.slice(at)))\n        }\n        node.replaceWith(...pieces)\n      }\n    })\n  }\n\n  var highlightingNode = (text, tokens) =&gt; {\n    var node = raw(text);\n    tokens.forEach(token =&gt; highlightNode(node, token))\n    return node\n  };\n\n  window.highlightNode = highlightNode\n\n  var search = text =&gt; {\n    var results = index.search(text, config).slice(0, 30);\n    render(document.getElementById(&#39;search-results&#39;), div(\n      {},\n      results.map(({ref, score, doc: {href, title, contents, rendered}}) =&gt; div(\n        {class: &#39;result&#39;},\n        [\n          a({href, class: &#39;title&#39;}, [title]),\n          div({}, [\n            highlightingNode(rendered, text.split(/\\s+/g))\n            // raw(text.split(/\\s+/g).reduce(\n            //   (text, item) =&gt; text.replace(new RegExp(escapeRegExp(item), &#39;ig&#39;), &quot;&lt;span class=&#39;result-highlighted&#39;&gt;$&amp;&lt;/span&gt;&quot;), rendered\n            // ))\n          ])\n        ]\n      ))\n    ))\n  }\n\n  if (location.search.match(/^\\?search=/)) {\n    var query = location.search.slice(&#39;?search=&#39;.length)\n    search(query)\n    input.value = query\n  }\n\n  input.addEventListener(&#39;keyup&#39;, evt =&gt; {\n    var text = evt.target.value\n    window.history.replaceState({}, &#39;&#39;, &#39;?search=&#39; + encodeURIComponent(text))\n    search(text)\n  })\n})();\n|}</span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-global-use='SearchScript/1008'>framework</span>)", "values": [{"id": "SearchScript/1008", "name": "framework", "moduleName": "SearchScript"}], "chars": 2475, "lines": 82, "type": "string"},
"CodeSnippets/1325": {"name": "shouldTest", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1325' data-type=\"State.Model.expectation => bool\">shouldTest</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1326' data-type=\"State.Model.expectation\">expectation</span> =&gt; switch <span class=\"ident\" data-type=\"State.Model.expectation\" data-local-use='CodeSnippets/1326'>expectation</span> {\n| <span class=\"pattern-constructor\" data-type=\"State.Model.expectation\">State.Model.Succeed</span> | <span class=\"pattern-constructor\" data-type=\"State.Model.expectation\">Raise</span> =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n| _ =&gt; <span class=\"constructor\" data-type=\"bool\">false</span>\n}", "values": [], "chars": 105, "lines": 3, "type": "State.Model.expectation => bool"},
"InputToModel/1059": {"name": "processCmt", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1059' data-type=\"('a, string) => (\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\">processCmt</span> = (<span class=\"pattern-ident\" data-local-define='InputToModel/1060' data-type=\"'a\">name</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1061' data-type=\"string\">cmt</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='InputToModel/1062' data-type=\"Cmt_format.binary_annots\">annots</span> = <span class=\"ident\" data-type=\"string => Cmt_format.cmt_infos\" data-stamp-missing>Cmt_format.read_cmt</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1061'>cmt</span>).<span class=\"field\" data-type=\"Cmt_format.binary_annots\">Cmt_format.cmt_annots</span>;\n\n  switch <span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='InputToModel/1062'>annots</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Implementation</span>({<span class=\"pattern-ident\" data-local-define='InputToModel/1063' data-type=\"list(Typedtree.structure_item)\">str_items</span>} as s) =&gt; {\n    /* Printtyped.implementation(Format.str_formatter, s);\n    let out = Format.flush_str_formatter();\n    Files.writeFile(&quot;debug_&quot; ++ name ++ &quot;.typ.inft&quot;, out) |&gt; ignore; */\n\n    let <span class=\"pattern-ident\" data-local-define='InputToModel/1067' data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\">stamps</span> = <span class=\"ident\" data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list(\n  (int, ('a, list(string), CmtFindStamps.T.pathType))\n)\" data-global-use='CmtFindStamps/1146'>CmtFindStamps.stampsFromTypedtreeImplementation</span>((<span class=\"ident\" data-type=\"'a\" data-local-use='InputToModel/1060'>name</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>), <span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='InputToModel/1063'>str_items</span>);\n    let (<span class=\"pattern-ident\" data-local-define='InputToModel/1068' data-type=\"option(Omd.t)\">topdoc</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1069' data-type=\"list(State.Model.Docs.doc)\">allDocs</span>) = <span class=\"ident\" data-type=\"list(Typedtree.structure_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='CmtFindDocItems/1176'>CmtFindDocItems.docItemsFromStructure</span>(<span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='InputToModel/1063'>str_items</span>);\n    (<span class=\"ident\" data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\" data-local-use='InputToModel/1067'>stamps</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='InputToModel/1068'>topdoc</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='InputToModel/1069'>allDocs</span>)\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Interface</span>({<span class=\"pattern-ident\" data-local-define='InputToModel/1065' data-type=\"list(Typedtree.signature_item)\">sig_items</span>} as s) =&gt; {\n    /* Printtyped.interface(Format.str_formatter, s);\n    let out = Format.flush_str_formatter();\n    Files.writeFile(&quot;debug_&quot; ++ name ++ &quot;.typ.inft&quot;, out) |&gt; ignore; */\n\n    let <span class=\"pattern-ident\" data-local-define='InputToModel/1070' data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\">stamps</span> = <span class=\"ident\" data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list(\n  (int, ('a, list(string), CmtFindStamps.T.pathType))\n)\" data-global-use='CmtFindStamps/1127'>CmtFindStamps.stampsFromTypedtreeInterface</span>((<span class=\"ident\" data-type=\"'a\" data-local-use='InputToModel/1060'>name</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>), <span class=\"ident\" data-type=\"list(Typedtree.signature_item)\" data-local-use='InputToModel/1065'>sig_items</span>);\n    let (<span class=\"pattern-ident\" data-local-define='InputToModel/1071' data-type=\"option(Omd.t)\">topdoc</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1072' data-type=\"list(State.Model.Docs.doc)\">allDocs</span>) = <span class=\"ident\" data-type=\"list(Typedtree.signature_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='CmtFindDocItems/1179'>CmtFindDocItems.docItemsFromSignature</span>(<span class=\"ident\" data-type=\"list(Typedtree.signature_item)\" data-local-use='InputToModel/1065'>sig_items</span>);\n    (<span class=\"ident\" data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\" data-local-use='InputToModel/1070'>stamps</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='InputToModel/1071'>topdoc</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='InputToModel/1072'>allDocs</span>)\n  }\n  | _ =&gt; <span class=\"ident\" data-type=\"string => (\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Not a valid cmt file&quot;</span>)\n  };\n}", "values": [{"id": "CmtFindStamps/1146", "name": "stampsFromTypedtreeImplementation", "moduleName": "CmtFindStamps"}, {"id": "CmtFindDocItems/1176", "name": "docItemsFromStructure", "moduleName": "CmtFindDocItems"}, {"id": "CmtFindStamps/1127", "name": "stampsFromTypedtreeInterface", "moduleName": "CmtFindStamps"}, {"id": "CmtFindDocItems/1179", "name": "docItemsFromSignature", "moduleName": "CmtFindDocItems"}], "chars": 1009, "lines": 24, "type": "('a, string) => (\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)"},
"DocsTemplate/1013": {"name": "head", "moduleName": "DocsTemplate", "html": "let <span class=\"pattern-ident\" data-local-define='DocsTemplate/1013' data-type=\"(\n  ~relativeToRoot: string,\n  ~?cssLoc: option('a),\n  ~?jsLoc: option('a),\n  string\n) => string\">head</span> = (~<span class=\"pattern-ident\" data-local-define='DocsTemplate/1014' data-type=\"string\">relativeToRoot</span>, <span class=\"pattern-ident\" data-local-define='DocsTemplate/1015' data-type=\"option('a)\">~cssLoc=?</span>, <span class=\"pattern-ident\" data-local-define='DocsTemplate/1016' data-type=\"option('a)\">~jsLoc=?</span>, <span class=\"pattern-ident\" data-local-define='DocsTemplate/1017' data-type=\"string\">name</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string, string) => string,\n  (string, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string) => string,\n  (string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|\n&lt;!doctype html&gt;\n&lt;meta charset=utf8&gt;\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n&lt;link rel=stylesheet href=&quot;%s/style.css&quot;&gt;\n&lt;script refer src=&quot;%s/script.js&quot;&gt;&lt;/script&gt;\n&lt;title&gt;%s&lt;/title&gt;\n&lt;body&gt;\n&lt;script&gt;window.relativeToRoot=%S&lt;/script&gt;\n&lt;script defer src=&quot;%s/block-script.js&quot;&gt;&lt;/script&gt;\n&lt;div id=&#39;error-message&#39;&gt;\n  \226\154\160\239\184\143 Oops! This page doesn&#39;t appear to define a &lt;span&gt;type&lt;/span&gt; called &lt;code&gt;_&lt;/code&gt;.\n&lt;/div&gt;\n|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>,\n<span class=\"ident\" data-type=\"string\" data-local-use='DocsTemplate/1014'>relativeToRoot</span>,\n<span class=\"ident\" data-type=\"string\" data-local-use='DocsTemplate/1014'>relativeToRoot</span>,\n<span class=\"ident\" data-type=\"string\" data-local-use='DocsTemplate/1017'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='DocsTemplate/1014'>relativeToRoot</span>, <span class=\"ident\" data-type=\"string\" data-local-use='DocsTemplate/1014'>relativeToRoot</span>)", "values": [], "chars": 581, "lines": 16, "type": "(\n  ~relativeToRoot: string,\n  ~?cssLoc: option('a),\n  ~?jsLoc: option('a),\n  string\n) => string"},
"GenerateDoc/1038": {"name": "processPath", "moduleName": "GenerateDoc", "html": "let rec <span class=\"pattern-ident\" data-local-define='GenerateDoc/1038' data-type=\"(\n  list((int, (string, list(string), 'a))),\n  list(string),\n  Path.t,\n  'a\n) => (string, list(string), 'a)\">processPath</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1039' data-type=\"list((int, (string, list(string), 'a)))\">stampsToPaths</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1040' data-type=\"list(string)\">collector</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1041' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1042' data-type=\"'a\">ptype</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1041'>path</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>({<span class=\"pattern-ident\" data-local-define='GenerateDoc/1043' data-type=\"string\">name</span>, stamp: <span class=\"int\" data-type=\"int\">0</span>}) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1043'>name</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1040'>collector</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1042'>ptype</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>({<span class=\"pattern-ident\" data-local-define='GenerateDoc/1045' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1044' data-type=\"int\">stamp</span>}) =&gt; switch (<span class=\"ident\" data-type=\"(int, list((int, (string, list(string), 'a)))) => (\n  string,\n  list(string),\n  'a\n)\" data-stamp-missing>List.assoc</span>(<span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1044'>stamp</span>, <span class=\"ident\" data-type=\"list((int, (string, list(string), 'a)))\" data-local-use='GenerateDoc/1039'>stampsToPaths</span>)) {\n  | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; (<span class=\"string\" data-type=\"string\">&quot;&lt;global&gt;&quot;</span>, [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1045'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>], <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1042'>ptype</span>)\n  | (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1048' data-type=\"string\">modName</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1049' data-type=\"list(string)\">inner</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1050' data-type=\"'a\">pp</span>) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1048'>modName</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1049'>inner</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1040'>collector</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1042'>ptype</span>)\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pdot</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1046' data-type=\"Path.t\">inner</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1047' data-type=\"string\">name</span>, _) =&gt; <span class=\"ident\" data-type=\"(\n  list((int, (string, list(string), 'a))),\n  list(string),\n  Path.t,\n  'a\n) => (string, list(string), 'a)\" data-global-use='GenerateDoc/1038'>processPath</span>(<span class=\"ident\" data-type=\"list((int, (string, list(string), 'a)))\" data-local-use='GenerateDoc/1039'>stampsToPaths</span>, [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1047'>name</span>, ...<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1040'>collector</span></span>], <span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1046'>inner</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1042'>ptype</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_, _) =&gt; assert(<span class=\"constructor\" data-type=\"bool\">false</span>)\n  }\n}", "values": [], "chars": 481, "lines": 10, "type": "(\n  list((int, (string, list(string), 'a))),\n  list(string),\n  Path.t,\n  'a\n) => (string, list(string), 'a)"},
"PrepareUtils/1034": {"name": "trimFirst", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1034' data-type=\"(int, string) => string\">trimFirst</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1035' data-type=\"int\">num</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1036' data-type=\"string\">string</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1037' data-type=\"int\">length</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1036'>string</span>);\n  <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1037'>length</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;</span> <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1035'>num</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1036'>string</span>, <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1035'>num</span>, <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1037'>length</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1035'>num</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>\n}", "values": [], "chars": 134, "lines": 3, "type": "(int, string) => string"},
"Template/1008": {"name": "header", "moduleName": "Template", "html": "let <span class=\"pattern-ident\" data-local-define='Template/1008' data-type=\"string\">header</span> = <span class=\"string\" data-type=\"string\">{|\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Reason code&lt;/title&gt;\n&lt;script&gt;\n\n&lt;/script&gt;\n&lt;style&gt;\nbody {\n  padding: 30px;\n}\n.value-identifier {\n    color: #000;\n}\n\n.module-identifier {\n  color: #aa0;\n}\n\n.type-value-identifier,\n.type-module-identifier {\n  color: #1400a5;\n}\n\n.open-module-identifier,\n.type-module-identifier,\n.let-module-identifier,\n.constructor-module-identifier,\n.switch-module-identifier,\n.record-module-identifier,\n.field-module-identifier {\n  color: #a0a;\n}\n\n.open-value-identifier,\n.let-value-identifier,\n.switch-value-identifier,\n.record-value-identifier,\n.field-value-identifier {\n  color: #0aa;\n}\n\n.unused-identifier {\n  color: #00a;\n}\n\n.declaration-var {\n  color: #a50000;\n}\n\n.string {\n    color: #33a20d;\n}\n\n.int {\n    color: #5656cc;\n}\n\n.boolean {\n    color: #ff8f8f;\n}\n\n.float {\n    color: #d49523;\n}\n\n.operator {\n  color: #9b9bff;\n  font-weight: bold;\n}\n\n#main {\n    color: #aaa;\n    white-space: pre;\n    font-family: &#39;sf mono&#39;, monospace;\n}\n.hovered {\n  background-color: #d4ffe2;\n}\n\n.type-hovered {\n  outline: 1px solid #aaa;\n}\n\n/* span {\n  display: inline-block;\n  position: relative;\n}\n.id-badge {\n  position: absolute;\n  font-size: 0.5em;\n  top: 100%;\n  left: 0;\n} */\n\n[data-global]:not(.operator) {\n  /* font-style: italic; */\n  /* background-color: #fff3f2; */\n  /* text-decoration: underline;\n  text-decoration-color: rgba(0, 0, 0, 0.5);\n  text-decoration-style: dashed; */\n}\n\n.open-exposing {\n  box-shadow: 0 0 2px #d2d2d2;\n  border-radius: 3px;\n  padding: 0 2px;\n}\n\n.open-record,\n.open-type {\n  color: #1400a5;\n}\n\n.open-value {\n  color: #000;\n}\n\n\n/* .module-identifier,\n.let-module-identifier,\n.constructor-module-identifier,\n.switch-module-identifier,\n.record-module-identifier,\n.field-module-identifier,\n.let-value-identifier,\n.switch-value-identifier,\n.record-value-identifier,\n.field-value-identifier,\n.unused-identifier,\n.declaration-var {\n  color: #000;\n} */\n\n#type_hover {\n  position: absolute;\n  margin-top: 30px;\n  margin-left: 10px;\n  padding: 5px 10px;\n  box-sizing: border-box;\n  font-family: &#39;sf mono&#39;, monospace;\n  background-color: white;\n  box-shadow: 0 0 2px #aaa;\n}\n\n&lt;/style&gt;\n|}</span>", "values": [], "chars": 2123, "lines": 146, "type": "string"},
"Markdown/1024": {"name": "slice", "moduleName": "Markdown", "html": "let <span class=\"pattern-ident\" data-local-define='Markdown/1024' data-type=\"(string, int, int) => string\">slice</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1025' data-type=\"string\">s</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1026' data-type=\"int\">pre</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1027' data-type=\"int\">post</span>) =&gt; <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1025'>s</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1026'>pre</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1025'>s</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1026'>pre</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1027'>post</span>)", "values": [], "chars": 79, "lines": 0, "type": "(string, int, int) => string"},
"Infix/1012": {"name": "|?", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1012' data-type=\"(option('a), 'a) => 'a\">(|?)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1013' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1014' data-type=\"'a\">d</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1013'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1014'>d</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1015' data-type=\"'a\">v</span>) =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1015'>v</span> }", "values": [], "chars": 60, "lines": 0, "type": "(option('a), 'a) => 'a"},
"PrepareUtils/1016": {"name": "filterNil", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1016' data-type=\"('a => option('a), list('a)) => list('a)\">filterNil</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1017' data-type=\"'a => option('a)\">fn</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1018' data-type=\"list('a)\">items</span>) =&gt; <span class=\"ident\" data-type=\"((list('a), 'a) => list('a), list('a), list('a)) => list('a)\" data-stamp-missing>List.fold_left</span>(\n  (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1019' data-type=\"list('a)\">items</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1020' data-type=\"'a\">item</span>) =&gt; switch (<span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='PrepareUtils/1017'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1020'>item</span>)) {\n  | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1019'>items</span>\n  | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1021' data-type=\"'a\">item</span>) =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1021'>item</span>, ...<span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1019'>items</span></span>]\n  },\n  <span class=\"constructor\" data-type=\"list('a)\">[]</span>,\n  <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1018'>items</span>\n)", "values": [], "chars": 159, "lines": 7, "type": "('a => option('a), list('a)) => list('a)"},
"PrepareUtils/1068": {"name": "either", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1068' data-type=\"(option('a), option('a)) => option('a)\">either</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1069' data-type=\"option('a)\">a</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1070' data-type=\"option('a)\">b</span>) =&gt; switch (<span class=\"ident\" data-type=\"option('a)\" data-local-use='PrepareUtils/1069'>a</span>, <span class=\"ident\" data-type=\"option('a)\" data-local-use='PrepareUtils/1070'>b</span>) {\n| (<span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1071' data-type=\"'a\">a</span>), _) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1071'>a</span>)\n| (_, <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1072' data-type=\"'a\">b</span>)) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1072'>b</span>)\n| _ =&gt; <span class=\"constructor\" data-type=\"option('a)\">None</span>\n}", "values": [], "chars": 104, "lines": 4, "type": "(option('a), option('a)) => option('a)"},
"Descartes/1402": {"name": "resolveType", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1402' data-type=\"(\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]\">resolveType</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1403' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1404' data-type=\"Hashtbl.t(string, 'a)\">typStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1405' data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    (list((string, string)), 'a, list((string, string)))\n  )\n)\">modStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1406' data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    (list((string, string)), 'a, list((string, string)))\n  )\n)\">globalMods</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1407' data-type=\"Path.t\">path</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1407'>path</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1408' data-type=\"int\">stamp</span>}) =&gt; switch (<span class=\"ident\" data-type=\"(Hashtbl.t(string, 'a), string) => 'a\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, 'a)\" data-local-use='Descartes/1404'>typStamps</span>, <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1403'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1408'>stamp</span>))) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; `Local(<span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1403'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1408'>stamp</span>))\n    | _ =&gt; `Global(<span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1403'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1408'>stamp</span>))\n    }\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(_) =&gt; {\n    let ({<span class=\"pattern-ident\" data-local-define='Descartes/1409' data-type=\"int\">Ident.stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1410' data-type=\"string\">name</span>}, <span class=\"pattern-ident\" data-local-define='Descartes/1411' data-type=\"list(string)\">names</span>) = <span class=\"ident\" data-type=\"Path.t => (Ident.t, list(string))\" data-global-use='Descartes/1355'>flatten</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1407'>path</span>);\n    switch (<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1409'>stamp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"int\" data-type=\"int\">0</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"(\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  string\n) => (\n  'a,\n  (list((string, string)), 'a, list((string, string)))\n)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    (list((string, string)), 'a, list((string, string)))\n  )\n)\" data-local-use='Descartes/1406'>globalMods</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1410'>name</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  string\n) => (\n  'a,\n  (list((string, string)), 'a, list((string, string)))\n)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    (list((string, string)), 'a, list((string, string)))\n  )\n)\" data-local-use='Descartes/1405'>modStamps</span>, <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1403'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1409'>stamp</span>))) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {<span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot find module &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1410'>name</span>); `Missing}\n    | <span class=\"pattern-ident\" data-local-define='Descartes/1412' data-type=\"('a, (list((string, string)), 'a, list((string, string))))\">contents</span> =&gt; <span class=\"ident\" data-type=\"(\n  list(string),\n  (\n    'a,\n    (list((string, string)), 'a, list((string, string)))\n  ),\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list(\n          (\n            string,\n            string\n          )\n        )\n      )\n    )\n  )\n) => [&gt; `Global of string | `Local of string | `Missing ]\" data-global-use='Descartes/1378'>deepType</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Descartes/1411'>names</span>, <span class=\"ident\" data-type=\"('a, (list((string, string)), 'a, list((string, string))))\" data-local-use='Descartes/1412'>contents</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, 'a)\" data-local-use='Descartes/1404'>typStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    (list((string, string)), 'a, list((string, string)))\n  )\n)\" data-local-use='Descartes/1405'>modStamps</span>)\n    }\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_, _) =&gt; `Missing\n  }\n}", "values": [{"id": "Descartes/1355", "name": "flatten", "moduleName": "Descartes"}, {"id": "Descartes/1362", "name": "toId", "moduleName": "Descartes"}, {"id": "Descartes/1378", "name": "deepType", "moduleName": "Descartes"}], "chars": 668, "lines": 15, "type": "(\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        list((string, string)),\n        'a,\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]"},
"NewMain/1084": {"name": "compilePackage", "moduleName": "NewMain", "html": "let <span class=\"pattern-ident\" data-local-define='NewMain/1084' data-type=\"State.Model.package => option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\">compilePackage</span> = (<span class=\"pattern-ident\" data-local-define='NewMain/1085' data-type=\"State.Model.package\">package</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"State.Model.package\" data-local-use='NewMain/1085'>package</span>.<span class=\"field\" data-type=\"State.backend\">Model.backend</span> {\n  | <span class=\"pattern-constructor\" data-type=\"State.backend\">NoBackend</span> =&gt; <span class=\"constructor\" data-type=\"option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\">None</span>\n  | <span class=\"pattern-constructor\" data-type=\"State.backend\">Bucklescript</span>(<span class=\"pattern-ident\" data-local-define='NewMain/1086' data-type=\"State.bucklescriptOptions\">bucklescript</span>) =&gt; <span class=\"constructor\" data-type=\"option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\">Some</span>(<span class=\"ident\" data-type=\"(State.bucklescriptOptions, State.Model.package) => (\n  list(State.Model.codeBlock),\n  option((string, option((string, Buffer.t))))\n)\" data-global-use='NewMain/1042'>compileBucklescript</span>(<span class=\"ident\" data-type=\"State.bucklescriptOptions\" data-local-use='NewMain/1086'>bucklescript</span>, <span class=\"ident\" data-type=\"State.Model.package\" data-local-use='NewMain/1085'>package</span>))\n  }\n}", "values": [{"id": "NewMain/1042", "name": "compileBucklescript", "moduleName": "NewMain"}], "chars": 179, "lines": 5, "type": "State.Model.package => option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)"},
"Typing/1401": {"name": "truncateLoc", "moduleName": "Typing", "html": "/**\n   * Ok, so for things that have IDs, e.g. things in this file...\n   * we will just have a mapping of {id: {declaration: opt(ident), usages: list((ident, loc))}}\n   */\n  /* let ident = (path, loc) =&gt; (); */\n  /* let declaration = (ident, loc) =&gt; (); */\n\nlet <span class=\"pattern-ident\" data-local-define='Typing/1401' data-type=\"(int, Location.t) => Location.t\">truncateLoc</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1402' data-type=\"int\">length</span>, {<span class=\"pattern-ident\" data-local-define='Typing/1403' data-type=\"Lexing.position\">Location.loc_start</span>, <span class=\"pattern-ident\" data-local-define='Typing/1404' data-type=\"Lexing.position\">loc_end</span>} as loc) =&gt; <span data-type=\"Location.t\">{\n  ...<span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1405'>loc</span>,\n  <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1403'>loc_start</span>,\n  loc_end: <span data-type=\"Lexing.position\">{\n    ...<span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1403'>loc_start</span>,\n    pos_cnum: <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1403'>loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='Typing/1402'>length</span>\n  }</span>\n}</span>", "values": [], "chars": 429, "lines": 14, "type": "(int, Location.t) => Location.t"},
"Typing/1350": {"name": "ppos", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1350' data-type=\"Lexing.position => string\">ppos</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1351' data-type=\"Lexing.position\">pos</span>) =&gt;\n  Lexing.(\n    <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (int, int, int) => string,\n    unit,\n    string\n  ),\n  int,\n  int,\n  int\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n      <span class=\"constructor\" data-type=\"Pervasives.format((int, int, int) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, int, int) => string,\n  (int, int, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, int, int) => string,\n  (int, int, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, int) => string,\n  (int, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, int) => string,\n  (int, int) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  int => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  int => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  int => string,\n  int => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  int => string,\n  int => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|{&quot;line&quot;: %d, &quot;col&quot;: %d, &quot;chars&quot;: %d}|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>,\n      <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1351'>pos</span>.<span class=\"field\" data-type=\"int\">pos_lnum</span>,\n      <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1351'>pos</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1351'>pos</span>.<span class=\"field\" data-type=\"int\">pos_bol</span>,\n      <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1351'>pos</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>\n    )\n  )", "values": [], "chars": 181, "lines": 8, "type": "Lexing.position => string"},
"CodeSnippets/1205": {"name": "writeDeps", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1205' data-type=\"(\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit\">writeDeps</span> = (~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1206' data-type=\"string => unit\">output_string</span>, ~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1207' data-type=\"list((string, string))\">dependencyDirs</span>, ~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1208' data-type=\"list(string)\">stdlibRequires</span>, ~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1209' data-type=\"'a\">bsRoot</span>, ~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1210' data-type=\"string\">base</span>) =&gt; {\n  /* let depsToLoad = dependencyDirs |&gt; List.map(((dir, jsDir)) =&gt; Files.readDirectory(dir) |&gt; List.filter(name =&gt; Filename.check_suffix(name, &quot;.cmi&quot;)) |&gt; List.map(name =&gt; dir /+ name)) |&gt; List.concat; */\n  /* let out = open_out(dest); */\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1211' data-type=\"list((string, string))\">depsMap</span> = <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CodeSnippets/1207'>dependencyDirs</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list(\n    list((string, string))\n  )\n) => list(list((string, string)))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string) => list((string, string)),\n  list((string, string))\n) => list(list((string, string)))\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1212' data-type=\"string\">dir</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1213' data-type=\"string\">jsDir</span>)) =&gt; <span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.readDirectory</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1212'>dir</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => bool, list(string)) => list(string)\" data-stamp-missing>List.filter</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1214' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1214'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.cmi&quot;</span>)) <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1215' data-type=\"string\">name</span> =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1216' data-type=\"string\">path</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1212'>dir</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1215'>name</span>;\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1217' data-type=\"string\">cmj</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1215'>name</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.cmj&quot;</span>;\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1218' data-type=\"string\">js</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1215'>name</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.js&quot;</span>;\n\n    <span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;ocaml.load_module(\\&quot;/static/cmis/&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1215'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;, &quot;</span>);\n    <span class=\"ident\" data-type=\"(\n  string => unit,\n  ~?quote: option(char),\n  ~?utf: option(bool),\n  string\n) => unit\" data-global-use='SerializeBinary/1012'>SerializeBinary.pp_string</span>(<span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>, <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1216'>path</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;file not readable &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1216'>path</span>);\n    <span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;,\\n\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1217'>cmj</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;, &quot;</span>);\n    <span class=\"ident\" data-type=\"(\n  string => unit,\n  ~?quote: option(char),\n  ~?utf: option(bool),\n  string\n) => unit\" data-global-use='SerializeBinary/1012'>SerializeBinary.pp_string</span>(<span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>, <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1216'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.cmj&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;cmj not readable &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1216'>path</span>);\n    <span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;);\\n&quot;</span>);\n\n    (<span class=\"string\" data-type=\"string\">&quot;stdlib&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.uncapitalize</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1215'>name</span>)), <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1213'>jsDir</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1218'>js</span>)\n  })) <span class=\"operator\" data-type=\"(\n  list(list((string, string))),\n  list(list((string, string))) => list(\n    (string, string)\n  )\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list((string, string))) => list((string, string))\" data-stamp-missing>List.concat</span>;\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1219' data-type=\"list((string, string))\">depsMap</span> = <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CodeSnippets/1211'>depsMap</span> <span class=\"operator\" data-type=\"(list((string, string)), list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>@</span> (<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1208'>stdlibRequires</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1220' data-type=\"string\">path</span> =&gt; {\n    (<span class=\"string\" data-type=\"string\">&quot;stdlib&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.uncapitalize</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1220'>path</span>))), <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1220'>path</span>)\n  }));\n  <span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;window.bsRequirePaths = {\\n&quot;</span>);\n  <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CodeSnippets/1219'>depsMap</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"((string, string) => unit, list((string, string))) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1221' data-type=\"string\">bsRequire</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1222' data-type=\"string\">path</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>(\n      <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&quot;%s&quot;: &quot;%s&quot;,\n|}</span></span></span></span></span></span></span></span></span></span>,\n        <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1221'>bsRequire</span>,\n        <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1210'>base</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1222'>path</span>)\n      )\n    );\n  });\n  <span class=\"ident\" data-type=\"string => unit\" data-local-use='CodeSnippets/1206'>output_string</span>(<span class=\"string\" data-type=\"string\">&quot;}\\n&quot;</span>);\n  /* close_out(out); */\n}", "values": [{"id": "SerializeBinary/1012", "name": "pp_string", "moduleName": "SerializeBinary"}, {"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 1560, "lines": 32, "type": "(\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: 'a,\n  ~base: string\n) => unit"},
"MainAux/1084": {"name": "filterDuplicates", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1084' data-type=\"list(string) => list(string)\">filterDuplicates</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1085' data-type=\"list(string)\">cmts</span> =&gt; {\n  /* Remove .cmt&#39;s that have .cmti&#39;s */\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1086' data-type=\"Hashtbl.t(string, bool)\">intfs</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(string, bool)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1085'>cmts</span> <span class=\"operator\" data-type=\"(list(string), list(string) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => unit, list(string)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1087' data-type=\"string\">path</span> =&gt; if (<span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1087'>path</span>, <span class=\"string\" data-type=\"string\">&quot;.cmti&quot;</span>)) {\n    <span class=\"ident\" data-type=\"(Hashtbl.t(string, bool), string, bool) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, bool)\" data-local-use='MainAux/1086'>intfs</span>, <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1068'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1087'>path</span>), <span class=\"constructor\" data-type=\"bool\">true</span>)\n  });\n  <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1085'>cmts</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => bool, list(string)) => list(string)\" data-stamp-missing>List.filter</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1088' data-type=\"string\">path</span> =&gt; {\n    <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span>(<span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1088'>path</span>, <span class=\"string\" data-type=\"string\">&quot;.cmt&quot;</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(Hashtbl.t(string, bool), string) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, bool)\" data-local-use='MainAux/1086'>intfs</span>, <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1068'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1088'>path</span>)))\n  });\n}", "values": [{"id": "MainAux/1068", "name": "getName", "moduleName": "MainAux"}], "chars": 349, "lines": 9, "type": "list(string) => list(string)"},
"Infix/1028": {"name": "|?>", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1028' data-type=\"(option('a), 'a => option('a)) => option('a)\">(|?&gt;)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1029' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1030' data-type=\"'a => option('a)\">fn</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1029'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"constructor\" data-type=\"option('a)\">None</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1031' data-type=\"'a\">v</span>) =&gt; <span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='Infix/1030'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1031'>v</span>) }", "values": [], "chars": 69, "lines": 0, "type": "(option('a), 'a => option('a)) => option('a)"},
"DocsTemplate/1009": {"name": "codeBlocks", "moduleName": "DocsTemplate", "html": "let <span class=\"pattern-ident\" data-local-define='DocsTemplate/1009' data-type=\"string\">codeBlocks</span> = <span class=\"string\" data-type=\"string\">{|\n.code-block {\n  position: relative;\n}\n\n.block-target-large {\n  height: 24px;\n  background-color: #afa;\n  cursor: pointer;\n  text-align: center;\n}\n\n.block-target-right {\n  background-color: #afa;\n  cursor: pointer;\n  height: 24px;\n  background-color: #afa;\n  border-radius: 3px;\n  position: absolute;\n  top: 0;\n  left: 100%;\n  margin-left: 16px;\n  width: 32px;\n  opacity: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.block-target-small {\n  cursor: pointer;\n  height: 24px;\n  background-color: #afa;\n  border-radius: 3px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 32px;\n  height: 2.5em;\n  opacity: 0.1;\n  transition: opacity 0.1s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.code-block:hover .block-target-small {\n  opacity: 1;\n}\n\n.block-target-container {\n  position: absolute;\n  left: 100%;\n  top: 0;\n  min-height: 42px;\n  margin-left: 16px;\n  padding: 8px 16px;\n  border-radius: 3px;\n  box-sizing: border-box;\n  width: 200px;\n}\n.block-target-container.active {\n  box-shadow: 0 0 1px #aaa inset;\n}\n\n\n.block-canvas-container {\n  position: absolute;\n  top: 0;\n  left: 100%;\n  box-shadow: 0 0 1px #aaa;\n  border-radius: 3px;\n  margin-left: 16px;\n}\n\n.block-canvas-play {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  font-size: 64px;\n  /* margin-left: -26px; */\n  color: rgba(0, 0, 0, 0.2);\n  /* margin-top: -17px; */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n\n@media(max-width: 1000px) {\n  .block-target-container {\n    position: static;\n    margin-left: 0;\n    margin-top: 8px;\n  }\n  .block-canvas-container {\n    top: 0;\n    left: 0;\n    position: relative;\n    margin-left: 0;\n    margin-top: 8px;\n    display: flex;\n    justify-content: center;\n  }\n}\n\n|}</span>", "values": [], "chars": 1842, "lines": 110, "type": "string"},
"Docs/1009": {"name": "formatHref", "moduleName": "Docs", "html": "let <span class=\"pattern-ident\" data-local-define='Docs/1009' data-type=\"(\n  string,\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\">formatHref</span> = (<span class=\"pattern-ident\" data-local-define='Docs/1010' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Docs/1011' data-type=\"list(string)\">projectNames</span>, (<span class=\"pattern-ident\" data-local-define='Docs/1012' data-type=\"string\">modName</span>, <span class=\"pattern-ident\" data-local-define='Docs/1013' data-type=\"list(string)\">inner</span>, <span class=\"pattern-ident\" data-local-define='Docs/1014' data-type=\"CmtFindStamps.T.pathType\">ptype</span>)) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Docs/1015' data-type=\"string\">modName</span> = if (<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1012'>modName</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;&lt;global&gt;&quot;</span>) {\n    switch <span class=\"ident\" data-type=\"list(string)\" data-local-use='Docs/1013'>inner</span> {\n    | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='Docs/1016' data-type=\"string\"><span class=\"pattern-constructor\" data-type=\"list(string)\">name</span></span></span>] when <span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1016'>name</span>, <span class=\"ident\" data-type=\"list(string)\" data-global-use='Docs/1008'>allGlobals</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;globals&quot;</span>\n    | _ =&gt; {\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Cant find &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(list(string), CmtFindStamps.T.pathType) => string\" data-global-use='GenerateDoc/1071'>GenerateDoc.makeId</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Docs/1013'>inner</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType\" data-local-use='Docs/1014'>ptype</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; in &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1012'>modName</span>);\n      <span class=\"string\" data-type=\"string\">&quot;globals&quot;</span>\n    }\n    }\n  } else {\n    <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1012'>modName</span>\n  };\n  let <span class=\"pattern-ident\" data-local-define='Docs/1017' data-type=\"string\">hash</span> = switch <span class=\"ident\" data-type=\"list(string)\" data-local-use='Docs/1013'>inner</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(string)\">[]</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;&quot;</span>\n  | <span class=\"pattern-ident\" data-local-define='Docs/1018' data-type=\"list(string)\">inner</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;#&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(list(string), CmtFindStamps.T.pathType) => string\" data-global-use='GenerateDoc/1071'>GenerateDoc.makeId</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Docs/1018'>inner</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType\" data-local-use='Docs/1014'>ptype</span>)\n  };\n  if (<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1015'>modName</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1010'>name</span>) {\n    <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1017'>hash</span>)\n  } else {\n    if (<span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1015'>modName</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Docs/1011'>projectNames</span>)) {\n      <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1015'>modName</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1017'>hash</span>)\n    } else {\n      <span class=\"constructor\" data-type=\"option(string)\">None</span>\n    }\n  }\n}", "values": [{"id": "Docs/1008", "name": "allGlobals", "moduleName": "Docs"}, {"id": "GenerateDoc/1071", "name": "makeId", "moduleName": "GenerateDoc"}], "chars": 618, "lines": 25, "type": "(\n  string,\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)"},
"GenerateDoc/1196": {"name": "generateDoc", "moduleName": "GenerateDoc", "html": "let rec <span class=\"pattern-ident\" data-local-define='GenerateDoc/1196' data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  State.Model.Docs.doc\n) => (string, list((int, string, string, string)))\">generateDoc</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1198' data-type=\"PrintType.T.stringifier\">printer</span>, processDocString: <span class=\"type-constructor\" data-global-use='GenerateDoc/1195'>t</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1200' data-type=\"list(string)\">path</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1201' data-type=\"int\">tocLevel</span>, (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1202' data-type=\"string\">name</span>, docstring: <span class=\"type-constructor\" data-local-use='GenerateDoc/10'>option</span>(<span class=\"type-constructor\" data-stamp-missing>Omd.t</span>), <span class=\"pattern-ident\" data-local-define='GenerateDoc/1204' data-type=\"State.Model.Docs.docItem\">content</span>)) =&gt; {\n  /* open! CmtFindDocItems.T; */\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1205' data-type=\"CmtFindStamps.T.pathType => string\">id</span> = <span class=\"ident\" data-type=\"(list(string), CmtFindStamps.T.pathType) => string\" data-global-use='GenerateDoc/1071'>makeId</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>]);\n  let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1206' data-type=\"string\">middle</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1207' data-type=\"list((int, string, string, string))\">tocs</span>) = switch <span class=\"ident\" data-type=\"State.Model.Docs.docItem\" data-local-use='GenerateDoc/1204'>content</span> {\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1208' data-type=\"State.Model.Docs.moduleContents\">items</span>) =&gt; {\n    let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1214' data-type=\"string\">post</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1215' data-type=\"string\">body</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1216' data-type=\"list((int, string, string, string))\">tocs</span>) = switch <span class=\"ident\" data-type=\"State.Model.Docs.moduleContents\" data-local-use='GenerateDoc/1208'>items</span> {\n    | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.moduleContents\">Items</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1217' data-type=\"list(State.Model.Docs.doc)\">items</span>) =&gt; {\n      let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1219' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1220' data-type=\"list((int, string, string, string))\">tocs</span>) = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))\" data-global-use='GenerateDoc/1197'>docsForModule</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>, <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>], <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1201'>tocLevel</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='GenerateDoc/1203'>docstring</span> <span class=\"operator\" data-type=\"(option(Omd.t), Omd.t) => Omd.t\" data-global-use='Infix/1012'>|?</span> <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"(~?addHeading: option(bool), string) => string\" data-global-use='GenerateDoc/1074'>defaultMain</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>)), <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1217'>items</span>);\n      (<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='GenerateDoc/1186'>div</span>(<span class=\"string\" data-type=\"string\">&quot;body module-body&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1219'>html</span>), <span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1220'>tocs</span>)\n    }\n    | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.moduleContents\">Alias</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1218' data-type=\"Path.t\">modulePath</span>) =&gt; (<span class=\"string\" data-type=\"string\">&quot; : &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>prettyString</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  Path.t,\n  PrintType.pathType\n) => Pretty.doc\">path</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1218'>modulePath</span>, <span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PModule</span>)), <span class=\"ident\" data-type=\"(option(Omd.t), string, Omd.t => string) => string\" data-global-use='Infix/1036'>fold</span>(<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='GenerateDoc/1203'>docstring</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>, (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1221' data-type=\"Omd.t\">doc</span>) =&gt; <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='GenerateDoc/1186'>div</span>(<span class=\"string\" data-type=\"string\">&quot;body module-body&quot;</span>, <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>], <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">Some</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Alias</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1218'>modulePath</span>))), <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1221'>doc</span>))), <span class=\"constructor\" data-type=\"list((int, string, string, string))\">[]</span>)\n    };\n    (<span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|&lt;h4 class=&#39;item module&#39;&gt;module %s%s&lt;/h4&gt;%s|}</span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='GenerateDoc/1192'>link</span>(<span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1205'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PModule</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1214'>post</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1215'>body</span>),\n    <span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1216'>tocs</span> <span class=\"operator\" data-type=\"(\n  list((int, string, string, string)),\n  list((int, string, string, string))\n) => list((int, string, string, string))\" data-stamp-missing>@</span> [<span data-type=\"list((int, string, string, string))\"><span class=\"constructor\" data-type=\"list((int, string, string, string))\">(<span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1201'>tocLevel</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1205'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PModule</span>), <span class=\"string\" data-type=\"string\">&quot;module&quot;</span>)</span></span>]\n    )\n  }\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1209' data-type=\"option(Path.t)\">maybePath</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1210' data-type=\"list(State.Model.Docs.doc)\">contents</span>) =&gt; {\n    /* TODO hyperlink the path */\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1222' data-type=\"string\">name</span> = <span class=\"ident\" data-type=\"(option(Path.t), string, Path.t => string) => string\" data-global-use='Infix/1036'>fold</span>(<span class=\"ident\" data-type=\"option(Path.t)\" data-local-use='GenerateDoc/1209'>maybePath</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"(~?paren: option(string => bool), Path.t) => string\" data-stamp-missing>Path.name</span>);\n    let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1224' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1225' data-type=\"list((int, string, string, string))\">tocs</span>) = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))\" data-global-use='GenerateDoc/1197'>docsForModule</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>, <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span>, <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1201'>tocLevel</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1222'>name</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='GenerateDoc/1203'>docstring</span> <span class=\"operator\" data-type=\"(option(Omd.t), Omd.t) => Omd.t\" data-global-use='Infix/1012'>|?</span> [<span data-type=\"Omd.t\"><span class=\"constructor\" data-type=\"list(Omd.element)\"><span class=\"constructor\" data-type=\"Omd.element\">Omd.Paragraph</span>([<span data-type=\"Omd.t\"><span class=\"constructor\" data-type=\"list(Omd.element)\"><span class=\"constructor\" data-type=\"Omd.element\">Omd.Text</span>(<span class=\"string\" data-type=\"string\">&quot;@all&quot;</span>)</span></span>])</span></span>], <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1210'>contents</span>);\n    (<span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|&lt;h4 class=&#39;item module&#39;&gt;include %s&lt;/h4&gt;&lt;div class=&#39;body module-body include-body&#39;&gt;%s&lt;/div&gt;|}</span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1222'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1224'>html</span>), <span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1225'>tocs</span>)\n  }\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1211' data-type=\"Types.type_expr\">typ</span>) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1226' data-type=\"string\">link</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='GenerateDoc/1192'>link</span>(<span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1205'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PValue</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>);\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1227' data-type=\"string\">t</span> = <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  Types.type_expr\n) => Pretty.doc\">value</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1226'>link</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='GenerateDoc/1211'>typ</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>prettyString</span>;\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1228' data-type=\"string\">rendered</span> = switch <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='GenerateDoc/1203'>docstring</span> {\n    | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">None</span> =&gt; {\n      <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>], <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">Some</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='GenerateDoc/1211'>typ</span>)), <span class=\"constructor\" data-type=\"Omd.t\">[]</span>) <span class=\"operator\" data-type=\"(string, string => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>ignore</span>; /* hack */\n      /* TODO should I be so loud about missing docs? */\n      /* &quot;&lt;span class=&#39;missing&#39;&gt;No documentation for this value&lt;/span&gt;&quot; */\n      <span class=\"string\" data-type=\"string\">&quot;&quot;</span>\n    }\n    | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">Some</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1229' data-type=\"Omd.t\">text</span>) =&gt; <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>], <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">Some</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='GenerateDoc/1211'>typ</span>)), <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1229'>text</span>)\n    };\n    (<span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">&quot;&lt;h4 class=&#39;item&#39;&gt;%s&lt;/h4&gt;\\n\\n&lt;div class=&#39;body %s&#39;&gt;&quot;</span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1227'>t</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='GenerateDoc/1203'>docstring</span> <span class=\"operator\" data-type=\"(option(Omd.t), option(Omd.t)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"option(Omd.t)\">None</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;body-empty&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>)\n     <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1228'>rendered</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/div&gt;&quot;</span>, [<span data-type=\"list((int, string, string, string))\"><span class=\"constructor\" data-type=\"list((int, string, string, string))\">(<span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1201'>tocLevel</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1205'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PValue</span>), <span class=\"string\" data-type=\"string\">&quot;value&quot;</span>)</span></span>])\n  }\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1212' data-type=\"Types.type_declaration\">typ</span>) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1230' data-type=\"string\">link</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='GenerateDoc/1192'>link</span>(<span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1205'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PType</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>);\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1231' data-type=\"string\">t</span> = <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  Types.type_declaration\n) => Pretty.doc\">decl</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1198'>printer</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1230'>link</span>, <span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='GenerateDoc/1212'>typ</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>prettyString</span>;\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1232' data-type=\"string\">rendered</span> = switch <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='GenerateDoc/1203'>docstring</span> {\n    | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">None</span> =&gt; {\n      <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>], <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">Some</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='GenerateDoc/1212'>typ</span>)), <span class=\"constructor\" data-type=\"Omd.t\">[]</span>) <span class=\"operator\" data-type=\"(string, string => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>ignore</span>; /* hack */\n      /* &quot;&lt;span class=&#39;missing&#39;&gt;No documentation for this type&lt;/span&gt;&quot; */\n      <span class=\"string\" data-type=\"string\">&quot;&quot;</span>\n    }\n    | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">Some</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1233' data-type=\"Omd.t\">text</span>) =&gt; <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>], <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">Some</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='GenerateDoc/1212'>typ</span>)), <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1233'>text</span>)\n    };\n    (<span class=\"string\" data-type=\"string\">&quot;&lt;h4 class=&#39;item&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1231'>t</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/h4&gt;\\n\\n&lt;div class=&#39;body &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='GenerateDoc/1203'>docstring</span> <span class=\"operator\" data-type=\"(option(Omd.t), option(Omd.t)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"option(Omd.t)\">None</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;body-empty&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1232'>rendered</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/div&gt;&quot;</span>, [<span data-type=\"list((int, string, string, string))\"><span class=\"constructor\" data-type=\"list((int, string, string, string))\">(<span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1201'>tocLevel</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1202'>name</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1205'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PType</span>), <span class=\"string\" data-type=\"string\">&quot;type&quot;</span>)</span></span>])\n  }\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">StandaloneDoc</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1213' data-type=\"Omd.t\">doc</span>) =&gt; (<span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1199'>processDocString</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1200'>path</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">None</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1213'>doc</span>), <span class=\"constructor\" data-type=\"list((int, string, string, string))\">[]</span>)\n  };\n  (<span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='GenerateDoc/1186'>div</span>(<span class=\"string\" data-type=\"string\">&quot;doc-item&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1206'>middle</span>), <span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1207'>tocs</span>)\n}", "values": [{"id": "GenerateDoc/1071", "name": "makeId", "moduleName": "GenerateDoc"}, {"id": "GenerateDoc/1074", "name": "defaultMain", "moduleName": "GenerateDoc"}, {"id": "Infix/1036", "name": "fold", "moduleName": "Infix"}, {"id": "GenerateDoc/1197", "name": "docsForModule", "moduleName": "GenerateDoc"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "GenerateDoc/1192", "name": "link", "moduleName": "GenerateDoc"}, {"id": "GenerateDoc/1079", "name": "prettyString", "moduleName": "GenerateDoc"}, {"id": "GenerateDoc/1186", "name": "div", "moduleName": "GenerateDoc"}], "chars": 2780, "lines": 53, "type": "(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  State.Model.Docs.doc\n) => (string, list((int, string, string, string)))"},
"SyntaxHighlighting/1008": {"name": "css", "moduleName": "SyntaxHighlighting", "html": "let <span class=\"pattern-ident\" data-local-define='SyntaxHighlighting/1008' data-type=\"string\">css</span> = <span class=\"string\" data-type=\"string\">{|\npre.code &gt; code {\n  color: #aaa;\n}\n\n.code-block &gt; .CodeMirror,\npre.code {\n  border-radius: 3px;\n  box-shadow: 0 0.5px 3px #aaa;\n  background-color: white;\n}\n.code .ident, .code .pattern-ident {\n    color: #000;\n}\n\n.code .module-identifier {\n  color: #aa0;\n}\n\n.code .constructor,\n.code .pattern-constructor {\n  color: #0af;\n}\n\n.code .type-value-identifier,\n.code .type-constructor,\n.code .type-module-identifier {\n  color: #c100af;\n}\n\n.code .type-vbl,\n.code .open-module-identifier,\n.code .type-module-identifier,\n.code .let-module-identifier,\n.code .constructor-module-identifier,\n.code .switch-module-identifier,\n.code .record-module-identifier,\n.code .field-module-identifier\n{\n  color: #a0a;\n}\n\n.code .field\n{\n  color: #0aa;\n}\n\n.code .unused-identifier {\n  color: #00a;\n}\n\n.code .declaration-var {\n  color: #a50000;\n}\n\n.code .string {\n    color: #33a20d;\n}\n\n.code .int {\n    color: #5656cc;\n}\n\n.code .boolean {\n    color: #ff8f8f;\n}\n\n.code .float {\n    color: #d49523;\n}\n\n.code .operator {\n  color: #9b9bff;\n  font-weight: bold;\n}\n\n.type-hovered {\n  text-decoration: underline;\n}\n\n.type-viewer {\n  position: absolute;\n  display: none;\n  background-color: white;\n  white-space: pre;\n  padding: 8px 16px;\n  pointer-events: none;\n  margin-top: 10px;\n  margin-left: 10px;\n  box-shadow: 0 1px 6px #555;\n  border-radius: 3px;\n}\n\n|}</span>", "values": [], "chars": 1341, "lines": 93, "type": "string"},
"Infix/1008": {"name": "|!", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1008' data-type=\"(option('a), string) => 'a\">(|!)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1009' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1010' data-type=\"string\">d</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1009'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-stamp-missing>failwith</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Infix/1010'>d</span>) | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1011' data-type=\"'a\">v</span>) =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1011'>v</span> }", "values": [], "chars": 70, "lines": 0, "type": "(option('a), string) => 'a"},
"Descartes/1350": {"name": "fold", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1350' data-type=\"('a, 'a => 'a, option('a)) => 'a\">fold</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1351' data-type=\"'a\">d</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1352' data-type=\"'a => 'a\">fn</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1353' data-type=\"option('a)\">v</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Descartes/1353'>v</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1351'>d</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1354' data-type=\"'a\">v</span>) =&gt; <span class=\"ident\" data-type=\"'a => 'a\" data-local-use='Descartes/1352'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1354'>v</span>) }", "values": [], "chars": 68, "lines": 0, "type": "('a, 'a => 'a, option('a)) => 'a"},
"MainAux/1070": {"name": "processCmt", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1070' data-type=\"('a, string) => (\n  'a,\n  string,\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\">processCmt</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1071' data-type=\"'a\">name</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1072' data-type=\"string\">cmt</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1073' data-type=\"Cmt_format.binary_annots\">annots</span> = <span class=\"ident\" data-type=\"string => Cmt_format.cmt_infos\" data-stamp-missing>Cmt_format.read_cmt</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1072'>cmt</span>).<span class=\"field\" data-type=\"Cmt_format.binary_annots\">Cmt_format.cmt_annots</span>;\n\n  switch <span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='MainAux/1073'>annots</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Implementation</span>({<span class=\"pattern-ident\" data-local-define='MainAux/1074' data-type=\"list(Typedtree.structure_item)\">str_items</span>} as s) =&gt; {\n    /* Printtyped.implementation(Format.str_formatter, s);\n    let out = Format.flush_str_formatter();\n    Files.writeFile(&quot;debug_&quot; ++ name ++ &quot;.typ.inft&quot;, out) |&gt; ignore; */\n\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1078' data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\">stamps</span> = <span class=\"ident\" data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list(\n  (int, ('a, list(string), CmtFindStamps.T.pathType))\n)\" data-global-use='CmtFindStamps/1146'>CmtFindStamps.stampsFromTypedtreeImplementation</span>((<span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1071'>name</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>), <span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='MainAux/1074'>str_items</span>);\n    let (<span class=\"pattern-ident\" data-local-define='MainAux/1079' data-type=\"option(Omd.t)\">topdoc</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1080' data-type=\"list(State.Model.Docs.doc)\">allDocs</span>) = <span class=\"ident\" data-type=\"list(Typedtree.structure_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='CmtFindDocItems/1176'>CmtFindDocItems.docItemsFromStructure</span>(<span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='MainAux/1074'>str_items</span>);\n    (<span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1071'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1072'>cmt</span>, <span class=\"ident\" data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\" data-local-use='MainAux/1078'>stamps</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='MainAux/1079'>topdoc</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='MainAux/1080'>allDocs</span>)\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Interface</span>({<span class=\"pattern-ident\" data-local-define='MainAux/1076' data-type=\"list(Typedtree.signature_item)\">sig_items</span>} as s) =&gt; {\n    /* Printtyped.interface(Format.str_formatter, s);\n    let out = Format.flush_str_formatter();\n    Files.writeFile(&quot;debug_&quot; ++ name ++ &quot;.typ.inft&quot;, out) |&gt; ignore; */\n\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1081' data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\">stamps</span> = <span class=\"ident\" data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list(\n  (int, ('a, list(string), CmtFindStamps.T.pathType))\n)\" data-global-use='CmtFindStamps/1127'>CmtFindStamps.stampsFromTypedtreeInterface</span>((<span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1071'>name</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>), <span class=\"ident\" data-type=\"list(Typedtree.signature_item)\" data-local-use='MainAux/1076'>sig_items</span>);\n    let (<span class=\"pattern-ident\" data-local-define='MainAux/1082' data-type=\"option(Omd.t)\">topdoc</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1083' data-type=\"list(State.Model.Docs.doc)\">allDocs</span>) = <span class=\"ident\" data-type=\"list(Typedtree.signature_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='CmtFindDocItems/1179'>CmtFindDocItems.docItemsFromSignature</span>(<span class=\"ident\" data-type=\"list(Typedtree.signature_item)\" data-local-use='MainAux/1076'>sig_items</span>);\n    (<span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1071'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1072'>cmt</span>, <span class=\"ident\" data-type=\"list((int, ('a, list(string), CmtFindStamps.T.pathType)))\" data-local-use='MainAux/1081'>stamps</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='MainAux/1082'>topdoc</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='MainAux/1083'>allDocs</span>)\n  }\n  | _ =&gt; <span class=\"ident\" data-type=\"string => (\n  'a,\n  string,\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Not a valid cmt file&quot;</span>)\n  };\n}", "values": [{"id": "CmtFindStamps/1146", "name": "stampsFromTypedtreeImplementation", "moduleName": "CmtFindStamps"}, {"id": "CmtFindDocItems/1176", "name": "docItemsFromStructure", "moduleName": "CmtFindDocItems"}, {"id": "CmtFindStamps/1127", "name": "stampsFromTypedtreeInterface", "moduleName": "CmtFindStamps"}, {"id": "CmtFindDocItems/1179", "name": "docItemsFromSignature", "moduleName": "CmtFindDocItems"}], "chars": 1031, "lines": 24, "type": "('a, string) => (\n  'a,\n  string,\n  list((int, ('a, list(string), CmtFindStamps.T.pathType))),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)"},
"CliToInput/1314": {"name": "parse", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1314' data-type=\"array(string) => State.Input.t\">parse</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1315' data-type=\"array(string)\">argv</span> =&gt; {\n  let (<span class=\"pattern-ident\" data-local-define='CliToInput/1316' data-type=\"string\">selfPath</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1317' data-type=\"list(string)\">args</span>) = switch (<span class=\"ident\" data-type=\"array(string) => list(string)\" data-stamp-missing>Array.to_list</span>(<span class=\"ident\" data-type=\"array(string)\" data-local-use='CliToInput/1315'>argv</span>)) {\n  | <span class=\"pattern-constructor\" data-type=\"list(string)\">[]</span> =&gt; <span class=\"ident\" data-type=\"string => (string, list(string))\" data-global-use='CliToInput/1138'>fail</span>(<span class=\"string\" data-type=\"string\">&quot;Unable to determine my location&quot;</span>)\n  | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CliToInput/1318' data-type=\"string\">selfPath</span>, ...<span class=\"pattern-ident\" data-local-define='CliToInput/1319' data-type=\"list(string)\">args</span></span>] =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1318'>selfPath</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1319'>args</span>)\n  };\n\n  switch (<span class=\"ident\" data-type=\"(\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)\" data-global-use='CliToInput/1140'>parse</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1317'>args</span>)) {\n  | <span class=\"pattern-constructor\" data-type=\"Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)\">Minimist.Error</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1320' data-type=\"[&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\">err</span>) =&gt; <span class=\"ident\" data-type=\"string => State.Input.t\" data-global-use='CliToInput/1138'>fail</span>(<span class=\"ident\" data-type=\"[ `BadValue of Minimist.StrSet.elt * string | `Unknown of Minimist.StrSet.elt ] => string\" data-stamp-missing>Minimist.report</span>(<span class=\"ident\" data-type=\"[ `BadValue of Minimist.StrSet.elt * string | `Unknown of Minimist.StrSet.elt ]\" data-local-use='CliToInput/1320'>err</span>))\n  | <span class=\"pattern-constructor\" data-type=\"Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)\">Ok</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1321' data-type=\"Minimist.opts\">opts</span>) =&gt; <span class=\"ident\" data-type=\"(string, Minimist.opts) => State.Input.t\" data-global-use='CliToInput/1155'>optsToInput</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1316'>selfPath</span>, <span class=\"ident\" data-type=\"Minimist.opts\" data-local-use='CliToInput/1321'>opts</span>)\n  }\n}", "values": [{"id": "CliToInput/1140", "name": "parse", "moduleName": "CliToInput"}, {"id": "CliToInput/1138", "name": "fail", "moduleName": "CliToInput"}, {"id": "CliToInput/1155", "name": "optsToInput", "moduleName": "CliToInput"}], "chars": 306, "lines": 10, "type": "array(string) => State.Input.t"},
"ProcessCode/1024": {"name": "iterBlocks", "moduleName": "ProcessCode", "html": "let <span class=\"pattern-ident\" data-local-define='ProcessCode/1024' data-type=\"(\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  (string, Omd.name, string) => 'a\n) => unit\">iterBlocks</span> = (<span class=\"pattern-ident\" data-local-define='ProcessCode/1025' data-type=\"list(State.Model.topModule)\">modules</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1026' data-type=\"list(State.Model.customPage)\">custom</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1027' data-type=\"(string, Omd.name, string) => 'a\">fn</span>) =&gt; {\n  <span class=\"ident\" data-type=\"list(State.Model.topModule)\" data-local-use='ProcessCode/1025'>modules</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.topModule),\n  list(State.Model.topModule) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.topModule => unit,\n  list(State.Model.topModule)\n) => unit\" data-stamp-missing>List.iter</span>(({<span class=\"pattern-ident\" data-local-define='ProcessCode/1029' data-type=\"option(State.Model.docWithExamples)\">State.Model.docs</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1028' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1030' data-type=\"list(State.Model.Docs.doc)\">items</span>}) =&gt; {\n    <span class=\"ident\" data-type=\"option(State.Model.docWithExamples)\" data-local-use='ProcessCode/1029'>docs</span> <span class=\"operator\" data-type=\"(\n  option(State.Model.docWithExamples),\n  State.Model.docWithExamples => unit\n) => unit\" data-global-use='Infix/1045'>|?&lt;</span> <span class=\"ident\" data-type=\"(\n  (Omd.name, string) => 'a,\n  State.Model.docWithExamples\n) => unit\" data-global-use='ProcessCode/1016'>iterDocBlocks</span>(<span class=\"ident\" data-type=\"(string, Omd.name, string) => 'a\" data-local-use='ProcessCode/1027'>fn</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1028'>name</span>));\n    <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='ProcessCode/1030'>items</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => unit,\n  list(State.Model.Docs.doc)\n) => unit\" data-stamp-missing>List.iter</span>(<span class=\"ident\" data-type=\"(\n  (string, option(Omd.t), State.Model.Docs.docItem) => unit,\n  State.Model.Docs.doc\n) => unit\" data-global-use='State/1079'>State.Model.Docs.iter</span>(((_, <span class=\"pattern-ident\" data-local-define='ProcessCode/1031' data-type=\"option(Omd.t)\">docString</span>, _)) =&gt; <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='ProcessCode/1031'>docString</span> <span class=\"operator\" data-type=\"(option(Omd.t), Omd.t => unit) => unit\" data-global-use='Infix/1045'>|?&lt;</span> <span class=\"ident\" data-type=\"((Omd.name, string) => 'a, Omd.t) => unit\" data-global-use='ProcessCode/1016'>iterDocBlocks</span>(<span class=\"ident\" data-type=\"(string, Omd.name, string) => 'a\" data-local-use='ProcessCode/1027'>fn</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1028'>name</span>))));\n  });\n  <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ProcessCode/1026'>custom</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.customPage),\n  list(State.Model.customPage) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.customPage => unit,\n  list(State.Model.customPage)\n) => unit\" data-stamp-missing>List.iter</span>(({<span class=\"pattern-ident\" data-local-define='ProcessCode/1033' data-type=\"State.Model.docWithExamples\">State.Model.contents</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1032' data-type=\"string\">title</span>}) =&gt; <span class=\"ident\" data-type=\"((Omd.name, string) => 'a, Omd.t) => unit\" data-global-use='ProcessCode/1016'>iterDocBlocks</span>(<span class=\"ident\" data-type=\"(string, Omd.name, string) => 'a\" data-local-use='ProcessCode/1027'>fn</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1032'>title</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;_md&quot;</span>), <span class=\"ident\" data-type=\"State.Model.docWithExamples\" data-local-use='ProcessCode/1033'>contents</span>));\n}", "values": [{"id": "State/1079", "name": "iter", "moduleName": "State"}, {"id": "Infix/1045", "name": "|?<", "moduleName": "Infix"}, {"id": "ProcessCode/1016", "name": "iterDocBlocks", "moduleName": "ProcessCode"}], "chars": 363, "lines": 6, "type": "(\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  (string, Omd.name, string) => 'a\n) => unit"},
"Descartes/1391": {"name": "resolveValue", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1391' data-type=\"(\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]\">resolveValue</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1392' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1393' data-type=\"Hashtbl.t(string, 'a)\">valStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1394' data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    ('a, list((string, string)), list((string, string)))\n  )\n)\">modStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1395' data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    ('a, list((string, string)), list((string, string)))\n  )\n)\">globalMods</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1396' data-type=\"Path.t\">path</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1396'>path</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1397' data-type=\"int\">stamp</span>}) =&gt; switch (<span class=\"ident\" data-type=\"(Hashtbl.t(string, 'a), string) => 'a\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, 'a)\" data-local-use='Descartes/1393'>valStamps</span>, <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1392'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1397'>stamp</span>))) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; `Local(<span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1392'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1397'>stamp</span>))\n    | _ =&gt; `Global(<span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1392'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1397'>stamp</span>))\n    }\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(_) =&gt; {\n    let ({<span class=\"pattern-ident\" data-local-define='Descartes/1398' data-type=\"int\">Ident.stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1399' data-type=\"string\">name</span>}, <span class=\"pattern-ident\" data-local-define='Descartes/1400' data-type=\"list(string)\">names</span>) = <span class=\"ident\" data-type=\"Path.t => (Ident.t, list(string))\" data-global-use='Descartes/1355'>flatten</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1396'>path</span>);\n    switch (<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1398'>stamp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"int\" data-type=\"int\">0</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"(\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  string\n) => (\n  'a,\n  ('a, list((string, string)), list((string, string)))\n)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    ('a, list((string, string)), list((string, string)))\n  )\n)\" data-local-use='Descartes/1395'>globalMods</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1399'>name</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  string\n) => (\n  'a,\n  ('a, list((string, string)), list((string, string)))\n)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    ('a, list((string, string)), list((string, string)))\n  )\n)\" data-local-use='Descartes/1394'>modStamps</span>, <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='Descartes/1362'>toId</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1392'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1398'>stamp</span>))) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {<span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot find module &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1399'>name</span>); `Missing}\n    | <span class=\"pattern-ident\" data-local-define='Descartes/1401' data-type=\"('a, ('a, list((string, string)), list((string, string))))\">contents</span> =&gt; <span class=\"ident\" data-type=\"(\n  list(string),\n  (\n    'a,\n    ('a, list((string, string)), list((string, string)))\n  ),\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list(\n          (\n            string,\n            string\n          )\n        )\n      )\n    )\n  )\n) => [&gt; `Global of string | `Local of string | `Missing ]\" data-global-use='Descartes/1365'>deepValue</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Descartes/1400'>names</span>, <span class=\"ident\" data-type=\"('a, ('a, list((string, string)), list((string, string))))\" data-local-use='Descartes/1401'>contents</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, 'a)\" data-local-use='Descartes/1393'>valStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    'a,\n    ('a, list((string, string)), list((string, string)))\n  )\n)\" data-local-use='Descartes/1394'>modStamps</span>)\n    }\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_, _) =&gt; `Missing\n  }\n}", "values": [{"id": "Descartes/1355", "name": "flatten", "moduleName": "Descartes"}, {"id": "Descartes/1362", "name": "toId", "moduleName": "Descartes"}, {"id": "Descartes/1365", "name": "deepValue", "moduleName": "Descartes"}], "chars": 670, "lines": 15, "type": "(\n  string,\n  Hashtbl.t(string, 'a),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      'a,\n      (\n        'a,\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [&gt; `Global of string | `Local of string | `Missing ]"},
"PrintType/1201": {"name": "default", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1201' data-type=\"T.stringifier\">default</span> = <span data-type=\"T.stringifier\">{\n  ident: (_, {<span class=\"pattern-ident\" data-local-define='PrintType/1208' data-type=\"string\">Ident.name</span>}) =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1208'>name</span>),\n  path: (<span class=\"pattern-ident\" data-local-define='PrintType/1202' data-type=\"T.stringifier\">stringifier</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1203' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1204' data-type=\"pathType\">pathType</span>) =&gt; switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='PrintType/1203'>path</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1205' data-type=\"Ident.t\">ident</span>) =&gt; <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1202'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Ident.t) => Pretty.doc\">ident</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1202'>stringifier</span>, <span class=\"ident\" data-type=\"Ident.t\" data-local-use='PrintType/1205'>ident</span>)\n    | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1206' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1207' data-type=\"string\">name</span>, _) =&gt; {<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1202'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Path.t, pathType) => Pretty.doc\">path</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1202'>stringifier</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='PrintType/1206'>path</span>, <span class=\"ident\" data-type=\"pathType\" data-local-use='PrintType/1204'>pathType</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1207'>name</span>)}\n    | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_, _) =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;&lt;apply&gt;&quot;</span>)\n  },\n  value: <span class=\"ident\" data-type=\"(\n  T.stringifier,\n  string,\n  string,\n  Types.type_expr\n) => Pretty.doc\" data-global-use='PrintType/1186'>print_value</span>,\n  expr: <span class=\"ident\" data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\" data-global-use='PrintType/1056'>print_expr</span>,\n  decl: <span class=\"ident\" data-type=\"(\n  T.stringifier,\n  string,\n  string,\n  Types.type_declaration\n) => Pretty.doc\" data-global-use='PrintType/1191'>print_decl</span>,\n}</span>", "values": [{"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1056", "name": "print_expr", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}, {"id": "PrintType/1191", "name": "print_decl", "moduleName": "PrintType"}, {"id": "PrintType/1186", "name": "print_value", "moduleName": "PrintType"}], "chars": 380, "lines": 10, "type": "T.stringifier"},
"CodeHighlight/1261": {"name": "removeIfThere", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1261' data-type=\"string => unit\">removeIfThere</span> = <span class=\"pattern-ident\" data-local-define='CodeHighlight/1262' data-type=\"string\">path</span> =&gt; <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1262'>path</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Unix.unlink</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1262'>path</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"constructor\" data-type=\"unit\">()</span>", "values": [], "chars": 71, "lines": 0, "type": "string => unit"},
"InputToModel/1049": {"name": "getTitle", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1049' data-type=\"(string, string) => string\">getTitle</span> = (<span class=\"pattern-ident\" data-local-define='InputToModel/1050' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1051' data-type=\"string\">base</span>) =&gt; {\n  if (<span class=\"ident\" data-type=\"string => bool\" data-global-use='InputToModel/1043'>isReadme</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1050'>path</span>)) {\n    let <span class=\"pattern-ident\" data-local-define='InputToModel/1052' data-type=\"string\">dir</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1050'>path</span>);\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1050'>path</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; base &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1051'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; dir &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1052'>dir</span>);\n    if (<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1052'>dir</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1051'>base</span>) {\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Base dir!!!&quot;</span>);\n      <span class=\"string\" data-type=\"string\">&quot;Home&quot;</span>\n    } else {\n      <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1052'>dir</span>)\n    }\n  } else {\n    <span class=\"ident\" data-type=\"string => string\" data-global-use='InputToModel/1041'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1050'>path</span>)\n  }\n}", "values": [{"id": "InputToModel/1043", "name": "isReadme", "moduleName": "InputToModel"}, {"id": "InputToModel/1041", "name": "getName", "moduleName": "InputToModel"}], "chars": 312, "lines": 13, "type": "(string, string) => string"},
"CodeSnippets/1110": {"name": "startsWith", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1110' data-type=\"(string, string) => bool\">startsWith</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1111' data-type=\"string\">prefix</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1112' data-type=\"string\">string</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1113' data-type=\"int\">lp</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1111'>prefix</span>);\n  <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1113'>lp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1112'>string</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1112'>string</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1113'>lp</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1111'>prefix</span>\n}", "values": [], "chars": 143, "lines": 3, "type": "(string, string) => bool"},
"Highlighting/1261": {"name": "buildExternalsMap", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1261' data-type=\"list(('a, Location.t)) => Hashtbl.t((int, int), 'a)\">buildExternalsMap</span> = <span class=\"pattern-ident\" data-local-define='Highlighting/1262' data-type=\"list(('a, Location.t))\">externals</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1263' data-type=\"Hashtbl.t((int, int), 'a)\">map</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t((int, int), 'a)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  <span class=\"ident\" data-type=\"list(('a, Location.t))\" data-local-use='Highlighting/1262'>externals</span> <span class=\"operator\" data-type=\"(\n  list(('a, Location.t)),\n  list(('a, Location.t)) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(('a, Location.t) => unit, list(('a, Location.t))) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='Highlighting/1264' data-type=\"'a\">path</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1265' data-type=\"Location.t\">loc</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(Hashtbl.t((int, int), 'a), (int, int), 'a) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t((int, int), 'a)\" data-local-use='Highlighting/1263'>map</span>, <span class=\"ident\" data-type=\"Location.t => (int, int)\" data-global-use='Highlighting/1126'>locPair</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1265'>loc</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1264'>path</span>)\n  });\n  <span class=\"ident\" data-type=\"Hashtbl.t((int, int), 'a)\" data-local-use='Highlighting/1263'>map</span>\n}", "values": [{"id": "Highlighting/1126", "name": "locPair", "moduleName": "Highlighting"}], "chars": 174, "lines": 6, "type": "list(('a, Location.t)) => Hashtbl.t((int, int), 'a)"},
"Descartes/1355": {"name": "flatten", "moduleName": "Descartes", "html": "let rec <span class=\"pattern-ident\" data-local-define='Descartes/1355' data-type=\"Path.t => (Ident.t, list(string))\">flatten</span> = <span class=\"pattern-ident\" data-local-define='Descartes/1356' data-type=\"Path.t\">path</span> =&gt; switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1356'>path</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1357' data-type=\"Ident.t\">ident</span>) =&gt; (<span class=\"ident\" data-type=\"Ident.t\" data-local-use='Descartes/1357'>ident</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1358' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1359' data-type=\"string\">name</span>, _) =&gt; {\n    let (<span class=\"pattern-ident\" data-local-define='Descartes/1360' data-type=\"Ident.t\">ident</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1361' data-type=\"list(string)\">names</span>) = <span class=\"ident\" data-type=\"Path.t => (Ident.t, list(string))\" data-global-use='Descartes/1355'>flatten</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1358'>path</span>);\n    (<span class=\"ident\" data-type=\"Ident.t\" data-local-use='Descartes/1360'>ident</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Descartes/1361'>names</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1359'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>])\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_) =&gt; <span class=\"ident\" data-type=\"string => (Ident.t, list(string))\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot apply paths&quot;</span>)\n}", "values": [], "chars": 228, "lines": 7, "type": "Path.t => (Ident.t, list(string))"},
"Descartes/1487": {"name": "gatherCmts", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1487' data-type=\"(string, string, list(string)) => list((string, string))\">gatherCmts</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1488' data-type=\"string\">cmtdir</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1489' data-type=\"string\">srcdir</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1490' data-type=\"list(string)\">skip</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(string, string => bool) => list(string)\" data-stamp-missing>Files.collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1488'>cmtdir</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1491' data-type=\"string\">path</span> =&gt; <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1491'>path</span>, <span class=\"string\" data-type=\"string\">&quot;.cmt&quot;</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1491'>path</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Descartes/1490'>skip</span>)) <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1492' data-type=\"string\">path</span> =&gt; (\n    <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1492'>path</span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1489'>srcdir</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> (<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1488'>cmtdir</span>, <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1492'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.re&quot;</span>))\n  )) <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"((string, string) => bool, list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>List.filter</span>(((<span class=\"pattern-ident\" data-local-define='Descartes/1493' data-type=\"string\">a</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1494' data-type=\"string\">b</span>)) =&gt; <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1494'>b</span>))\n}", "values": [{"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 345, "lines": 5, "type": "(string, string, list(string)) => list((string, string))"},
"MainAux/1189": {"name": "escapePath", "moduleName": "MainAux", "html": "/** TODO use this somewhere */\nlet <span class=\"pattern-ident\" data-local-define='MainAux/1189' data-type=\"string => string\">escapePath</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1190' data-type=\"string\">path</span> =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp</span>(<span class=\"string\" data-type=\"string\">&quot;[^a-zA-Z0-9_.-]&quot;</span>), <span class=\"string\" data-type=\"string\">&quot;-&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1190'>path</span>)", "values": [], "chars": 116, "lines": 1, "type": "string => string"},
"CodeHighlight/1268": {"name": "unHash", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1268' data-type=\"string => string\">unHash</span> = <span class=\"pattern-ident\" data-local-define='CodeHighlight/1269' data-type=\"string\">t</span> =&gt; if (<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>) {\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>\n} else if (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39;) {\n  <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='CodeHighlight/1263'>sliceToEnd</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>, <span class=\"int\" data-type=\"int\">1</span>)\n} else if (<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"int\" data-type=\"int\">2</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;!&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>.[<span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39;) {\n  <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='CodeHighlight/1263'>sliceToEnd</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>, <span class=\"int\" data-type=\"int\">2</span>)\n} else {\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1269'>t</span>\n}", "values": [{"id": "CodeHighlight/1263", "name": "sliceToEnd", "moduleName": "CodeHighlight"}], "chars": 184, "lines": 8, "type": "string => string"},
"CodeSnippets/1106": {"name": "slice", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1106' data-type=\"(string, int, int) => string\">slice</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1107' data-type=\"string\">s</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1108' data-type=\"int\">pre</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1109' data-type=\"int\">post</span>) =&gt; <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1107'>s</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1108'>pre</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1107'>s</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1108'>pre</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1109'>post</span>)", "values": [], "chars": 79, "lines": 0, "type": "(string, int, int) => string"},
"DocsTemplate/1008": {"name": "searchStyle", "moduleName": "DocsTemplate", "html": "let <span class=\"pattern-ident\" data-local-define='DocsTemplate/1008' data-type=\"string\">searchStyle</span> = <span class=\"string\" data-type=\"string\">{|\n#search-input {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 8px 16px;\n  font-size: 20px;\n}\n\n.result .result-highlighted {\n  color: #ff6dff!important;\n}\n\n.result {\n  padding: 8px;\n  border-bottom: 1px solid #eee;\n}\n|}</span>", "values": [], "chars": 245, "lines": 16, "type": "string"},
"GenerateDoc/1052": {"name": "printer", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1052' data-type=\"(\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  list(\n    (\n      int,\n      (\n        string,\n        list(string),\n        'a\n      )\n    )\n  )\n) => PrintType.T.stringifier\">printer</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1053' data-type=\"(string, list(string), PrintType.pathType) => option(string)\">formatHref</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1054' data-type=\"list((int, (string, list(string), 'a)))\">stampsToPaths</span>) =&gt; <span data-type=\"PrintType.T.stringifier\">{\n  ...<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-global-use='PrintType/1201'>PrintType.default</span>,\n  path: (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1055' data-type=\"PrintType.T.stringifier\">printer</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1056' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1057' data-type=\"PrintType.pathType\">pathType</span>) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1058' data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\">(@!)</span> = <span class=\"ident\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-stamp-missing>Pretty.append</span>;\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1059' data-type=\"(string, list(string), PrintType.pathType)\">fullPath</span> = <span class=\"ident\" data-type=\"(\n  list((int, (string, list(string), 'a))),\n  list(string),\n  Path.t,\n  PrintType.pathType\n) => (string, list(string), PrintType.pathType)\" data-global-use='GenerateDoc/1038'>processPath</span>(<span class=\"ident\" data-type=\"list((int, (string, list(string), 'a)))\" data-local-use='GenerateDoc/1054'>stampsToPaths</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1056'>path</span>, <span class=\"ident\" data-type=\"PrintType.pathType\" data-local-use='GenerateDoc/1057'>pathType</span>);\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1060' data-type=\"option(string)\">full</span> = <span class=\"ident\" data-type=\"(string, list(string), PrintType.pathType) => option(string)\" data-local-use='GenerateDoc/1053'>formatHref</span>(<span class=\"ident\" data-type=\"(string, list(string), PrintType.pathType)\" data-local-use='GenerateDoc/1059'>fullPath</span>);\n    let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1061' data-type=\"string => Pretty.doc\">show</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1062' data-type=\"string\">name</span> =&gt; {\n      switch <span class=\"ident\" data-type=\"option(string)\" data-local-use='GenerateDoc/1060'>full</span> {\n      | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-stamp-missing>Pretty.text</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1062'>name</span>)\n      | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1063' data-type=\"string\">full</span>) =&gt; {\n        let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1064' data-type=\"string\">tag</span> = <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1063'>full</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1062'>name</span>);\n        <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-stamp-missing>Pretty.text</span>(~len=<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1062'>name</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1064'>tag</span>)\n      }\n      }\n    };\n    switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1056'>path</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pident</span>({<span class=\"pattern-ident\" data-local-define='GenerateDoc/1065' data-type=\"string\">name</span>}) =&gt; <span class=\"ident\" data-type=\"string => Pretty.doc\" data-local-use='GenerateDoc/1061'>show</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1065'>name</span>)\n    | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1066' data-type=\"Path.t\">inner</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1067' data-type=\"string\">name</span>, _) =&gt; {\n      switch (<span class=\"ident\" data-type=\"option(string)\" data-local-use='GenerateDoc/1060'>full</span>) {\n      | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1068' data-type=\"string\">full</span>) when <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1067'>name</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>!=</span> <span class=\"string\" data-type=\"string\">&quot;t&quot;</span> =&gt; {\n        <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;%s&quot; title=&quot;%s&quot;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1068'>full</span>, <span class=\"ident\" data-type=\"(~?paren: option(string => bool), Path.t) => string\" data-stamp-missing>Path.name</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1056'>path</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1067'>name</span>) <span class=\"operator\" data-type=\"(string, string => Pretty.doc) => Pretty.doc\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-stamp-missing>Pretty.text</span>(~len=<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1067'>name</span>))\n      }\n      | _ =&gt; {\n        <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1055'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  Path.t,\n  PrintType.pathType\n) => Pretty.doc\">path</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1055'>printer</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='GenerateDoc/1066'>inner</span>, <span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PModule</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-local-use='GenerateDoc/1058'>@!</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-stamp-missing>Pretty.text</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-local-use='GenerateDoc/1058'>@!</span> <span class=\"ident\" data-type=\"string => Pretty.doc\" data-local-use='GenerateDoc/1061'>show</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1067'>name</span>)}\n      }\n      }\n    | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_, _) =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-stamp-missing>Pretty.text</span>(<span class=\"string\" data-type=\"string\">&quot;&lt;papply&gt;&quot;</span>)\n    };\n  }\n}</span>", "values": [{"id": "GenerateDoc/1038", "name": "processPath", "moduleName": "GenerateDoc"}, {"id": "PrintType/1201", "name": "default", "moduleName": "PrintType"}], "chars": 947, "lines": 29, "type": "(\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  list(\n    (\n      int,\n      (\n        string,\n        list(string),\n        'a\n      )\n    )\n  )\n) => PrintType.T.stringifier"},
"MainAux/1068": {"name": "getName", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1068' data-type=\"string => string\">getName</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1069' data-type=\"string\">x</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1069'>x</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>", "values": [], "chars": 66, "lines": 0, "type": "string => string"},
"Typing/1030": {"name": "showLoc", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1030' data-type=\"Location.t => string\">showLoc</span> = <span class=\"pattern-ident\" data-local-define='Typing/1031' data-type=\"Location.t\">loc</span> =&gt; {<span class=\"ident\" data-type=\"(Format.formatter, Location.t) => unit\" data-stamp-missing>Location.print</span>(<span class=\"ident\" data-type=\"Format.formatter\" data-stamp-missing>Format.str_formatter</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1031'>loc</span>); <span class=\"ident\" data-type=\"unit => string\" data-stamp-missing>Format.flush_str_formatter</span><span class=\"constructor\" data-type=\"unit\">()</span>}", "values": [], "chars": 94, "lines": 0, "type": "Location.t => string"},
"CodeSnippets/1231": {"name": "processBlock", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1231' data-type=\"(\n  string,\n  string,\n  string,\n  string,\n  State.Model.codeOptions,\n  string,\n  list(string)\n) => State.Model.compilationResult\">processBlock</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1232' data-type=\"string\">bsRoot</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1233' data-type=\"string\">tmp</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1234' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1235' data-type=\"string\">refmt</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1236' data-type=\"State.Model.codeOptions\">options</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1237' data-type=\"string\">reasonContent</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1238' data-type=\"list(string)\">dependencyDirs</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1239' data-type=\"string\">re</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1233'>tmp</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1234'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.re&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1240' data-type=\"string\">cmt</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1233'>tmp</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1234'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.re_ppx.cmt&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1241' data-type=\"string\">js</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1233'>tmp</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1234'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.re_ppx.js&quot;</span>;\n\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1239'>re</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1237'>reasonContent</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1242' data-type=\"string\">cmd</span> = <span class=\"ident\" data-type=\"(string, string, string) => string\" data-global-use='CodeSnippets/1223'>refmtCommand</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1232'>bsRoot</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1239'>re</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1235'>refmt</span>);\n  let (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1243' data-type=\"list(string)\">output</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1244' data-type=\"list(string)\">err</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1245' data-type=\"bool\">success</span>) = <span class=\"ident\" data-type=\"(\n  ~?input: option('a),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)\" data-global-use='Commands/1008'>Commands.execFull</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1242'>cmd</span>);\n  open State.Model;\n  if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1245'>success</span>) {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1246' data-type=\"string\">out</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1243'>output</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1244'>err</span>);\n    if (<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1236'>options</span>.<span class=\"field\" data-type=\"State.Model.expectation\">expectation</span> <span class=\"operator\" data-type=\"(State.Model.expectation, State.Model.expectation) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"State.Model.expectation\">State.Model.ParseFail</span>) {\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Failed to parse &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1239'>re</span>);\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1246'>out</span>);\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1237'>reasonContent</span>);\n      <span class=\"ident\" data-type=\"unit => unit\" data-stamp-missing>print_newline</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n    };\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1247' data-type=\"string\">out</span> = <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1239'>re</span>), <span class=\"string\" data-type=\"string\">&quot;&lt;snippet&gt;&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1246'>out</span>);\n    <span class=\"constructor\" data-type=\"State.Model.compilationResult\">ParseError</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1247'>out</span>);\n  } else {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1248' data-type=\"list(string)\">includes</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1238'>dependencyDirs</span>;\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1249' data-type=\"string\">cmd</span> = <span class=\"ident\" data-type=\"(string, string, list(string)) => string\" data-global-use='CodeSnippets/1227'>justBscCommand</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1232'>bsRoot</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1239'>re</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;_ppx.ast&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1248'>includes</span>);\n    let (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1250' data-type=\"list(string)\">output</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1251' data-type=\"list(string)\">err</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1252' data-type=\"bool\">success</span>) = <span class=\"ident\" data-type=\"(\n  ~?input: option('a),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)\" data-global-use='Commands/1008'>Commands.execFull</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1249'>cmd</span>);\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1252'>success</span>) {\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1253' data-type=\"string\">out</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1250'>output</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1251'>err</span>);\n      if (<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1236'>options</span>.<span class=\"field\" data-type=\"State.Model.expectation\">expectation</span> <span class=\"operator\" data-type=\"(State.Model.expectation, State.Model.expectation) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"State.Model.expectation\">State.Model.TypeFail</span>) {\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1249'>cmd</span>);\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Failed to compile &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1239'>re</span>);\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1253'>out</span>);\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1237'>reasonContent</span>);\n        <span class=\"ident\" data-type=\"unit => unit\" data-stamp-missing>print_newline</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n      };\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1254' data-type=\"string\">out</span> = <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1239'>re</span>), <span class=\"string\" data-type=\"string\">&quot;&lt;snippet&gt;&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1253'>out</span>);\n      <span class=\"constructor\" data-type=\"State.Model.compilationResult\">TypeError</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1254'>out</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1240'>cmt</span>);\n    } else { <span class=\"constructor\" data-type=\"State.Model.compilationResult\">Success</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1240'>cmt</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1241'>js</span>) };\n  };\n}", "values": [{"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "CodeSnippets/1223", "name": "refmtCommand", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1227", "name": "justBscCommand", "moduleName": "CodeSnippets"}, {"id": "Commands/1008", "name": "execFull", "moduleName": "Commands"}], "chars": 1397, "lines": 37, "type": "(\n  string,\n  string,\n  string,\n  string,\n  State.Model.codeOptions,\n  string,\n  list(string)\n) => State.Model.compilationResult"},
"Typing/1019": {"name": "contents", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1019' data-type=\"('a, 'a) => 'a\">contents</span> = ((<span class=\"pattern-ident\" data-local-define='Typing/1020' data-type=\"'a\">a</span>, _)) =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1020'>a</span>", "values": [], "chars": 28, "lines": 0, "type": "('a, 'a) => 'a"},
"Infix/1032": {"name": "|?>>", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1032' data-type=\"(option('a), 'a => 'a) => option('a)\">(|?&gt;&gt;)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1033' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1034' data-type=\"'a => 'a\">fn</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1033'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"constructor\" data-type=\"option('a)\">None</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1035' data-type=\"'a\">v</span>) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a => 'a\" data-local-use='Infix/1034'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1035'>v</span>)) }", "values": [], "chars": 76, "lines": 0, "type": "(option('a), 'a => 'a) => option('a)"},
"CodeHighlight/1045": {"name": "showType", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1045' data-type=\"Types.type_expr => string\">showType</span> = <span class=\"pattern-ident\" data-local-define='CodeHighlight/1046' data-type=\"Types.type_expr\">typ</span> =&gt; <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-global-use='PrintType/1201'>PrintType.default</span>.<span class=\"field\" data-type=\"(PrintType.T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-global-use='PrintType/1201'>PrintType.default</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1046'>typ</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>GenerateDoc.prettyString</span>", "values": [{"id": "PrintType/1201", "name": "default", "moduleName": "PrintType"}, {"id": "GenerateDoc/1079", "name": "prettyString", "moduleName": "GenerateDoc"}], "chars": 96, "lines": 0, "type": "Types.type_expr => string"},
"GenerateDoc/1079": {"name": "prettyString", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1079' data-type=\"Pretty.doc => string\">prettyString</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1080' data-type=\"Pretty.doc\">doc</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1081' data-type=\"Buffer.t\">buffer</span> = <span class=\"ident\" data-type=\"int => Buffer.t\" data-stamp-missing>Buffer.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  <span class=\"ident\" data-type=\"(\n  ~?width: option(int),\n  ~?output: option(string => unit),\n  ~?indent: option(int => unit),\n  Pretty.doc\n) => unit\" data-stamp-missing>Pretty.print</span>(~width=<span class=\"int\" data-type=\"int\">60</span>, ~output=(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1082' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='GenerateDoc/1081'>buffer</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1082'>text</span>)), ~indent=(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1083' data-type=\"int\">num</span> =&gt; {\n    <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='GenerateDoc/1081'>buffer</span>, <span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>);\n    for (i in <span class=\"int\" data-type=\"int\">1</span> to <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1083'>num</span>) { <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='GenerateDoc/1081'>buffer</span>, <span class=\"string\" data-type=\"string\">&quot; &quot;</span>) }\n  }), <span class=\"ident\" data-type=\"Pretty.doc\" data-local-use='GenerateDoc/1080'>doc</span>);\n  <span class=\"ident\" data-type=\"Buffer.t => bytes\" data-stamp-missing>Buffer.to_bytes</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='GenerateDoc/1081'>buffer</span>) <span class=\"operator\" data-type=\"(bytes, bytes => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bytes => string\" data-stamp-missing>Bytes.to_string</span>\n}", "values": [], "chars": 312, "lines": 7, "type": "Pretty.doc => string"},
"CliToInput/1058": {"name": "getDependencyDirs", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1058' data-type=\"(string, Json.t) => list((string, string))\">getDependencyDirs</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1059' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1060' data-type=\"Json.t\">config</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1061' data-type=\"list(string)\">deps</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1060'>config</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;bs-dependencies&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(option(list(Json.t)), list(Json.t)) => list(Json.t)\" data-global-use='Infix/1012'>|?</span> <span class=\"constructor\" data-type=\"list(Json.t)\">[]</span> <span class=\"operator\" data-type=\"(list(Json.t), list(Json.t) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Json.t => option(string), list(Json.t)) => list(string)\" data-global-use='CliToInput/1010'>optMap</span>(<span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span>);\n  <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1061'>deps</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list(list((string, string)))\n) => list(list((string, string)))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => list((string, string)), list(string)) => list(\n  list((string, string))\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1062' data-type=\"string\">name</span> =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CliToInput/1063' data-type=\"string\">loc</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1059'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;node_modules&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1062'>name</span>;\n    switch (<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1063'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bsconfig.json&quot;</span>)) {\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1064' data-type=\"string\">text</span>) =&gt;\n      let <span class=\"pattern-ident\" data-local-define='CliToInput/1065' data-type=\"Json.t\">inner</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1064'>text</span>);\n      let <span class=\"pattern-ident\" data-local-define='CliToInput/1066' data-type=\"list(string)\">allowedKinds</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1065'>inner</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;allowed-build-kinds&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(\n  option(list(Json.t)),\n  list(Json.t) => list(string)\n) => option(list(string))\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(Json.t => string, list(Json.t)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(Json.t => option(string), string, Json.t) => string\" data-global-use='Infix/1041'>|.!</span> <span class=\"string\" data-type=\"string\">&quot;allowed-build-kinds must be strings&quot;</span>) <span class=\"operator\" data-type=\"(option(list(string)), list(string)) => list(string)\" data-global-use='Infix/1012'>|?</span> [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\"><span class=\"constructor\" data-type=\"list(string)\">&quot;js&quot;</span></span></span>];\n      let <span class=\"pattern-ident\" data-local-define='CliToInput/1067' data-type=\"bool\">isNative</span> = <span class=\"ident\" data-type=\"Json.t => bool\" data-global-use='CliToInput/1056'>isNative</span>(<span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1065'>inner</span>);\n      let <span class=\"pattern-ident\" data-local-define='CliToInput/1068' data-type=\"string\">compiledBase</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-global-use='CliToInput/1019'>oneShouldExist</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot find directory for compiled artifacts.&quot;</span>,\n        <span class=\"ident\" data-type=\"bool\" data-local-use='CliToInput/1067'>isNative</span>\n          <span class=\"pattern-constructor\" data-type=\"bool\">?</span> [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1063'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/js&quot;</span>, <span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1063'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/native&quot;</span></span></span></span>]\n          <span class=\"pattern-constructor\" data-type=\"bool\">:</span> [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1063'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs&quot;</span>, <span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1063'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/ocaml&quot;</span></span></span></span>]\n      );\n      if (<span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;js&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1066'>allowedKinds</span>)) {\n        <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-global-use='CliToInput/1044'>getSourceDirectories</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1063'>loc</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1065'>inner</span>) <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1069' data-type=\"string\">name</span> =&gt; (\n          <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1068'>compiledBase</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1069'>name</span>,\n          <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1063'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/js&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1069'>name</span>,\n        ));\n      } else {\n        <span class=\"constructor\" data-type=\"list((string, string))\">[]</span>\n      }\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt;\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Skipping dependency: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1062'>name</span>);\n      <span class=\"constructor\" data-type=\"list((string, string))\">[]</span>\n    }\n  }) <span class=\"operator\" data-type=\"(\n  list(list((string, string))),\n  list(list((string, string))) => list(\n    (string, string)\n  )\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list((string, string))) => list((string, string))\" data-stamp-missing>List.concat</span>\n}", "values": [{"id": "CliToInput/1010", "name": "optMap", "moduleName": "CliToInput"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "Infix/1041", "name": "|.!", "moduleName": "Infix"}, {"id": "CliToInput/1056", "name": "isNative", "moduleName": "CliToInput"}, {"id": "CliToInput/1019", "name": "oneShouldExist", "moduleName": "CliToInput"}, {"id": "CliToInput/1044", "name": "getSourceDirectories", "moduleName": "CliToInput"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 1068, "lines": 27, "type": "(string, Json.t) => list((string, string))"},
"InputToModel/1081": {"name": "package", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1081' data-type=\"State.Input.packageInput => State.Model.package\">package</span> = ({State.Input.meta: {<span class=\"pattern-ident\" data-local-define='InputToModel/1088' data-type=\"string\">packageName</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1089' data-type=\"option(string)\">repo</span>}, <span class=\"pattern-ident\" data-local-define='InputToModel/1090' data-type=\"State.backend\">backend</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1082' data-type=\"string\">root</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1091' data-type=\"option(string)\">sidebarFile</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1092' data-type=\"list((string, option(string), string))\">customFiles</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1093' data-type=\"list((string, string))\">moduleFiles</span>}) =&gt; <span data-type=\"State.Model.package\">{\n  {\n    name: <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1088'>packageName</span>,\n    <span class=\"ident\" data-type=\"option(string)\" data-local-use='InputToModel/1089'>repo</span>,\n    sidebar: <span class=\"ident\" data-type=\"option(string)\" data-local-use='InputToModel/1091'>sidebarFile</span> <span class=\"operator\" data-type=\"(\n  option(string),\n  string => list(State.Model.sidebar)\n) => option(list(State.Model.sidebar))\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"string => list(State.Model.sidebar)\" data-global-use='InputToModel/1034'>parseSidebar</span>,\n    custom: <span class=\"ident\" data-type=\"(\n  (\n    string,\n    option(string),\n    string\n  ) => State.Model.customPage,\n  list((string, option(string), string))\n) => list(State.Model.customPage)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(\n  string,\n  (\n    string,\n    option(string),\n    string\n  )\n) => State.Model.customPage\" data-global-use='InputToModel/1053'>parseCustom</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1082'>root</span>), <span class=\"ident\" data-type=\"list((string, option(string), string))\" data-local-use='InputToModel/1092'>customFiles</span>),\n    namespaced: <span class=\"constructor\" data-type=\"bool\">false</span>, /* TODO */\n    <span class=\"ident\" data-type=\"State.backend\" data-local-use='InputToModel/1090'>backend</span>,\n    defaultCodeOptions: <span class=\"constructor\" data-type=\"option(State.Model.codeOptions)\">None</span>,\n    modules: <span class=\"ident\" data-type=\"list((string, string)) => list(State.Model.topModule)\" data-global-use='InputToModel/1073'>processModules</span>(<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='InputToModel/1093'>moduleFiles</span>),\n  }\n}</span>", "values": [{"id": "InputToModel/1053", "name": "parseCustom", "moduleName": "InputToModel"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "InputToModel/1034", "name": "parseSidebar", "moduleName": "InputToModel"}, {"id": "InputToModel/1073", "name": "processModules", "moduleName": "InputToModel"}], "chars": 374, "lines": 11, "type": "State.Input.packageInput => State.Model.package"},
"Descartes/1365": {"name": "deepValue", "moduleName": "Descartes", "html": "let rec <span class=\"pattern-ident\" data-local-define='Descartes/1365' data-type=\"(\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        'a,\n        list(('a, 'a)),\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'a | `Missing ]\">deepValue</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1366' data-type=\"list('a)\">names</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1367' data-type=\"'a\">_name</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1368' data-type=\"'a\">_types</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1369' data-type=\"list(('a, 'a))\">values</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1370' data-type=\"list(('a, 'a))\">modules</span>)), <span class=\"pattern-ident\" data-local-define='Descartes/1371' data-type=\"'a\">valStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1372' data-type=\"Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))\">modStamps</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1366'>names</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list('a)\">[]</span> =&gt; `Missing\n  | [<span data-type=\"list('a)\"><span class=\"pattern-ident\" data-local-define='Descartes/1373' data-type=\"'a\"><span class=\"pattern-constructor\" data-type=\"list('a)\">name</span></span></span>] =&gt; switch (<span class=\"ident\" data-type=\"('a, list(('a, 'a))) => 'a\" data-stamp-missing>List.assoc</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1373'>name</span>, <span class=\"ident\" data-type=\"list(('a, 'a))\" data-local-use='Descartes/1369'>values</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; `Missing\n    | <span class=\"pattern-ident\" data-local-define='Descartes/1376' data-type=\"'a\">stamp</span> =&gt; `Global(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1376'>stamp</span>)\n    }\n  | [<span data-type=\"list('a)\"><span class=\"pattern-ident\" data-local-define='Descartes/1374' data-type=\"'a\">modname</span>, ...<span class=\"pattern-ident\" data-local-define='Descartes/1375' data-type=\"list('a)\">names</span></span>] =&gt; switch (<span class=\"ident\" data-type=\"('a, list(('a, 'a))) => 'a\" data-stamp-missing>List.assoc</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1374'>modname</span>, <span class=\"ident\" data-type=\"list(('a, 'a))\" data-local-use='Descartes/1370'>modules</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; `Missing\n    | <span class=\"pattern-ident\" data-local-define='Descartes/1377' data-type=\"'a\">stamp</span> =&gt; <span class=\"ident\" data-type=\"(\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        'a,\n        list(('a, 'a)),\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'a | `Missing ]\" data-global-use='Descartes/1365'>deepValue</span>(<span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1375'>names</span>, <span class=\"ident\" data-type=\"(\n  Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a))))),\n  'a\n) => ('a, ('a, list(('a, 'a)), list(('a, 'a))))\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))\" data-local-use='Descartes/1372'>modStamps</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1377'>stamp</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1371'>valStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t('a, ('a, ('a, list(('a, 'a)), list(('a, 'a)))))\" data-local-use='Descartes/1372'>modStamps</span>)\n    }\n  }\n}", "values": [], "chars": 453, "lines": 12, "type": "(\n  list('a),\n  ('a, ('a, list(('a, 'a)), list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        'a,\n        list(('a, 'a)),\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'a | `Missing ]"},
"InputToModel/1041": {"name": "getName", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1041' data-type=\"string => string\">getName</span> = <span class=\"pattern-ident\" data-local-define='InputToModel/1042' data-type=\"string\">x</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1042'>x</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>", "values": [], "chars": 66, "lines": 0, "type": "string => string"},
"MainAux/1199": {"name": "getTitle", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1199' data-type=\"(string, string) => string\">getTitle</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1200' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1201' data-type=\"string\">base</span>) =&gt; {\n  if (<span class=\"ident\" data-type=\"string => bool\" data-global-use='MainAux/1193'>isReadme</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1200'>path</span>)) {\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1202' data-type=\"string\">dir</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1200'>path</span>);\n    if (<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1202'>dir</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1201'>base</span>) {\n      &quot;Home&quot;\n    } else {\n      <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1202'>dir</span>)\n    }\n  } else {\n    <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1068'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1200'>path</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1187'>stripNumber</span>\n  }\n}", "values": [{"id": "MainAux/1193", "name": "isReadme", "moduleName": "MainAux"}, {"id": "MainAux/1068", "name": "getName", "moduleName": "MainAux"}, {"id": "MainAux/1187", "name": "stripNumber", "moduleName": "MainAux"}], "chars": 228, "lines": 11, "type": "(string, string) => string"},
"Infix/1045": {"name": "|?<", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1045' data-type=\"(option('a), 'a => unit) => unit\">(|?&lt;)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1046' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1047' data-type=\"'a => unit\">fn</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1046'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"constructor\" data-type=\"unit\">()</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1048' data-type=\"'a\">v</span>) =&gt; <span class=\"ident\" data-type=\"'a => unit\" data-local-use='Infix/1047'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1048'>v</span>) }", "values": [], "chars": 67, "lines": 0, "type": "(option('a), 'a => unit) => unit"},
"Typing/1051": {"name": "addLidentToPath", "moduleName": "Typing", "html": "let rec <span class=\"pattern-ident\" data-local-define='Typing/1051' data-type=\"(Path.t, Longident.t) => Path.t\">addLidentToPath</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1052' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Typing/1053' data-type=\"Longident.t\">lident</span>) =&gt; {\n  open Path;\n  open Longident;\n\n  switch <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1053'>lident</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"pattern-ident\" data-local-define='Typing/1054' data-type=\"string\">text</span>) =&gt; <span class=\"constructor\" data-type=\"Path.t\">Pdot</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1052'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1054'>text</span>, <span class=\"int\" data-type=\"int\">0</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Longident.t\">Ldot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1055' data-type=\"Longident.t\">lident</span>, <span class=\"pattern-ident\" data-local-define='Typing/1056' data-type=\"string\">text</span>) =&gt; <span class=\"constructor\" data-type=\"Path.t\">Pdot</span>(<span class=\"ident\" data-type=\"(Path.t, Longident.t) => Path.t\" data-global-use='Typing/1051'>addLidentToPath</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1052'>path</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1055'>lident</span>), <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1056'>text</span>, <span class=\"int\" data-type=\"int\">0</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lapply</span>(_, _) =&gt; <span class=\"ident\" data-type=\"string => Path.t\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;I dont know what these are&quot;</span>)\n  }\n}", "values": [], "chars": 271, "lines": 9, "type": "(Path.t, Longident.t) => Path.t"},
"CliToInput/1148": {"name": "getPackageJsonName", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1148' data-type=\"Json.t => option(string)\">getPackageJsonName</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1149' data-type=\"Json.t\">config</span> =&gt; {\n  <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;name&quot;</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1149'>config</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (<span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(Json.t => option(string), string, Json.t) => string\" data-global-use='Infix/1041'>|.!</span> <span class=\"string\" data-type=\"string\">&quot;name must be a string&quot;</span>)\n}", "values": [{"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "Infix/1041", "name": "|.!", "moduleName": "Infix"}], "chars": 112, "lines": 2, "type": "Json.t => option(string)"},
"PrintType/1042": {"name": "commad_list", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1042' data-type=\"('a => Pretty.doc, list('a)) => Pretty.doc\">commad_list</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1043' data-type=\"'a => Pretty.doc\">loop</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1044' data-type=\"list('a)\">items</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(Pretty.doc, list('a), 'a => Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1033'>sepd_list</span>(<span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;,&quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1029'>space</span>, <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrintType/1044'>items</span>, <span class=\"ident\" data-type=\"'a => Pretty.doc\" data-local-use='PrintType/1043'>loop</span>)\n}", "values": [{"id": "PrintType/1033", "name": "sepd_list", "moduleName": "PrintType"}, {"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}, {"id": "PrintType/1029", "name": "space", "moduleName": "PrintType"}], "chars": 82, "lines": 2, "type": "('a => Pretty.doc, list('a)) => Pretty.doc"},
"Typing/1359": {"name": "type_to_string", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1359' data-type=\"Types.type_expr => string\">type_to_string</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1360' data-type=\"Types.type_expr\">typ</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(Format.formatter, Types.type_expr) => unit\" data-stamp-missing>Printtyp.type_expr</span>(<span class=\"ident\" data-type=\"Format.formatter\" data-stamp-missing>Format.str_formatter</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Typing/1360'>typ</span>);\n  <span class=\"ident\" data-type=\"unit => string\" data-stamp-missing>Format.flush_str_formatter</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n}", "values": [], "chars": 114, "lines": 3, "type": "Types.type_expr => string"},
"CodeHighlight/1287": {"name": "highlight", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1287' data-type=\"(string, string) => (string, string, string)\">highlight</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1288' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1289' data-type=\"string\">cmt</span>) =&gt; {\n  let {<span class=\"pattern-ident\" data-local-define='CodeHighlight/1291' data-type=\"Cmt_format.binary_annots\">Cmt_format.cmt_annots</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1294' data-type=\"string\">cmt_builddir</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1293' data-type=\"option(string)\">cmt_sourcefile</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1290' data-type=\"string\">cmt_modname</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1292' data-type=\"list((string, Location.t))\">cmt_comments</span>} = <span class=\"ident\" data-type=\"string => Cmt_format.cmt_infos\" data-stamp-missing>Cmt_format.read_cmt</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1289'>cmt</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1295' data-type=\"string\">base</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1289'>cmt</span> <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>;\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1296' data-type=\"bool\">partial</span> = switch <span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='CodeHighlight/1291'>cmt_annots</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Partial_implementation</span>(_) | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Partial_interface</span>(_) =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n  | _ =&gt; <span class=\"constructor\" data-type=\"bool\">false</span>\n  };\n  <span class=\"ident\" data-type=\"list((string, Location.t))\" data-local-use='CodeHighlight/1292'>cmt_comments</span> <span class=\"operator\" data-type=\"(\n  list((string, Location.t)),\n  list((string, Location.t)) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, Location.t) => unit,\n  list((string, Location.t))\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='CodeHighlight/1297' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1298' data-type=\"Location.t\">loc</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Comment: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1297'>text</span>);\n  });\n\n  let (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1299' data-type=\"string\">pre</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1300' data-type=\"int\">frontOffset</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1301' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1302' data-type=\"string\">post</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1303' data-type=\"int\">backOffset</span>) = <span class=\"ident\" data-type=\"string => (string, int, string, string, int)\" data-global-use='CodeHighlight/1276'>codeSections</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1288'>text</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1304' data-type=\"list((Location.t, string))\">ranges</span> = <span class=\"ident\" data-type=\"Cmt_format.binary_annots => list((Location.t, string))\" data-global-use='CodeHighlight/1256'>collectRanges</span>(<span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='CodeHighlight/1291'>cmt_annots</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1305' data-type=\"list((int, int, string))\">tags</span> = <span class=\"ident\" data-type=\"list((Location.t, string))\" data-local-use='CodeHighlight/1304'>ranges</span> <span class=\"operator\" data-type=\"(\n  list((Location.t, string)),\n  list((Location.t, string)) => list(\n    (int, int, string)\n  )\n) => list((int, int, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (Location.t, string) => (int, int, string),\n  list((Location.t, string))\n) => list((int, int, string))\" data-stamp-missing>List.map</span>((({Location.loc_start: {<span class=\"pattern-ident\" data-local-define='CodeHighlight/1306' data-type=\"int\">pos_cnum</span>}, loc_end: {pos_cnum: <span class=\"pattern-ident\" data-local-define='CodeHighlight/1307' data-type=\"int\">cend</span>}}, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1308' data-type=\"string\">attributes</span>)) =&gt; {\n    (<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1306'>pos_cnum</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1307'>cend</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1308'>attributes</span>)\n  });\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1309' data-type=\"list('a)\">inserts</span> = <span class=\"constructor\" data-type=\"list('a)\">[]</span>; /* TODO annotate &quot;open&quot;s? */\n  (<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1299'>pre</span>, <span class=\"ident\" data-type=\"(\n  list((int, int, string)),\n  list((int, string)),\n  string,\n  int,\n  int\n) => string\" data-global-use='CodeHighlight/1013'>annotateText</span>(<span class=\"ident\" data-type=\"list((int, int, string))\" data-local-use='CodeHighlight/1305'>tags</span>, <span class=\"ident\" data-type=\"list((int, string))\" data-local-use='CodeHighlight/1309'>inserts</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1301'>text</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1300'>frontOffset</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1303'>backOffset</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1302'>post</span>)\n}", "values": [{"id": "CodeHighlight/1276", "name": "codeSections", "moduleName": "CodeHighlight"}, {"id": "CodeHighlight/1256", "name": "collectRanges", "moduleName": "CodeHighlight"}, {"id": "CodeHighlight/1013", "name": "annotateText", "moduleName": "CodeHighlight"}], "chars": 816, "lines": 19, "type": "(string, string) => (string, string, string)"},
"GenerateDoc/1069": {"name": "ptypePrefix", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1069' data-type=\"CmtFindStamps.T.pathType => string\">ptypePrefix</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1070' data-type=\"CmtFindStamps.T.pathType\">ptype</span> =&gt; {\n  switch <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType\" data-local-use='GenerateDoc/1070'>ptype</span> {\n  | <span class=\"pattern-constructor\" data-type=\"CmtFindStamps.T.pathType\">PModule</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;module-&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"CmtFindStamps.T.pathType\">PType</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;type-&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"CmtFindStamps.T.pathType\">PValue</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;value-&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"CmtFindStamps.T.pathType\">PModuleType</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;moduletype-&quot;</span>\n  }\n}", "values": [], "chars": 153, "lines": 7, "type": "CmtFindStamps.T.pathType => string"},
"Infix/1049": {"name": "fileConcat", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1049' data-type=\"(string, string) => string\">fileConcat</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1050' data-type=\"string\">a</span>, <span class=\"pattern-ident\" data-local-define='Infix/1051' data-type=\"string\">b</span>) =&gt; {\n  if (<span class=\"ident\" data-type=\"string\" data-local-use='Infix/1051'>b</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>!=</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Infix/1051'>b</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;.&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Infix/1051'>b</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"int\" data-type=\"int\">2</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Infix/1051'>b</span>.[<span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;/&#39;) {\n    <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Infix/1050'>a</span>, <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Infix/1051'>b</span>, <span class=\"int\" data-type=\"int\">2</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Infix/1051'>b</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">2</span>))\n  } else {\n    <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Infix/1050'>a</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Infix/1051'>b</span>);\n  }\n}", "values": [], "chars": 209, "lines": 6, "type": "(string, string) => string"},
"Typing/1406": {"name": "collectTypes", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1406' data-type=\"Cmt_format.binary_annots => (\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(openn),\n  Hashtbl.t((int, int), (Path.t, tag))\n)\">collectTypes</span> = <span class=\"pattern-ident\" data-local-define='Typing/1407' data-type=\"Cmt_format.binary_annots\">annots</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Typing/1408' data-type=\"Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\">types</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='Typing/1409' data-type=\"(\n  ~?mend: option(Lexing.position),\n  ~?depth: option(int),\n  Types.type_expr,\n  Location.t\n) => unit\">add</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1410' data-type=\"option(Lexing.position)\">~mend=?</span>, <span class=\"pattern-ident\" data-local-define='Typing/1412' data-type=\"int\">~depth=<span class=\"int\" data-type=\"int\">0</span></span>, <span class=\"pattern-ident\" data-local-define='Typing/1414' data-type=\"Types.type_expr\">typ</span>, <span class=\"pattern-ident\" data-local-define='Typing/1415' data-type=\"Location.t\">loc</span>) =&gt; if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1415'>loc</span>.<span class=\"field\" data-type=\"bool\">Location.loc_ghost</span>) {\n    let <span class=\"pattern-ident\" data-local-define='Typing/1416' data-type=\"Lexing.position\">loc_end</span> = switch <span class=\"ident\" data-type=\"option(Lexing.position)\" data-local-use='Typing/1410'>mend</span> {\n    | <span class=\"pattern-constructor\" data-type=\"option(Lexing.position)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Typing/1417' data-type=\"Lexing.position\">m</span>) =&gt; <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1417'>m</span>\n    | <span class=\"pattern-constructor\" data-type=\"option(Lexing.position)\">None</span> =&gt; <span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1415'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>\n    };\n    <span class=\"ident\" data-type=\"(\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\" data-local-use='Typing/1408'>types</span>, (<span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1415'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>, <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1416'>loc_end</span>), <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Typing/1414'>typ</span>)\n  };\n  let <span class=\"pattern-ident\" data-local-define='Typing/1418' data-type=\"Pervasives.ref(list('a))\">externals</span> = <span class=\"ident\" data-type=\"list('a) => Pervasives.ref(list('a))\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list('a)\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Typing/1419' data-type=\"Hashtbl.t('a, 'a)\">bindings</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t('a, 'a)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='Typing/1420' data-type=\"Hashtbl.t((int, int), (Path.t, tag))\">locToPath</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  (int, int),\n  (Path.t, tag)\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='Typing/1421' data-type=\"((Path.t, tag), Location.t) => unit\">ident</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1422' data-type=\"(Path.t, tag)\">path</span>, <span class=\"pattern-ident\" data-local-define='Typing/1423' data-type=\"Location.t\">loc</span>) =&gt; {\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1423'>loc</span>.<span class=\"field\" data-type=\"bool\">Location.loc_ghost</span>) {\n      <span class=\"ident\" data-type=\"(\n  Hashtbl.t((int, int), (Path.t, tag)),\n  (int, int),\n  (Path.t, tag)\n) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t((int, int), (Path.t, tag))\" data-local-use='Typing/1420'>locToPath</span>, (<span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1423'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1423'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>), <span class=\"ident\" data-type=\"(Path.t, tag)\" data-local-use='Typing/1422'>path</span>);\n      /* let {Ident.stamp, name} = Path.head(path);\n      if (stamp == 0) {\n        externals := [(path, loc), ...externals^]\n      } else {\n        let loc = truncateLoc(String.length(name), loc);\n        switch (Hashtbl.find(bindings, stamp)) {\n        | exception Not_found =&gt; print_endline(&quot;Getting an ident but stamp not defined &quot; ++ string_of_int(stamp))\n        /* | exception Not_found =&gt; failwith(&quot;Getting an ident but declaration not recorded: &quot; ++ string_of_int(stamp)) */\n        | (binding, uses) =&gt; Hashtbl.replace(bindings, stamp, (\n          binding,\n          [(path, loc), ...uses]\n        ))\n        }\n      } */\n    }\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Typing/1424' data-type=\"((Ident.t, tag), Location.t) => unit\">declaration</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1425' data-type=\"(Ident.t, tag)\">decl</span>, <span class=\"pattern-ident\" data-local-define='Typing/1426' data-type=\"Location.t\">loc</span>) =&gt; {\n    <span class=\"ident\" data-type=\"((Path.t, tag), Location.t) => unit\" data-local-use='Typing/1421'>ident</span>(<span class=\"ident\" data-type=\"(Ident.t => Path.t, (Ident.t, tag)) => (Path.t, tag)\" data-global-use='Typing/1015'>mapIdent</span>(<span class=\"pattern-ident\" data-local-define='Typing/1427' data-type=\"Ident.t\">id</span> =&gt; <span class=\"constructor\" data-type=\"Path.t\">Path.Pident</span>(<span class=\"ident\" data-type=\"Ident.t\" data-local-use='Typing/1427'>id</span>), <span class=\"ident\" data-type=\"(Ident.t, tag)\" data-local-use='Typing/1425'>decl</span>), <span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1426'>loc</span>)\n    /* Hashtbl.replace(bindings, ident.Ident.stamp, ((ident, loc), [])); */\n  };\n\n  let module Config = {\n    let <span class=\"pattern-ident\" data-local-define='Typing/1428' data-type=\"(\n  ~?mend: option(Lexing.position),\n  ~?depth: option(int),\n  Types.type_expr,\n  Location.t\n) => unit\">add</span> = <span class=\"ident\" data-type=\"(\n  ~?mend: option(Lexing.position),\n  ~?depth: option(int),\n  Types.type_expr,\n  Location.t\n) => unit\" data-local-use='Typing/1409'>add</span>;\n    let <span class=\"pattern-ident\" data-local-define='Typing/1429' data-type=\"((Path.t, tag), Location.t) => unit\">ident</span> = <span class=\"ident\" data-type=\"((Path.t, tag), Location.t) => unit\" data-local-use='Typing/1421'>ident</span>;\n    let <span class=\"pattern-ident\" data-local-define='Typing/1430' data-type=\"((Ident.t, tag), Location.t) => unit\">declaration</span> = <span class=\"ident\" data-type=\"((Ident.t, tag), Location.t) => unit\" data-local-use='Typing/1424'>declaration</span>;\n  };\n  let module IterSource = F(Config);\n  let module Iter = TypedtreeIter.MakeIterator(IterSource);\n\n  switch <span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='Typing/1407'>annots</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Implementation</span>(<span class=\"pattern-ident\" data-local-define='Typing/1519' data-type=\"Typedtree.structure\">structure</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(Format.formatter, Typedtree.structure) => unit\" data-stamp-missing>Printtyped.implementation</span>(<span class=\"ident\" data-type=\"Format.formatter\" data-stamp-missing>Format.str_formatter</span>, <span class=\"ident\" data-type=\"Typedtree.structure\" data-local-use='Typing/1519'>structure</span>);\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"string\" data-type=\"string\">&quot;./log_types.txt&quot;</span>, <span class=\"ident\" data-type=\"unit => string\" data-stamp-missing>Format.flush_str_formatter</span><span class=\"constructor\" data-type=\"unit\">()</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n    <span class=\"ident\" data-type=\"Typedtree.structure => unit\" data-stamp-missing>Iter.iter_structure</span>(<span class=\"ident\" data-type=\"Typedtree.structure\" data-local-use='Typing/1519'>structure</span>)\n  }\n  | _ =&gt; <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Not a valid cmt file&quot;</span>)\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Typing/1520' data-type=\"list(openn)\">all_opens</span> = <span class=\"ident\" data-type=\"open_stack\" data-stamp-missing>IterSource.root_stack</span>.<span class=\"field\" data-type=\"list(openn)\">opens</span> <span class=\"operator\" data-type=\"(list(openn), list(openn)) => list(openn)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"open_stack\" data-stamp-missing>IterSource.root_stack</span>.<span class=\"field\" data-type=\"list(openn)\">closed</span> <span class=\"operator\" data-type=\"(list(openn), list(openn)) => list(openn)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"list(list(openn)) => list(openn)\" data-stamp-missing>List.concat</span>(\n    <span class=\"ident\" data-type=\"(open_stack => list(openn), list(open_stack)) => list(\n  list(openn)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Typing/1521' data-type=\"open_stack\">op</span> =&gt; <span class=\"ident\" data-type=\"open_stack\" data-local-use='Typing/1521'>op</span>.<span class=\"field\" data-type=\"list(openn)\">opens</span> <span class=\"operator\" data-type=\"(list(openn), list(openn)) => list(openn)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"open_stack\" data-local-use='Typing/1521'>op</span>.<span class=\"field\" data-type=\"list(openn)\">closed</span>, <span class=\"ident\" data-type=\"Pervasives.ref(list(open_stack))\" data-stamp-missing>IterSource.closed_stacks</span><span class=\"operator\" data-type=\"Pervasives.ref(list(open_stack)) => list(open_stack)\" data-stamp-missing>^</span>)\n  );\n  /* print_endline(string_of_int(List.length(all_opens))); */\n  /* all_opens |&gt; List.iter(({path, loc, used}) =&gt; {\n    print_endline(Path.name(path) ++ &quot;: &quot; ++ String.concat(&quot;, &quot;, List.map(toString(n =&gt; String.concat(&quot;.&quot;, Longident.flatten(n))), used)));\n  }); */\n\n  (<span class=\"ident\" data-type=\"Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\" data-local-use='Typing/1408'>types</span>, <span class=\"ident\" data-type=\"Hashtbl.t('a, 'a)\" data-local-use='Typing/1419'>bindings</span>, <span class=\"ident\" data-type=\"Pervasives.ref(list('a))\" data-local-use='Typing/1418'>externals</span><span class=\"operator\" data-type=\"Pervasives.ref(list('a)) => list('a)\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"list(openn)\" data-local-use='Typing/1520'>all_opens</span>, <span class=\"ident\" data-type=\"Hashtbl.t((int, int), (Path.t, tag))\" data-local-use='Typing/1420'>locToPath</span>)\n}", "values": [{"id": "Typing/1015", "name": "mapIdent", "moduleName": "Typing"}], "chars": 2381, "lines": 64, "type": "Cmt_format.binary_annots => (\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, 'a),\n  list('a),\n  list(openn),\n  Hashtbl.t((int, int), (Path.t, tag))\n)"},
"Typing/1057": {"name": "usesOpen", "moduleName": "Typing", "html": "let rec <span class=\"pattern-ident\" data-local-define='Typing/1057' data-type=\"(Longident.t, Path.t) => bool\">usesOpen</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1058' data-type=\"Longident.t\">ident</span>, <span class=\"pattern-ident\" data-local-define='Typing/1059' data-type=\"Path.t\">path</span>) =&gt; switch (<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1058'>ident</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1059'>path</span>) {\n| (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Lident</span>(<span class=\"pattern-ident\" data-local-define='Typing/1060' data-type=\"string\">name</span>), <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pdot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1061' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Typing/1062' data-type=\"string\">pname</span>, _)) =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n| (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Lident</span>(_), <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>(_)) =&gt; <span class=\"constructor\" data-type=\"bool\">false</span>\n| (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Ldot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1063' data-type=\"Longident.t\">ident</span>, _), <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pdot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1064' data-type=\"Path.t\">path</span>, _, _)) =&gt; <span class=\"ident\" data-type=\"(Longident.t, Path.t) => bool\" data-global-use='Typing/1057'>usesOpen</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1063'>ident</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1064'>path</span>)\n| _ =&gt; <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot relative &quot;</span>  <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(~?paren: option(string => bool), Path.t) => string\" data-stamp-missing>Path.name</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1059'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span>, <span class=\"ident\" data-type=\"Longident.t => list(string)\" data-stamp-missing>Longident.flatten</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1058'>ident</span>)))\n}", "values": [], "chars": 359, "lines": 5, "type": "(Longident.t, Path.t) => bool"},
"Infix/1020": {"name": "|?#", "moduleName": "Infix", "html": "/** Lazy optional default operator */\nlet <span class=\"pattern-ident\" data-local-define='Infix/1020' data-type=\"(option('a), Lazy.t(option('a))) => option('a)\">(|?#)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1021' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1022' data-type=\"Lazy.t(option('a))\">d</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1021'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"Lazy.t(option('a)) => option('a)\" data-stamp-missing>Lazy.force</span>(<span class=\"ident\" data-type=\"Lazy.t(option('a))\" data-local-use='Infix/1022'>d</span>) | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1023' data-type=\"'a\">v</span>) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1023'>v</span>) }", "values": [], "chars": 117, "lines": 1, "type": "(option('a), Lazy.t(option('a))) => option('a)"},
"Typing/1015": {"name": "mapIdent", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1015' data-type=\"('a => 'a, ('a, 'a)) => ('a, 'a)\">mapIdent</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1016' data-type=\"'a => 'a\">fn</span>, (<span class=\"pattern-ident\" data-local-define='Typing/1017' data-type=\"'a\">a</span>, <span class=\"pattern-ident\" data-local-define='Typing/1018' data-type=\"'a\">tag</span>)) =&gt; (<span class=\"ident\" data-type=\"'a => 'a\" data-local-use='Typing/1016'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1017'>a</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1018'>tag</span>)", "values": [], "chars": 45, "lines": 0, "type": "('a => 'a, ('a, 'a)) => ('a, 'a)"},
"CodeSnippets/1114": {"name": "fullContent", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1114' data-type=\"(\n  string => string,\n  State.Model.codeOptions,\n  string\n) => string\">fullContent</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1115' data-type=\"string => string\">getShared</span>, {State.Model.codeDisplay: {<span class=\"pattern-ident\" data-local-define='CodeSnippets/1116' data-type=\"int\">prefix</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1117' data-type=\"int\">suffix</span>}} as options, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1119' data-type=\"string\">content</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1120' data-type=\"string\">content</span> = <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1116'>prefix</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"int\" data-type=\"int\">0</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1117'>suffix</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"int\" data-type=\"int\">0</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1119'>content</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1121' data-type=\"array(string)\">lines</span> = <span class=\"ident\" data-type=\"string => list(string)\" data-global-use='CodeSnippets/1088'>splitLines</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1119'>content</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => array(string)) => array(\n  string\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(string) => array(string)\" data-stamp-missing>Array.of_list</span>;\n    for (i in <span class=\"int\" data-type=\"int\">0</span> to <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1116'>prefix</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>) {\n      <span class=\"ident\" data-type=\"(array(string), int, string) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(string)\" data-local-use='CodeSnippets/1121'>lines</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1122'>i</span>] = <span class=\"string\" data-type=\"string\">&quot;#&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing><span class=\"ident\" data-type=\"array(string)\" data-local-use='CodeSnippets/1121'>lines</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1122'>i</span>]</span></span>;\n    };\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1123' data-type=\"int\">ln</span> = <span class=\"ident\" data-type=\"array(string) => int\" data-stamp-missing>Array.length</span>(<span class=\"ident\" data-type=\"array(string)\" data-local-use='CodeSnippets/1121'>lines</span>);\n    for (i in <span class=\"int\" data-type=\"int\">0</span> to <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1117'>suffix</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>) {\n      <span class=\"ident\" data-type=\"(array(string), int, string) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(string)\" data-local-use='CodeSnippets/1121'>lines</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1123'>ln</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1124'>i</span>] = <span class=\"string\" data-type=\"string\">&quot;#&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(array(string), int) => string\" data-stamp-missing><span class=\"ident\" data-type=\"array(string)\" data-local-use='CodeSnippets/1121'>lines</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1123'>ln</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1124'>i</span>]</span></span>;\n    };\n    <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"array(string) => list(string)\" data-stamp-missing>Array.to_list</span>(<span class=\"ident\" data-type=\"array(string)\" data-local-use='CodeSnippets/1121'>lines</span>))\n  };\n\n  <span class=\"ident\" data-type=\"((string, string) => string, string, list(string)) => string\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1125' data-type=\"string\">content</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1126' data-type=\"string\">name</span>) =&gt; {\n    switch (<span class=\"ident\" data-type=\"string => string\" data-local-use='CodeSnippets/1115'>getShared</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1126'>name</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Unknown shared &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1126'>name</span>);\n      <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1125'>content</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; /* unknown shared &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1126'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; */&quot;</span>\n    }\n    | <span class=\"pattern-ident\" data-local-define='CodeSnippets/1127' data-type=\"string\">text</span> =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1128' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1127'>text</span> <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-global-use='CodeSnippets/1103'>hashAll</span>;\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1129' data-type=\"Str.regexp\">rx</span> = <span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;#%{code}%&quot;</span>);\n      switch (<span class=\"ident\" data-type=\"(Str.regexp, string, int) => int\" data-stamp-missing>Str.search_forward</span>(<span class=\"ident\" data-type=\"Str.regexp\" data-local-use='CodeSnippets/1129'>rx</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1128'>text</span>, <span class=\"int\" data-type=\"int\">0</span>)) {\n      | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1128'>text</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1125'>content</span>\n      | _ =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.replace_first</span>(<span class=\"ident\" data-type=\"Str.regexp\" data-local-use='CodeSnippets/1129'>rx</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1125'>content</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1128'>text</span>)\n      }\n    }\n  }\n  }, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1120'>content</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1118'>options</span>.<span class=\"field\" data-type=\"list(string)\">uses</span>);\n\n}", "values": [{"id": "CodeSnippets/1088", "name": "splitLines", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1103", "name": "hashAll", "moduleName": "CodeSnippets"}], "chars": 973, "lines": 30, "type": "(\n  string => string,\n  State.Model.codeOptions,\n  string\n) => string"},
"CompileCode/1008": {"name": "sanitize", "moduleName": "CompileCode", "html": "let <span class=\"pattern-ident\" data-local-define='CompileCode/1008' data-type=\"string => string\">sanitize</span> = <span class=\"pattern-ident\" data-local-define='CompileCode/1009' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp</span>(<span class=\"string\" data-type=\"string\">&quot;[^a-zA-Z0-9_]&quot;</span>), <span class=\"string\" data-type=\"string\">&quot;_&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1009'>name</span>)", "values": [], "chars": 81, "lines": 0, "type": "string => string"},
"CodeSnippets/1227": {"name": "justBscCommand", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1227' data-type=\"(string, string, list(string)) => string\">justBscCommand</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1228' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1229' data-type=\"string\">sourceFile</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1230' data-type=\"list(string)\">includes</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n    <span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|%s -w -A %s -impl %s|}</span></span></span></span></span></span></span></span></span></span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1228'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bsc.exe&quot;</span>,\n    <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1230'>includes</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">&quot;-I %S&quot;</span></span></span></span></span></span>)) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot; &quot;</span>),\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1229'>sourceFile</span>\n  )\n}", "values": [{"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 223, "lines": 7, "type": "(string, string, list(string)) => string"},
"DocsTemplate/1010": {"name": "styles", "moduleName": "DocsTemplate", "html": "let <span class=\"pattern-ident\" data-local-define='DocsTemplate/1010' data-type=\"string\">styles</span> = <span class=\"ident\" data-type=\"string\" data-global-use='Base/1008'>Base.css</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-global-use='SyntaxHighlighting/1008'>SyntaxHighlighting.css</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-global-use='DocsTemplate/1009'>codeBlocks</span>", "values": [{"id": "Base/1008", "name": "css", "moduleName": "Base"}, {"id": "SyntaxHighlighting/1008", "name": "css", "moduleName": "SyntaxHighlighting"}, {"id": "DocsTemplate/1009", "name": "codeBlocks", "moduleName": "DocsTemplate"}], "chars": 61, "lines": 0, "type": "string"},
"State/1028": {"name": "contextString", "moduleName": "State", "html": "let <span class=\"pattern-ident\" data-local-define='State/1028' data-type=\"codeContext => string\">contextString</span> = <span class=\"pattern-ident\" data-local-define='State/1029' data-type=\"codeContext\">c</span> =&gt; switch <span class=\"ident\" data-type=\"codeContext\" data-local-use='State/1029'>c</span> {\n  | <span class=\"pattern-constructor\" data-type=\"codeContext\">Normal</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;normal&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"codeContext\">Log</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;log&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"codeContext\">Node</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;node&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"codeContext\">Window</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;window&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"codeContext\">Iframe</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;iframe&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"codeContext\">Canvas</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;canvas&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"codeContext\">Div</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;div&quot;</span>\n  }", "values": [], "chars": 184, "lines": 8, "type": "codeContext => string"},
"Highlighting/1277": {"name": "showUses", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1277' data-type=\"(Path.t, list((Longident.t, Typing.tag))) => string\">showUses</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1278' data-type=\"Path.t\">openPath</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1279' data-type=\"list((Longident.t, Typing.tag))\">uses</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1280' data-type=\"Hashtbl.t(Longident.t, list(string))\">attrs</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  Longident.t,\n  list(string)\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">50</span>);\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1281' data-type=\"Hashtbl.t(Longident.t, list(string))\">constrs</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  Longident.t,\n  list(string)\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">50</span>);\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1282' data-type=\"list((Longident.t, Typing.tag))\">normals</span> = <span class=\"ident\" data-type=\"(\n  (Longident.t, Typing.tag) => bool,\n  list((Longident.t, Typing.tag))\n) => list((Longident.t, Typing.tag))\" data-stamp-missing>List.filter</span>(((<span class=\"pattern-ident\" data-local-define='Highlighting/1283' data-type=\"Longident.t\">innerPath</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1284' data-type=\"Typing.tag\">tag</span>)) =&gt; {\n    switch (<span class=\"ident\" data-type=\"Typing.tag\" data-local-use='Highlighting/1284'>tag</span>) {\n    | <span class=\"pattern-constructor\" data-type=\"Typing.tag\">Typing.Constructor</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1285' data-type=\"string\">name</span>) =&gt; {<span class=\"ident\" data-type=\"(\n  Hashtbl.t(Longident.t, list(string)),\n  Longident.t,\n  string\n) => unit\" data-global-use='Highlighting/1266'>pushHashList</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Longident.t, list(string))\" data-local-use='Highlighting/1281'>constrs</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1283'>innerPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1285'>name</span>); <span class=\"constructor\" data-type=\"bool\">false</span>}\n    | <span class=\"pattern-constructor\" data-type=\"Typing.tag\">Attribute</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1286' data-type=\"string\">name</span>) =&gt; {<span class=\"ident\" data-type=\"(\n  Hashtbl.t(Longident.t, list(string)),\n  Longident.t,\n  string\n) => unit\" data-global-use='Highlighting/1266'>pushHashList</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Longident.t, list(string))\" data-local-use='Highlighting/1280'>attrs</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1283'>innerPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1286'>name</span>); <span class=\"constructor\" data-type=\"bool\">false</span>}\n    | _ =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n    }\n  }, <span class=\"ident\" data-type=\"list((Longident.t, Typing.tag))\" data-local-use='Highlighting/1279'>uses</span>);\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1287' data-type=\"list((Longident.t, Typing.tag))\">normals</span> = <span class=\"ident\" data-type=\"list((Longident.t, Typing.tag))\" data-local-use='Highlighting/1282'>normals</span> <span class=\"operator\" data-type=\"(\n  list((Longident.t, Typing.tag)),\n  list((Longident.t, Typing.tag)) => list(\n    (Longident.t, Typing.tag)\n  )\n) => list((Longident.t, Typing.tag))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (Longident.t, Typing.tag) => bool,\n  list((Longident.t, Typing.tag))\n) => list((Longident.t, Typing.tag))\" data-stamp-missing>List.filter</span>(((<span class=\"pattern-ident\" data-local-define='Highlighting/1288' data-type=\"Longident.t\">innerPath</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1289' data-type=\"Typing.tag\">tag</span>)) =&gt; {\n    switch <span class=\"ident\" data-type=\"Typing.tag\" data-local-use='Highlighting/1289'>tag</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Typing.tag\">Typing.Type</span> =&gt; <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span>(<span class=\"ident\" data-type=\"(Hashtbl.t(Longident.t, list(string)), Longident.t) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Longident.t, list(string))\" data-local-use='Highlighting/1280'>attrs</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1288'>innerPath</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(Hashtbl.t(Longident.t, list(string)), Longident.t) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Longident.t, list(string))\" data-local-use='Highlighting/1281'>constrs</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1288'>innerPath</span>))\n    | _ =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n    }\n  });\n  <span class=\"ident\" data-type=\"list(list(string)) => list(string)\" data-stamp-missing>List.concat</span>([\n    <span data-type=\"list(list(string))\"><span class=\"constructor\" data-type=\"list(list(string))\">(<span class=\"ident\" data-type=\"list((Longident.t, Typing.tag))\" data-local-use='Highlighting/1287'>normals</span> <span class=\"operator\" data-type=\"(\n  list((Longident.t, Typing.tag)),\n  list((Longident.t, Typing.tag)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (Longident.t, Typing.tag) => string,\n  list((Longident.t, Typing.tag))\n) => list(string)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Highlighting/1290' data-type=\"Longident.t\">lident</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1291' data-type=\"Typing.tag\">tag</span>)) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1292' data-type=\"Path.t\">fullPath</span> = <span class=\"ident\" data-type=\"(Path.t, Longident.t) => Path.t\" data-global-use='Typing/1051'>Typing.addLidentToPath</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1278'>openPath</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1290'>lident</span>);\n      <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n        <span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;span class=&quot;open-%s&quot; data-id=&quot;%s&quot;&gt;%s&lt;/span&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span>,\n        switch <span class=\"ident\" data-type=\"Typing.tag\" data-local-use='Highlighting/1291'>tag</span> {\n        | <span class=\"pattern-constructor\" data-type=\"Typing.tag\">Typing.Type</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;type&quot;</span>\n        | <span class=\"pattern-constructor\" data-type=\"Typing.tag\">Value</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;value&quot;</span>\n        | _ =&gt; <span class=\"string\" data-type=\"string\">&quot;item&quot;</span>\n        },\n        <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>, (<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1292'>fullPath</span>, <span class=\"ident\" data-type=\"Typing.tag\" data-local-use='Highlighting/1291'>tag</span>)),\n        <span class=\"ident\" data-type=\"Longident.t => string\" data-global-use='Typing/1028'>Typing.showLident</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1290'>lident</span>)\n      )\n    })),\n    <span data-type=\"list(list(string))\"><span class=\"ident\" data-type=\"(\n  Hashtbl.t(Longident.t, list(string)),\n  (Longident.t, list(string)) => string\n) => list(string)\" data-global-use='Highlighting/1271'>mapHash</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Longident.t, list(string))\" data-local-use='Highlighting/1280'>attrs</span>, (<span class=\"pattern-ident\" data-local-define='Highlighting/1293' data-type=\"Longident.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1294' data-type=\"list(string)\">attrs</span>) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1295' data-type=\"Path.t\">fullPath</span> = <span class=\"ident\" data-type=\"(Path.t, Longident.t) => Path.t\" data-global-use='Typing/1051'>Typing.addLidentToPath</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1278'>openPath</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1293'>path</span>);\n      <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n        <span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;span class=&quot;open-record&quot; data-id=&quot;%s&quot;&gt;%s&lt;/span&gt;|}</span></span></span></span></span></span></span></span></span></span>,\n        <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>, (<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1295'>fullPath</span>, <span class=\"constructor\" data-type=\"Typing.tag\">Typing.Type</span>)),\n        <span class=\"ident\" data-type=\"Longident.t => string\" data-global-use='Typing/1028'>Typing.showLident</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1293'>path</span>)\n      ) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; {&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;, &quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Highlighting/1294'>attrs</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1296' data-type=\"string\">attr</span> =&gt; {\n        <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n          <span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;span class=&quot;open-record-attribute&quot; data-id=&quot;%s&quot;&gt;%s&lt;/span&gt;|}</span></span></span></span></span></span></span></span></span></span>,\n          <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>, (<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1295'>fullPath</span>, <span class=\"constructor\" data-type=\"Typing.tag\">Typing.Attribute</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1296'>attr</span>))),\n          <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1296'>attr</span>\n        )\n      })) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;}&quot;</span>\n    }),\n    <span data-type=\"list(list(string))\"><span class=\"ident\" data-type=\"(\n  Hashtbl.t(Longident.t, list(string)),\n  (Longident.t, list(string)) => string\n) => list(string)\" data-global-use='Highlighting/1271'>mapHash</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Longident.t, list(string))\" data-local-use='Highlighting/1281'>constrs</span>, (<span class=\"pattern-ident\" data-local-define='Highlighting/1297' data-type=\"Longident.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1298' data-type=\"list(string)\">attrs</span>) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1299' data-type=\"Path.t\">fullPath</span> = <span class=\"ident\" data-type=\"(Path.t, Longident.t) => Path.t\" data-global-use='Typing/1051'>Typing.addLidentToPath</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1278'>openPath</span>, <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1297'>path</span>);\n      <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n        <span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;span class=&quot;open-type&quot; data-id=&quot;%s&quot;&gt;%s&lt;/span&gt;|}</span></span></span></span></span></span></span></span></span></span>,\n        <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>, (<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1299'>fullPath</span>, <span class=\"constructor\" data-type=\"Typing.tag\">Typing.Type</span>)),\n        <span class=\"ident\" data-type=\"Longident.t => string\" data-global-use='Typing/1028'>Typing.showLident</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1297'>path</span>)\n      ) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; (&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;|&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Highlighting/1298'>attrs</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1300' data-type=\"string\">attr</span> =&gt; {\n        <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n          <span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;span class=&quot;open-type-constructor&quot; data-id=&quot;%s&quot;&gt;%s&lt;/span&gt;|}</span></span></span></span></span></span></span></span></span></span>,\n          <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>, (<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1299'>fullPath</span>, <span class=\"constructor\" data-type=\"Typing.tag\">Typing.Constructor</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1300'>attr</span>))),\n          <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1300'>attr</span>\n        )\n      })) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;)&quot;</span>\n    }),</span></span></span></span>\n  ]) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;, &quot;</span>)\n}", "values": [{"id": "Highlighting/1266", "name": "pushHashList", "moduleName": "Highlighting"}, {"id": "Highlighting/1271", "name": "mapHash", "moduleName": "Highlighting"}, {"id": "Typing/1051", "name": "addLidentToPath", "moduleName": "Typing"}, {"id": "Typing/1028", "name": "showLident", "moduleName": "Typing"}, {"id": "Typing/1021", "name": "toString", "moduleName": "Typing"}, {"id": "Highlighting/1129", "name": "pathName", "moduleName": "Highlighting"}], "chars": 2139, "lines": 59, "type": "(Path.t, list((Longident.t, Typing.tag))) => string"},
"CliToInput/1008": {"name": "fail", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1008' data-type=\"string => 'a\">fail</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1009' data-type=\"string\">msg</span>) =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1009'>msg</span>);\n  <span class=\"ident\" data-type=\"int => 'a\" data-stamp-missing>exit</span>(<span class=\"int\" data-type=\"int\">1</span>);\n}", "values": [], "chars": 56, "lines": 3, "type": "string => 'a"},
"CliToInput/1029": {"name": "findMarkdownFiles", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1029' data-type=\"('a, string, string) => list(\n  (string, option(string), string)\n)\">findMarkdownFiles</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1030' data-type=\"'a\">projectName</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1031' data-type=\"string\">target</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1032' data-type=\"string\">base</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1033' data-type=\"bool\">targetIsInBase</span> = <span class=\"ident\" data-type=\"(string, string) => bool\" data-global-use='CliToInput/1026'>startsWith</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1031'>target</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1032'>base</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1034' data-type=\"list((string, option(string), string))\">foundFiles</span> = <span class=\"ident\" data-type=\"(string, string => bool) => list(string)\" data-stamp-missing>Files.collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1031'>target</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1035' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1035'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.md&quot;</span>))\n  <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list(\n    (string, option(string), string)\n  )\n) => list((string, option(string), string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  string => (string, option(string), string),\n  list(string)\n) => list((string, option(string), string))\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1036' data-type=\"string\">path</span> =&gt; {\n    (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1036'>path</span>, if (<span class=\"ident\" data-type=\"bool\" data-local-use='CliToInput/1033'>targetIsInBase</span>) { <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1032'>base</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1036'>path</span>)) } else {<span class=\"constructor\" data-type=\"option(string)\">None</span>},\n      <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1031'>target</span>, <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1036'>path</span>)) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;readme.md&quot;</span>\n      <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1036'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.html&quot;</span>\n      <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1036'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>)\n    )\n  });\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1037' data-type=\"string => bool\">isTopLevelReadme</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1038' data-type=\"string\">path</span> =&gt;\n    <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1038'>path</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1031'>target</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;readme.md&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span>\n    <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1038'>path</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1031'>target</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.md&quot;</span>;\n  if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(\n  (string, option(string), string) => bool,\n  list((string, option(string), string))\n) => bool\" data-stamp-missing>List.exists</span>(((<span class=\"pattern-ident\" data-local-define='CliToInput/1039' data-type=\"string\">path</span>, _, _)) =&gt; <span class=\"ident\" data-type=\"string => bool\" data-local-use='CliToInput/1037'>isTopLevelReadme</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1039'>path</span>), <span class=\"ident\" data-type=\"list((string, option(string), string))\" data-local-use='CliToInput/1034'>foundFiles</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1032'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;Readme.md&quot;</span>)) {\n    let <span class=\"pattern-ident\" data-local-define='CliToInput/1040' data-type=\"string\">readme</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1032'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;Readme.md&quot;</span>;\n    let <span class=\"pattern-ident\" data-local-define='CliToInput/1041' data-type=\"string\">readmeName</span> = <span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.readDirectory</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1032'>base</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => bool, list(string)) => string\" data-stamp-missing>List.find</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1042' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1042'>name</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;readme.md&quot;</span>);\n    let <span class=\"pattern-ident\" data-local-define='CliToInput/1043' data-type=\"string\">readme</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1032'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1041'>readmeName</span>;\n    [<span data-type=\"list((string, option(string), string))\">(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1032'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1041'>readmeName</span>, <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1041'>readmeName</span>), <span class=\"string\" data-type=\"string\">&quot;./index.html&quot;</span>), ...<span class=\"ident\" data-type=\"list((string, option(string), string))\" data-local-use='CliToInput/1034'>foundFiles</span></span>]\n  } else {\n    <span class=\"ident\" data-type=\"list((string, option(string), string))\" data-local-use='CliToInput/1034'>foundFiles</span>\n  }\n}", "values": [{"id": "CliToInput/1026", "name": "startsWith", "moduleName": "CliToInput"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 1068, "lines": 21, "type": "('a, string, string) => list(\n  (string, option(string), string)\n)"},
"CodeSnippets/1170": {"name": "optMap", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1170' data-type=\"('a => option('a), list('a)) => list('a)\">optMap</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1171' data-type=\"'a => option('a)\">fn</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1172' data-type=\"list('a)\">items</span>) =&gt; <span class=\"ident\" data-type=\"((list('a), 'a) => list('a), list('a), list('a)) => list('a)\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1173' data-type=\"list('a)\">result</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1174' data-type=\"'a\">item</span>) =&gt; switch (<span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='CodeSnippets/1171'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='CodeSnippets/1174'>item</span>)) { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"list('a)\" data-local-use='CodeSnippets/1173'>result</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1175' data-type=\"'a\">res</span>) =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='CodeSnippets/1175'>res</span>, ...<span class=\"ident\" data-type=\"list('a)\" data-local-use='CodeSnippets/1173'>result</span></span>]}, <span class=\"constructor\" data-type=\"list('a)\">[]</span>, <span class=\"ident\" data-type=\"list('a)\" data-local-use='CodeSnippets/1172'>items</span>)", "values": [], "chars": 142, "lines": 0, "type": "('a => option('a), list('a)) => list('a)"},
"InputToModel/1053": {"name": "parseCustom", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1053' data-type=\"(\n  string,\n  (\n    string,\n    option(string),\n    string\n  )\n) => State.Model.customPage\">parseCustom</span> = (<span class=\"pattern-ident\" data-local-define='InputToModel/1054' data-type=\"string\">base</span>, (<span class=\"pattern-ident\" data-local-define='InputToModel/1055' data-type=\"string\">absPath</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1056' data-type=\"option(string)\">sourcePath</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1057' data-type=\"string\">destPath</span>)) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='InputToModel/1058' data-type=\"string\">title</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='InputToModel/1049'>getTitle</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1055'>absPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1054'>base</span>);\n  /* let destPath = sourcePath |?&gt;&gt; htmlName |? title ++ &quot;.html&quot;; */\n  if (<span class=\"ident\" data-type=\"option(string)\" data-local-use='InputToModel/1056'>sourcePath</span> <span class=\"operator\" data-type=\"(option(string), option(string)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"option(string)\">None</span>) {\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;What no source path&quot;</span>);\n  };\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;absPath &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1055'>absPath</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; title &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1058'>title</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; dest &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1057'>destPath</span>);\n  <span data-type=\"State.Model.customPage\">{\n    <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1058'>title</span>,\n    <span class=\"ident\" data-type=\"option(string)\" data-local-use='InputToModel/1056'>sourcePath</span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1057'>destPath</span>,\n    contents: <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1055'>absPath</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Unable to read markdown file &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1055'>absPath</span>)\n  }</span>\n}", "values": [{"id": "InputToModel/1049", "name": "getTitle", "moduleName": "InputToModel"}, {"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}], "chars": 481, "lines": 13, "type": "(\n  string,\n  (\n    string,\n    option(string),\n    string\n  )\n) => State.Model.customPage"},
"CodeSnippets/1202": {"name": "invert", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1202' data-type=\"('a => bool, 'a) => bool\">invert</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1203' data-type=\"'a => bool\">f</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1204' data-type=\"'a\">a</span>) =&gt; <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"'a => bool\" data-local-use='CodeSnippets/1203'>f</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='CodeSnippets/1204'>a</span>)", "values": [], "chars": 28, "lines": 0, "type": "('a => bool, 'a) => bool"},
"CmtFindStamps/1016": {"name": "stampsFromTypesSignature", "moduleName": "CmtFindStamps", "html": "let rec <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1016' data-type=\"(('a, list(string)), list(Types.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)\">stampsFromTypesSignature</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1017' data-type=\"('a, list(string))\">currentPath</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1018' data-type=\"list(Types.signature_item)\">types</span>) =&gt; {\n  open Types;\n  <span class=\"ident\" data-type=\"(\n  Types.signature_item => option(\n    (int, ('a, list(string), T.pathType))\n  ),\n  list(Types.signature_item),\n  list((int, ('a, list(string), T.pathType)))\n) => list((int, ('a, list(string), T.pathType)))\" data-global-use='PrepareUtils/1061'>foldOpt</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1117' data-type=\"Types.signature_item\">item</span> =&gt; switch <span class=\"ident\" data-type=\"Types.signature_item\" data-local-use='CmtFindStamps/1117'>item</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Types.signature_item\">Sig_value</span>({<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1118' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1119' data-type=\"string\">name</span>}, {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1120' data-type=\"Types.type_expr\">val_type</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1121' data-type=\"Types.value_kind\">val_kind</span>}) =&gt; <span class=\"constructor\" data-type=\"option((int, ('a, list(string), T.pathType)))\">Some</span>((<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1118'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1017'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1119'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PValue</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"Types.signature_item\">Sig_type</span>({<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1122' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1123' data-type=\"string\">name</span>}, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1124' data-type=\"Types.type_declaration\">decl</span>, _) =&gt; <span class=\"constructor\" data-type=\"option((int, ('a, list(string), T.pathType)))\">Some</span>((<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1122'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1017'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1123'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PType</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"Types.signature_item\">Sig_modtype</span>({<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1125' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1126' data-type=\"string\">name</span>}, _) =&gt; <span class=\"constructor\" data-type=\"option((int, ('a, list(string), T.pathType)))\">Some</span>((<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1125'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1017'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1126'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PModule</span>)))\n  | _ =&gt; <span class=\"constructor\" data-type=\"option((int, ('a, list(string), T.pathType)))\">None</span>\n  }, <span class=\"ident\" data-type=\"list(Types.signature_item)\" data-local-use='CmtFindStamps/1018'>types</span>, <span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">[]</span>)\n}", "values": [{"id": "PrepareUtils/1061", "name": "foldOpt", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1008", "name": "addToPath", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1012", "name": "toFullPath", "moduleName": "PrepareUtils"}], "chars": 467, "lines": 8, "type": "(('a, list(string)), list(Types.signature_item)) => list(\n  (int, ('a, list(string), T.pathType))\n)"},
"CmtFindDocItems/1177": {"name": "moduleContentsStr", "moduleName": "CmtFindDocItems", "html": "and <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1177' data-type=\"Typedtree.module_expr => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\">moduleContentsStr</span> = ({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1213' data-type=\"Typedtree.module_expr_desc\">Typedtree.mod_desc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1215' data-type=\"Typedtree.attributes\">mod_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1214' data-type=\"Location.t\">mod_loc</span>}) =&gt; {\n  open Typedtree;\n  switch <span class=\"ident\" data-type=\"Typedtree.module_expr_desc\" data-local-use='CmtFindDocItems/1213'>mod_desc</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_structure</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1216' data-type=\"Typedtree.structure\">structure</span>) =&gt; {\n    let (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1223' data-type=\"option(Omd.t)\">docc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1224' data-type=\"list(State.Model.Docs.doc)\">contents</span>) = <span class=\"ident\" data-type=\"list(Typedtree.structure_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='CmtFindDocItems/1176'>docItemsFromStructure</span>(<span class=\"ident\" data-type=\"Typedtree.structure\" data-local-use='CmtFindDocItems/1216'>structure</span>.<span class=\"field\" data-type=\"list(Typedtree.structure_item)\">str_items</span>);\n    (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1223'>docc</span>, <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Items</span>(<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1224'>contents</span>))\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_constraint</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1217' data-type=\"Typedtree.module_expr\">mmod</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1218' data-type=\"Types.module_type\">mtyp</span>, _, _) =&gt; {\n    /* TODO this should probably be the mtyp. why? */\n    <span class=\"ident\" data-type=\"Typedtree.module_expr => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\" data-global-use='CmtFindDocItems/1177'>moduleContentsStr</span>(<span class=\"ident\" data-type=\"Typedtree.module_expr\" data-local-use='CmtFindDocItems/1217'>mmod</span>)\n    /* moduleContentsSig(mtyp, typesByLoc) */\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_ident</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1219' data-type=\"Path.t\">path</span>, _) =&gt; (<span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1215'>mod_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Alias</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1219'>path</span>))\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_functor</span>(_, _, _, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1220' data-type=\"Typedtree.module_expr\">result</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.module_expr => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\" data-global-use='CmtFindDocItems/1177'>moduleContentsStr</span>(<span class=\"ident\" data-type=\"Typedtree.module_expr\" data-local-use='CmtFindDocItems/1220'>result</span>) <span class=\"operator\" data-type=\"(\n  (option(Omd.t), State.Model.Docs.moduleContents),\n  (option(Omd.t), State.Model.Docs.moduleContents) => (\n    option(Omd.t),\n    State.Model.Docs.moduleContents\n  )\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  option(Omd.t) => option(Omd.t),\n  (option(Omd.t), State.Model.Docs.moduleContents)\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-global-use='CmtFindDocItems/1168'>mapFst</span>(<span class=\"ident\" data-type=\"(option(Omd.t), option(Omd.t)) => option(Omd.t)\" data-global-use='CmtFindDocItems/1163'>either</span>(<span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1215'>mod_attributes</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_apply</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1221' data-type=\"Typedtree.module_expr\">inner</span>, _, _) =&gt; <span class=\"ident\" data-type=\"Typedtree.module_expr => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\" data-global-use='CmtFindDocItems/1177'>moduleContentsStr</span>(<span class=\"ident\" data-type=\"Typedtree.module_expr\" data-local-use='CmtFindDocItems/1221'>inner</span>) <span class=\"operator\" data-type=\"(\n  (option(Omd.t), State.Model.Docs.moduleContents),\n  (option(Omd.t), State.Model.Docs.moduleContents) => (\n    option(Omd.t),\n    State.Model.Docs.moduleContents\n  )\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  option(Omd.t) => option(Omd.t),\n  (option(Omd.t), State.Model.Docs.moduleContents)\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-global-use='CmtFindDocItems/1168'>mapFst</span>(<span class=\"ident\" data-type=\"(option(Omd.t), option(Omd.t)) => option(Omd.t)\" data-global-use='CmtFindDocItems/1163'>either</span>(<span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1215'>mod_attributes</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_unpack</span>(_, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1222' data-type=\"Types.module_type\">typ</span>) =&gt; (<span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1215'>mod_attributes</span>), <span class=\"ident\" data-type=\"Types.module_type => State.Model.Docs.moduleContents\" data-global-use='CmtFindDocItems/1178'>moduleContentsType</span>(<span class=\"ident\" data-type=\"Types.module_type\" data-local-use='CmtFindDocItems/1222'>typ</span>))\n  }\n}", "values": [{"id": "CmtFindDocItems/1176", "name": "docItemsFromStructure", "moduleName": "CmtFindDocItems"}, {"id": "CmtFindDocItems/1168", "name": "mapFst", "moduleName": "CmtFindDocItems"}, {"id": "CmtFindDocItems/1163", "name": "either", "moduleName": "CmtFindDocItems"}, {"id": "PrepareUtils/1051", "name": "findDocAttribute", "moduleName": "PrepareUtils"}, {"id": "CmtFindDocItems/1178", "name": "moduleContentsType", "moduleName": "CmtFindDocItems"}], "chars": 818, "lines": 17, "type": "Typedtree.module_expr => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)"},
"CmtFindStamps/1146": {"name": "stampsFromTypedtreeImplementation", "moduleName": "CmtFindStamps", "html": "let rec <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1146' data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list((int, ('a, list(string), T.pathType)))\">stampsFromTypedtreeImplementation</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1147' data-type=\"('a, list(string))\">currentPath</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1148' data-type=\"list(Typedtree.structure_item)\">types</span>) =&gt; {\n  open Typedtree;\n  <span class=\"ident\" data-type=\"(\n  (\n    list((int, ('a, list(string), T.pathType))),\n    Typedtree.structure_item\n  ) => list((int, ('a, list(string), T.pathType))),\n  list((int, ('a, list(string), T.pathType))),\n  list(Typedtree.structure_item)\n) => list((int, ('a, list(string), T.pathType)))\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1149' data-type=\"list((int, ('a, list(string), T.pathType)))\">items</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1150' data-type=\"Typedtree.structure_item\">item</span>) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1151' data-type=\"list((int, ('a, list(string), T.pathType)))\">more</span> = switch (<span class=\"ident\" data-type=\"Typedtree.structure_item\" data-local-use='CmtFindStamps/1150'>item</span>.<span class=\"field\" data-type=\"Typedtree.structure_item_desc\">str_desc</span>) {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_value</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1152' data-type=\"Asttypes.rec_flag\">_rec</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1153' data-type=\"list(Typedtree.value_binding)\">bindings</span>) =&gt; (\n        <span class=\"ident\" data-type=\"list(Typedtree.value_binding)\" data-local-use='CmtFindStamps/1153'>bindings</span> <span class=\"operator\" data-type=\"(\n  list(Typedtree.value_binding),\n  list(Typedtree.value_binding) => list(\n    (int, ('a, list(string), T.pathType))\n  )\n) => list((int, ('a, list(string), T.pathType)))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  Typedtree.value_binding => option(\n    (int, ('a, list(string), T.pathType))\n  ),\n  list(Typedtree.value_binding)\n) => list((int, ('a, list(string), T.pathType)))\" data-global-use='PrepareUtils/1016'>filterNil</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1170' data-type=\"Typedtree.value_binding\">binding</span> =&gt; switch <span class=\"ident\" data-type=\"Typedtree.value_binding\" data-local-use='CmtFindStamps/1170'>binding</span> {\n        | {vb_pat: {pat_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_var</span>({<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1171' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1172' data-type=\"string\">name</span>}, _)}} =&gt; <span class=\"constructor\" data-type=\"option((int, ('a, list(string), T.pathType)))\">Some</span>((<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1171'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1172'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PValue</span>)))\n        | _ =&gt; <span class=\"constructor\" data-type=\"option((int, ('a, list(string), T.pathType)))\">None</span>\n        }),\n      )\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_type</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1154' data-type=\"list(Typedtree.type_declaration)\">decls</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Typedtree.type_declaration => (\n    int,\n    ('a, list(string), T.pathType)\n  ),\n  list(Typedtree.type_declaration)\n) => list((int, ('a, list(string), T.pathType)))\" data-stamp-missing>List.map</span>(({typ_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1173' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1174' data-type=\"string\">name</span>}}) =&gt; (<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1173'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1174'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PType</span>)), <span class=\"ident\" data-type=\"list(Typedtree.type_declaration)\" data-local-use='CmtFindStamps/1154'>decls</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_module</span>({mb_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1155' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1156' data-type=\"string\">name</span>}, mb_expr: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1159' data-type=\"Types.module_type\">mod_type</span>, mod_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_structure</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1157' data-type=\"Typedtree.structure\">structure</span>) | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_constraint</span>({mod_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_structure</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1157' data-type=\"Typedtree.structure\">structure</span>)}, _, _, _)}})\n       =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1175' data-type=\"list((int, ('a, list(string), T.pathType)))\">stamps</span>) = <span class=\"ident\" data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list((int, ('a, list(string), T.pathType)))\" data-global-use='CmtFindStamps/1146'>stampsFromTypedtreeImplementation</span>(<span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1156'>name</span>), <span class=\"ident\" data-type=\"Typedtree.structure\" data-local-use='CmtFindStamps/1157'>structure</span>.<span class=\"field\" data-type=\"list(Typedtree.structure_item)\">str_items</span>);\n        [<span data-type=\"list((int, ('a, list(string), T.pathType)))\">(<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1155'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1156'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PModule</span>)), ...<span class=\"ident\" data-type=\"list((int, ('a, list(string), T.pathType)))\" data-local-use='CmtFindStamps/1175'>stamps</span></span>]\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_modtype</span>({mtd_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1160' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1161' data-type=\"string\">name</span>}, mtd_type: <span class=\"pattern-constructor\" data-type=\"option(Typedtree.module_type)\">Some</span>({mty_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_signature</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1162' data-type=\"Typedtree.signature\">signature</span>), <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1163' data-type=\"Types.module_type\">mty_type</span>})}) =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1176' data-type=\"list((int, ('a, list(string), T.pathType)))\">stamps</span>) = <span class=\"ident\" data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), T.pathType)))\" data-global-use='CmtFindStamps/1127'>stampsFromTypedtreeInterface</span>(<span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1161'>name</span>), <span class=\"ident\" data-type=\"Typedtree.signature\" data-local-use='CmtFindStamps/1162'>signature</span>.<span class=\"field\" data-type=\"list(Typedtree.signature_item)\">sig_items</span>);\n        [<span data-type=\"list((int, ('a, list(string), T.pathType)))\">(<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1160'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1161'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PModule</span>)), ...<span class=\"ident\" data-type=\"list((int, ('a, list(string), T.pathType)))\" data-local-use='CmtFindStamps/1176'>stamps</span></span>]\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_module</span>({mb_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1164' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1165' data-type=\"string\">name</span>}}) =&gt; [<span data-type=\"list((int, ('a, list(string), T.pathType)))\"><span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">(<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1164'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1165'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PModule</span>))</span></span>]\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_include</span>({<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1168' data-type=\"Location.t\">incl_loc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1166' data-type=\"Typedtree.module_expr\">incl_mod</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1169' data-type=\"list(Typedtree.attribute)\">incl_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1167' data-type=\"Types.signature\">incl_type</span>}) =&gt; {\n        <span class=\"ident\" data-type=\"(('a, list(string)), Types.signature) => list(\n  (int, ('a, list(string), T.pathType))\n)\" data-global-use='CmtFindStamps/1016'>stampsFromTypesSignature</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1147'>currentPath</span>, <span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindStamps/1167'>incl_type</span>)\n      }\n      | _ =&gt; <span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">[]</span>\n      };\n      <span class=\"ident\" data-type=\"list((int, ('a, list(string), T.pathType)))\" data-local-use='CmtFindStamps/1151'>more</span> <span class=\"operator\" data-type=\"(\n  list((int, ('a, list(string), T.pathType))),\n  list((int, ('a, list(string), T.pathType)))\n) => list((int, ('a, list(string), T.pathType)))\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"list((int, ('a, list(string), T.pathType)))\" data-local-use='CmtFindStamps/1149'>items</span>\n  }, <span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">[]</span>, <span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='CmtFindStamps/1148'>types</span>)\n}", "values": [{"id": "PrepareUtils/1016", "name": "filterNil", "moduleName": "PrepareUtils"}, {"id": "CmtFindStamps/1127", "name": "stampsFromTypedtreeInterface", "moduleName": "CmtFindStamps"}, {"id": "PrepareUtils/1008", "name": "addToPath", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1012", "name": "toFullPath", "moduleName": "PrepareUtils"}, {"id": "CmtFindStamps/1016", "name": "stampsFromTypesSignature", "moduleName": "CmtFindStamps"}], "chars": 1566, "lines": 28, "type": "(\n  ('a, list(string)),\n  list(Typedtree.structure_item)\n) => list((int, ('a, list(string), T.pathType)))"},
"MakeIndex/1009": {"name": "run", "moduleName": "MakeIndex", "html": "let <span class=\"pattern-ident\" data-local-define='MakeIndex/1009' data-type=\"(string, string) => unit\">run</span> = (<span class=\"pattern-ident\" data-local-define='MakeIndex/1010' data-type=\"string\">elasticLunrLoc</span>, <span class=\"pattern-ident\" data-local-define='MakeIndex/1011' data-type=\"string\">jsonLoc</span>) =&gt; {\n  let (<span class=\"pattern-ident\" data-local-define='MakeIndex/1012' data-type=\"list(string)\">output</span>, <span class=\"pattern-ident\" data-local-define='MakeIndex/1013' data-type=\"bool\">success</span>) = <span class=\"ident\" data-type=\"(string, string) => (list(string), bool)\" data-global-use='Commands/1040'>Commands.execWithInput</span>(<span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|node -e %S -- %S %S|}</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-global-use='MakeIndex/1008'>source</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MakeIndex/1010'>elasticLunrLoc</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MakeIndex/1011'>jsonLoc</span>), <span class=\"ident\" data-type=\"string\" data-global-use='MakeIndex/1008'>source</span>);\n  if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"bool\" data-local-use='MakeIndex/1013'>success</span>) {\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;ERROR generating search index. Your site will mostly work, but people wont be able to search.&quot;</span>);\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='MakeIndex/1012'>output</span>))\n  /* } else { */\n    /* print_endline(&quot;Good&quot;); */\n    /* print_endline(String.concat(&quot;\\n&quot;, output)) */\n  };\n}", "values": [{"id": "Commands/1040", "name": "execWithInput", "moduleName": "Commands"}, {"id": "MakeIndex/1008", "name": "source", "moduleName": "MakeIndex"}], "chars": 463, "lines": 9, "type": "(string, string) => unit"},
"CliToInput/1150": {"name": "getBsbVersion", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1150' data-type=\"string => string\">getBsbVersion</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1151' data-type=\"string\">base</span> =&gt; {\n  let (<span class=\"pattern-ident\" data-local-define='CliToInput/1152' data-type=\"list(string)\">out</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1153' data-type=\"bool\">success</span>) = <span class=\"ident\" data-type=\"string => (list(string), bool)\" data-global-use='Commands/1034'>Commands.execSync</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1151'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;node_modules/.bin/bsb -version&quot;</span>);\n  if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"bool\" data-local-use='CliToInput/1153'>success</span>) {\n    &quot;2.2.3&quot;\n  } else {\n    let <span class=\"pattern-ident\" data-local-define='CliToInput/1154' data-type=\"string\">out</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1152'>out</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>;\n    <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1154'>out</span>\n  }\n}", "values": [{"id": "Commands/1034", "name": "execSync", "moduleName": "Commands"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 221, "lines": 8, "type": "string => string"},
"CodeSnippets/1062": {"name": "shouldBundle", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1062' data-type=\"State.Model.expectation => bool\">shouldBundle</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1063' data-type=\"State.Model.expectation\">expectation</span> =&gt; switch <span class=\"ident\" data-type=\"State.Model.expectation\" data-local-use='CodeSnippets/1063'>expectation</span> {\n| <span class=\"pattern-constructor\" data-type=\"State.Model.expectation\">State.Model.Succeed</span> | <span class=\"pattern-constructor\" data-type=\"State.Model.expectation\">Raise</span> =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n| _ =&gt; <span class=\"constructor\" data-type=\"bool\">false</span>\n}", "values": [], "chars": 107, "lines": 3, "type": "State.Model.expectation => bool"},
"CodeSnippets/1088": {"name": "splitLines", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1088' data-type=\"string => list(string)\">splitLines</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1089' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string) => list(string)\" data-stamp-missing>Str.split</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1089'>text</span>)", "values": [], "chars": 65, "lines": 0, "type": "string => list(string)"},
"CliToInput/1019": {"name": "oneShouldExist", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1019' data-type=\"(string, list(string)) => string\">oneShouldExist</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1020' data-type=\"string\">message</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1021' data-type=\"list(string)\">items</span>) =&gt; {\n  let rec <span class=\"pattern-ident\" data-local-define='CliToInput/1022' data-type=\"list(string) => string\">loop</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1023' data-type=\"list(string)\">left</span> =&gt; switch <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1023'>left</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(string)\">[]</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-global-use='CliToInput/1008'>fail</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1020'>message</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; Looked at &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;, &quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1021'>items</span>))\n  | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CliToInput/1024' data-type=\"string\">one</span>, ...<span class=\"pattern-ident\" data-local-define='CliToInput/1025' data-type=\"list(string)\">more</span></span>] =&gt; <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1024'>one</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1024'>one</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"list(string) => string\" data-local-use='CliToInput/1022'>loop</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1025'>more</span>)\n  };\n  <span class=\"ident\" data-type=\"list(string) => string\" data-local-use='CliToInput/1022'>loop</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1021'>items</span>)\n}", "values": [{"id": "CliToInput/1008", "name": "fail", "moduleName": "CliToInput"}], "chars": 232, "lines": 6, "type": "(string, list(string)) => string"},
"GenerateDoc/1189": {"name": "marked", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1189' data-type=\"(\n  Omd_representation.element => option(string),\n  string\n) => string\">marked</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1190' data-type=\"Omd_representation.element => option(string)\">override</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1191' data-type=\"string\">text</span>) =&gt; <span class=\"ident\" data-type=\"(\n  ~?override: option(\n    Omd_representation.element => option(string)\n  ),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(Omd.code_stylist),\n  Omd.t\n) => string\" data-stamp-missing>Omd.to_html</span>(~<span class=\"ident\" data-type=\"Omd_representation.element => option(string)\" data-local-use='GenerateDoc/1190'>override</span>, <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1191'>text</span>))", "values": [], "chars": 76, "lines": 0, "type": "(\n  Omd_representation.element => option(string),\n  string\n) => string"},
"ProcessCode/1118": {"name": "codeFromPackage", "moduleName": "ProcessCode", "html": "let <span class=\"pattern-ident\" data-local-define='ProcessCode/1118' data-type=\"State.Model.package => list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\">codeFromPackage</span> = ({\n  <span class=\"pattern-ident\" data-local-define='ProcessCode/1119' data-type=\"string\">State.Model.name</span>,\n  <span class=\"pattern-ident\" data-local-define='ProcessCode/1121' data-type=\"list(State.Model.topModule)\">modules</span>,\n  <span class=\"pattern-ident\" data-local-define='ProcessCode/1120' data-type=\"list(State.Model.customPage)\">custom</span>,\n  <span class=\"pattern-ident\" data-local-define='ProcessCode/1122' data-type=\"bool\">namespaced</span>,\n  <span class=\"pattern-ident\" data-local-define='ProcessCode/1123' data-type=\"State.backend\">backend</span>,\n  <span class=\"pattern-ident\" data-local-define='ProcessCode/1124' data-type=\"option(State.Model.codeOptions)\">defaultCodeOptions</span>,\n}) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1125' data-type=\"list((string, Omd.name, string, State.Model.codeOptions))\">codeBlocks</span> = <span class=\"ident\" data-type=\"(\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  option(State.Model.codeOptions)\n) => list(\n  (string, Omd.name, string, State.Model.codeOptions)\n)\" data-global-use='ProcessCode/1034'>collectBlocks</span>(<span class=\"ident\" data-type=\"list(State.Model.topModule)\" data-local-use='ProcessCode/1121'>modules</span>, <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ProcessCode/1120'>custom</span>, <span class=\"ident\" data-type=\"option(State.Model.codeOptions)\" data-local-use='ProcessCode/1124'>defaultCodeOptions</span>);\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1126' data-type=\"Hashtbl.t(string, string)\">shared</span> = <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    Omd.name,\n    string,\n    State.Model.codeOptions\n  )\n) => Hashtbl.t(string, string)\" data-global-use='ProcessCode/1043'>resolveShared</span>(<span class=\"ident\" data-type=\"list((string, Omd.name, string, State.Model.codeOptions))\" data-local-use='ProcessCode/1125'>codeBlocks</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1127' data-type=\"list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\">processedCodeBlocks</span> = <span class=\"ident\" data-type=\"list((string, Omd.name, string, State.Model.codeOptions))\" data-local-use='ProcessCode/1125'>codeBlocks</span> <span class=\"operator\" data-type=\"(\n  list((string, Omd.name, string, State.Model.codeOptions)),\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      State.Model.codeOptions\n    )\n  ) => list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, Omd.name, string, State.Model.codeOptions) => (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  ),\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='ProcessCode/1128' data-type=\"string\">page</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1129' data-type=\"Omd.name\">lang</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1130' data-type=\"string\">content</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1131' data-type=\"State.Model.codeOptions\">options</span>)) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='ProcessCode/1132' data-type=\"string\">fullContent</span> = switch (<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1131'>options</span>.<span class=\"field\" data-type=\"option(string)\">State.Model.sharedAs</span>) {\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"ident\" data-type=\"(\n  string => string,\n  State.Model.codeOptions,\n  string\n) => string\" data-global-use='CodeSnippets/1114'>CodeSnippets.fullContent</span>(<span class=\"ident\" data-type=\"(Hashtbl.t(string, string), string) => string\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, string)\" data-local-use='ProcessCode/1126'>shared</span>), <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1131'>options</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1130'>content</span>)\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='ProcessCode/1133' data-type=\"string\">name</span>) =&gt; <span class=\"ident\" data-type=\"(Hashtbl.t(string, string), string) => string\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, string)\" data-local-use='ProcessCode/1126'>shared</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1133'>name</span>)\n    };\n    (<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1128'>page</span>, <span class=\"ident\" data-type=\"Omd.name\" data-local-use='ProcessCode/1129'>lang</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1130'>content</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1132'>fullContent</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1131'>options</span>)\n  });\n\n  <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\" data-local-use='ProcessCode/1127'>processedCodeBlocks</span> <span class=\"operator\" data-type=\"(\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  ),\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  ) => list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  ) => bool,\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\" data-stamp-missing>List.filter</span>(((_, _, _, _, <span class=\"pattern-ident\" data-local-define='ProcessCode/1134' data-type=\"State.Model.codeOptions\">options</span>)) =&gt; <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1134'>options</span>.<span class=\"field\" data-type=\"State.Model.expectation\">State.Model.expectation</span> <span class=\"operator\" data-type=\"(State.Model.expectation, State.Model.expectation) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"State.Model.expectation\">Skip</span>)\n}", "values": [{"id": "ProcessCode/1034", "name": "collectBlocks", "moduleName": "ProcessCode"}, {"id": "ProcessCode/1043", "name": "resolveShared", "moduleName": "ProcessCode"}, {"id": "CodeSnippets/1114", "name": "fullContent", "moduleName": "CodeSnippets"}], "chars": 680, "lines": 20, "type": "State.Model.package => list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)"},
"CliToInput/1140": {"name": "parse", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1140' data-type=\"(\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)\">parse</span> = <span class=\"ident\" data-type=\"(\n  ~?alias: option(list((string, Minimist.StrSet.elt))),\n  ~?presence: option(list(Minimist.StrSet.elt)),\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  ~?strings: option(list(Minimist.StrSet.elt)),\n  ~?multi: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)\" data-stamp-missing>Minimist.parse</span>(\n  ~alias=[<span data-type=\"list((string, Minimist.StrSet.elt))\"><span class=\"constructor\" data-type=\"list((string, Minimist.StrSet.elt))\">(<span class=\"string\" data-type=\"string\">&quot;h&quot;</span>, <span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;help&quot;</span>), <span data-type=\"list((string, Minimist.StrSet.elt))\">(<span class=\"string\" data-type=\"string\">&quot;test&quot;</span>, <span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;doctest&quot;</span>)</span></span></span>],\n  ~presence=[<span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"constructor\" data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;help&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;doctest&quot;</span></span></span></span>],\n  ~multi=[<span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"constructor\" data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;project-file&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;dependency-directory&quot;</span></span></span></span>],\n  ~strings=[<span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"constructor\" data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;target&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;root&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;name&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;bs-root&quot;</span></span></span></span></span></span>]\n)", "values": [], "chars": 209, "lines": 5, "type": "(\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)"},
"Descartes/1008": {"name": "filterNil", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1008' data-type=\"('a => option('a), list('a)) => list('a)\">filterNil</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1009' data-type=\"'a => option('a)\">fn</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1010' data-type=\"list('a)\">items</span>) =&gt; <span class=\"ident\" data-type=\"((list('a), 'a) => list('a), list('a), list('a)) => list('a)\" data-stamp-missing>List.fold_left</span>(\n  (<span class=\"pattern-ident\" data-local-define='Descartes/1011' data-type=\"list('a)\">items</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1012' data-type=\"'a\">item</span>) =&gt; switch (<span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='Descartes/1009'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1012'>item</span>)) {\n  | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1011'>items</span>\n  | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1013' data-type=\"'a\">item</span>) =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1013'>item</span>, ...<span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1011'>items</span></span>]\n  },\n  <span class=\"constructor\" data-type=\"list('a)\">[]</span>,\n  <span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1010'>items</span>\n)", "values": [], "chars": 159, "lines": 7, "type": "('a => option('a), list('a)) => list('a)"},
"Template/1009": {"name": "final", "moduleName": "Template", "html": "let <span class=\"pattern-ident\" data-local-define='Template/1009' data-type=\"string\">final</span> = <span class=\"string\" data-type=\"string\">{|\n  &lt;div id=&quot;type_hover&quot;&gt;Hello&lt;/div&gt;\n&lt;script&gt;\n\n  const t = document.getElementById(&#39;type_hover&#39;)\n  document.getElementById(&#39;main&#39;).addEventListener(&#39;mousemove&#39;, evt =&gt; {\n    t.style.top = evt.pageY + &#39;px&#39;\n    t.style.left = evt.pageX + &#39;px&#39;\n  });\n\n  document.getElementById(&#39;main&#39;).addEventListener(&#39;mouseover&#39;, evt =&gt; {\n    const id = evt.target.getAttribute(&#39;data-id&#39;)\n    if (id) {\n      [].map.call(document.querySelectorAll(&#39;[data-id=&quot;&#39; + id + &#39;&quot;]&#39;), el =&gt; {\n        el.classList.add(&#39;hovered&#39;)\n      })\n    }\n    let el = evt.target\n    while (el &amp;&amp; el !== document.body) {\n      const type = el.getAttribute(&#39;data-type&#39;)\n      if (type) {\n        t.innerText = TYPES_LIST[type]\n        /* console.log(TYPES_LIST[type]) */\n        ;[].map.call(document.querySelectorAll(&#39;.type-hovered&#39;), x =&gt; x.classList.remove(&#39;type-hovered&#39;))\n        el.classList.add(&#39;type-hovered&#39;)\n        break\n      }\n      el = el.parentElement\n    }\n  })\n\n  document.getElementById(&#39;main&#39;).addEventListener(&#39;mouseout&#39;, evt =&gt; {\n    const id = evt.target.getAttribute(&#39;data-id&#39;)\n      evt.target.classList.remove(&#39;type-hovered&#39;)\n    if (id) {\n      [].map.call(document.querySelectorAll(&#39;[data-id=&quot;&#39; + id + &#39;&quot;]&#39;), el =&gt; {\n        el.classList.remove(&#39;hovered&#39;)\n      })\n    }\n  })\n\n&lt;/script&gt;\n|}</span>", "values": [], "chars": 1288, "lines": 42, "type": "string"},
"PrintType/1054": {"name": "htmlEscape", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1054' data-type=\"string => string\">htmlEscape</span> = <span class=\"pattern-ident\" data-local-define='PrintType/1055' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"(string, string, string) => string\" data-global-use='PrintType/1050'>replace</span>(<span class=\"string\" data-type=\"string\">&quot;&lt;&quot;</span>, <span class=\"string\" data-type=\"string\">&quot;&amp;lt;&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1055'>text</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, string, string) => string\" data-global-use='PrintType/1050'>replace</span>(<span class=\"string\" data-type=\"string\">&quot;&gt;&quot;</span>, <span class=\"string\" data-type=\"string\">&quot;&amp;gt;&quot;</span>)", "values": [{"id": "PrintType/1050", "name": "replace", "moduleName": "PrintType"}], "chars": 75, "lines": 0, "type": "string => string"},
"Typing/1046": {"name": "pathToLident", "moduleName": "Typing", "html": "let rec <span class=\"pattern-ident\" data-local-define='Typing/1046' data-type=\"Path.t => Longident.t\">pathToLident</span> = Longident.(Path.(<span class=\"pattern-ident\" data-local-define='Typing/1047' data-type=\"Path.t\">path</span> =&gt; switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1047'>path</span> {\n| <span class=\"pattern-constructor\" data-type=\"Path.t\">Pident</span>({<span class=\"pattern-ident\" data-local-define='Typing/1048' data-type=\"string\">Ident.name</span>}) =&gt; <span class=\"constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Typing/1048'>name</span>)\n| <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1049' data-type=\"Path.t\">a</span>, <span class=\"pattern-ident\" data-local-define='Typing/1050' data-type=\"string\">b</span>, _) =&gt; <span class=\"constructor\" data-type=\"Longident.t\">Ldot</span>(<span class=\"ident\" data-type=\"Path.t => Longident.t\" data-global-use='Typing/1046'>pathToLident</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1049'>a</span>), <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1050'>b</span>)\n| _ =&gt; assert(<span class=\"constructor\" data-type=\"bool\">false</span>)\n}))", "values": [], "chars": 169, "lines": 4, "type": "Path.t => Longident.t"},
"State/1055": {"name": "defaultOptions", "moduleName": "State", "html": "let <span class=\"pattern-ident\" data-local-define='State/1055' data-type=\"codeOptions\">defaultOptions</span> = <span data-type=\"codeOptions\">{\n    context: <span class=\"constructor\" data-type=\"codeContext\">Normal</span>,\n    lang: <span class=\"constructor\" data-type=\"lang\">Reason</span>,\n    expectation: <span class=\"constructor\" data-type=\"expectation\">Succeed</span>,\n    codeDisplay: <span data-type=\"codeDisplay\">{\n      prefix: <span class=\"int\" data-type=\"int\">0</span>,\n      suffix: <span class=\"int\" data-type=\"int\">0</span>,\n      noEdit: <span class=\"constructor\" data-type=\"bool\">false</span>,\n      hide: <span class=\"constructor\" data-type=\"bool\">false</span>,\n    }</span>,\n    sharedAs: <span class=\"constructor\" data-type=\"option(string)\">None</span>,\n    uses: <span class=\"constructor\" data-type=\"list(string)\">[]</span>,\n  }</span>", "values": [], "chars": 225, "lines": 12, "type": "codeOptions"},
"Infix/1036": {"name": "fold", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1036' data-type=\"(option('a), 'a, 'a => 'a) => 'a\">fold</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1037' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1038' data-type=\"'a\">d</span>, <span class=\"pattern-ident\" data-local-define='Infix/1039' data-type=\"'a => 'a\">f</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1037'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1038'>d</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1040' data-type=\"'a\">v</span>) =&gt; <span class=\"ident\" data-type=\"'a => 'a\" data-local-use='Infix/1039'>f</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1040'>v</span>) }", "values": [], "chars": 66, "lines": 0, "type": "(option('a), 'a, 'a => 'a) => 'a"},
"MainAux/1096": {"name": "startsWith", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1096' data-type=\"(string, string) => bool\">startsWith</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1097' data-type=\"string\">prefix</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1098' data-type=\"string\">string</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1099' data-type=\"int\">lp</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1097'>prefix</span>);\n  <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1099'>lp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1098'>string</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1098'>string</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1099'>lp</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1097'>prefix</span>\n}", "values": [], "chars": 143, "lines": 3, "type": "(string, string) => bool"},
"NewMain/1035": {"name": "startsWith", "moduleName": "NewMain", "html": "let <span class=\"pattern-ident\" data-local-define='NewMain/1035' data-type=\"(string, string) => bool\">startsWith</span> = (<span class=\"pattern-ident\" data-local-define='NewMain/1036' data-type=\"string\">prefix</span>, <span class=\"pattern-ident\" data-local-define='NewMain/1037' data-type=\"string\">string</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1038' data-type=\"int\">lp</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1036'>prefix</span>);\n  <span class=\"ident\" data-type=\"int\" data-local-use='NewMain/1038'>lp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1037'>string</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1037'>string</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"int\" data-local-use='NewMain/1038'>lp</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1036'>prefix</span>\n}", "values": [], "chars": 143, "lines": 3, "type": "(string, string) => bool"},
"PrintType/1030": {"name": "dedent", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1030' data-type=\"Pretty.doc\">dedent</span> = <span class=\"ident\" data-type=\"(int, string) => Pretty.doc\" data-stamp-missing>Pretty.back</span>(<span class=\"int\" data-type=\"int\">2</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>)", "values": [], "chars": 31, "lines": 0, "type": "Pretty.doc"},
"ModelToOutput/1015": {"name": "makeSearchPage", "moduleName": "ModelToOutput", "html": "let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1015' data-type=\"(\n  ~markdowns: list(State.Model.customPage),\n  ~names: list(string),\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  )\n) => unit\">makeSearchPage</span> = (~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1016' data-type=\"list(State.Model.customPage)\">markdowns</span>, ~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1017' data-type=\"list(string)\">names</span>, ~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1018' data-type=\"string\">cssLoc</span>, ~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1019' data-type=\"string\">jsLoc</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1020' data-type=\"string\">dest</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1021' data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\">searchables</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1022' data-type=\"string\">path</span> = <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;search.html&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1023' data-type=\"string => string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1022'>path</span>));\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1024' data-type=\"list((string, string))\">markdowns</span> = <span class=\"ident\" data-type=\"(\n  State.Model.customPage => (string, string),\n  list(State.Model.customPage)\n) => list((string, string))\" data-stamp-missing>List.map</span>(({<span class=\"pattern-ident\" data-local-define='ModelToOutput/1025' data-type=\"string\">State.Model.title</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1026' data-type=\"string\">destPath</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1027' data-type=\"State.Model.docWithExamples\">contents</span>}) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1026'>destPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1025'>title</span>), <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ModelToOutput/1016'>markdowns</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1028' data-type=\"list((string, string))\">projectListing</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1017'>names</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='ModelToOutput/1029' data-type=\"string\">name</span> =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1023'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;api&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1029'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1029'>name</span>));\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1030' data-type=\"string\">main</span> = <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|\n    &lt;input placeholder=&quot;Search the docs&quot; id=&quot;search-input&quot;/&gt;\n    &lt;style&gt;%s&lt;/style&gt;\n    &lt;div id=&quot;search-results&quot;&gt;&lt;/div&gt;\n    &lt;link rel=stylesheet href=&quot;search.css&quot;&gt;\n    &lt;script defer src=&quot;searchables.json.index.js&quot;&gt;&lt;/script&gt;\n    &lt;script defer src=&quot;elasticlunr.js&quot;&gt;&lt;/script&gt;\n    &lt;script defer src=&quot;search.js&quot;&gt;&lt;/script&gt;\n  |}</span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-global-use='DocsTemplate/1008'>DocsTemplate.searchStyle</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1031' data-type=\"string\">html</span> = <span class=\"ident\" data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option(string),\n  ~jsLoc: option(string),\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\" data-global-use='Docs/1019'>Docs.page</span>(~sourceUrl=<span class=\"constructor\" data-type=\"option(string)\">None</span>, ~relativeToRoot=<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1023'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span>), ~cssLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1023'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1018'>cssLoc</span>)), ~jsLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1023'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1019'>jsLoc</span>)), <span class=\"string\" data-type=\"string\">&quot;Search&quot;</span>, <span class=\"constructor\" data-type=\"list((int, string, string, string))\">[]</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='ModelToOutput/1028'>projectListing</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='ModelToOutput/1024'>markdowns</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1030'>main</span>);\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1022'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1031'>html</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;search.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-global-use='SearchScript/1009'>SearchScript.js</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;elasticlunr.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-global-use='ElasticRaw/1008'>ElasticRaw.raw</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;searchables.json&quot;</span>, <span class=\"ident\" data-type=\"list((string, string, string, string, string)) => string\" data-global-use='Search/1020'>Search.serializeSearchables</span>(<span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\" data-local-use='ModelToOutput/1021'>searchables</span><span class=\"operator\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n) => list((string, string, string, string, string))\" data-stamp-missing>^</span>)) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  <span class=\"ident\" data-type=\"(string, string) => unit\" data-global-use='MakeIndex/1009'>MakeIndex.run</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;elasticlunr.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1020'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;searchables.json&quot;</span>)\n}", "values": [{"id": "DocsTemplate/1008", "name": "searchStyle", "moduleName": "DocsTemplate"}, {"id": "Docs/1019", "name": "page", "moduleName": "Docs"}, {"id": "SearchScript/1009", "name": "js", "moduleName": "SearchScript"}, {"id": "ElasticRaw/1008", "name": "raw", "moduleName": "ElasticRaw"}, {"id": "Search/1020", "name": "serializeSearchables", "moduleName": "Search"}, {"id": "MakeIndex/1009", "name": "run", "moduleName": "MakeIndex"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 1267, "lines": 20, "type": "(\n  ~markdowns: list(State.Model.customPage),\n  ~names: list(string),\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  )\n) => unit"},
"Search/1012": {"name": "escape", "moduleName": "Search", "html": "let <span class=\"pattern-ident\" data-local-define='Search/1012' data-type=\"string => string\">escape</span> = <span class=\"pattern-ident\" data-local-define='Search/1013' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"(string, string, string) => string\" data-global-use='Search/1008'>replace</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\&quot;</span>, <span class=\"string\" data-type=\"string\">&quot;\\\\\\\\&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Search/1013'>text</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, string, string) => string\" data-global-use='Search/1008'>replace</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"string\" data-type=\"string\">&quot;\\\\n&quot;</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, string, string) => string\" data-global-use='Search/1008'>replace</span>(<span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>, <span class=\"string\" data-type=\"string\">&quot;\\\\\\&quot;&quot;</span>)", "values": [{"id": "Search/1008", "name": "replace", "moduleName": "Search"}], "chars": 97, "lines": 0, "type": "string => string"},
"PrepareUtils/1008": {"name": "addToPath", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1008' data-type=\"(('a, list('a)), 'a) => ('a, list('a))\">addToPath</span> = ((<span class=\"pattern-ident\" data-local-define='PrepareUtils/1009' data-type=\"'a\">name</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1010' data-type=\"list('a)\">inner</span>), <span class=\"pattern-ident\" data-local-define='PrepareUtils/1011' data-type=\"'a\">more</span>) =&gt; (<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1009'>name</span>, <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1010'>inner</span> <span class=\"operator\" data-type=\"(list('a), list('a)) => list('a)\" data-stamp-missing>@</span> [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1011'><span class=\"constructor\" data-type=\"list('a)\">more</span></span></span>])", "values": [], "chars": 63, "lines": 0, "type": "(('a, list('a)), 'a) => ('a, list('a))"},
"Sidebar/1014": {"name": "showPackage", "moduleName": "Sidebar", "html": "let <span class=\"pattern-ident\" data-local-define='Sidebar/1014' data-type=\"list((string, string)) => string\">showPackage</span> = <span class=\"pattern-ident\" data-local-define='Sidebar/1015' data-type=\"list((string, string))\">projectListing</span> =&gt; {\n  <span class=\"string\" data-type=\"string\">&quot;&lt;div class=&#39;project-listing&#39;&gt;&lt;div class=&#39;project-title&#39;&gt;Package modules&lt;/div&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> {\n    <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Sidebar/1015'>projectListing</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Sidebar/1016' data-type=\"string\">htmlName</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1017' data-type=\"string\">name</span>)) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1016'>htmlName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1017'>name</span>)) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>)\n  } <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/div&gt;&quot;</span>\n}", "values": [], "chars": 275, "lines": 4, "type": "list((string, string)) => string"},
"ModelToOutput/1062": {"name": "outputModule", "moduleName": "ModelToOutput", "html": "let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1062' data-type=\"(\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  'a,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string\n  ) => GenerateDoc.t,\n  list(string),\n  State.Model.topModule\n) => unit\">outputModule</span> = (~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1063' data-type=\"string\">cssLoc</span>, ~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1064' data-type=\"string\">jsLoc</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1065' data-type=\"string\">dest</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1066' data-type=\"'a\">codeBlocksMap</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1067' data-type=\"list(State.Model.customPage)\">markdowns</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1068' data-type=\"(string, list(string), PrintType.pathType) => option(string)\">searchHref</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1069' data-type=\"option(string)\">repo</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1070' data-type=\"(PrintType.T.stringifier, string, string) => GenerateDoc.t\">processDocString</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1071' data-type=\"list(string)\">names</span>, {<span class=\"pattern-ident\" data-local-define='ModelToOutput/1072' data-type=\"string\">State.Model.name</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1073' data-type=\"string\">sourcePath</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1074' data-type=\"option(State.Model.docWithExamples)\">docs</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1075' data-type=\"list(State.Model.Docs.doc)\">items</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1076' data-type=\"CmtFindStamps.T.stamps\">stamps</span>}) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1077' data-type=\"string\">output</span> = <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1065'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;api&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1072'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1078' data-type=\"string => string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1077'>output</span>));\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1079' data-type=\"list((string, string))\">markdowns</span> = <span class=\"ident\" data-type=\"(\n  State.Model.customPage => (string, string),\n  list(State.Model.customPage)\n) => list((string, string))\" data-stamp-missing>List.map</span>(({<span class=\"pattern-ident\" data-local-define='ModelToOutput/1080' data-type=\"string\">State.Model.title</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1081' data-type=\"string\">destPath</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1082' data-type=\"State.Model.docWithExamples\">contents</span>}) =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1078'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1065'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1081'>destPath</span>), <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1080'>title</span>), <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ModelToOutput/1067'>markdowns</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1083' data-type=\"PrintType.T.stringifier\">searchPrinter</span> = <span class=\"ident\" data-type=\"(\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  CmtFindStamps.T.stamps\n) => PrintType.T.stringifier\" data-global-use='GenerateDoc/1052'>GenerateDoc.printer</span>(<span class=\"ident\" data-type=\"(string, list(string), PrintType.pathType) => option(string)\" data-local-use='ModelToOutput/1068'>searchHref</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.stamps\" data-local-use='ModelToOutput/1076'>stamps</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1084' data-type=\"option(string)\">sourceUrl</span> = <span class=\"ident\" data-type=\"option(string)\" data-local-use='ModelToOutput/1069'>repo</span> <span class=\"operator\" data-type=\"(option(string), string => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1085' data-type=\"string\">url</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1085'>url</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1073'>sourcePath</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1086' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option(string),\n  ~jsLoc: option(string),\n  ~processDocString: GenerateDoc.t,\n  string,\n  option(Omd.t),\n  CmtFindStamps.T.stamps,\n  list(State.Model.Docs.doc),\n  list(string),\n  list((string, string))\n) => string\" data-global-use='Docs/1033'>Docs.generate</span>(\n    ~<span class=\"ident\" data-type=\"option(string)\" data-local-use='ModelToOutput/1084'>sourceUrl</span>,\n    ~relativeToRoot=<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1078'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1065'>dest</span>),\n    ~cssLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1078'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1063'>cssLoc</span>)),\n    ~jsLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1078'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1064'>jsLoc</span>)),\n    ~processDocString=<span class=\"ident\" data-type=\"(PrintType.T.stringifier, string, string) => GenerateDoc.t\" data-local-use='ModelToOutput/1070'>processDocString</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='ModelToOutput/1083'>searchPrinter</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1077'>output</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1072'>name</span>),\n    <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1072'>name</span>,\n    <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='ModelToOutput/1074'>docs</span>,\n    <span class=\"ident\" data-type=\"CmtFindStamps.T.stamps\" data-local-use='ModelToOutput/1076'>stamps</span>,\n    <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='ModelToOutput/1075'>items</span>,\n    <span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1071'>names</span>,\n    <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='ModelToOutput/1079'>markdowns</span>\n  );\n\n  <span class=\"ident\" data-type=\"(string, string) => unit\" data-stamp-missing>Files.writeFileExn</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1077'>output</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1086'>text</span>);\n}", "values": [{"id": "GenerateDoc/1052", "name": "printer", "moduleName": "GenerateDoc"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "Docs/1033", "name": "generate", "moduleName": "Docs"}], "chars": 824, "lines": 23, "type": "(\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  'a,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string\n  ) => GenerateDoc.t,\n  list(string),\n  State.Model.topModule\n) => unit"},
"ProcessCode/1034": {"name": "collectBlocks", "moduleName": "ProcessCode", "html": "let <span class=\"pattern-ident\" data-local-define='ProcessCode/1034' data-type=\"(\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  option(State.Model.codeOptions)\n) => list(\n  (string, Omd.name, string, State.Model.codeOptions)\n)\">collectBlocks</span> = (<span class=\"pattern-ident\" data-local-define='ProcessCode/1035' data-type=\"list(State.Model.topModule)\">modules</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1036' data-type=\"list(State.Model.customPage)\">custom</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1037' data-type=\"option(State.Model.codeOptions)\">defaultOptions</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1038' data-type=\"Pervasives.ref(\n  list((string, Omd.name, string, State.Model.codeOptions))\n)\">codeBlocks</span> = <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    Omd.name,\n    string,\n    State.Model.codeOptions\n  )\n) => Pervasives.ref(\n  list((string, Omd.name, string, State.Model.codeOptions))\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list((string, Omd.name, string, State.Model.codeOptions))\">[]</span>);\n  <span class=\"ident\" data-type=\"(\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  (string, Omd.name, string) => unit\n) => unit\" data-global-use='ProcessCode/1024'>iterBlocks</span>(<span class=\"ident\" data-type=\"list(State.Model.topModule)\" data-local-use='ProcessCode/1035'>modules</span>, <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ProcessCode/1036'>custom</span>, (<span class=\"pattern-ident\" data-local-define='ProcessCode/1039' data-type=\"string\">page</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1040' data-type=\"Omd.name\">lang</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1041' data-type=\"string\">content</span>) =&gt; switch (<span class=\"ident\" data-type=\"(Omd.name, State.Model.codeOptions) => option(\n  State.Model.codeOptions\n)\" data-global-use='CodeSnippets/1012'>CodeSnippets.parseCodeOptions</span>(<span class=\"ident\" data-type=\"Omd.name\" data-local-use='ProcessCode/1040'>lang</span>, <span class=\"ident\" data-type=\"option(State.Model.codeOptions)\" data-local-use='ProcessCode/1037'>defaultOptions</span> <span class=\"operator\" data-type=\"(\n  option(State.Model.codeOptions),\n  State.Model.codeOptions\n) => State.Model.codeOptions\" data-global-use='Infix/1012'>|?</span> <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-global-use='State/1055'>State.Model.defaultOptions</span>)) {\n  | <span class=\"pattern-constructor\" data-type=\"option(State.Model.codeOptions)\">None</span> =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n  | <span class=\"pattern-constructor\" data-type=\"option(State.Model.codeOptions)\">Some</span>(<span class=\"pattern-ident\" data-local-define='ProcessCode/1042' data-type=\"State.Model.codeOptions\">options</span>) =&gt; <span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, Omd.name, string, State.Model.codeOptions))\n)\" data-local-use='ProcessCode/1038'>codeBlocks</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(\n    list(\n      (string, Omd.name, string, State.Model.codeOptions)\n    )\n  ),\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list((string, Omd.name, string, State.Model.codeOptions))\">(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1039'>page</span>, <span class=\"ident\" data-type=\"Omd.name\" data-local-use='ProcessCode/1040'>lang</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1041'>content</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1042'>options</span>), ...<span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, Omd.name, string, State.Model.codeOptions))\n)\" data-local-use='ProcessCode/1038'>codeBlocks</span><span class=\"operator\" data-type=\"Pervasives.ref(\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => list(\n  (string, Omd.name, string, State.Model.codeOptions)\n)\" data-stamp-missing>^</span></span>]\n  });\n  <span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, Omd.name, string, State.Model.codeOptions))\n)\" data-local-use='ProcessCode/1038'>codeBlocks</span><span class=\"operator\" data-type=\"Pervasives.ref(\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => list(\n  (string, Omd.name, string, State.Model.codeOptions)\n)\" data-stamp-missing>^</span>;\n}", "values": [{"id": "ProcessCode/1024", "name": "iterBlocks", "moduleName": "ProcessCode"}, {"id": "CodeSnippets/1012", "name": "parseCodeOptions", "moduleName": "CodeSnippets"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "State/1055", "name": "defaultOptions", "moduleName": "State"}], "chars": 356, "lines": 7, "type": "(\n  list(State.Model.topModule),\n  list(State.Model.customPage),\n  option(State.Model.codeOptions)\n) => list(\n  (string, Omd.name, string, State.Model.codeOptions)\n)"},
"CmtFindDocItems/1163": {"name": "either", "moduleName": "CmtFindDocItems", "html": "let <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1163' data-type=\"(option('a), option('a)) => option('a)\">either</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1164' data-type=\"option('a)\">a</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1165' data-type=\"option('a)\">b</span>) =&gt; switch (<span class=\"ident\" data-type=\"option('a)\" data-local-use='CmtFindDocItems/1164'>a</span>, <span class=\"ident\" data-type=\"option('a)\" data-local-use='CmtFindDocItems/1165'>b</span>) {\n| (<span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1166' data-type=\"'a\">a</span>), _) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='CmtFindDocItems/1166'>a</span>)\n| (_, <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1167' data-type=\"'a\">b</span>)) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='CmtFindDocItems/1167'>b</span>)\n| _ =&gt; <span class=\"constructor\" data-type=\"option('a)\">None</span>\n}", "values": [], "chars": 104, "lines": 4, "type": "(option('a), option('a)) => option('a)"},
"GenerateDoc/1071": {"name": "makeId", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1071' data-type=\"(list(string), CmtFindStamps.T.pathType) => string\">makeId</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1072' data-type=\"list(string)\">items</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1073' data-type=\"CmtFindStamps.T.pathType\">ptype</span>) =&gt; {\n  /* open CmtFindDocItems.T; */\n  <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-global-use='GenerateDoc/1069'>ptypePrefix</span>(<span class=\"ident\" data-type=\"CmtFindStamps.T.pathType\" data-local-use='GenerateDoc/1073'>ptype</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1072'>items</span>)\n}", "values": [{"id": "GenerateDoc/1069", "name": "ptypePrefix", "moduleName": "GenerateDoc"}], "chars": 116, "lines": 3, "type": "(list(string), CmtFindStamps.T.pathType) => string"},
"CliToInput/1155": {"name": "optsToInput", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1155' data-type=\"(string, Minimist.opts) => State.Input.t\">optsToInput</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1156' data-type=\"string\">selfPath</span>, {<span class=\"pattern-ident\" data-local-define='CliToInput/1158' data-type=\"Minimist.StrMap.t(string)\">Minimist.strings</span>, multi: <span class=\"pattern-ident\" data-local-define='CliToInput/1159' data-type=\"Minimist.StrMap.t(list(string))\">multiMap</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1157' data-type=\"Minimist.StrSet.t\">presence</span>}) =&gt; {\n  open Minimist;\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1214' data-type=\"string\">root</span> = <span class=\"ident\" data-type=\"(Minimist.StrMap.t(string), Minimist.StrMap.key) => option(\n  string\n)\" data-stamp-missing>get</span>(<span class=\"ident\" data-type=\"Minimist.StrMap.t(string)\" data-local-use='CliToInput/1158'>strings</span>, <span class=\"string\" data-type=\"Minimist.StrMap.key\">&quot;root&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"ident\" data-type=\"unit => string\" data-stamp-missing>Unix.getcwd</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1296' data-type=\"option(string)\">bsRoot</span> = <span class=\"ident\" data-type=\"(Minimist.StrMap.t(string), Minimist.StrMap.key) => option(\n  string\n)\" data-stamp-missing>get</span>(<span class=\"ident\" data-type=\"Minimist.StrMap.t(string)\" data-local-use='CliToInput/1158'>strings</span>, <span class=\"string\" data-type=\"Minimist.StrMap.key\">&quot;bs-root&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='CliToInput/1016'>shouldExist</span>(<span class=\"string\" data-type=\"string\">&quot;provided bs-root doesn&#39;t exist&quot;</span>) <span class=\"operator\" data-type=\"(option(string), option(string)) => option(string)\" data-global-use='Infix/1016'>|??</span> <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;node_modules/bs-platform&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1297' data-type=\"option(string)\">refmt</span> = <span class=\"ident\" data-type=\"(Minimist.StrMap.t(string), Minimist.StrMap.key) => option(\n  string\n)\" data-stamp-missing>get</span>(<span class=\"ident\" data-type=\"Minimist.StrMap.t(string)\" data-local-use='CliToInput/1158'>strings</span>, <span class=\"string\" data-type=\"Minimist.StrMap.key\">&quot;refmt&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='CliToInput/1016'>shouldExist</span>(<span class=\"string\" data-type=\"string\">&quot;provided refmt doesn&#39;t exist&quot;</span>) <span class=\"operator\" data-type=\"(option(string), option(string)) => option(string)\" data-global-use='Infix/1016'>|??</span> (<span class=\"ident\" data-type=\"option(string)\" data-local-use='CliToInput/1296'>bsRoot</span> <span class=\"operator\" data-type=\"(option(string), string => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"string => option(string)\" data-global-use='CliToInput/1146'>getRefmt</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1298' data-type=\"string\">target</span> = <span class=\"ident\" data-type=\"(Minimist.StrMap.t(string), Minimist.StrMap.key) => option(\n  string\n)\" data-stamp-missing>get</span>(<span class=\"ident\" data-type=\"Minimist.StrMap.t(string)\" data-local-use='CliToInput/1158'>strings</span>, <span class=\"string\" data-type=\"Minimist.StrMap.key\">&quot;target&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;docs&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1299' data-type=\"string\">projectName</span> = <span class=\"ident\" data-type=\"(Minimist.StrMap.t(string), Minimist.StrMap.key) => option(\n  string\n)\" data-stamp-missing>get</span>(<span class=\"ident\" data-type=\"Minimist.StrMap.t(string)\" data-local-use='CliToInput/1158'>strings</span>, <span class=\"string\" data-type=\"Minimist.StrMap.key\">&quot;name&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.capitalize</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>));\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1300' data-type=\"list((string, string))\">projectFiles</span> = <span class=\"ident\" data-type=\"(\n  Minimist.StrMap.t(list(string)),\n  Minimist.StrMap.key\n) => list(string)\" data-stamp-missing>multi</span>(<span class=\"ident\" data-type=\"Minimist.StrMap.t(list(string))\" data-local-use='CliToInput/1159'>multiMap</span>, <span class=\"string\" data-type=\"Minimist.StrMap.key\">&quot;project-file&quot;</span>) <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1301' data-type=\"string\">line</span> =&gt; {\n    switch (<span class=\"ident\" data-type=\"(Str.regexp, string) => list(string)\" data-stamp-missing>Str.split</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;:&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1301'>line</span>)) {\n    | [<span data-type=\"list(string)\"><span class=\"pattern-constructor\" data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CliToInput/1302' data-type=\"string\">cmt</span>, <span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CliToInput/1303' data-type=\"string\">relpath</span></span></span></span>] =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1302'>cmt</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1303'>relpath</span>)\n    | _ =&gt; <span class=\"ident\" data-type=\"string => (string, string)\" data-global-use='CliToInput/1138'>fail</span>(<span class=\"string\" data-type=\"string\">&quot;Invalid project file &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1301'>line</span>)\n    }\n  });\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1304' data-type=\"list((string, string))\">dependencyDirectories</span> = <span class=\"ident\" data-type=\"(\n  Minimist.StrMap.t(list(string)),\n  Minimist.StrMap.key\n) => list(string)\" data-stamp-missing>multi</span>(<span class=\"ident\" data-type=\"Minimist.StrMap.t(list(string))\" data-local-use='CliToInput/1159'>multiMap</span>, <span class=\"string\" data-type=\"Minimist.StrMap.key\">&quot;dependency-directory&quot;</span>) <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1305' data-type=\"string\">line</span> =&gt; {\n    switch (<span class=\"ident\" data-type=\"(Str.regexp, string) => list(string)\" data-stamp-missing>Str.split</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;:&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1305'>line</span>)) {\n    | [<span data-type=\"list(string)\"><span class=\"pattern-constructor\" data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CliToInput/1306' data-type=\"string\">cmt</span>, <span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CliToInput/1307' data-type=\"string\">js</span></span></span></span>] =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1306'>cmt</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1307'>js</span>)\n    | _ =&gt; <span class=\"ident\" data-type=\"string => (string, string)\" data-global-use='CliToInput/1138'>fail</span>(<span class=\"string\" data-type=\"string\">&quot;Invalid dependency directory &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1305'>line</span>)\n    }\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1308' data-type=\"option(Json.t)\">packageJson</span> = <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;package.json&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span> <span class=\"operator\" data-type=\"(string => option(string), string, string) => string\" data-global-use='Infix/1041'>|.!</span> <span class=\"string\" data-type=\"string\">&quot;Unable to read package.json&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string => Json.t) => option(Json.t)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>;\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1309' data-type=\"string\">static</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1156'>selfPath</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;../../../static&quot;</span>;\n  <span data-type=\"State.Input.t\">{\n    env: <span data-type=\"State.Input.env\">{\n      static: <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1309'>static</span>\n    }</span>,\n    target: <span data-type=\"State.Input.target\">{\n      directory: <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1298'>target</span>,\n      search: <span class=\"constructor\" data-type=\"bool\">true</span>,\n      template: <span class=\"constructor\" data-type=\"option(string)\">None</span>,\n    }</span>,\n    packageInput: <span data-type=\"State.Input.packageInput\">{\n      meta: <span data-type=\"State.Input.meta\">{\n        packageName: <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1299'>projectName</span>,\n        repo: <span class=\"ident\" data-type=\"string => option(string)\" data-global-use='ParseConfig/1013'>ParseConfig.getUrl</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>),\n      }</span>,\n      <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>,\n      backend: (<span class=\"ident\" data-type=\"option(Json.t)\" data-local-use='CliToInput/1308'>packageJson</span> <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-global-use='CliToInput/1148'>getPackageJsonName</span> <span class=\"operator\" data-type=\"(option(string), string => option(State.backend)) => option(\n  State.backend\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"pattern-ident\" data-local-define='CliToInput/1310' data-type=\"string\">packageJsonName</span> =&gt; <span class=\"ident\" data-type=\"option(string)\" data-local-use='CliToInput/1296'>bsRoot</span> <span class=\"operator\" data-type=\"(option(string), string => option(State.backend)) => option(\n  State.backend\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"pattern-ident\" data-local-define='CliToInput/1311' data-type=\"string\">bsRoot</span> =&gt; <span class=\"ident\" data-type=\"option(string)\" data-local-use='CliToInput/1297'>refmt</span> <span class=\"operator\" data-type=\"(option(string), string => State.backend) => option(\n  State.backend\n)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"pattern-ident\" data-local-define='CliToInput/1312' data-type=\"string\">refmt</span> =&gt; <span class=\"constructor\" data-type=\"State.backend\">State.Bucklescript</span>({\n        let <span class=\"pattern-ident\" data-local-define='CliToInput/1313' data-type=\"string\">version</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='CliToInput/1150'>getBsbVersion</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>);\n        <span data-type=\"State.bucklescriptOptions\">{\n          <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1311'>bsRoot</span>,\n          packageRoot: <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>,\n          <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1312'>refmt</span>,\n          <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1313'>version</span>,\n          browserCompilerPath: <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1309'>static</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bs-&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1313'>version</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.js&quot;</span>),\n          tmp: <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;node_modules/.docre&quot;</span>,\n          compiledDependencyDirectories: <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CliToInput/1304'>dependencyDirectories</span> <span class=\"operator\" data-type=\"(list((string, string)), list((string, string))) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list((string, string))\">[]</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string => list((string, string))\" data-global-use='CliToInput/1129'>findDependencyDirectories</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CliToInput/1304'>dependencyDirectories</span>,\n          <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1310'>packageJsonName</span>,\n        }</span>\n      })) <span class=\"operator\" data-type=\"(option(State.backend), State.backend) => State.backend\" data-global-use='Infix/1012'>|?</span> <span class=\"constructor\" data-type=\"State.backend\">NoBackend</span>,\n      sidebarFile: <span class=\"constructor\" data-type=\"option(string)\">None</span>,\n      customFiles: <span class=\"ident\" data-type=\"(string, string, string) => list(\n  (string, option(string), string)\n)\" data-global-use='CliToInput/1029'>findMarkdownFiles</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1299'>projectName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1298'>target</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>),\n      moduleFiles: <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CliToInput/1300'>projectFiles</span> <span class=\"operator\" data-type=\"(list((string, string)), list((string, string))) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list((string, string))\">[]</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string => list((string, string))\" data-global-use='CliToInput/1119'>findProjectFiles</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1214'>root</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CliToInput/1300'>projectFiles</span>,\n    }</span>,\n  };</span>\n}", "values": [{"id": "Infix/1016", "name": "|??", "moduleName": "Infix"}, {"id": "CliToInput/1016", "name": "shouldExist", "moduleName": "CliToInput"}, {"id": "CliToInput/1146", "name": "getRefmt", "moduleName": "CliToInput"}, {"id": "CliToInput/1138", "name": "fail", "moduleName": "CliToInput"}, {"id": "Infix/1041", "name": "|.!", "moduleName": "Infix"}, {"id": "ParseConfig/1013", "name": "getUrl", "moduleName": "ParseConfig"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "CliToInput/1148", "name": "getPackageJsonName", "moduleName": "CliToInput"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "CliToInput/1150", "name": "getBsbVersion", "moduleName": "CliToInput"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "CliToInput/1129", "name": "findDependencyDirectories", "moduleName": "CliToInput"}, {"id": "CliToInput/1029", "name": "findMarkdownFiles", "moduleName": "CliToInput"}, {"id": "CliToInput/1119", "name": "findProjectFiles", "moduleName": "CliToInput"}], "chars": 2260, "lines": 55, "type": "(string, Minimist.opts) => State.Input.t"},
"Sidebar/1018": {"name": "makeMarkdowns", "moduleName": "Sidebar", "html": "let <span class=\"pattern-ident\" data-local-define='Sidebar/1018' data-type=\"list((string, string)) => string\">makeMarkdowns</span> = <span class=\"pattern-ident\" data-local-define='Sidebar/1019' data-type=\"list((string, string))\">markdowns</span> =&gt; {\n  if (<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Sidebar/1019'>markdowns</span> <span class=\"operator\" data-type=\"(list((string, string)), list((string, string))) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list((string, string))\">[]</span>) {\n    &quot;&quot;\n  } else {\n    <span class=\"string\" data-type=\"string\">&quot;&lt;div class=&#39;docs-listing&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> {\n      <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Sidebar/1019'>markdowns</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Sidebar/1020' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1021' data-type=\"string\">name</span>)) =&gt; {\n        <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1020'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1021'>name</span>)\n      }) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>)\n    } <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/div&gt;&quot;</span>\n  }\n}", "values": [], "chars": 279, "lines": 10, "type": "list((string, string)) => string"},
"CliToInput/1010": {"name": "optMap", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1010' data-type=\"('a => option('a), list('a)) => list('a)\">optMap</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1011' data-type=\"'a => option('a)\">fn</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1012' data-type=\"list('a)\">items</span>) =&gt; <span class=\"ident\" data-type=\"((list('a), 'a) => list('a), list('a), list('a)) => list('a)\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='CliToInput/1013' data-type=\"list('a)\">result</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1014' data-type=\"'a\">item</span>) =&gt; switch (<span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='CliToInput/1011'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='CliToInput/1014'>item</span>)) { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"list('a)\" data-local-use='CliToInput/1013'>result</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1015' data-type=\"'a\">res</span>) =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='CliToInput/1015'>res</span>, ...<span class=\"ident\" data-type=\"list('a)\" data-local-use='CliToInput/1013'>result</span></span>]}, <span class=\"constructor\" data-type=\"list('a)\">[]</span>, <span class=\"ident\" data-type=\"list('a)\" data-local-use='CliToInput/1012'>items</span>)", "values": [], "chars": 142, "lines": 0, "type": "('a => option('a), list('a)) => list('a)"},
"ParseConfig/1013": {"name": "getUrl", "moduleName": "ParseConfig", "html": "let <span class=\"pattern-ident\" data-local-define='ParseConfig/1013' data-type=\"string => option(string)\">getUrl</span> = (<span class=\"pattern-ident\" data-local-define='ParseConfig/1014' data-type=\"string\">base</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ParseConfig/1015' data-type=\"option(Json.t)\">repo</span> = (<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1014'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;package.json&quot;</span>)) <span class=\"operator\" data-type=\"(option(string), string => Json.t) => option(Json.t)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span> <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(Json.t)) => option(Json.t)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;repository&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='ParseConfig/1016' data-type=\"option(string)\">url</span> = <span class=\"ident\" data-type=\"option(Json.t)\" data-local-use='ParseConfig/1015'>repo</span> <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(Json.t)) => option(Json.t)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;url&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span>;\n  let <span class=\"pattern-ident\" data-local-define='ParseConfig/1017' data-type=\"bool\">isGit</span> = <span class=\"ident\" data-type=\"option(Json.t)\" data-local-use='ParseConfig/1015'>repo</span> <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(Json.t)) => option(Json.t)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;type&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(option(string), string => bool) => option(bool)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (<span class=\"pattern-ident\" data-local-define='ParseConfig/1018' data-type=\"string\">x</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1018'>x</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;git&quot;</span>) <span class=\"operator\" data-type=\"(option(bool), bool) => bool\" data-global-use='Infix/1012'>|?</span> <span class=\"constructor\" data-type=\"bool\">false</span>;\n  <span class=\"ident\" data-type=\"bool\" data-local-use='ParseConfig/1017'>isGit</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> (<span class=\"ident\" data-type=\"option(string)\" data-local-use='ParseConfig/1016'>url</span> <span class=\"operator\" data-type=\"(option(string), string => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"string => option(string)\" data-global-use='ParseConfig/1008'>fromGitUrl</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"constructor\" data-type=\"option(string)\">None</span>\n}", "values": [{"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "ParseConfig/1008", "name": "fromGitUrl", "moduleName": "ParseConfig"}], "chars": 305, "lines": 5, "type": "string => option(string)"},
"NewMain/1042": {"name": "compileBucklescript", "moduleName": "NewMain", "html": "let <span class=\"pattern-ident\" data-local-define='NewMain/1042' data-type=\"(State.bucklescriptOptions, State.Model.package) => (\n  list(State.Model.codeBlock),\n  option((string, option((string, Buffer.t))))\n)\">compileBucklescript</span> = ({<span class=\"pattern-ident\" data-local-define='NewMain/1043' data-type=\"string\">State.packageRoot</span>, <span class=\"pattern-ident\" data-local-define='NewMain/1045' data-type=\"string\">packageJsonName</span>, <span class=\"pattern-ident\" data-local-define='NewMain/1044' data-type=\"option(string)\">browserCompilerPath</span>} as bucklescript, <span class=\"pattern-ident\" data-local-define='NewMain/1047' data-type=\"State.Model.package\">package</span>) =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Files.mkdirp</span>(<span class=\"ident\" data-type=\"State.bucklescriptOptions\" data-local-use='NewMain/1046'>bucklescript</span>.<span class=\"field\" data-type=\"string\">State.tmp</span>);\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1048' data-type=\"(\n  ~?mode: option(Packre.Types.mode),\n  ~?extraRequires: option(list(Packre.Types.StrMap.key)),\n  list(Packre.Types.StrMap.key)\n) => string\">pack</span> = <span class=\"ident\" data-type=\"(\n  ~?mode: option(Packre.Types.mode),\n  ~renames: list((Packre.Types.StrMap.key, string)),\n  ~?extraRequires: option(list(Packre.Types.StrMap.key)),\n  ~?base: option(string),\n  list(Packre.Types.StrMap.key)\n) => string\" data-stamp-missing>Packre.Pack.process</span>(\n    ~renames=[<span data-type=\"list((Packre.Types.StrMap.key, string))\"><span class=\"constructor\" data-type=\"list((Packre.Types.StrMap.key, string))\">(<span class=\"ident\" data-type=\"Packre.Types.StrMap.key\" data-local-use='NewMain/1045'>packageJsonName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1043'>packageRoot</span>)</span></span>],\n    ~base=<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1043'>packageRoot</span>\n  );\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1049' data-type=\"Pervasives.ref(list(Packre.Types.StrMap.key))\">jsFiles</span> = <span class=\"ident\" data-type=\"list(Packre.Types.StrMap.key) => Pervasives.ref(\n  list(Packre.Types.StrMap.key)\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list(Packre.Types.StrMap.key)\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1050' data-type=\"list(State.Model.codeBlock)\">codeBlocks</span> = <span class=\"ident\" data-type=\"State.Model.package => list(\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n)\" data-global-use='ProcessCode/1118'>ProcessCode.codeFromPackage</span>(<span class=\"ident\" data-type=\"State.Model.package\" data-local-use='NewMain/1047'>package</span>) <span class=\"operator\" data-type=\"(\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  ),\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  ) => list(State.Model.codeBlock)\n) => list(State.Model.codeBlock)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (\n    int,\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  ) => State.Model.codeBlock,\n  list(\n    (\n      string,\n      Omd.name,\n      string,\n      string,\n      State.Model.codeOptions\n    )\n  )\n) => list(State.Model.codeBlock)\" data-stamp-missing>List.mapi</span>(<span class=\"ident\" data-type=\"(\n  ~editingEnabled: bool,\n  ~bundle: Packre.Types.StrMap.key => string,\n  State.bucklescriptOptions,\n  State.Model.package,\n  int,\n  (\n    string,\n    Omd.name,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n) => State.Model.codeBlock\" data-global-use='CompileCode/1010'>CompileCode.block</span>(\n    ~editingEnabled=<span class=\"ident\" data-type=\"option(string)\" data-local-use='NewMain/1044'>browserCompilerPath</span> <span class=\"operator\" data-type=\"(option(string), option(string)) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"option(string)\">None</span>,\n    ~bundle=<span class=\"pattern-ident\" data-local-define='NewMain/1073' data-type=\"Packre.Types.StrMap.key\">js</span> =&gt; {\n      <span class=\"ident\" data-type=\"Pervasives.ref(list(Packre.Types.StrMap.key))\" data-local-use='NewMain/1049'>jsFiles</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list(Packre.Types.StrMap.key)),\n  list(Packre.Types.StrMap.key)\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list(Packre.Types.StrMap.key)\"><span class=\"ident\" data-type=\"Packre.Types.StrMap.key\" data-local-use='NewMain/1073'>js</span>, ...<span class=\"ident\" data-type=\"Pervasives.ref(list(Packre.Types.StrMap.key))\" data-local-use='NewMain/1049'>jsFiles</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Packre.Types.StrMap.key)) => list(\n  Packre.Types.StrMap.key\n)\" data-stamp-missing>^</span></span>];\n      <span class=\"ident\" data-type=\"(\n  ~?mode: option(Packre.Types.mode),\n  ~?extraRequires: option(list(Packre.Types.StrMap.key)),\n  list(Packre.Types.StrMap.key)\n) => string\" data-local-use='NewMain/1048'>pack</span>(~mode=<span class=\"constructor\" data-type=\"Packre.Types.mode\">Packre.Types.ExternalEverything</span>, [<span data-type=\"list(Packre.Types.StrMap.key)\"><span class=\"ident\" data-type=\"Packre.Types.StrMap.key\" data-local-use='NewMain/1073'><span class=\"constructor\" data-type=\"list(Packre.Types.StrMap.key)\">js</span></span></span>])\n    },\n    <span class=\"ident\" data-type=\"State.bucklescriptOptions\" data-local-use='NewMain/1046'>bucklescript</span>,\n    <span class=\"ident\" data-type=\"State.Model.package\" data-local-use='NewMain/1047'>package</span>\n  ));\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1074' data-type=\"list(Packre.Types.StrMap.key)\">jsFiles</span> = <span class=\"ident\" data-type=\"Pervasives.ref(list(Packre.Types.StrMap.key))\" data-local-use='NewMain/1049'>jsFiles</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Packre.Types.StrMap.key)) => list(\n  Packre.Types.StrMap.key\n)\" data-stamp-missing>^</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1075' data-type=\"string\">stdlib</span> = <span class=\"ident\" data-type=\"State.bucklescriptOptions\" data-local-use='NewMain/1046'>bucklescript</span>.<span class=\"field\" data-type=\"string\">bsRoot</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/js&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1076' data-type=\"list(string)\">stdlibRequires</span> = <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1075'>stdlib</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> (<span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.readDirectory</span>(<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1075'>stdlib</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => bool, list(string)) => list(string)\" data-stamp-missing>List.filter</span>(<span class=\"ident\" data-type=\"(string => bool, string) => bool\" data-global-use='NewMain/1039'>invert</span>(<span class=\"ident\" data-type=\"(string, string) => bool\" data-global-use='NewMain/1035'>startsWith</span>(<span class=\"string\" data-type=\"string\">&quot;node_&quot;</span>))) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='NewMain/1077' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1075'>stdlib</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1077'>name</span>)) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1078' data-type=\"option((string, option((string, Buffer.t))))\">bundles</span> = if (<span class=\"ident\" data-type=\"list(Packre.Types.StrMap.key)\" data-local-use='NewMain/1074'>jsFiles</span> <span class=\"operator\" data-type=\"(\n  list(Packre.Types.StrMap.key),\n  list(Packre.Types.StrMap.key)\n) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"list(Packre.Types.StrMap.key)\">[]</span>) {\n    let <span class=\"pattern-ident\" data-local-define='NewMain/1079' data-type=\"string\">runtimeDeps</span> = try (<span class=\"ident\" data-type=\"(\n  ~?mode: option(Packre.Types.mode),\n  ~?extraRequires: option(list(Packre.Types.StrMap.key)),\n  list(Packre.Types.StrMap.key)\n) => string\" data-local-use='NewMain/1048'>pack</span>(\n      ~mode=<span class=\"constructor\" data-type=\"Packre.Types.mode\">Packre.Types.JustExternals</span>,\n      ~extraRequires=<span class=\"ident\" data-type=\"list(Packre.Types.StrMap.key)\" data-local-use='NewMain/1076'>stdlibRequires</span>,\n      <span class=\"ident\" data-type=\"list(Packre.Types.StrMap.key)\" data-local-use='NewMain/1074'>jsFiles</span>\n    )) {\n      | <span class=\"pattern-ident\" data-local-define='NewMain/1080' data-type=\"exn\">err</span> =&gt; {\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Failed to bundle!!! &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"exn => string\" data-stamp-missing>Printexc.to_string</span>(<span class=\"ident\" data-type=\"exn\" data-local-use='NewMain/1080'>err</span>));\n        <span class=\"string\" data-type=\"string\">&quot;alert(&#39;Failed to bundle&#39;)&quot;</span>\n      }\n    };\n    let <span class=\"pattern-ident\" data-local-define='NewMain/1081' data-type=\"option((string, Buffer.t))\">compilerDeps</span> = <span class=\"ident\" data-type=\"option(string)\" data-local-use='NewMain/1044'>browserCompilerPath</span> <span class=\"operator\" data-type=\"(option(string), string => (string, Buffer.t)) => option(\n  (string, Buffer.t)\n)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"pattern-ident\" data-local-define='NewMain/1082' data-type=\"string\">browserCompilerPath</span> =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='NewMain/1083' data-type=\"Buffer.t\">buffer</span> = <span class=\"ident\" data-type=\"int => Buffer.t\" data-stamp-missing>Buffer.create</span>(<span class=\"int\" data-type=\"int\">10000</span>);\n      /* TODO maybe write directly to the target? This indirection might not be worth it. */\n      <span class=\"ident\" data-type=\"(\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: string,\n  ~base: string\n) => unit\" data-global-use='CodeSnippets/1205'>CodeSnippets.writeDeps</span>(\n        ~output_string=<span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='NewMain/1083'>buffer</span>),\n        ~dependencyDirs=<span class=\"ident\" data-type=\"State.bucklescriptOptions\" data-local-use='NewMain/1046'>bucklescript</span>.<span class=\"field\" data-type=\"list((string, string))\">compiledDependencyDirectories</span>,\n        ~<span class=\"ident\" data-type=\"list(string)\" data-local-use='NewMain/1076'>stdlibRequires</span>,\n        ~bsRoot=<span class=\"ident\" data-type=\"State.bucklescriptOptions\" data-local-use='NewMain/1046'>bucklescript</span>.<span class=\"field\" data-type=\"string\">bsRoot</span>,\n        ~base=<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1043'>packageRoot</span>\n      );\n      (<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1082'>browserCompilerPath</span>, <span class=\"ident\" data-type=\"Buffer.t\" data-local-use='NewMain/1083'>buffer</span>)\n    };\n    <span class=\"constructor\" data-type=\"option((string, option((string, Buffer.t))))\">Some</span>((<span class=\"ident\" data-type=\"string\" data-local-use='NewMain/1079'>runtimeDeps</span>, <span class=\"ident\" data-type=\"option((string, Buffer.t))\" data-local-use='NewMain/1081'>compilerDeps</span>));\n  } else {\n    <span class=\"constructor\" data-type=\"option((string, option((string, Buffer.t))))\">None</span>\n  };\n\n  (<span class=\"ident\" data-type=\"list(State.Model.codeBlock)\" data-local-use='NewMain/1050'>codeBlocks</span>, <span class=\"ident\" data-type=\"option((string, option((string, Buffer.t))))\" data-local-use='NewMain/1078'>bundles</span>)\n}", "values": [{"id": "ProcessCode/1118", "name": "codeFromPackage", "moduleName": "ProcessCode"}, {"id": "CompileCode/1010", "name": "block", "moduleName": "CompileCode"}, {"id": "NewMain/1039", "name": "invert", "moduleName": "NewMain"}, {"id": "NewMain/1035", "name": "startsWith", "moduleName": "NewMain"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "CodeSnippets/1205", "name": "writeDeps", "moduleName": "CodeSnippets"}], "chars": 1716, "lines": 50, "type": "(State.bucklescriptOptions, State.Model.package) => (\n  list(State.Model.codeBlock),\n  option((string, option((string, Buffer.t))))\n)"},
"CliToInput/1044": {"name": "getSourceDirectories", "moduleName": "CliToInput", "html": "/**\n * Returns a list of paths, relative to the provided `base`\n */\nlet <span class=\"pattern-ident\" data-local-define='CliToInput/1044' data-type=\"(string, Json.t) => list(string)\">getSourceDirectories</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1045' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1046' data-type=\"Json.t\">config</span>) =&gt; {\n  let rec <span class=\"pattern-ident\" data-local-define='CliToInput/1047' data-type=\"(string, Json.t) => list(string)\">handleItem</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1048' data-type=\"string\">current</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1049' data-type=\"Json.t\">item</span>) =&gt; {\n    switch <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1049'>item</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.Array</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1050' data-type=\"list(Json.t)\">contents</span>) =&gt; <span class=\"ident\" data-type=\"(Json.t => list(string), list(Json.t)) => list(list(string))\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-local-use='CliToInput/1047'>handleItem</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1048'>current</span>), <span class=\"ident\" data-type=\"list(Json.t)\" data-local-use='CliToInput/1050'>contents</span>) <span class=\"operator\" data-type=\"(\n  list(list(string)),\n  list(list(string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list(string)) => list(string)\" data-stamp-missing>List.concat</span>\n    | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.String</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1051' data-type=\"string\">text</span>) =&gt; [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1048'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1051'>text</span></span></span>]\n    | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.Object</span>(_) =&gt;\n      let <span class=\"pattern-ident\" data-local-define='CliToInput/1052' data-type=\"string\">dir</span> = <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;dir&quot;</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1049'>item</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"string\" data-type=\"string\">&quot;Must specify directory&quot;</span>;\n      let <span class=\"pattern-ident\" data-local-define='CliToInput/1053' data-type=\"list(string)\">backend</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1049'>item</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;backend&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(\n  option(list(Json.t)),\n  list(Json.t) => list(string)\n) => option(list(string))\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(Json.t => option(string), list(Json.t)) => list(string)\" data-global-use='CliToInput/1010'>optMap</span>(<span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span>) <span class=\"operator\" data-type=\"(option(list(string)), list(string)) => list(string)\" data-global-use='Infix/1012'>|?</span> [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\"><span class=\"constructor\" data-type=\"list(string)\">&quot;js&quot;</span></span></span>];\n      /* print_endline(&quot;Backend? &quot; ++ String.concat(&quot; &amp; &quot;, backend)); */\n      let <span class=\"pattern-ident\" data-local-define='CliToInput/1054' data-type=\"string\">typ</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1049'>item</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;type&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"string\" data-type=\"string\">&quot;lib&quot;</span>;\n      if (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1054'>typ</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;dev&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;js&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1053'>backend</span>)) {\n        <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n      } else {\n        [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1048'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1052'>dir</span>, ...switch (<span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1049'>item</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;subdirs&quot;</span>)) {\n        | <span class=\"pattern-constructor\" data-type=\"option(Json.t)\">None</span> =&gt; <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n        | <span class=\"pattern-constructor\" data-type=\"option(Json.t)\">Some</span>(<span class=\"pattern-constructor\" data-type=\"Json.t\">Json.True</span>) =&gt; <span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.collectDirs</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1045'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1048'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1052'>dir</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1045'>base</span>))\n        | <span class=\"pattern-constructor\" data-type=\"option(Json.t)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1055' data-type=\"Json.t\">item</span>) =&gt; <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-local-use='CliToInput/1047'>handleItem</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1048'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1052'>dir</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1055'>item</span>)\n        }</span>]\n      }\n    | _ =&gt; <span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Invalid subdirs entry&quot;</span>)\n    };\n  };\n  <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1046'>config</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;sources&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => list(string)) => option(\n  list(string)\n)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-local-use='CliToInput/1047'>handleItem</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>) <span class=\"operator\" data-type=\"(option(list(string)), list(string)) => list(string)\" data-global-use='Infix/1012'>|?</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n}", "values": [{"id": "CliToInput/1010", "name": "optMap", "moduleName": "CliToInput"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}], "chars": 1117, "lines": 26, "type": "(string, Json.t) => list(string)"},
"Markdown/1054": {"name": "makeDocStringProcessor", "moduleName": "Markdown", "html": "let <span class=\"pattern-ident\" data-local-define='Markdown/1054' data-type=\"(string, Omd_representation.element => option(string)) => (\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  ),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(\n      Omd_representation.element => option(string)\n    ),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.Representation.t\n  ) => string\n)\">makeDocStringProcessor</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1055' data-type=\"string\">dest</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1056' data-type=\"Omd_representation.element => option(string)\">outerOverride</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Markdown/1057' data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\">searchables</span> = <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    string\n  )\n) => Pervasives.ref(\n  list((string, string, string, string, string))\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list((string, string, string, string, string))\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Markdown/1058' data-type=\"(\n  string,\n  option(string),\n  string,\n  string,\n  string,\n  string\n) => unit\">addSearchable</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1059' data-type=\"string\">file</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1060' data-type=\"option(string)\">hash</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1061' data-type=\"string\">title</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1062' data-type=\"string\">contents</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1063' data-type=\"string\">rendered</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1064' data-type=\"string\">breadcrumb</span>) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='Markdown/1065' data-type=\"string\">href</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1055'>dest</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1059'>file</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(option(string), string, string => string) => string\" data-global-use='Infix/1036'>fold</span>(<span class=\"ident\" data-type=\"option(string)\" data-local-use='Markdown/1060'>hash</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1066' data-type=\"string\">h</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;#&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1066'>h</span>);\n    <span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\" data-local-use='Markdown/1057'>searchables</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  ),\n  list((string, string, string, string, string))\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list((string, string, string, string, string))\">(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1065'>href</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1061'>title</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1062'>contents</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1063'>rendered</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1064'>breadcrumb</span>), ...<span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\" data-local-use='Markdown/1057'>searchables</span><span class=\"operator\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n) => list((string, string, string, string, string))\" data-stamp-missing>^</span></span>];\n  };\n\n  /** All to make things searchable */\n  let <span class=\"pattern-ident\" data-local-define='Markdown/1067' data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(\n    Omd_representation.element => option(string)\n  ),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.Representation.t\n) => string\">processDocString</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1068' data-type=\"PrintType.T.stringifier\">searchPrinter</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1069' data-type=\"string\">fileName</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1070' data-type=\"string\">fileTitle</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1071' data-type=\"option(Omd_representation.element => option(string))\">~override=?</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1072' data-type=\"list(string)\">path</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1073' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1074' data-type=\"option(State.Model.Docs.docItem)\">typ</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1075' data-type=\"Omd.Representation.t\">mdNode</span>) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='Markdown/1076' data-type=\"Omd_representation.element => option(string)\">override</span> = switch <span class=\"ident\" data-type=\"option(Omd_representation.element => option(string))\" data-local-use='Markdown/1071'>override</span> {\n    | <span class=\"pattern-constructor\" data-type=\"option(Omd_representation.element => option(string))\">None</span> =&gt; <span class=\"ident\" data-type=\"Omd_representation.element => option(string)\" data-local-use='Markdown/1056'>outerOverride</span>\n    | <span class=\"pattern-constructor\" data-type=\"option(Omd_representation.element => option(string))\">Some</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1077' data-type=\"Omd_representation.element => option(string)\">inner</span>) =&gt; <span class=\"pattern-ident\" data-local-define='Markdown/1078' data-type=\"Omd_representation.element\">el</span> =&gt; switch (<span class=\"ident\" data-type=\"Omd_representation.element => option(string)\" data-local-use='Markdown/1077'>inner</span>(<span class=\"ident\" data-type=\"Omd_representation.element\" data-local-use='Markdown/1078'>el</span>)) {\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"ident\" data-type=\"Omd_representation.element => option(string)\" data-local-use='Markdown/1056'>outerOverride</span>(<span class=\"ident\" data-type=\"Omd_representation.element\" data-local-use='Markdown/1078'>el</span>)\n    | <span class=\"pattern-ident\" data-local-define='Markdown/1079' data-type=\"option(string)\">x</span> =&gt; <span class=\"ident\" data-type=\"option(string)\" data-local-use='Markdown/1079'>x</span>\n    }\n    };\n    /* let id = GenerateDoc.makeId(path @ [name], typ); */\n    let <span class=\"pattern-ident\" data-local-define='Markdown/1080' data-type=\"string\">title</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='Markdown/1072'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1070'>fileTitle</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Markdown/1072'>path</span>);\n    open State.Model.Docs;\n    /** The representation of the value itself */\n    let <span class=\"pattern-ident\" data-local-define='Markdown/1085' data-type=\"CmtFindStamps.T.pathType => option(string)\">makeId</span> = <span class=\"pattern-ident\" data-local-define='Markdown/1086' data-type=\"CmtFindStamps.T.pathType\">t</span> =&gt; <span class=\"ident\" data-type=\"list(string)\" data-local-use='Markdown/1072'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"constructor\" data-type=\"option(string)\">None</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(list(string), CmtFindStamps.T.pathType) => string\" data-global-use='GenerateDoc/1071'>GenerateDoc.makeId</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Markdown/1072'>path</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType\" data-local-use='Markdown/1086'>t</span>));\n    /* print_endline(name); */\n    let <span class=\"pattern-ident\" data-local-define='Markdown/1087' data-type=\"option(string)\">hash</span> = switch <span class=\"ident\" data-type=\"option(State.Model.Docs.docItem)\" data-local-use='Markdown/1074'>typ</span> {\n    | <span class=\"pattern-constructor\" data-type=\"option(State.Model.Docs.docItem)\">None</span> =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n    | <span class=\"pattern-constructor\" data-type=\"option(State.Model.Docs.docItem)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1088' data-type=\"State.Model.Docs.docItem\">t</span>) =&gt; switch <span class=\"ident\" data-type=\"State.Model.Docs.docItem\" data-local-use='Markdown/1088'>t</span> {\n      | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(_) =&gt;  <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => option(string)\" data-local-use='Markdown/1085'>makeId</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PModule</span>)\n      | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1111' data-type=\"Types.type_expr\">typ</span>) =&gt; {\n        /** TODO use the other printer for nice linking of things. also want to highlight fn argument labels. */\n        let (<span class=\"pattern-ident\" data-local-define='Markdown/1113' data-type=\"Pervasives.ref(list(Asttypes.label))\">tokens</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1114' data-type=\"PrintType.T.stringifier\">printer</span>) = <span class=\"ident\" data-type=\"PrintType.T.stringifier => (\n  Pervasives.ref(list(Asttypes.label)),\n  PrintType.T.stringifier\n)\" data-global-use='Markdown/1032'>makeTokenCollector</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1068'>searchPrinter</span>);\n        let <span class=\"pattern-ident\" data-local-define='Markdown/1115' data-type=\"string\">text</span> = <span class=\"string\" data-type=\"string\">&quot;&lt;h4 class=&#39;item&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>GenerateDoc.prettyString</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1114'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  Types.type_expr\n) => Pretty.doc\">PrintType.T.value</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1114'>printer</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1073'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1073'>name</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Markdown/1111'>typ</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/h4&gt;&quot;</span>;\n        let <span class=\"pattern-ident\" data-local-define='Markdown/1116' data-type=\"string\">tokens</span> = <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1073'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(Asttypes.label)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot; &quot;</span>, <span class=\"ident\" data-type=\"Pervasives.ref(list(Asttypes.label))\" data-local-use='Markdown/1113'>tokens</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Asttypes.label)) => list(Asttypes.label)\" data-stamp-missing>^</span>);\n        <span class=\"ident\" data-type=\"(\n  string,\n  option(string),\n  string,\n  string,\n  string,\n  string\n) => unit\" data-local-use='Markdown/1058'>addSearchable</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1069'>fileName</span>, <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(list(string), CmtFindStamps.T.pathType) => string\" data-global-use='GenerateDoc/1071'>GenerateDoc.makeId</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Markdown/1072'>path</span>, <span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PValue</span>)), <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1080'>title</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1116'>tokens</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1115'>text</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1070'>fileTitle</span>);\n        <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => option(string)\" data-local-use='Markdown/1085'>makeId</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PValue</span>)\n      }\n      | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1112' data-type=\"Types.type_declaration\">typ</span>) =&gt; {\n        /* print_endline(&quot;making a search for type&quot;); */\n        let (<span class=\"pattern-ident\" data-local-define='Markdown/1117' data-type=\"Pervasives.ref(list(Asttypes.label))\">tokens</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1118' data-type=\"PrintType.T.stringifier\">printer</span>) = <span class=\"ident\" data-type=\"PrintType.T.stringifier => (\n  Pervasives.ref(list(Asttypes.label)),\n  PrintType.T.stringifier\n)\" data-global-use='Markdown/1032'>makeTokenCollector</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1068'>searchPrinter</span>);\n        let <span class=\"pattern-ident\" data-local-define='Markdown/1119' data-type=\"string\">text</span> = <span class=\"string\" data-type=\"string\">&quot;&lt;h4 class=&#39;item&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>GenerateDoc.prettyString</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1118'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  Types.type_declaration\n) => Pretty.doc\">PrintType.T.decl</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Markdown/1118'>printer</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1073'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1073'>name</span>, <span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='Markdown/1112'>typ</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/h4&gt;&quot;</span>;\n        let <span class=\"pattern-ident\" data-local-define='Markdown/1120' data-type=\"string\">tokens</span> = <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1073'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(Asttypes.label)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot; &quot;</span>, <span class=\"ident\" data-type=\"Pervasives.ref(list(Asttypes.label))\" data-local-use='Markdown/1117'>tokens</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Asttypes.label)) => list(Asttypes.label)\" data-stamp-missing>^</span>);\n        <span class=\"ident\" data-type=\"(\n  string,\n  option(string),\n  string,\n  string,\n  string,\n  string\n) => unit\" data-local-use='Markdown/1058'>addSearchable</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1069'>fileName</span>, <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(list(string), CmtFindStamps.T.pathType) => string\" data-global-use='GenerateDoc/1071'>GenerateDoc.makeId</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Markdown/1072'>path</span>, <span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PType</span>)), <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1080'>title</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1120'>tokens</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1119'>text</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1070'>fileTitle</span>);\n        <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => option(string)\" data-local-use='Markdown/1085'>makeId</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PType</span>)\n      }\n      | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">StandaloneDoc</span>(_) | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(_) =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n      }\n    };\n\n    let <span class=\"pattern-ident\" data-local-define='Markdown/1121' data-type=\"Omd.Representation.t\">mdNode</span> = <span class=\"ident\" data-type=\"(\n  Omd.Representation.element => option(\n    Omd.Representation.t\n  ),\n  Omd.Representation.t\n) => Omd.Representation.t\" data-stamp-missing>Omd.Representation.visit</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1122' data-type=\"Omd.Representation.element\">el</span> =&gt; switch <span class=\"ident\" data-type=\"Omd.Representation.element\" data-local-use='Markdown/1122'>el</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Html_comment</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1123' data-type=\"string\">text</span>) when <span class=\"ident\" data-type=\"(string, string) => bool\" data-global-use='Markdown/1028'>startsWith</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1123'>text</span>, <span class=\"string\" data-type=\"string\">&quot;&lt;!--!&quot;</span>) =&gt; {\n      <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">Some</span>(<span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"(string, int, int) => string\" data-global-use='Markdown/1024'>slice</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1123'>text</span>, <span class=\"int\" data-type=\"int\">5</span>, <span class=\"int\" data-type=\"int\">-3</span>)))\n    }\n    /* | Html_comment(text) =&gt; {\n      print_endline(&quot;Got a comment here &quot; ++ text);\n      None\n    } */\n    | _ =&gt; <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n    }, <span class=\"ident\" data-type=\"Omd.Representation.t\" data-local-use='Markdown/1075'>mdNode</span>);\n\n    /** Docstring paragraphs */\n    /** TODO track headings within this for better breadcrumb */\n    let _ = <span class=\"ident\" data-type=\"(\n  Omd.Representation.element => option(\n    Omd.Representation.t\n  ),\n  Omd.Representation.t\n) => Omd.Representation.t\" data-stamp-missing>Omd.Representation.visit</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1124' data-type=\"Omd.Representation.element\">el</span> =&gt; {\n      switch <span class=\"ident\" data-type=\"Omd.Representation.element\" data-local-use='Markdown/1124'>el</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Paragraph</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1125' data-type=\"Omd.t\">t</span>) =&gt; {\n        let <span class=\"pattern-ident\" data-local-define='Markdown/1133' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"Omd.t => string\" data-stamp-missing>Omd.to_text</span>(<span class=\"ident\" data-type=\"Omd.t\" data-local-use='Markdown/1125'>t</span>);\n        if (<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1133'>text</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;@all&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1133'>text</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;</span> <span class=\"int\" data-type=\"int\">4</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1133'>text</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"int\" data-type=\"int\">4</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;@doc&quot;</span>) {\n          <span class=\"constructor\" data-type=\"unit\">()</span>\n        } else {\n          <span class=\"ident\" data-type=\"(\n  string,\n  option(string),\n  string,\n  string,\n  string,\n  string\n) => unit\" data-local-use='Markdown/1058'>addSearchable</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1069'>fileName</span>, <span class=\"ident\" data-type=\"option(string)\" data-local-use='Markdown/1087'>hash</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1080'>title</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1133'>text</span>, <span class=\"ident\" data-type=\"(\n  ~?override: option(\n    Omd_representation.element => option(string)\n  ),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(Omd.code_stylist),\n  Omd.t\n) => string\" data-stamp-missing>Omd.to_html</span>(~<span class=\"ident\" data-type=\"Omd_representation.element => option(string)\" data-local-use='Markdown/1076'>override</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='Markdown/1125'>t</span>), <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1070'>fileTitle</span>)\n        }\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Code_block</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1126' data-type=\"Omd.Representation.name\">lang</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1127' data-type=\"string\">contents</span>) =&gt; {\n        /** TODO parse the contents &amp; provide better tokens */\n        <span class=\"ident\" data-type=\"(\n  string,\n  option(string),\n  string,\n  string,\n  string,\n  string\n) => unit\" data-local-use='Markdown/1058'>addSearchable</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1069'>fileName</span>, <span class=\"constructor\" data-type=\"option(string)\">None</span>, <span class=\"string\" data-type=\"string\">&quot;code block&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1127'>contents</span>, <span class=\"string\" data-type=\"string\">&quot;&lt;pre&gt;&lt;code&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1127'>contents</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1070'>fileTitle</span>);\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">H1</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1128' data-type=\"Omd.Representation.t\">t</span>) | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">H2</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1128' data-type=\"Omd.Representation.t\">t</span>) | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">H3</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1128' data-type=\"Omd.Representation.t\">t</span>) | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">H4</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1128' data-type=\"Omd.Representation.t\">t</span>) | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">H5</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1128' data-type=\"Omd.Representation.t\">t</span>) =&gt; {\n        let <span class=\"pattern-ident\" data-local-define='Markdown/1134' data-type=\"string\">title</span> = <span class=\"ident\" data-type=\"Omd.t => string\" data-stamp-missing>Omd.to_text</span>(<span class=\"ident\" data-type=\"Omd.Representation.t\" data-local-use='Markdown/1128'>t</span>);\n        <span class=\"ident\" data-type=\"(\n  string,\n  option(string),\n  string,\n  string,\n  string,\n  string\n) => unit\" data-local-use='Markdown/1058'>addSearchable</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1069'>fileName</span>, <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-global-use='GenerateDoc/1085'>GenerateDoc.cleanForLink</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1134'>title</span>)), <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1134'>title</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1070'>fileTitle</span>)\n      }\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      };\n      <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n    }, <span class=\"ident\" data-type=\"Omd.Representation.t\" data-local-use='Markdown/1121'>mdNode</span>);\n    <span class=\"ident\" data-type=\"(\n  ~?override: option(\n    Omd_representation.element => option(string)\n  ),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(Omd.code_stylist),\n  Omd.t\n) => string\" data-stamp-missing>Omd.to_html</span>(~<span class=\"ident\" data-type=\"Omd_representation.element => option(string)\" data-local-use='Markdown/1076'>override</span>, <span class=\"ident\" data-type=\"Omd.Representation.t\" data-local-use='Markdown/1121'>mdNode</span>)\n  };\n\n  (<span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\" data-local-use='Markdown/1057'>searchables</span>, <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(\n    Omd_representation.element => option(string)\n  ),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.Representation.t\n) => string\" data-local-use='Markdown/1067'>processDocString</span>)\n}", "values": [{"id": "Infix/1036", "name": "fold", "moduleName": "Infix"}, {"id": "Markdown/1032", "name": "makeTokenCollector", "moduleName": "Markdown"}, {"id": "GenerateDoc/1079", "name": "prettyString", "moduleName": "GenerateDoc"}, {"id": "GenerateDoc/1071", "name": "makeId", "moduleName": "GenerateDoc"}, {"id": "Markdown/1028", "name": "startsWith", "moduleName": "Markdown"}, {"id": "Markdown/1024", "name": "slice", "moduleName": "Markdown"}, {"id": "GenerateDoc/1085", "name": "cleanForLink", "moduleName": "GenerateDoc"}], "chars": 3481, "lines": 85, "type": "(string, Omd_representation.element => option(string)) => (\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  ),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(\n      Omd_representation.element => option(string)\n    ),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.Representation.t\n  ) => string\n)"},
"CodeSnippets/1093": {"name": "removeHashes", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1093' data-type=\"string => string\">removeHashes</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1094' data-type=\"string\">text</span> =&gt; {\n  let rec <span class=\"pattern-ident\" data-local-define='CodeSnippets/1095' data-type=\"list(string) => list(string)\">loop</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1096' data-type=\"list(string)\">lines</span> =&gt; switch <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1096'>lines</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(string)\">[]</span> =&gt; <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n  | [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;&quot;</span>, ...<span class=\"pattern-ident\" data-local-define='CodeSnippets/1097' data-type=\"list(string)\">rest</span></span>] =&gt; [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;&quot;</span>, ...<span class=\"ident\" data-type=\"list(string) => list(string)\" data-local-use='CodeSnippets/1095'>loop</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1097'>rest</span>)</span>]\n  | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CodeSnippets/1098' data-type=\"string\">one</span>, ...<span class=\"pattern-ident\" data-local-define='CodeSnippets/1099' data-type=\"list(string)\">rest</span></span>] when <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1098'>one</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39; =&gt; [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot; &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='CodeSnippets/1090'>sliceToEnd</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1098'>one</span>, <span class=\"int\" data-type=\"int\">1</span>), ...<span class=\"ident\" data-type=\"list(string) => list(string)\" data-local-use='CodeSnippets/1095'>loop</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1099'>rest</span>)</span>]\n  | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CodeSnippets/1100' data-type=\"string\">one</span>, ...<span class=\"pattern-ident\" data-local-define='CodeSnippets/1101' data-type=\"list(string)\">rest</span></span>] when <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1100'>one</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;!&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1100'>one</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"int\" data-type=\"int\">2</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1100'>one</span>.[<span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39; =&gt; [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;  &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, int) => string\" data-global-use='CodeSnippets/1090'>sliceToEnd</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1100'>one</span>, <span class=\"int\" data-type=\"int\">2</span>), ...<span class=\"ident\" data-type=\"list(string) => list(string)\" data-local-use='CodeSnippets/1095'>loop</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1101'>rest</span>)</span>]\n  | _ =&gt; <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1096'>lines</span>\n  };\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1102' data-type=\"list(string)\">front</span> = <span class=\"ident\" data-type=\"list(string) => list(string)\" data-local-use='CodeSnippets/1095'>loop</span>(<span class=\"ident\" data-type=\"string => list(string)\" data-global-use='CodeSnippets/1088'>splitLines</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1094'>text</span>));\n  <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string) => list(string)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(string) => list(string)\" data-local-use='CodeSnippets/1095'>loop</span>(<span class=\"ident\" data-type=\"list(string) => list(string)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1102'>front</span>))))\n}", "values": [{"id": "CodeSnippets/1090", "name": "sliceToEnd", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1088", "name": "splitLines", "moduleName": "CodeSnippets"}], "chars": 454, "lines": 10, "type": "string => string"},
"SearchScript/1008": {"name": "framework", "moduleName": "SearchScript", "html": "let <span class=\"pattern-ident\" data-local-define='SearchScript/1008' data-type=\"string\">framework</span> = <span class=\"string\" data-type=\"string\">{|\n  var node = (tag, attrs, children) =&gt; {\n    var node = document.createElement(tag)\n    for (var attr in attrs) {\n      if (attr === &#39;style&#39;) {\n        Object.assign(node.style, attrs[attr])\n      } else {\n        node.setAttribute(attr, attrs[attr])\n      }\n    }\n    children &amp;&amp; children.forEach(child =&gt; node.appendChild(typeof child === &#39;string&#39; ? document.createTextNode(child) : child))\n    return node\n  }\n  var named = tag =&gt; (attrs, children) =&gt; node(tag, attrs, children)\n  var div = named(&#39;div&#39;)\n  var span = named(&#39;span&#39;)\n  var a = named(&#39;a&#39;)\n  var raw = text =&gt; {\n    var node = document.createElement(&#39;div&#39;)\n    node.innerHTML = text\n    return node\n  };\n\n  var render = (target, node) =&gt; {\n    target.innerHTML = &#39;&#39;\n    target.appendChild(node)\n  };\n|}</span>", "values": [], "chars": 786, "lines": 27, "type": "string"},
"Search/1008": {"name": "replace", "moduleName": "Search", "html": "let <span class=\"pattern-ident\" data-local-define='Search/1008' data-type=\"(string, string, string) => string\">replace</span> = (<span class=\"pattern-ident\" data-local-define='Search/1009' data-type=\"string\">one</span>, <span class=\"pattern-ident\" data-local-define='Search/1010' data-type=\"string\">two</span>, <span class=\"pattern-ident\" data-local-define='Search/1011' data-type=\"string\">text</span>) =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Search/1009'>one</span>), <span class=\"ident\" data-type=\"string\" data-local-use='Search/1010'>two</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Search/1011'>text</span>)", "values": [], "chars": 87, "lines": 0, "type": "(string, string, string) => string"},
"CodeHighlight/1013": {"name": "annotateText", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1013' data-type=\"(\n  list((int, int, string)),\n  list((int, string)),\n  string,\n  int,\n  int\n) => string\">annotateText</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1014' data-type=\"list((int, int, string))\">tags</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1015' data-type=\"list((int, string))\">inserts</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1016' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1017' data-type=\"int\">offset</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1018' data-type=\"int\">backOffset</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1019' data-type=\"list((int, int, string))\">tags</span> = <span class=\"ident\" data-type=\"list((int, int, string))\" data-local-use='CodeHighlight/1014'>tags</span> <span class=\"operator\" data-type=\"(\n  list((int, int, string)),\n  list((int, int, string)) => list(\n    (int, int, string)\n  )\n) => list((int, int, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  ((int, int, string), (int, int, string)) => int,\n  list((int, int, string))\n) => list((int, int, string))\" data-stamp-missing>List.sort</span>(((<span class=\"pattern-ident\" data-local-define='CodeHighlight/1020' data-type=\"int\">aStart</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1021' data-type=\"int\">aEnd</span>, _), (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1022' data-type=\"int\">bStart</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1023' data-type=\"int\">bEnd</span>, _)) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1024' data-type=\"int\">startDiff</span> = <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1020'>aStart</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1022'>bStart</span>;\n    /** If they start at the same time, the *larger* range should go First */\n    if (<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1024'>startDiff</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>===</span> <span class=\"int\" data-type=\"int\">0</span>) {\n      <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1021'>aEnd</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1023'>bEnd</span>\n    } else {\n      <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1024'>startDiff</span>\n    }\n  }) <span class=\"operator\" data-type=\"(\n  list((int, int, string)),\n  list((int, int, string)) => list(\n    (int, int, string)\n  )\n) => list((int, int, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (int, int, string) => bool,\n  list((int, int, string))\n) => list((int, int, string))\" data-stamp-missing>List.filter</span>(((<span class=\"pattern-ident\" data-local-define='CodeHighlight/1025' data-type=\"int\">st</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1026' data-type=\"int\">en</span>, _)) =&gt; <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1025'>st</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1017'>offset</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1026'>en</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1017'>offset</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1025'>st</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1018'>backOffset</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1026'>en</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1018'>backOffset</span>) <span class=\"operator\" data-type=\"(\n  list((int, int, string)),\n  list((int, int, string)) => list(\n    (int, int, string)\n  )\n) => list((int, int, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (int, int, string) => (int, int, string),\n  list((int, int, string))\n) => list((int, int, string))\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='CodeHighlight/1027' data-type=\"int\">st</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1028' data-type=\"int\">en</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1029' data-type=\"string\">t</span>)) =&gt; (<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1027'>st</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1017'>offset</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1028'>en</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1017'>offset</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1029'>t</span>));\n\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1030' data-type=\"int\">positions</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1016'>text</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1031' data-type=\"array(list(string))\">tag_starts</span> = <span class=\"ident\" data-type=\"(int, list(string)) => array(list(string))\" data-stamp-missing>Array.make</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1030'>positions</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1032' data-type=\"array(int)\">tag_closes</span> = <span class=\"ident\" data-type=\"(int, int) => array(int)\" data-stamp-missing>Array.make</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1030'>positions</span>, <span class=\"int\" data-type=\"int\">0</span>);\n  <span class=\"ident\" data-type=\"list((int, int, string))\" data-local-use='CodeHighlight/1019'>tags</span> <span class=\"operator\" data-type=\"(\n  list((int, int, string)),\n  list((int, int, string)) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (int, int, string) => unit,\n  list((int, int, string))\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='CodeHighlight/1033' data-type=\"int\">cstart</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1034' data-type=\"int\">cend</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1035' data-type=\"string\">attributes</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(array(list(string)), int, list(string)) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1031'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1033'>cstart</span>] = [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1035'>attributes</span>, ...<span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1031'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1033'>cstart</span>]</span></span>]</span>;\n    <span class=\"ident\" data-type=\"(array(int), int, int) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='CodeHighlight/1032'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1034'>cend</span>] = <span class=\"ident\" data-type=\"(array(int), int) => int\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='CodeHighlight/1032'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1034'>cend</span>]</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span></span>;\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1036' data-type=\"array(list(string))\">extra_inserts</span> = <span class=\"ident\" data-type=\"(int, list(string)) => array(list(string))\" data-stamp-missing>Array.make</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1030'>positions</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>);\n  <span class=\"ident\" data-type=\"list((int, string))\" data-local-use='CodeHighlight/1015'>inserts</span> <span class=\"operator\" data-type=\"(list((int, string)), list((int, string)) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"((int, string) => unit, list((int, string))) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='CodeHighlight/1037' data-type=\"int\">pos</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1038' data-type=\"string\">text</span>)) =&gt; {\n      <span class=\"ident\" data-type=\"(array(list(string)), int, list(string)) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1036'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1037'>pos</span>] = [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1038'>text</span>, ...<span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1036'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1037'>pos</span>]</span></span>]</span>\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1039' data-type=\"Buffer.t\">b</span> = <span class=\"ident\" data-type=\"int => Buffer.t\" data-stamp-missing>Buffer.create</span>(<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1016'>text</span>));\n  let rec <span class=\"pattern-ident\" data-local-define='CodeHighlight/1040' data-type=\"int => unit\">loop</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1041' data-type=\"int\">i</span>) =&gt; {\n    if (<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1030'>positions</span>) {\n      <span class=\"constructor\" data-type=\"unit\">()</span>\n    } else {\n      if (<span class=\"ident\" data-type=\"(array(int), int) => int\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='CodeHighlight/1032'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span>]</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>!=</span> <span class=\"int\" data-type=\"int\">0</span>) {\n        let rec <span class=\"pattern-ident\" data-local-define='CodeHighlight/1042' data-type=\"int => unit\">loop</span> = <span class=\"pattern-ident\" data-local-define='CodeHighlight/1043' data-type=\"int\">i</span> =&gt; if (<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1043'>i</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;</span> <span class=\"int\" data-type=\"int\">0</span>) {\n          <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1039'>b</span>, <span class=\"string\" data-type=\"string\">&quot;&lt;/span&gt;&quot;</span>);\n          <span class=\"ident\" data-type=\"int => unit\" data-local-use='CodeHighlight/1042'>loop</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1043'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>)\n        };\n        <span class=\"ident\" data-type=\"int => unit\" data-local-use='CodeHighlight/1042'>loop</span>(<span class=\"ident\" data-type=\"(array(int), int) => int\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='CodeHighlight/1032'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span>]</span>)\n      };\n\n      if (<span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1036'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span>]</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span>) {\n        <span class=\"ident\" data-type=\"(string => unit, list(string)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1039'>b</span>), <span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1036'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span>]</span>)\n      };\n\n      if (<span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1031'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span>]</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span>) {\n        <span class=\"ident\" data-type=\"(string => unit, list(string)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1044' data-type=\"string\">attributes</span> =&gt; <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1039'>b</span>, <span class=\"string\" data-type=\"string\">&quot;&lt;span &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1044'>attributes</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&gt;&quot;</span>), <span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='CodeHighlight/1031'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span>]</span>)\n      };\n\n      if (<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1030'>positions</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>) {\n        <span class=\"ident\" data-type=\"(Buffer.t, char) => unit\" data-global-use='CodeHighlight/1008'>addHtmlEscapedToBuffer</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1039'>b</span>, <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1016'>text</span>.[<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span>]</span>);\n      };\n\n      <span class=\"ident\" data-type=\"int => unit\" data-local-use='CodeHighlight/1040'>loop</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1041'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>);\n    }\n  };\n  <span class=\"ident\" data-type=\"int => unit\" data-local-use='CodeHighlight/1040'>loop</span>(<span class=\"int\" data-type=\"int\">0</span>);\n\n  <span class=\"ident\" data-type=\"Buffer.t => bytes\" data-stamp-missing>Buffer.to_bytes</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1039'>b</span>) <span class=\"operator\" data-type=\"(bytes, bytes => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bytes => string\" data-stamp-missing>Bytes.to_string</span>\n}", "values": [{"id": "CodeHighlight/1008", "name": "addHtmlEscapedToBuffer", "moduleName": "CodeHighlight"}], "chars": 1686, "lines": 56, "type": "(\n  list((int, int, string)),\n  list((int, string)),\n  string,\n  int,\n  int\n) => string"},
"CodeSnippets/1188": {"name": "isNative", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1188' data-type=\"Json.t => bool\">isNative</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1189' data-type=\"Json.t\">config</span> =&gt; <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;entries&quot;</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1189'>config</span>) <span class=\"operator\" data-type=\"(option(Json.t), option(Json.t)) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"option(Json.t)\">None</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;allowed-build-kinds&quot;</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1189'>config</span>) <span class=\"operator\" data-type=\"(option(Json.t), option(Json.t)) => bool\" data-stamp-missing>!=</span> <span class=\"constructor\" data-type=\"option(Json.t)\">None</span>", "values": [], "chars": 111, "lines": 0, "type": "Json.t => bool"},
"Descartes/1024": {"name": "iterTags", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1024' data-type=\"(\n  Location.t,\n  list(\n    tag\n  )\n) => unit => (module TypedtreeIter.IteratorArgument)\">iterTags</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1025' data-type=\"(Location.t, list(tag)) => unit\">addTag</span>) =&gt; {\n  /* Hmmm Ok I think I want to handle TypeRef &amp; TypeDef internally too, so I know what&#39;s an external reference? */\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1026' data-type=\"(Location.t, string) => unit\">addColor</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1027' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1028' data-type=\"string\">className</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1027'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1028'>className</span>)</span></span>]);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1029' data-type=\"(Location.t, string, Types.type_expr) => unit\">addColorType</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1030' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1031' data-type=\"string\">className</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1032' data-type=\"Types.type_expr\">typ</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1030'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1031'>className</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1032'>typ</span>)</span></span></span>]);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1033' data-type=\"(Location.t, Types.type_expr) => unit\">addType</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1034' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1035' data-type=\"Types.type_expr\">typ</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1034'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1035'>typ</span>)</span></span>]);\n  /* TODO report types with all of this probably? */\n  let module Iter = {\n    open Typedtree;\n    include TypedtreeIter.DefaultIteratorArgument;\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1148' data-type=\"Typedtree.expression => unit\">enter_expression</span> = ({<span class=\"pattern-ident\" data-local-define='Descartes/1149' data-type=\"Typedtree.expression_desc\">exp_desc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1150' data-type=\"Location.t\">exp_loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1151' data-type=\"Types.type_expr\">exp_type</span>}) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='Descartes/1152' data-type=\"(Location.t, string) => unit\">addColorT</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1153' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1154' data-type=\"string\">cls</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1153'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1154'>cls</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1151'>exp_type</span>)</span></span></span>]);\n      switch <span class=\"ident\" data-type=\"Typedtree.expression_desc\" data-local-use='Descartes/1149'>exp_desc</span> {\n      /* TODO dive into the longident */\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_ident</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1155' data-type=\"Path.t\">path</span>, {txt: <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1156' data-type=\"string\">text</span>), <span class=\"pattern-ident\" data-local-define='Descartes/1157' data-type=\"Location.t\">loc</span>}, _) when <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span>(<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1156'>text</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&gt;=</span> &#39;a&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1156'>text</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&lt;=</span> &#39;z&#39;) =&gt; {\n        <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1157'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"string\" data-type=\"string\">&quot;operator&quot;</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1151'>exp_type</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">ValueRef</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1155'>path</span>)</span></span></span></span>])\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_ident</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1158' data-type=\"Path.t\">path</span>, {<span class=\"pattern-ident\" data-local-define='Descartes/1159' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1160' data-type=\"Location.t\">loc</span>}, _) =&gt; {\n        <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1160'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"string\" data-type=\"string\">&quot;ident&quot;</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1151'>exp_type</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">ValueRef</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1158'>path</span>)</span></span></span></span>])\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_int</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='Descartes/1152'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1150'>exp_loc</span>, <span class=\"string\" data-type=\"string\">&quot;int&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_float</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='Descartes/1152'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1150'>exp_loc</span>, <span class=\"string\" data-type=\"string\">&quot;float&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_string</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1161' data-type=\"string\">content</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1162' data-type=\"option(string)\">tag</span>)) =&gt; {\n        let <span class=\"pattern-ident\" data-local-define='Descartes/1174' data-type=\"int\">expectedMaxSize</span> = switch <span class=\"ident\" data-type=\"option(string)\" data-local-use='Descartes/1162'>tag</span> {\n        | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.escaped</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1161'>content</span>)) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">2</span>\n        | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1175' data-type=\"string\">tag</span>) =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.escaped</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1161'>content</span>)) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> (<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1175'>tag</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>*</span> <span class=\"int\" data-type=\"int\">2</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">4</span>\n        };\n        if (<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1150'>exp_loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1150'>exp_loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;</span> <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1174'>expectedMaxSize</span>) {\n          /* This is the jsx &lt;div&gt; bug where the div string thinks it&#39;s the size of the whole tag. */\n          <span class=\"constructor\" data-type=\"unit\">()</span>\n        } else {\n          <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='Descartes/1152'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1150'>exp_loc</span>, <span class=\"string\" data-type=\"string\">&quot;string&quot;</span>)\n        }\n      }\n      /* TODO link to the type */\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_field</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1163' data-type=\"Typedtree.expression\">target</span>, {<span class=\"pattern-ident\" data-local-define='Descartes/1164' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1165' data-type=\"Location.t\">loc</span>}, {<span class=\"pattern-ident\" data-local-define='Descartes/1166' data-type=\"Types.type_expr\">lbl_arg</span>}) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='Descartes/1029'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1165'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;field&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1166'>lbl_arg</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_construct</span>({txt: <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"string\" data-type=\"string\">&quot;::&quot;</span>), <span class=\"pattern-ident\" data-local-define='Descartes/1167' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='Descartes/1168' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1169' data-type=\"list(Typedtree.expression)\">args</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, Types.type_expr) => unit\" data-local-use='Descartes/1033'>addType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1167'>loc</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1151'>exp_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_construct</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1170' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1171' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='Descartes/1172' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1173' data-type=\"list(Typedtree.expression)\">args</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='Descartes/1152'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1171'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;constructor&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_record</span>(_) =&gt; <span class=\"ident\" data-type=\"(Location.t, Types.type_expr) => unit\" data-local-use='Descartes/1033'>addType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1150'>exp_loc</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1151'>exp_type</span>)\n      /* | Texp_variant */\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      /* | _ =&gt; addType(exp_loc, exp_type) */\n      }\n    };\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1176' data-type=\"Typedtree.core_type => unit\">enter_core_type</span> = ({<span class=\"pattern-ident\" data-local-define='Descartes/1177' data-type=\"Typedtree.core_type_desc\">ctyp_desc</span>, ctyp_loc: <span class=\"pattern-ident\" data-local-define='Descartes/1178' data-type=\"Location.t\">loc</span>}) =&gt; {\n      switch <span class=\"ident\" data-type=\"Typedtree.core_type_desc\" data-local-use='Descartes/1177'>ctyp_desc</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.core_type_desc\">Ttyp_var</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1179' data-type=\"string\">string</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='Descartes/1026'>addColor</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1178'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;type-vbl&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.core_type_desc\">Ttyp_constr</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1180' data-type=\"Path.t\">path</span>, {<span class=\"pattern-ident\" data-local-define='Descartes/1181' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1182' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='Descartes/1183' data-type=\"list(Typedtree.core_type)\">args</span>) =&gt; {\n        /* addColor(loc, &quot;type-constructor&quot;) */\n        <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1182'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"string\" data-type=\"string\">&quot;type-constructor&quot;</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeRef</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1180'>path</span>)</span></span></span>])\n      }\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      }\n    };\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1184' data-type=\"Typedtree.pattern => unit\">enter_pattern</span> = ({<span class=\"pattern-ident\" data-local-define='Descartes/1185' data-type=\"Typedtree.pattern_desc\">pat_desc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1186' data-type=\"Location.t\">pat_loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1187' data-type=\"Types.type_expr\">pat_type</span>}) =&gt; {\n      switch <span class=\"ident\" data-type=\"Typedtree.pattern_desc\" data-local-use='Descartes/1185'>pat_desc</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_var</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1188' data-type=\"Ident.t\">ident</span>, {<span class=\"pattern-ident\" data-local-define='Descartes/1189' data-type=\"string\">txt</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1190' data-type=\"Location.t\">loc</span>}) =&gt; {\n        <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1190'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"string\" data-type=\"string\">&quot;pattern-ident&quot;</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">ValueDef</span>(<span class=\"ident\" data-type=\"Ident.t\" data-local-use='Descartes/1188'>ident</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1187'>pat_type</span>)</span></span></span></span>])\n        /* addColorType(loc, &quot;pattern-ident&quot;, pat_type) */\n      }\n      /* | Tpat_construct({txt, loc}, desc, args) =&gt; addColorType(loc, &quot;patern-constructor&quot;, pat_type) */\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_construct</span>({txt: <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"string\" data-type=\"string\">&quot;::&quot;</span>), <span class=\"pattern-ident\" data-local-define='Descartes/1191' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='Descartes/1192' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1193' data-type=\"list(Typedtree.pattern)\">args</span>) =&gt; {\n        <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1191'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1187'>pat_type</span>)</span></span>])\n        /* addType(loc, pat_type) */\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_construct</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1194' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1195' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='Descartes/1196' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1197' data-type=\"list(Typedtree.pattern)\">args</span>) =&gt; {\n        /* TODO make this a TypeRef? */\n        <span class=\"ident\" data-type=\"(Location.t, list(tag)) => unit\" data-local-use='Descartes/1025'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1195'>loc</span>, [<span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">Cls</span>(<span class=\"string\" data-type=\"string\">&quot;pattern-constructor&quot;</span>), <span data-type=\"list(tag)\"><span class=\"constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1187'>pat_type</span>)</span></span></span>])\n        /* addColorType(loc, &quot;pattern-constructor&quot;, pat_type) */\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_int</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='Descartes/1029'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1186'>pat_loc</span>, <span class=\"string\" data-type=\"string\">&quot;int&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1187'>pat_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_float</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='Descartes/1029'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1186'>pat_loc</span>, <span class=\"string\" data-type=\"string\">&quot;float&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1187'>pat_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_string</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='Descartes/1029'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1186'>pat_loc</span>, <span class=\"string\" data-type=\"string\">&quot;string&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1187'>pat_type</span>)\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      }\n    };\n  };\n  (module Iter: TypedtreeIter.IteratorArgument)\n}", "values": [], "chars": 3610, "lines": 77, "type": "(\n  Location.t,\n  list(\n    tag\n  )\n) => unit => (module TypedtreeIter.IteratorArgument)"},
"MainAux/1257": {"name": "fail", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1257' data-type=\"string => 'a\">fail</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1258' data-type=\"string\">msg</span>) =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1258'>msg</span>);\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-global-use='MainAux/1256'>help</span>);\n  <span class=\"ident\" data-type=\"int => 'a\" data-stamp-missing>exit</span>(<span class=\"int\" data-type=\"int\">1</span>);\n}", "values": [{"id": "MainAux/1256", "name": "help", "moduleName": "MainAux"}], "chars": 79, "lines": 4, "type": "string => 'a"},
"InputToModel/1034": {"name": "parseSidebar", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1034' data-type=\"string => list(State.Model.sidebar)\">parseSidebar</span> = <span class=\"pattern-ident\" data-local-define='InputToModel/1035' data-type=\"string\">path</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='InputToModel/1036' data-type=\"list(Json.t)\">contents</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1035'>path</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Sidebar file does not exist&quot;</span>) <span class=\"operator\" data-type=\"(Json.t, Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(option(list(Json.t)), string) => list(Json.t)\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Sidebar json must be an array&quot;</span>;\n  let rec <span class=\"pattern-ident\" data-local-define='InputToModel/1037' data-type=\"Json.t => State.Model.sidebar\">loop</span> = <span class=\"pattern-ident\" data-local-define='InputToModel/1038' data-type=\"Json.t\">item</span> =&gt; switch <span class=\"ident\" data-type=\"Json.t\" data-local-use='InputToModel/1038'>item</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.String</span>(<span class=\"pattern-ident\" data-local-define='InputToModel/1039' data-type=\"string\">path</span>) =&gt; <span class=\"constructor\" data-type=\"State.Model.sidebar\">State.Model.SidebarItem</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1039'>path</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.Object</span>(<span class=\"pattern-ident\" data-local-define='InputToModel/1040' data-type=\"list((string, Json.t))\">contents</span>) =&gt; <span class=\"constructor\" data-type=\"State.Model.sidebar\">State.Model.SidebarHeader</span>(\n    <span class=\"ident\" data-type=\"(string, list((string, Json.t))) => Json.t\" data-stamp-missing>List.assoc</span>(<span class=\"string\" data-type=\"string\">&quot;title&quot;</span>, <span class=\"ident\" data-type=\"list((string, Json.t))\" data-local-use='InputToModel/1040'>contents</span>) <span class=\"operator\" data-type=\"(Json.t, Json.t => option(string)) => option(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Title must be a string&quot;</span>,\n    <span class=\"ident\" data-type=\"(string, list((string, Json.t))) => Json.t\" data-stamp-missing>List.assoc</span>(<span class=\"string\" data-type=\"string\">&quot;contents&quot;</span>, <span class=\"ident\" data-type=\"list((string, Json.t))\" data-local-use='InputToModel/1040'>contents</span>) <span class=\"operator\" data-type=\"(Json.t, Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(option(list(Json.t)), string) => list(Json.t)\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Contents must be a list&quot;</span> <span class=\"operator\" data-type=\"(\n  list(Json.t),\n  list(Json.t) => list(State.Model.sidebar)\n) => list(State.Model.sidebar)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Json.t => State.Model.sidebar, list(Json.t)) => list(\n  State.Model.sidebar\n)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"Json.t => State.Model.sidebar\" data-local-use='InputToModel/1037'>loop</span>)\n  )\n  | _ =&gt; <span class=\"ident\" data-type=\"string => State.Model.sidebar\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Invalid sidebar file&quot;</span>)\n  };\n  <span class=\"ident\" data-type=\"(Json.t => State.Model.sidebar, list(Json.t)) => list(\n  State.Model.sidebar\n)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"Json.t => State.Model.sidebar\" data-local-use='InputToModel/1037'>loop</span>, <span class=\"ident\" data-type=\"list(Json.t)\" data-local-use='InputToModel/1036'>contents</span>)\n}", "values": [{"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}], "chars": 567, "lines": 11, "type": "string => list(State.Model.sidebar)"},
"ProcessCode/1016": {"name": "iterDocBlocks", "moduleName": "ProcessCode", "html": "let rec <span class=\"pattern-ident\" data-local-define='ProcessCode/1016' data-type=\"((Omd.name, string) => 'a, Omd.t) => unit\">iterDocBlocks</span> = (<span class=\"pattern-ident\" data-local-define='ProcessCode/1017' data-type=\"(Omd.name, string) => 'a\">fn</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1018' data-type=\"Omd.t\">md</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Omd.Representation.element => option(\n    Omd.Representation.t\n  ),\n  Omd.Representation.t\n) => Omd.Representation.t\" data-stamp-missing>Omd.Representation.visit</span>(<span class=\"pattern-ident\" data-local-define='ProcessCode/1019' data-type=\"Omd.Representation.element\">el</span> =&gt; switch <span class=\"ident\" data-type=\"Omd.Representation.element\" data-local-use='ProcessCode/1019'>el</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Html_comment</span>(<span class=\"pattern-ident\" data-local-define='ProcessCode/1020' data-type=\"string\">text</span>) when <span class=\"ident\" data-type=\"(string, string) => bool\" data-global-use='ProcessCode/1012'>startsWith</span>(<span class=\"string\" data-type=\"string\">&quot;&lt;!--!&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1020'>text</span>) =&gt; {\n    <span class=\"ident\" data-type=\"((Omd.name, string) => 'a, Omd.t) => unit\" data-global-use='ProcessCode/1016'>iterDocBlocks</span>(<span class=\"ident\" data-type=\"(Omd.name, string) => 'a\" data-local-use='ProcessCode/1017'>fn</span>, <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"(string, int, int) => string\" data-global-use='ProcessCode/1008'>slice</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1020'>text</span>, <span class=\"int\" data-type=\"int\">5</span>, <span class=\"int\" data-type=\"int\">-3</span>)));\n    <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Html_comment</span>(<span class=\"pattern-ident\" data-local-define='ProcessCode/1021' data-type=\"string\">text</span>) =&gt; <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n  | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Code_block</span>(<span class=\"pattern-ident\" data-local-define='ProcessCode/1022' data-type=\"Omd.name\">lang</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1023' data-type=\"string\">contents</span>) =&gt; { <span class=\"ident\" data-type=\"(Omd.name, string) => 'a\" data-local-use='ProcessCode/1017'>fn</span>(<span class=\"ident\" data-type=\"Omd.name\" data-local-use='ProcessCode/1022'>lang</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1023'>contents</span>); <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span> }\n  | _ =&gt; <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n}, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='ProcessCode/1018'>md</span>) <span class=\"operator\" data-type=\"(Omd.Representation.t, Omd.Representation.t => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Omd.Representation.t => unit\" data-stamp-missing>ignore</span>", "values": [{"id": "ProcessCode/1012", "name": "startsWith", "moduleName": "ProcessCode"}, {"id": "ProcessCode/1008", "name": "slice", "moduleName": "ProcessCode"}], "chars": 345, "lines": 8, "type": "((Omd.name, string) => 'a, Omd.t) => unit"},
"CodeSnippets/1190": {"name": "getDependencyDirs", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1190' data-type=\"(string, Json.t) => list((string, string))\">getDependencyDirs</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1191' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1192' data-type=\"Json.t\">config</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1193' data-type=\"list(string)\">deps</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1192'>config</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;bs-dependencies&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(option(list(Json.t)), list(Json.t)) => list(Json.t)\" data-global-use='Infix/1012'>|?</span> <span class=\"constructor\" data-type=\"list(Json.t)\">[]</span> <span class=\"operator\" data-type=\"(list(Json.t), list(Json.t) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Json.t => option(string), list(Json.t)) => list(string)\" data-global-use='CodeSnippets/1170'>optMap</span>(<span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span>);\n  <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1193'>deps</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list(list((string, string)))\n) => list(list((string, string)))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => list((string, string)), list(string)) => list(\n  list((string, string))\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1194' data-type=\"string\">name</span> =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1195' data-type=\"string\">loc</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1191'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;node_modules&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1194'>name</span>;\n    switch (<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1195'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bsconfig.json&quot;</span>)) {\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1196' data-type=\"string\">text</span>) =&gt;\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1197' data-type=\"Json.t\">inner</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1196'>text</span>);\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1198' data-type=\"list(string)\">allowedKinds</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1197'>inner</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;allowed-build-kinds&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(\n  option(list(Json.t)),\n  list(Json.t) => list(string)\n) => option(list(string))\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(Json.t => string, list(Json.t)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(Json.t => option(string), string, Json.t) => string\" data-global-use='Infix/1041'>|.!</span> <span class=\"string\" data-type=\"string\">&quot;allowed-build-kinds must be strings&quot;</span>) <span class=\"operator\" data-type=\"(option(list(string)), list(string)) => list(string)\" data-global-use='Infix/1012'>|?</span> [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\"><span class=\"constructor\" data-type=\"list(string)\">&quot;js&quot;</span></span></span>];\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1199' data-type=\"bool\">isNative</span> = <span class=\"ident\" data-type=\"Json.t => bool\" data-global-use='CodeSnippets/1188'>isNative</span>(<span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1197'>inner</span>);\n\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1200' data-type=\"string\">compilationBase</span> = <span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1199'>isNative</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/js&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> (\n        <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1195'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/ocaml&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> (<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1195'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs&quot;</span>)\n      );\n      if (<span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;js&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1198'>allowedKinds</span>)) {\n        <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-global-use='CodeSnippets/1176'>getSourceDirectories</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1195'>loc</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1197'>inner</span>) <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1201' data-type=\"string\">name</span> =&gt; (\n          <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1200'>compilationBase</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1201'>name</span>,\n          <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1195'>loc</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/js&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1201'>name</span>,\n        ));\n      } else {\n        <span class=\"constructor\" data-type=\"list((string, string))\">[]</span>\n      }\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt;\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Skipping dependency: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1194'>name</span>);\n      <span class=\"constructor\" data-type=\"list((string, string))\">[]</span>\n    }\n  }) <span class=\"operator\" data-type=\"(\n  list(list((string, string))),\n  list(list((string, string))) => list(\n    (string, string)\n  )\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list((string, string))) => list((string, string))\" data-stamp-missing>List.concat</span>\n}", "values": [{"id": "CodeSnippets/1170", "name": "optMap", "moduleName": "CodeSnippets"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "Infix/1041", "name": "|.!", "moduleName": "Infix"}, {"id": "CodeSnippets/1188", "name": "isNative", "moduleName": "CodeSnippets"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "CodeSnippets/1176", "name": "getSourceDirectories", "moduleName": "CodeSnippets"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 978, "lines": 26, "type": "(string, Json.t) => list((string, string))"},
"CmtFindDocItems/1042": {"name": "docItemsFromTypes", "moduleName": "CmtFindDocItems", "html": "let rec <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1042' data-type=\"Types.signature => list(State.Model.Docs.doc)\">docItemsFromTypes</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1044' data-type=\"Types.signature\">signature</span>) =&gt; {\n  open Types;\n  <span class=\"ident\" data-type=\"(\n  (\n    list(State.Model.Docs.doc),\n    Types.signature_item\n  ) => list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc),\n  Types.signature\n) => list(State.Model.Docs.doc)\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1143' data-type=\"list(State.Model.Docs.doc)\">items</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1144' data-type=\"Types.signature_item\">item</span>) =&gt; switch <span class=\"ident\" data-type=\"Types.signature_item\" data-local-use='CmtFindDocItems/1144'>item</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Types.signature_item\">Sig_value</span>({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1145' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1146' data-type=\"string\">name</span>}, {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1147' data-type=\"Types.type_expr\">val_type</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1148' data-type=\"Types.value_kind\">val_kind</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1149' data-type=\"Parsetree.attributes\">val_attributes</span>}) =&gt; [<span data-type=\"list(State.Model.Docs.doc)\">(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1146'>name</span>, <span class=\"ident\" data-type=\"Parsetree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Parsetree.attributes\" data-local-use='CmtFindDocItems/1149'>val_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CmtFindDocItems/1147'>val_type</span>)), ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1143'>items</span></span>]\n  | <span class=\"pattern-constructor\" data-type=\"Types.signature_item\">Sig_type</span>({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1150' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1151' data-type=\"string\">name</span>}, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1152' data-type=\"Types.type_declaration\">decl</span>, _) =&gt; [<span data-type=\"list(State.Model.Docs.doc)\">(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1151'>name</span>, <span class=\"ident\" data-type=\"Parsetree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='CmtFindDocItems/1152'>decl</span>.<span class=\"field\" data-type=\"Parsetree.attributes\">type_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='CmtFindDocItems/1152'>decl</span>)), ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1143'>items</span></span>]\n  | <span class=\"pattern-constructor\" data-type=\"Types.signature_item\">Sig_module</span>({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1153' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1154' data-type=\"string\">name</span>}, {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1155' data-type=\"Types.module_type\">md_type</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1156' data-type=\"Parsetree.attributes\">md_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1157' data-type=\"Location.t\">md_loc</span>}, _) =&gt; [<span data-type=\"list(State.Model.Docs.doc)\"><span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1154'>name</span>, <span class=\"ident\" data-type=\"Parsetree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Parsetree.attributes\" data-local-use='CmtFindDocItems/1156'>md_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"ident\" data-type=\"Types.module_type => State.Model.Docs.moduleContents\" data-global-use='CmtFindDocItems/1043'>moduleContents</span>(<span class=\"ident\" data-type=\"Types.module_type\" data-local-use='CmtFindDocItems/1155'>md_type</span>)))</span></span>]\n  | _ =&gt; <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1143'>items</span>\n  }, <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span>, <span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindDocItems/1044'>signature</span>);\n}", "values": [{"id": "PrepareUtils/1051", "name": "findDocAttribute", "moduleName": "PrepareUtils"}, {"id": "CmtFindDocItems/1043", "name": "moduleContents", "moduleName": "CmtFindDocItems"}], "chars": 540, "lines": 8, "type": "Types.signature => list(State.Model.Docs.doc)"},
"Search/1014": {"name": "serializeSearchable", "moduleName": "Search", "html": "let <span class=\"pattern-ident\" data-local-define='Search/1014' data-type=\"(string, string, string, string, string) => string\">serializeSearchable</span> = ((<span class=\"pattern-ident\" data-local-define='Search/1015' data-type=\"string\">href</span>, <span class=\"pattern-ident\" data-local-define='Search/1016' data-type=\"string\">title</span>, <span class=\"pattern-ident\" data-local-define='Search/1017' data-type=\"string\">contents</span>, <span class=\"pattern-ident\" data-local-define='Search/1018' data-type=\"string\">rendered</span>, <span class=\"pattern-ident\" data-local-define='Search/1019' data-type=\"string\">breadcrumb</span>)) =&gt; {\n  <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string, string) => string,\n  (string, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string) => string,\n  (string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|{&quot;href&quot;: &quot;%s&quot;, &quot;title&quot;: &quot;%s&quot;, &quot;contents&quot;: &quot;%s&quot;, &quot;rendered&quot;: &quot;%s&quot;, &quot;breadcrumb&quot;: &quot;%s&quot;}|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string => string\" data-global-use='Search/1012'>escape</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Search/1015'>href</span>), <span class=\"ident\" data-type=\"string => string\" data-global-use='Search/1012'>escape</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Search/1016'>title</span>), <span class=\"ident\" data-type=\"string => string\" data-global-use='Search/1012'>escape</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Search/1017'>contents</span>), <span class=\"ident\" data-type=\"string => string\" data-global-use='Search/1012'>escape</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Search/1018'>rendered</span>), <span class=\"ident\" data-type=\"string => string\" data-global-use='Search/1012'>escape</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Search/1019'>breadcrumb</span>))\n}", "values": [{"id": "Search/1012", "name": "escape", "moduleName": "Search"}], "chars": 273, "lines": 2, "type": "(string, string, string, string, string) => string"},
"PrintType/1181": {"name": "print_attr", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1181' data-type=\"(T.stringifier, Types.label_declaration) => Pretty.doc\">print_attr</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1182' data-type=\"T.stringifier\">printer</span>, {<span class=\"pattern-ident\" data-local-define='PrintType/1183' data-type=\"Ident.t\">Types.ld_id</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1184' data-type=\"Asttypes.mutable_flag\">ld_mutable</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1185' data-type=\"Types.type_expr\">ld_type</span>}) =&gt; {\n  switch <span class=\"ident\" data-type=\"Asttypes.mutable_flag\" data-local-use='PrintType/1184'>ld_mutable</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Asttypes.mutable_flag\">Asttypes.Immutable</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n  | <span class=\"pattern-constructor\" data-type=\"Asttypes.mutable_flag\">Mutable</span> =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;mut &quot;</span>)\n  } <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1182'>printer</span>.<span class=\"field\" data-type=\"(T.stringifier, Ident.t) => Pretty.doc\">ident</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1182'>printer</span>, <span class=\"ident\" data-type=\"Ident.t\" data-local-use='PrintType/1183'>ld_id</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>( <span class=\"string\" data-type=\"string\">&quot;: &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1182'>printer</span>.<span class=\"field\" data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1182'>printer</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1185'>ld_type</span>);\n}", "values": [{"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}], "chars": 249, "lines": 8, "type": "(T.stringifier, Types.label_declaration) => Pretty.doc"},
"ModelToOutput/1087": {"name": "makeCodeBlocksMap", "moduleName": "ModelToOutput", "html": "let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1087' data-type=\"list(State.Model.codeBlock) => Hashtbl.t(\n  (string, string),\n  State.Model.codeBlock\n)\">makeCodeBlocksMap</span> = <span class=\"pattern-ident\" data-local-define='ModelToOutput/1088' data-type=\"list(State.Model.codeBlock)\">codeBlocks</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1089' data-type=\"Hashtbl.t((string, string), State.Model.codeBlock)\">map</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  (string, string),\n  State.Model.codeBlock\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  <span class=\"ident\" data-type=\"list(State.Model.codeBlock)\" data-local-use='ModelToOutput/1088'>codeBlocks</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.codeBlock),\n  list(State.Model.codeBlock) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.codeBlock => unit,\n  list(State.Model.codeBlock)\n) => unit\" data-stamp-missing>List.iter</span>(({<span class=\"pattern-ident\" data-local-define='ModelToOutput/1128' data-type=\"string\">State.Model.lang</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1130' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1129' data-type=\"string\">raw</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1131' data-type=\"string\">page</span>, filePath: <span class=\"pattern-ident\" data-local-define='ModelToOutput/1132' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1133' data-type=\"State.Model.compilationResult\">compilationResult</span>} as block) =&gt; {\n    <span class=\"ident\" data-type=\"(\n  Hashtbl.t((string, string), State.Model.codeBlock),\n  (string, string),\n  State.Model.codeBlock\n) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t((string, string), State.Model.codeBlock)\" data-local-use='ModelToOutput/1089'>map</span>, (<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1128'>lang</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1129'>raw</span>), <span class=\"ident\" data-type=\"State.Model.codeBlock\" data-local-use='ModelToOutput/1134'>block</span>)\n  });\n  <span class=\"ident\" data-type=\"Hashtbl.t((string, string), State.Model.codeBlock)\" data-local-use='ModelToOutput/1089'>map</span>\n}", "values": [], "chars": 244, "lines": 6, "type": "list(State.Model.codeBlock) => Hashtbl.t(\n  (string, string),\n  State.Model.codeBlock\n)"},
"CmtFindDocItems/1176": {"name": "docItemsFromStructure", "moduleName": "CmtFindDocItems", "html": "let rec <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1176' data-type=\"list(Typedtree.structure_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\">docItemsFromStructure</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1181' data-type=\"list(Typedtree.structure_item)\">structure</span>) =&gt; {\n  open Typedtree;\n  <span class=\"ident\" data-type=\"(\n  (\n    (option(Omd.t), list(State.Model.Docs.doc)),\n    Typedtree.structure_item\n  ) => (option(Omd.t), list(State.Model.Docs.doc)),\n  (option(Omd.t), list(State.Model.Docs.doc)),\n  list(Typedtree.structure_item)\n) => (option(Omd.t), list(State.Model.Docs.doc))\" data-stamp-missing>List.fold_left</span>(((<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1182' data-type=\"option(Omd.t)\">global</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1183' data-type=\"list(State.Model.Docs.doc)\">items</span>), <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1184' data-type=\"Typedtree.structure_item\">item</span>) =&gt; switch (<span class=\"ident\" data-type=\"Typedtree.structure_item\" data-local-use='CmtFindDocItems/1184'>item</span>.<span class=\"field\" data-type=\"Typedtree.structure_item_desc\">str_desc</span>) {\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_value</span>(_, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1185' data-type=\"list(Typedtree.value_binding)\">bindings</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Typedtree.value_binding => option(State.Model.Docs.doc),\n  list(Typedtree.value_binding),\n  list(State.Model.Docs.doc)\n) => list(State.Model.Docs.doc)\" data-global-use='PrepareUtils/1061'>foldOpt</span>(({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1199' data-type=\"Location.t\">vb_loc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1197' data-type=\"Typedtree.expression\">vb_expr</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1196' data-type=\"Typedtree.pattern\">vb_pat</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1198' data-type=\"Typedtree.attributes\">vb_attributes</span>}) =&gt;\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Typedtree.attributes => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1198'>vb_attributes</span>)) {\n      switch (<span class=\"ident\" data-type=\"Typedtree.pattern\" data-local-use='CmtFindDocItems/1196'>vb_pat</span>.<span class=\"field\" data-type=\"Typedtree.pattern_desc\">pat_desc</span>) {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_var</span>(_, {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1200' data-type=\"string\">Asttypes.txt</span>}) =&gt; <span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">Some</span>((<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1200'>txt</span>, <span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1198'>vb_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"ident\" data-type=\"Typedtree.pattern\" data-local-use='CmtFindDocItems/1196'>vb_pat</span>.<span class=\"field\" data-type=\"Types.type_expr\">pat_type</span>)))\n      | _ =&gt; <span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">None</span>\n      }\n    } else {<span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">None</span>}\n    , <span class=\"ident\" data-type=\"list(Typedtree.value_binding)\" data-local-use='CmtFindDocItems/1185'>bindings</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span>) <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => (\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n) => (option(Omd.t), list(State.Model.Docs.doc))\" data-stamp-missing>|&gt;</span> <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1201' data-type=\"list(State.Model.Docs.doc)\">a</span> =&gt; (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1201'>a</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_attribute</span>(({Asttypes.txt: <span class=\"string\" data-type=\"string\">&quot;ocaml.doc&quot;</span>}, <span class=\"pattern-constructor\" data-type=\"Parsetree.payload\">PStr</span>([<span data-type=\"Parsetree.structure\"><span class=\"pattern-constructor\" data-type=\"list(Parsetree.structure_item)\">{pstr_desc: <span class=\"pattern-constructor\" data-type=\"Parsetree.structure_item_desc\">Pstr_eval</span>({pexp_desc: <span class=\"pattern-constructor\" data-type=\"Parsetree.expression_desc\">Pexp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_string</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1186' data-type=\"string\">doc</span>, _))}, _)}</span></span>]))) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1202' data-type=\"Omd.t\">doc</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='PrepareUtils/1038'>cleanOffStars</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1186'>doc</span>) <span class=\"operator\" data-type=\"(string, string => Omd.t) => Omd.t\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>;\n    if (<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc)\n) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span> <span class=\"operator\" data-type=\"(option(Omd.t), option(Omd.t)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"option(Omd.t)\">None</span>) {\n      (<span class=\"constructor\" data-type=\"option(Omd.t)\">Some</span>(<span class=\"ident\" data-type=\"Omd.t\" data-local-use='CmtFindDocItems/1202'>doc</span>), <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span>)\n    } else {\n      (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, [<span data-type=\"list(State.Model.Docs.doc)\">(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"constructor\" data-type=\"option(Omd.t)\">None</span>, <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">StandaloneDoc</span>(<span class=\"ident\" data-type=\"Omd.t\" data-local-use='CmtFindDocItems/1202'>doc</span>)), ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span></span>])\n    }\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_include</span>({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1189' data-type=\"Location.t\">incl_loc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1187' data-type=\"Typedtree.module_expr\">incl_mod</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1190' data-type=\"list(Typedtree.attribute)\">incl_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1188' data-type=\"Types.signature\">incl_type</span>}) =&gt; {\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"list(Typedtree.attribute) => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"list(Typedtree.attribute)\" data-local-use='CmtFindDocItems/1190'>incl_attributes</span>)) {\n      switch <span class=\"ident\" data-type=\"Typedtree.module_expr\" data-local-use='CmtFindDocItems/1187'>incl_mod</span>.<span class=\"field\" data-type=\"Typedtree.module_expr_desc\">mod_desc</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_ident</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1204' data-type=\"Path.t\">path</span>, _) =&gt; ((<span class=\"ident\" data-type=\"(~?paren: option(string => bool), Path.t) => string\" data-stamp-missing>Path.name</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1204'>path</span>), <span class=\"ident\" data-type=\"list(Typedtree.attribute) => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"list(Typedtree.attribute)\" data-local-use='CmtFindDocItems/1190'>incl_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(<span class=\"constructor\" data-type=\"option(Path.t)\">Some</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1204'>path</span>), <span class=\"ident\" data-type=\"Types.signature => list(State.Model.Docs.doc)\" data-global-use='CmtFindDocItems/1042'>docItemsFromTypes</span>(<span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindDocItems/1188'>incl_type</span>))))\n      | _ =&gt; ((<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"list(Typedtree.attribute) => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"list(Typedtree.attribute)\" data-local-use='CmtFindDocItems/1190'>incl_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(<span class=\"constructor\" data-type=\"option(Path.t)\">None</span>, <span class=\"ident\" data-type=\"Types.signature => list(State.Model.Docs.doc)\" data-global-use='CmtFindDocItems/1042'>docItemsFromTypes</span>(<span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindDocItems/1188'>incl_type</span>))))\n      } <span class=\"operator\" data-type=\"(\n  State.Model.Docs.doc,\n  State.Model.Docs.doc => (\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n) => (option(Omd.t), list(State.Model.Docs.doc))\" data-stamp-missing>|&gt;</span> <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1205' data-type=\"State.Model.Docs.doc\">a</span> =&gt; (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, [<span data-type=\"list(State.Model.Docs.doc)\"><span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='CmtFindDocItems/1205'>a</span>, ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span></span>])\n    } else {(<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span>)}\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_type</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1191' data-type=\"list(Typedtree.type_declaration)\">decls</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Typedtree.type_declaration => option(\n    State.Model.Docs.doc\n  ),\n  list(Typedtree.type_declaration),\n  list(State.Model.Docs.doc)\n) => list(State.Model.Docs.doc)\" data-global-use='PrepareUtils/1061'>foldOpt</span>(({typ_name: {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1206' data-type=\"string\">txt</span>}, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1208' data-type=\"Location.t\">typ_loc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1209' data-type=\"Typedtree.attributes\">typ_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1207' data-type=\"Types.type_declaration\">typ_type</span>}) =&gt;\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Typedtree.attributes => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1209'>typ_attributes</span>)) {\n      <span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">Some</span>((<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1206'>txt</span>, <span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1209'>typ_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='CmtFindDocItems/1207'>typ_type</span>)))\n    } else {<span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">None</span>}, <span class=\"ident\" data-type=\"list(Typedtree.type_declaration)\" data-local-use='CmtFindDocItems/1191'>decls</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span>) <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => (\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n) => (option(Omd.t), list(State.Model.Docs.doc))\" data-stamp-missing>|&gt;</span> <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1210' data-type=\"list(State.Model.Docs.doc)\">a</span> =&gt; (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1210'>a</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_module</span>({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1194' data-type=\"Typedtree.attributes\">mb_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1195' data-type=\"Location.t\">mb_loc</span>, mb_name: {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1192' data-type=\"string\">txt</span>}, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1193' data-type=\"Typedtree.module_expr\">mb_expr</span>}) =&gt; {\n    if (<span class=\"ident\" data-type=\"Typedtree.attributes => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1194'>mb_attributes</span>)) {\n      (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span>)\n    } else {\n      let (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1211' data-type=\"option(Omd.t)\">docc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1212' data-type=\"State.Model.Docs.moduleContents\">contents</span>) = <span class=\"ident\" data-type=\"Typedtree.module_expr => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\" data-global-use='CmtFindDocItems/1177'>moduleContentsStr</span>(<span class=\"ident\" data-type=\"Typedtree.module_expr\" data-local-use='CmtFindDocItems/1193'>mb_expr</span>);\n      (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, [<span data-type=\"list(State.Model.Docs.doc)\">(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1192'>txt</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1211'>docc</span>, <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"ident\" data-type=\"State.Model.Docs.moduleContents\" data-local-use='CmtFindDocItems/1212'>contents</span>)), ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span></span>])\n    }\n  }\n  | _ =&gt; (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1182'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1183'>items</span>)\n  }, (<span class=\"constructor\" data-type=\"option(Omd.t)\">None</span>, <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span>), <span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='CmtFindDocItems/1181'>structure</span>);\n}", "values": [{"id": "PrepareUtils/1038", "name": "cleanOffStars", "moduleName": "PrepareUtils"}, {"id": "CmtFindDocItems/1042", "name": "docItemsFromTypes", "moduleName": "CmtFindDocItems"}, {"id": "PrepareUtils/1061", "name": "foldOpt", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1051", "name": "findDocAttribute", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1057", "name": "hasNoDoc", "moduleName": "PrepareUtils"}, {"id": "CmtFindDocItems/1177", "name": "moduleContentsStr", "moduleName": "CmtFindDocItems"}], "chars": 1843, "lines": 41, "type": "list(Typedtree.structure_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)"},
"CodeSnippets/1323": {"name": "escape", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1323' data-type=\"string => string\">escape</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1324' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1324'>text</span>\n<span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\\\&quot;</span>), <span class=\"string\" data-type=\"string\">&quot;\\\\\\\\&quot;</span>)\n<span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>), <span class=\"string\" data-type=\"string\">&quot; &quot;</span>)\n<span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>), <span class=\"string\" data-type=\"string\">&quot;\\\\\\&quot;&quot;</span>)", "values": [], "chars": 187, "lines": 3, "type": "string => string"},
"MainAux/1183": {"name": "optOr", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1183' data-type=\"('a, option('a)) => 'a\">optOr</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1184' data-type=\"'a\">d</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1185' data-type=\"option('a)\">o</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='MainAux/1185'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1184'>d</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1186' data-type=\"'a\">n</span>) =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1186'>n</span> }", "values": [], "chars": 61, "lines": 0, "type": "('a, option('a)) => 'a"},
"PrintType/1186": {"name": "print_value", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1186' data-type=\"(\n  T.stringifier,\n  string,\n  string,\n  Types.type_expr\n) => Pretty.doc\">print_value</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1187' data-type=\"T.stringifier\">stringifier</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1188' data-type=\"string\">realName</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1189' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1190' data-type=\"Types.type_expr\">decl</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;let &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(~len=<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1188'>realName</span>), <span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1189'>name</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot; = &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1187'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1187'>stringifier</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1190'>decl</span>)\n}", "values": [{"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}], "chars": 174, "lines": 4, "type": "(\n  T.stringifier,\n  string,\n  string,\n  Types.type_expr\n) => Pretty.doc"},
"MainAux/1008": {"name": "unwrap", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1008' data-type=\"(string, option('a)) => 'a\">unwrap</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1009' data-type=\"string\">m</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1010' data-type=\"option('a)\">x</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='MainAux/1010'>x</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-stamp-missing>failwith</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1009'>m</span>) | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1011' data-type=\"'a\">x</span>) =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1011'>x</span> }", "values": [], "chars": 72, "lines": 0, "type": "(string, option('a)) => 'a"},
"ModelToOutput/1032": {"name": "outputCustom", "moduleName": "ModelToOutput", "html": "let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1032' data-type=\"(\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.t\n  ) => string,\n  list(string),\n  State.Model.customPage\n) => unit\">outputCustom</span> = (~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1033' data-type=\"string\">cssLoc</span>, ~<span class=\"pattern-ident\" data-local-define='ModelToOutput/1034' data-type=\"string\">jsLoc</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1035' data-type=\"string\">dest</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1036' data-type=\"list(State.Model.customPage)\">markdowns</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1037' data-type=\"(string, list(string), PrintType.pathType) => option(string)\">searchHref</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1038' data-type=\"option(string)\">repo</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1039' data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string\">processDocString</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1040' data-type=\"list(string)\">names</span>, {<span class=\"pattern-ident\" data-local-define='ModelToOutput/1041' data-type=\"string\">State.Model.title</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1043' data-type=\"string\">destPath</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1042' data-type=\"option(string)\">sourcePath</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1044' data-type=\"State.Model.docWithExamples\">contents</span>}) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1045' data-type=\"string\">path</span> = <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1035'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1043'>destPath</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1046' data-type=\"string => string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1045'>path</span>));\n  let (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1047' data-type=\"Pervasives.ref(list((int, string, string, string)))\">tocItems</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1048' data-type=\"Omd.element => option(string)\">override</span>) = <span class=\"ident\" data-type=\"(\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  Omd.element => option(string)\n)\" data-global-use='GenerateDoc/1130'>GenerateDoc.trackToc</span>(~lower=<span class=\"constructor\" data-type=\"bool\">true</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"(\n  string,\n  string,\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)\" data-global-use='Markdown/1008'>Markdown.linkifyMarkdown</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1045'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1035'>dest</span>));\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1049' data-type=\"PrintType.T.stringifier\">searchPrinter</span> = <span class=\"ident\" data-type=\"(\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  list(\n    (\n      int,\n      (\n        string,\n        list(string),\n        'a\n      )\n    )\n  )\n) => PrintType.T.stringifier\" data-global-use='GenerateDoc/1052'>GenerateDoc.printer</span>(<span class=\"ident\" data-type=\"(string, list(string), PrintType.pathType) => option(string)\" data-local-use='ModelToOutput/1037'>searchHref</span>, <span class=\"constructor\" data-type=\"list((int, (string, list(string), 'a)))\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1051' data-type=\"(\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string\">m</span>: (<span class=\"type-constructor\" data-local-use='ModelToOutput/3'>string</span>, <span class=\"type-constructor\" data-local-use='ModelToOutput/3'>string</span>, ~override:<span class=\"type-constructor\" data-local-use='ModelToOutput/10'>(<span class=\"type-constructor\" data-stamp-missing>Omd.element</span> =&gt; <span class=\"type-constructor\" data-local-use='ModelToOutput/10'>option</span>(<span class=\"type-constructor\" data-local-use='ModelToOutput/3'>string</span>))</span>=?, <span class=\"type-constructor\" data-local-use='ModelToOutput/9'>list</span>(<span class=\"type-constructor\" data-local-use='ModelToOutput/3'>string</span>), <span class=\"type-constructor\" data-local-use='ModelToOutput/3'>string</span>, <span class=\"type-constructor\" data-local-use='ModelToOutput/10'>option</span>(<span class=\"type-constructor\" data-global-use='State/1069'>State.Model.Docs.docItem</span>)) =&gt; <span class=\"type-constructor\" data-stamp-missing>Omd.t</span> =&gt; <span class=\"type-constructor\" data-local-use='ModelToOutput/3'>string</span> = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string\" data-local-use='ModelToOutput/1039'>processDocString</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='ModelToOutput/1049'>searchPrinter</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1052' data-type=\"string\">main</span> = <span class=\"ident\" data-type=\"(\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string\" data-local-use='ModelToOutput/1051'>m</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1045'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1041'>title</span>, ~override=<span class=\"ident\" data-type=\"Omd.element => option(string)\" data-local-use='ModelToOutput/1048'>override</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1041'>title</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">None</span>, <span class=\"ident\" data-type=\"State.Model.docWithExamples\" data-local-use='ModelToOutput/1044'>contents</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1053' data-type=\"option(string)\">sourceUrl</span> = <span class=\"ident\" data-type=\"option(string)\" data-local-use='ModelToOutput/1038'>repo</span> <span class=\"operator\" data-type=\"(option(string), string => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1054' data-type=\"string\">url</span> =&gt; <span class=\"ident\" data-type=\"option(string)\" data-local-use='ModelToOutput/1042'>sourcePath</span> <span class=\"operator\" data-type=\"(option(string), string => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1055' data-type=\"string\">sourcePath</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1054'>url</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1055'>sourcePath</span>));\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1056' data-type=\"list((string, string))\">markdowns</span> = <span class=\"ident\" data-type=\"(\n  State.Model.customPage => (string, string),\n  list(State.Model.customPage)\n) => list((string, string))\" data-stamp-missing>List.map</span>(({<span class=\"pattern-ident\" data-local-define='ModelToOutput/1057' data-type=\"string\">State.Model.title</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1058' data-type=\"string\">destPath</span>}) =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1046'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1035'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1058'>destPath</span>), <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1057'>title</span>), <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ModelToOutput/1036'>markdowns</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1059' data-type=\"list((string, string))\">projectListing</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1040'>names</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='ModelToOutput/1060' data-type=\"string\">name</span> =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1046'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1035'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;api&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1060'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1060'>name</span>));\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1061' data-type=\"string\">html</span> = <span class=\"ident\" data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option(string),\n  ~jsLoc: option(string),\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\" data-global-use='Docs/1019'>Docs.page</span>(~<span class=\"ident\" data-type=\"option(string)\" data-local-use='ModelToOutput/1053'>sourceUrl</span>, ~relativeToRoot=<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1046'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1035'>dest</span>), ~cssLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1046'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1033'>cssLoc</span>)), ~jsLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ModelToOutput/1046'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1034'>jsLoc</span>)), <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1041'>title</span>, <span class=\"ident\" data-type=\"list((int, string, string, string)) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='ModelToOutput/1047'>tocItems</span><span class=\"operator\" data-type=\"Pervasives.ref(list((int, string, string, string))) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>^</span>), <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='ModelToOutput/1059'>projectListing</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='ModelToOutput/1056'>markdowns</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1052'>main</span>);\n\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1045'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1061'>html</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n}", "values": [{"id": "GenerateDoc/1130", "name": "trackToc", "moduleName": "GenerateDoc"}, {"id": "Markdown/1008", "name": "linkifyMarkdown", "moduleName": "Markdown"}, {"id": "GenerateDoc/1052", "name": "printer", "moduleName": "GenerateDoc"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "Docs/1019", "name": "page", "moduleName": "Docs"}], "chars": 1170, "lines": 16, "type": "(\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  list(State.Model.customPage),\n  (string, list(string), PrintType.pathType) => option(\n    string\n  ),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.t\n  ) => string,\n  list(string),\n  State.Model.customPage\n) => unit"},
"GenerateDoc/1186": {"name": "div", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1186' data-type=\"(string, string) => string\">div</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1187' data-type=\"string\">cls</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1188' data-type=\"string\">body</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;&lt;div class=&#39;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1187'>cls</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1188'>body</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/div&gt;&quot;</span>", "values": [], "chars": 74, "lines": 0, "type": "(string, string) => string"},
"ProcessCode/1008": {"name": "slice", "moduleName": "ProcessCode", "html": "let <span class=\"pattern-ident\" data-local-define='ProcessCode/1008' data-type=\"(string, int, int) => string\">slice</span> = (<span class=\"pattern-ident\" data-local-define='ProcessCode/1009' data-type=\"string\">s</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1010' data-type=\"int\">pre</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1011' data-type=\"int\">post</span>) =&gt; <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1009'>s</span>, <span class=\"ident\" data-type=\"int\" data-local-use='ProcessCode/1010'>pre</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1009'>s</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='ProcessCode/1010'>pre</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='ProcessCode/1011'>post</span>)", "values": [], "chars": 79, "lines": 0, "type": "(string, int, int) => string"},
"Highlighting/1271": {"name": "mapHash", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1271' data-type=\"(Hashtbl.t('a, 'a), ('a, 'a) => 'a) => list('a)\">mapHash</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1272' data-type=\"Hashtbl.t('a, 'a)\">hash</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1273' data-type=\"('a, 'a) => 'a\">fn</span>) =&gt; <span class=\"ident\" data-type=\"(\n  ('a, 'a, list('a)) => list('a),\n  Hashtbl.t('a, 'a),\n  list('a)\n) => list('a)\" data-stamp-missing>Hashtbl.fold</span>((<span class=\"pattern-ident\" data-local-define='Highlighting/1274' data-type=\"'a\">k</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1275' data-type=\"'a\">v</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1276' data-type=\"list('a)\">l</span>) =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"('a, 'a) => 'a\" data-local-use='Highlighting/1273'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1274'>k</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1275'>v</span>), ...<span class=\"ident\" data-type=\"list('a)\" data-local-use='Highlighting/1276'>l</span></span>], <span class=\"ident\" data-type=\"Hashtbl.t('a, 'a)\" data-local-use='Highlighting/1272'>hash</span>, <span class=\"constructor\" data-type=\"list('a)\">[]</span>)", "values": [], "chars": 81, "lines": 0, "type": "(Hashtbl.t('a, 'a), ('a, 'a) => 'a) => list('a)"},
"CliToInput/1129": {"name": "findDependencyDirectories", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1129' data-type=\"string => list((string, string))\">findDependencyDirectories</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1130' data-type=\"string\">root</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1131' data-type=\"Json.t\">config</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1130'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bsconfig.json&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;No bsconfig.json found&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1132' data-type=\"bool\">isNative</span> = <span class=\"ident\" data-type=\"Json.t => bool\" data-global-use='CliToInput/1056'>isNative</span>(<span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1131'>config</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1133' data-type=\"string\">compiledBase</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-global-use='CliToInput/1019'>oneShouldExist</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot find directory for compiled artifacts.&quot;</span>,\n    <span class=\"ident\" data-type=\"bool\" data-local-use='CliToInput/1132'>isNative</span>\n      <span class=\"pattern-constructor\" data-type=\"bool\">?</span> [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1130'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/js&quot;</span>, <span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1130'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/native&quot;</span></span></span></span>]\n      <span class=\"pattern-constructor\" data-type=\"bool\">:</span> [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1130'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs&quot;</span>, <span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1130'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/ocaml&quot;</span></span></span></span>]\n  );\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1134' data-type=\"string\">jsBase</span> = <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1130'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/js&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;lib/js not found&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1135' data-type=\"list((string, string))\">mine</span> = [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1133'>compiledBase</span>, ...<span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.collectDirs</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1133'>compiledBase</span>)</span>] <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1136' data-type=\"string\">path</span> =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1136'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1134'>jsBase</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1133'>compiledBase</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1136'>path</span>)));\n  <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CliToInput/1135'>mine</span> <span class=\"operator\" data-type=\"(list((string, string)), list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"(string, Json.t) => list((string, string))\" data-global-use='CliToInput/1058'>getDependencyDirs</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1130'>root</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1131'>config</span>)\n}", "values": [{"id": "CliToInput/1056", "name": "isNative", "moduleName": "CliToInput"}, {"id": "CliToInput/1019", "name": "oneShouldExist", "moduleName": "CliToInput"}, {"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "CliToInput/1058", "name": "getDependencyDirs", "moduleName": "CliToInput"}], "chars": 630, "lines": 11, "type": "string => list((string, string))"},
"Descartes/1362": {"name": "toId", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1362' data-type=\"(string, int) => string\">toId</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1363' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1364' data-type=\"int\">stamp</span>) =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1363'>moduleName</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;/&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1364'>stamp</span>)", "values": [], "chars": 75, "lines": 0, "type": "(string, int) => string"},
"PrepareUtils/1027": {"name": "combine", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1027' data-type=\"(option(int), option(int)) => option(int)\">combine</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1028' data-type=\"option(int)\">one</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1029' data-type=\"option(int)\">two</span>) =&gt; switch (<span class=\"ident\" data-type=\"option(int)\" data-local-use='PrepareUtils/1028'>one</span>, <span class=\"ident\" data-type=\"option(int)\" data-local-use='PrepareUtils/1029'>two</span>) {\n| (<span class=\"pattern-constructor\" data-type=\"option(int)\">None</span>, <span class=\"pattern-constructor\" data-type=\"option(int)\">None</span>) =&gt; <span class=\"constructor\" data-type=\"option(int)\">None</span>\n| (<span class=\"pattern-constructor\" data-type=\"option(int)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1030' data-type=\"int\">a</span>), <span class=\"pattern-constructor\" data-type=\"option(int)\">None</span>) =&gt; <span class=\"constructor\" data-type=\"option(int)\">Some</span>(<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1030'>a</span>)\n| (<span class=\"pattern-constructor\" data-type=\"option(int)\">None</span>, <span class=\"pattern-constructor\" data-type=\"option(int)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1031' data-type=\"int\">b</span>)) =&gt; <span class=\"constructor\" data-type=\"option(int)\">Some</span>(<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1031'>b</span>)\n| (<span class=\"pattern-constructor\" data-type=\"option(int)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1032' data-type=\"int\">a</span>), <span class=\"pattern-constructor\" data-type=\"option(int)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1033' data-type=\"int\">b</span>)) =&gt; <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1032'>a</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1033'>b</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"constructor\" data-type=\"option(int)\">Some</span>(<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1032'>a</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"constructor\" data-type=\"option(int)\">Some</span>(<span class=\"int\" data-type=\"int\">0</span>)\n}", "values": [], "chars": 181, "lines": 5, "type": "(option(int), option(int)) => option(int)"},
"Typing/1352": {"name": "entry", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1352' data-type=\"(\n  Location.t,\n  ~depth: int,\n  ~?mend: option(Lexing.position),\n  string\n) => string\">entry</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1353' data-type=\"Location.t\">loc</span>, ~<span class=\"pattern-ident\" data-local-define='Typing/1354' data-type=\"int\">depth</span>, <span class=\"pattern-ident\" data-local-define='Typing/1355' data-type=\"option(Lexing.position)\">~mend=?</span>, <span class=\"pattern-ident\" data-local-define='Typing/1356' data-type=\"string\">typ</span>) =&gt; {\n  open Location;\n  let <span class=\"pattern-ident\" data-local-define='Typing/1357' data-type=\"Lexing.position\">mend</span> =\n    switch <span class=\"ident\" data-type=\"option(Lexing.position)\" data-local-use='Typing/1355'>mend</span> {\n    | <span class=\"pattern-constructor\" data-type=\"option(Lexing.position)\">Some</span>((<span class=\"pattern-ident\" data-local-define='Typing/1358' data-type=\"Lexing.position\">x</span>)) =&gt; <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1358'>x</span>\n    | <span class=\"pattern-constructor\" data-type=\"option(Lexing.position)\">None</span> =&gt; <span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1353'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">loc_end</span>\n    };\n  <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (int, string, string, string) => string,\n    unit,\n    string\n  ),\n  int,\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n    <span class=\"constructor\" data-type=\"Pervasives.format(\n  (int, string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string, string, string) => string,\n  (int, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string, string, string) => string,\n  (int, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|{&quot;depth&quot;: %d, &quot;start&quot;: %s, &quot;end&quot;: %s, &quot;type&quot;: %S}|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>,\n    <span class=\"ident\" data-type=\"int\" data-local-use='Typing/1354'>depth</span>,\n    <span class=\"ident\" data-type=\"Lexing.position => string\" data-global-use='Typing/1350'>ppos</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Typing/1353'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">loc_start</span>),\n    <span class=\"ident\" data-type=\"Lexing.position => string\" data-global-use='Typing/1350'>ppos</span>(<span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Typing/1357'>mend</span>),\n    <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1356'>typ</span>\n  );\n}", "values": [{"id": "Typing/1350", "name": "ppos", "moduleName": "Typing"}], "chars": 290, "lines": 14, "type": "(\n  Location.t,\n  ~depth: int,\n  ~?mend: option(Lexing.position),\n  string\n) => string"},
"Descartes/1417": {"name": "processMany", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1417' data-type=\"list((string, list(Typedtree.structure_item), string)) => (\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  ),\n  list((string, string, list(string)))\n)\">processMany</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1418' data-type=\"list((string, list(Typedtree.structure_item), string))\">modules</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1419' data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\">globalMods</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1420' data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\">modStamps</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1421' data-type=\"Hashtbl.t(string, fullItem)\">typStamps</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(string, fullItem)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1422' data-type=\"Hashtbl.t(string, fullItem)\">valStamps</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(string, fullItem)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n\n  <span class=\"ident\" data-type=\"(\n  (string, list(Typedtree.structure_item), string) => unit,\n  list(\n    (\n      string,\n      list(Typedtree.structure_item),\n      string\n    )\n  )\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='Descartes/1423' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1424' data-type=\"list(Typedtree.structure_item)\">structure</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1425' data-type=\"string\">sourceText</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1419'>globalMods</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1423'>name</span>, (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1423'>name</span>, <span class=\"ident\" data-type=\"(\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(string, fullItem)\n) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\" data-global-use='Descartes/1319'>process</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1423'>name</span>, <span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='Descartes/1424'>structure</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1425'>sourceText</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1420'>modStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1421'>typStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1422'>valStamps</span>)))\n  }, <span class=\"ident\" data-type=\"list((string, list(Typedtree.structure_item), string))\" data-local-use='Descartes/1418'>modules</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1426' data-type=\"(string, int) => string\">stampAttr</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1427' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1428' data-type=\"int\">stamp</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;data-local-define=&#39;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1427'>moduleName</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;/&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1428'>stamp</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&#39;&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1429' data-type=\"[&lt; `Missing | `Local of string | `Global of string ] => string\">stampUse</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1430' data-type=\"[&lt; `Missing | `Local of string | `Global of string ]\">stamp</span>) =&gt; switch <span class=\"ident\" data-type=\"[&lt; `Missing | `Local of string | `Global of string ]\" data-local-use='Descartes/1430'>stamp</span> {\n  | `Missing =&gt; <span class=\"string\" data-type=\"string\">&quot;data-stamp-missing&quot;</span>\n  | `Local(<span class=\"pattern-ident\" data-local-define='Descartes/1431' data-type=\"string\">stamp</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;data-local-use=&#39;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1431'>stamp</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&#39;&quot;</span>\n  | `Global(<span class=\"pattern-ident\" data-local-define='Descartes/1432' data-type=\"string\">stamp</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;data-global-use=&#39;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1432'>stamp</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&#39;&quot;</span>\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1433' data-type=\"(string, tag) => string\">mapTag</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1434' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1435' data-type=\"tag\">tag</span>) =&gt; switch <span class=\"ident\" data-type=\"tag\" data-local-use='Descartes/1435'>tag</span> {\n  | <span class=\"pattern-constructor\" data-type=\"tag\">TypeHover</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1436' data-type=\"Types.type_expr\">typ</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;data-type=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"Types.type_expr => string\" data-global-use='Descartes/1014'>showType</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1436'>typ</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"tag\">Cls</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1437' data-type=\"string\">string</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;class=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1437'>string</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>\n  | <span class=\"pattern-constructor\" data-type=\"tag\">TypeDef</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1438' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1439' data-type=\"string\">name</span>}) =&gt; <span class=\"ident\" data-type=\"(string, int) => string\" data-local-use='Descartes/1426'>stampAttr</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1434'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1438'>stamp</span>)\n  | <span class=\"pattern-constructor\" data-type=\"tag\">ValueDef</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1440' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1441' data-type=\"string\">name</span>}) =&gt; <span class=\"ident\" data-type=\"(string, int) => string\" data-local-use='Descartes/1426'>stampAttr</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1434'>moduleName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1440'>stamp</span>)\n  | <span class=\"pattern-constructor\" data-type=\"tag\">TypeRef</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1442' data-type=\"Path.t\">path</span>) =&gt; <span class=\"ident\" data-type=\"(\n  string,\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [ `Global of string | `Local of string | `Missing ]\" data-global-use='Descartes/1402'>resolveType</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1434'>moduleName</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1421'>typStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1420'>modStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1419'>globalMods</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1442'>path</span>) <span class=\"operator\" data-type=\"(\n  [ `Global of string | `Local of string | `Missing ],\n  [ `Global of string | `Local of string | `Missing ] => string\n) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"[ `Global of string | `Local of string | `Missing ] => string\" data-local-use='Descartes/1429'>stampUse</span>\n  | <span class=\"pattern-constructor\" data-type=\"tag\">ValueRef</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1443' data-type=\"Path.t\">path</span>) =&gt; <span class=\"ident\" data-type=\"(\n  string,\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [ `Global of string | `Local of string | `Missing ]\" data-global-use='Descartes/1391'>resolveValue</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1434'>moduleName</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1422'>valStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1420'>modStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1419'>globalMods</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1443'>path</span>) <span class=\"operator\" data-type=\"(\n  [ `Global of string | `Local of string | `Missing ],\n  [ `Global of string | `Local of string | `Missing ] => string\n) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"[ `Global of string | `Local of string | `Missing ] => string\" data-local-use='Descartes/1429'>stampUse</span>\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1444' data-type=\"fullItem => (\n  string,\n  string,\n  string,\n  string,\n  Location.t,\n  string,\n  list(fullItem),\n  list(fullItem)\n)\">resolveItem</span> = ({<span class=\"pattern-ident\" data-local-define='Descartes/1445' data-type=\"string\">id</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1446' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1447' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1448' data-type=\"string\">typ</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1449' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1450' data-type=\"list((Location.t, list(tag)))\">tags</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1451' data-type=\"list(Path.t)\">vals</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1452' data-type=\"list(Path.t)\">typs</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1453' data-type=\"string\">text</span>}) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1454' data-type=\"list((int, int, string))\">resolvedTags</span> = <span class=\"ident\" data-type=\"list((Location.t, list(tag)))\" data-local-use='Descartes/1450'>tags</span> <span class=\"operator\" data-type=\"(\n  list((Location.t, list(tag))),\n  list((Location.t, list(tag))) => list(\n    (int, int, string)\n  )\n) => list((int, int, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (Location.t, list(tag)) => (int, int, string),\n  list((Location.t, list(tag)))\n) => list((int, int, string))\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Descartes/1455' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1456' data-type=\"list(tag)\">tags</span>)) =&gt; {\n      (<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1455'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1455'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"list(tag)\" data-local-use='Descartes/1456'>tags</span> <span class=\"operator\" data-type=\"(list(tag), list(tag) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(tag => string, list(tag)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, tag) => string\" data-local-use='Descartes/1433'>mapTag</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1447'>moduleName</span>)) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot; &quot;</span>))\n    });\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1457' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"(\n  list((int, int, string)),\n  list((int, string)),\n  string,\n  int,\n  int\n) => string\" data-global-use='CodeHighlight/1013'>CodeHighlight.annotateText</span>(<span class=\"ident\" data-type=\"list((int, int, string))\" data-local-use='Descartes/1454'>resolvedTags</span>, <span class=\"constructor\" data-type=\"list((int, string))\">[]</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1453'>text</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1449'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1449'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>);\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1458' data-type=\"list(fullItem)\">vals</span> = <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1451'>vals</span> <span class=\"operator\" data-type=\"(\n  list(Path.t),\n  list(Path.t) => list(\n    [ `Global of string | `Local of string | `Missing ]\n  )\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  Path.t => [ `Global of string | `Local of string | `Missing ],\n  list(Path.t)\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1459' data-type=\"Path.t\">path</span> =&gt; <span class=\"ident\" data-type=\"(\n  string,\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [ `Global of string | `Local of string | `Missing ]\" data-global-use='Descartes/1391'>resolveValue</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1447'>moduleName</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1422'>valStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1420'>modStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1419'>globalMods</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1459'>path</span>)) <span class=\"operator\" data-type=\"(\n  list([ `Global of string | `Local of string | `Missing ]),\n  list(\n    [ `Global of string | `Local of string | `Missing ]\n  ) => list(\n    [ `Global of string | `Local of string | `Missing ]\n  )\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(\n  [ `Global of string | `Local of string | `Missing ]\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-global-use='Descartes/1413'>unique</span> <span class=\"operator\" data-type=\"(\n  list([ `Global of string | `Local of string | `Missing ]),\n  list(\n    [ `Global of string | `Local of string | `Missing ]\n  ) => list(fullItem)\n) => list(fullItem)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  [ `Global of string | `Local of string | `Missing ] => option(\n    fullItem\n  ),\n  list(\n    [ `Global of string | `Local of string | `Missing ]\n  )\n) => list(fullItem)\" data-global-use='CodeSnippets/1170'>CodeSnippets.optMap</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1460' data-type=\"[ `Global of string | `Local of string | `Missing ]\">res</span> =&gt; switch <span class=\"ident\" data-type=\"[ `Global of string | `Local of string | `Missing ]\" data-local-use='Descartes/1460'>res</span> {\n    | `Missing =&gt; <span class=\"constructor\" data-type=\"option(fullItem)\">None</span>\n    | `Local(_) =&gt; <span class=\"constructor\" data-type=\"option(fullItem)\">None</span>\n    | `Global(<span class=\"pattern-ident\" data-local-define='Descartes/1461' data-type=\"string\">id</span>) =&gt; <span class=\"constructor\" data-type=\"option(fullItem)\">Some</span>(<span class=\"ident\" data-type=\"(Hashtbl.t(string, fullItem), string) => fullItem\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1422'>valStamps</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1461'>id</span>))\n    })\n    ;\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1462' data-type=\"list(fullItem)\">typs</span> = <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1452'>typs</span> <span class=\"operator\" data-type=\"(\n  list(Path.t),\n  list(Path.t) => list(\n    [ `Global of string | `Local of string | `Missing ]\n  )\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  Path.t => [ `Global of string | `Local of string | `Missing ],\n  list(Path.t)\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1463' data-type=\"Path.t\">path</span> =&gt; <span class=\"ident\" data-type=\"(\n  string,\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Path.t\n) => [ `Global of string | `Local of string | `Missing ]\" data-global-use='Descartes/1402'>resolveType</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1447'>moduleName</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1421'>typStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1420'>modStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1419'>globalMods</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1463'>path</span>)) <span class=\"operator\" data-type=\"(\n  list([ `Global of string | `Local of string | `Missing ]),\n  list(\n    [ `Global of string | `Local of string | `Missing ]\n  ) => list(\n    [ `Global of string | `Local of string | `Missing ]\n  )\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(\n  [ `Global of string | `Local of string | `Missing ]\n) => list(\n  [ `Global of string | `Local of string | `Missing ]\n)\" data-global-use='Descartes/1413'>unique</span> <span class=\"operator\" data-type=\"(\n  list([ `Global of string | `Local of string | `Missing ]),\n  list(\n    [ `Global of string | `Local of string | `Missing ]\n  ) => list(fullItem)\n) => list(fullItem)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  [ `Global of string | `Local of string | `Missing ] => option(\n    fullItem\n  ),\n  list(\n    [ `Global of string | `Local of string | `Missing ]\n  )\n) => list(fullItem)\" data-global-use='CodeSnippets/1170'>CodeSnippets.optMap</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1464' data-type=\"[ `Global of string | `Local of string | `Missing ]\">res</span> =&gt; switch <span class=\"ident\" data-type=\"[ `Global of string | `Local of string | `Missing ]\" data-local-use='Descartes/1464'>res</span> {\n    | `Missing =&gt; <span class=\"constructor\" data-type=\"option(fullItem)\">None</span>\n    | `Local(_) =&gt; <span class=\"constructor\" data-type=\"option(fullItem)\">None</span>\n    | `Global(<span class=\"pattern-ident\" data-local-define='Descartes/1465' data-type=\"string\">id</span>) =&gt; <span class=\"constructor\" data-type=\"option(fullItem)\">Some</span>(<span class=\"ident\" data-type=\"(Hashtbl.t(string, fullItem), string) => fullItem\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1421'>typStamps</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1465'>id</span>))\n    });\n    (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1445'>id</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1446'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1447'>moduleName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1448'>typ</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1449'>loc</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1457'>text</span>, <span class=\"ident\" data-type=\"list(fullItem)\" data-local-use='Descartes/1458'>vals</span>, <span class=\"ident\" data-type=\"list(fullItem)\" data-local-use='Descartes/1462'>typs</span>)\n  };\n\n  /* TODO track the parentage of values */\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1466' data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\">annotatedValues</span> = <span class=\"ident\" data-type=\"(\n  (\n    string,\n    fullItem,\n    list(\n      (\n        string,\n        string,\n        string,\n        string,\n        Location.t,\n        string,\n        list(fullItem),\n        list(fullItem)\n      )\n    )\n  ) => list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  ),\n  Hashtbl.t(string, fullItem),\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  )\n) => list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\" data-stamp-missing>Hashtbl.fold</span>((<span class=\"pattern-ident\" data-local-define='Descartes/1467' data-type=\"string\">key</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1468' data-type=\"fullItem\">item</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1469' data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\">items</span>) =&gt; [<span data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\"><span class=\"ident\" data-type=\"fullItem => (\n  string,\n  string,\n  string,\n  string,\n  Location.t,\n  string,\n  list(fullItem),\n  list(fullItem)\n)\" data-local-use='Descartes/1444'>resolveItem</span>(<span class=\"ident\" data-type=\"fullItem\" data-local-use='Descartes/1468'>item</span>), ...<span class=\"ident\" data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\" data-local-use='Descartes/1469'>items</span></span>], <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1422'>valStamps</span>, <span class=\"constructor\" data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1470' data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\">annotatedTypes</span> = <span class=\"ident\" data-type=\"(\n  (\n    string,\n    fullItem,\n    list(\n      (\n        string,\n        string,\n        string,\n        string,\n        Location.t,\n        string,\n        list(fullItem),\n        list(fullItem)\n      )\n    )\n  ) => list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  ),\n  Hashtbl.t(string, fullItem),\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  )\n) => list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\" data-stamp-missing>Hashtbl.fold</span>((<span class=\"pattern-ident\" data-local-define='Descartes/1471' data-type=\"string\">key</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1472' data-type=\"fullItem\">item</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1473' data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\">items</span>) =&gt; [<span data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\"><span class=\"ident\" data-type=\"fullItem => (\n  string,\n  string,\n  string,\n  string,\n  Location.t,\n  string,\n  list(fullItem),\n  list(fullItem)\n)\" data-local-use='Descartes/1444'>resolveItem</span>(<span class=\"ident\" data-type=\"fullItem\" data-local-use='Descartes/1472'>item</span>), ...<span class=\"ident\" data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\" data-local-use='Descartes/1473'>items</span></span>], <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1421'>typStamps</span>, <span class=\"constructor\" data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\">[]</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1474' data-type=\"list((string, string, list(string)))\">allModules</span> =\n  <span class=\"ident\" data-type=\"(\n  (\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    ),\n    list((string, string, list(string)))\n  ) => list((string, string, list(string))),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  list((string, string, list(string)))\n) => list((string, string, list(string)))\" data-stamp-missing>Hashtbl.fold</span>((<span class=\"pattern-ident\" data-local-define='Descartes/1475' data-type=\"string\">key</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1476' data-type=\"string\">name</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1477' data-type=\"list((string, string))\">types</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1478' data-type=\"list((string, string))\">values</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1479' data-type=\"list((string, string))\">modules</span>)), <span class=\"pattern-ident\" data-local-define='Descartes/1480' data-type=\"list((string, string, list(string)))\">items</span>) =&gt; [\n    <span data-type=\"list((string, string, list(string)))\">(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1475'>key</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1476'>name</span>, <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>snd</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1477'>types</span>) <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>snd</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1478'>values</span>) <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>snd</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1479'>modules</span>)),\n    ...<span class=\"ident\" data-type=\"list((string, string, list(string)))\" data-local-use='Descartes/1480'>items</span></span>\n  ], <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1420'>modStamps</span>, <span class=\"constructor\" data-type=\"list((string, string, list(string)))\">[]</span>)\n  <span class=\"operator\" data-type=\"(\n  list((string, string, list(string))),\n  list((string, string, list(string)))\n) => list((string, string, list(string)))\" data-stamp-missing>@</span>\n  <span class=\"ident\" data-type=\"(\n  (\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    ),\n    list((string, string, list(string)))\n  ) => list((string, string, list(string))),\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  list((string, string, list(string)))\n) => list((string, string, list(string)))\" data-stamp-missing>Hashtbl.fold</span>((<span class=\"pattern-ident\" data-local-define='Descartes/1481' data-type=\"string\">key</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1482' data-type=\"string\">name</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1483' data-type=\"list((string, string))\">types</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1484' data-type=\"list((string, string))\">values</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1485' data-type=\"list((string, string))\">modules</span>)), <span class=\"pattern-ident\" data-local-define='Descartes/1486' data-type=\"list((string, string, list(string)))\">items</span>) =&gt; [\n    <span data-type=\"list((string, string, list(string)))\">(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1481'>key</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1482'>name</span>, <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>snd</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1483'>types</span>) <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>snd</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1484'>values</span>) <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>snd</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1485'>modules</span>)),\n    ...<span class=\"ident\" data-type=\"list((string, string, list(string)))\" data-local-use='Descartes/1486'>items</span></span>\n  ], <span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1419'>globalMods</span>, <span class=\"constructor\" data-type=\"list((string, string, list(string)))\">[]</span>)\n  ;\n\n  (<span class=\"ident\" data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\" data-local-use='Descartes/1466'>annotatedValues</span>, <span class=\"ident\" data-type=\"list((string, string, list(string)))\" data-local-use='Descartes/1474'>allModules</span>)\n  /* TODO don&#39;t super need these for my current visualization */\n   /* @ annotatedTypes */\n}", "values": [{"id": "Descartes/1319", "name": "process", "moduleName": "Descartes"}, {"id": "Descartes/1014", "name": "showType", "moduleName": "Descartes"}, {"id": "CodeHighlight/1013", "name": "annotateText", "moduleName": "CodeHighlight"}, {"id": "Descartes/1391", "name": "resolveValue", "moduleName": "Descartes"}, {"id": "Descartes/1402", "name": "resolveType", "moduleName": "Descartes"}, {"id": "Descartes/1413", "name": "unique", "moduleName": "Descartes"}, {"id": "CodeSnippets/1170", "name": "optMap", "moduleName": "CodeSnippets"}], "chars": 2974, "lines": 65, "type": "list((string, list(Typedtree.structure_item), string)) => (\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  ),\n  list((string, string, list(string)))\n)"},
"CodeSnippets/1090": {"name": "sliceToEnd", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1090' data-type=\"(string, int) => string\">sliceToEnd</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1091' data-type=\"string\">s</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1092' data-type=\"int\">num</span>) =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1091'>s</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1092'>num</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1091'>s</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1091'>s</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1092'>num</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1091'>s</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1092'>num</span>)", "values": [], "chars": 100, "lines": 0, "type": "(string, int) => string"},
"MainAux/1012": {"name": "annotateSourceCode", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1012' data-type=\"(string, string, string, string) => unit\">annotateSourceCode</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1013' data-type=\"string\">source</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1014' data-type=\"string\">cmt</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1015' data-type=\"string\">mlast</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1016' data-type=\"string\">output</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1017' data-type=\"Cmt_format.binary_annots\">annots</span> = <span class=\"ident\" data-type=\"string => Cmt_format.cmt_infos\" data-stamp-missing>Cmt_format.read_cmt</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1014'>cmt</span>).<span class=\"field\" data-type=\"Cmt_format.binary_annots\">Cmt_format.cmt_annots</span>;\n  let (<span class=\"pattern-ident\" data-local-define='MainAux/1018' data-type=\"Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\">types</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1019' data-type=\"Hashtbl.t('a, (('a, Location.t), list(('a, Location.t))))\">bindings</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1020' data-type=\"list('a)\">externals</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1021' data-type=\"list(Typing.openn)\">all_opens</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1022' data-type=\"Hashtbl.t((int, int), (Path.t, Typing.tag))\">locToPath</span>) = <span class=\"ident\" data-type=\"Cmt_format.binary_annots => (\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, (('a, Location.t), list(('a, Location.t)))),\n  list('a),\n  list(Typing.openn),\n  Hashtbl.t((int, int), (Path.t, Typing.tag))\n)\" data-global-use='Typing/1406'>Typing.collectTypes</span>(<span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='MainAux/1017'>annots</span>);\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1064' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1013'>source</span>) <span class=\"operator\" data-type=\"(option(string), option(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, option(string)) => string\" data-global-use='MainAux/1008'>unwrap</span>(<span class=\"string\" data-type=\"string\">&quot;Unable to read source file&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1065' data-type=\"Parsetree.structure\">structure</span> = <span class=\"ident\" data-type=\"string => Parsetree.structure\" data-global-use='ReadMlast/1024'>ReadMlast.structure</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1015'>mlast</span>);\n  let (<span class=\"pattern-ident\" data-local-define='MainAux/1066' data-type=\"string\">highlighted</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1067' data-type=\"string\">typeText</span>) = <span class=\"ident\" data-type=\"(\n  string,\n  Parsetree.structure,\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, (('a, Location.t), list(('a, Location.t)))),\n  list('a),\n  list(Typing.openn),\n  Hashtbl.t((int, int), (Path.t, Typing.tag))\n) => (string, string)\" data-global-use='Highlighting/1301'>Highlighting.highlight</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1064'>text</span>, <span class=\"ident\" data-type=\"Parsetree.structure\" data-local-use='MainAux/1065'>structure</span>, <span class=\"ident\" data-type=\"Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\" data-local-use='MainAux/1018'>types</span>, <span class=\"ident\" data-type=\"Hashtbl.t('a, (('a, Location.t), list(('a, Location.t))))\" data-local-use='MainAux/1019'>bindings</span>, <span class=\"ident\" data-type=\"list('a)\" data-local-use='MainAux/1020'>externals</span>, <span class=\"ident\" data-type=\"list(Typing.openn)\" data-local-use='MainAux/1021'>all_opens</span>, <span class=\"ident\" data-type=\"Hashtbl.t((int, int), (Path.t, Typing.tag))\" data-local-use='MainAux/1022'>locToPath</span>);\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1016'>output</span>, <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='Template/1010'>Template.make</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1066'>highlighted</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1067'>typeText</span>)) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n}", "values": [{"id": "Typing/1406", "name": "collectTypes", "moduleName": "Typing"}, {"id": "MainAux/1008", "name": "unwrap", "moduleName": "MainAux"}, {"id": "ReadMlast/1024", "name": "structure", "moduleName": "ReadMlast"}, {"id": "Highlighting/1301", "name": "highlight", "moduleName": "Highlighting"}, {"id": "Template/1010", "name": "make", "moduleName": "Template"}], "chars": 532, "lines": 7, "type": "(string, string, string, string) => unit"},
"PrintType/1047": {"name": "tuple_list", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1047' data-type=\"(list('a), 'a => Pretty.doc) => Pretty.doc\">tuple_list</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1048' data-type=\"list('a)\">items</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1049' data-type=\"'a => Pretty.doc\">loop</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;(&quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc => Pretty.doc\" data-global-use='PrintType/1045'>indentGroup</span>(<span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1028'>break</span> <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"('a => Pretty.doc, list('a)) => Pretty.doc\" data-global-use='PrintType/1042'>commad_list</span>(<span class=\"ident\" data-type=\"'a => Pretty.doc\" data-local-use='PrintType/1049'>loop</span>, <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrintType/1048'>items</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1030'>dedent</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;)&quot;</span>)\n}", "values": [{"id": "PrintType/1045", "name": "indentGroup", "moduleName": "PrintType"}, {"id": "PrintType/1028", "name": "break", "moduleName": "PrintType"}, {"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1042", "name": "commad_list", "moduleName": "PrintType"}, {"id": "PrintType/1030", "name": "dedent", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}], "chars": 126, "lines": 5, "type": "(list('a), 'a => Pretty.doc) => Pretty.doc"},
"CodeSnippets/1009": {"name": "matchOption", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1009' data-type=\"(string, string) => option(string)\">matchOption</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1010' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1011' data-type=\"string\">option</span>) =&gt; if (<span class=\"ident\" data-type=\"(Str.regexp, string, int) => bool\" data-stamp-missing>Str.string_match</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp</span>(<span class=\"string\" data-type=\"string\">&quot;^&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1011'>option</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;(\\\\([^)]+\\\\))$&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1010'>text</span>, <span class=\"int\" data-type=\"int\">0</span>)) {\n  <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(int, string) => string\" data-stamp-missing>Str.matched_group</span>(<span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1010'>text</span>));\n} else {\n  <span class=\"constructor\" data-type=\"option(string)\">None</span>\n}", "values": [], "chars": 169, "lines": 4, "type": "(string, string) => option(string)"},
"CodeSnippets/1166": {"name": "snippetLoader", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1166' data-type=\"(string, string, string) => string\">snippetLoader</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1167' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1168' data-type=\"string\">basePath</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1169' data-type=\"string\">snippetPath</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|\nvar path = require(&#39;path&#39;);\nvar Module = require(&#39;module&#39;);\nvar oldResolveFilename = Module._resolveFilename;\nModule._resolveFilename = function (request, parent, isMain) {\n  var name = &#39;%s/&#39;;\n  var base = &#39;%s&#39;;\n  if (request.indexOf(name) === 0) {\n    return oldResolveFilename.call(this, path.join(base, request.slice(name.length)), parent, isMain);\n  }\n\n  return oldResolveFilename.call(this, request, parent, isMain);\n};\nrequire(&#39;%s&#39;)\n|}</span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1167'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1168'>basePath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1169'>snippetPath</span>)", "values": [], "chars": 542, "lines": 14, "type": "(string, string, string) => string"},
"GenerateDoc/1087": {"name": "uniqueItems", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1087' data-type=\"list(('a, 'a, State.Model.Docs.docItem)) => list(\n  ('a, 'a, State.Model.Docs.docItem)\n)\">uniqueItems</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1088' data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">items</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1089' data-type=\"Hashtbl.t('a, bool)\">m</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t('a, bool)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  <span class=\"ident\" data-type=\"list(('a, 'a, State.Model.Docs.docItem))\" data-local-use='GenerateDoc/1088'>items</span> <span class=\"operator\" data-type=\"(\n  list(('a, 'a, State.Model.Docs.docItem)),\n  list(('a, 'a, State.Model.Docs.docItem)) => list(\n    ('a, 'a, State.Model.Docs.docItem)\n  )\n) => list(('a, 'a, State.Model.Docs.docItem))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  ('a, 'a, State.Model.Docs.docItem) => bool,\n  list(('a, 'a, State.Model.Docs.docItem))\n) => list(('a, 'a, State.Model.Docs.docItem))\" data-stamp-missing>List.filter</span>(((<span class=\"pattern-ident\" data-local-define='GenerateDoc/1128' data-type=\"'a\">name</span>, _, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1129' data-type=\"State.Model.Docs.docItem\">t</span>)) =&gt; {\n    switch <span class=\"ident\" data-type=\"State.Model.Docs.docItem\" data-local-use='GenerateDoc/1129'>t</span> {\n    | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(_) =&gt; if (<span class=\"ident\" data-type=\"(Hashtbl.t('a, bool), 'a) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, bool)\" data-local-use='GenerateDoc/1089'>m</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1128'>name</span>)) { <span class=\"constructor\" data-type=\"bool\">false</span> } else { <span class=\"ident\" data-type=\"(Hashtbl.t('a, bool), 'a, bool) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, bool)\" data-local-use='GenerateDoc/1089'>m</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1128'>name</span>, <span class=\"constructor\" data-type=\"bool\">true</span>); <span class=\"constructor\" data-type=\"bool\">true</span> }\n    | _ =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n    }\n  })\n}", "values": [], "chars": 242, "lines": 8, "type": "list(('a, 'a, State.Model.Docs.docItem)) => list(\n  ('a, 'a, State.Model.Docs.docItem)\n)"},
"Highlighting/1254": {"name": "buildLocBindingMap", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1254' data-type=\"Hashtbl.t(\n  'a,\n  (('a, Location.t), list(('a, Location.t)))\n) => Hashtbl.t((int, int), 'a)\">buildLocBindingMap</span> = <span class=\"pattern-ident\" data-local-define='Highlighting/1255' data-type=\"Hashtbl.t('a, (('a, Location.t), list(('a, Location.t))))\">bindings</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1256' data-type=\"Hashtbl.t((int, int), 'a)\">map</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t((int, int), 'a)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  <span class=\"ident\" data-type=\"(\n  ('a, (('a, Location.t), list(('a, Location.t)))) => unit,\n  Hashtbl.t(\n    'a,\n    (('a, Location.t), list(('a, Location.t)))\n  )\n) => unit\" data-stamp-missing>Hashtbl.iter</span>((<span class=\"pattern-ident\" data-local-define='Highlighting/1257' data-type=\"'a\">stamp</span>, ((_, <span class=\"pattern-ident\" data-local-define='Highlighting/1258' data-type=\"Location.t\">loc</span>), <span class=\"pattern-ident\" data-local-define='Highlighting/1259' data-type=\"list(('a, Location.t))\">uses</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(Hashtbl.t((int, int), 'a), (int, int), 'a) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t((int, int), 'a)\" data-local-use='Highlighting/1256'>map</span>, <span class=\"ident\" data-type=\"Location.t => (int, int)\" data-global-use='Highlighting/1126'>locPair</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1258'>loc</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1257'>stamp</span>);\n    <span class=\"ident\" data-type=\"list(('a, Location.t))\" data-local-use='Highlighting/1259'>uses</span> <span class=\"operator\" data-type=\"(\n  list(('a, Location.t)),\n  list(('a, Location.t)) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(('a, Location.t) => unit, list(('a, Location.t))) => unit\" data-stamp-missing>List.iter</span>(((_, <span class=\"pattern-ident\" data-local-define='Highlighting/1260' data-type=\"Location.t\">loc</span>)) =&gt; <span class=\"ident\" data-type=\"(Hashtbl.t((int, int), 'a), (int, int), 'a) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t((int, int), 'a)\" data-local-use='Highlighting/1256'>map</span>, <span class=\"ident\" data-type=\"Location.t => (int, int)\" data-global-use='Highlighting/1126'>locPair</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1260'>loc</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1257'>stamp</span>))\n  }, <span class=\"ident\" data-type=\"Hashtbl.t('a, (('a, Location.t), list(('a, Location.t))))\" data-local-use='Highlighting/1255'>bindings</span>);\n  <span class=\"ident\" data-type=\"Hashtbl.t((int, int), 'a)\" data-local-use='Highlighting/1256'>map</span>\n}", "values": [{"id": "Highlighting/1126", "name": "locPair", "moduleName": "Highlighting"}], "chars": 267, "lines": 7, "type": "Hashtbl.t(\n  'a,\n  (('a, Location.t), list(('a, Location.t)))\n) => Hashtbl.t((int, int), 'a)"},
"CodeHighlight/1266": {"name": "isHashed", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1266' data-type=\"string => bool\">isHashed</span> = <span class=\"pattern-ident\" data-local-define='CodeHighlight/1267' data-type=\"string\">t</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1267'>t</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>!=</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1267'>t</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1267'>t</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;!&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1267'>t</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"int\" data-type=\"int\">2</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1267'>t</span>.[<span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39;))", "values": [], "chars": 104, "lines": 0, "type": "string => bool"},
"Descartes/1276": {"name": "chart", "moduleName": "Descartes", "html": "let rec <span class=\"pattern-ident\" data-local-define='Descartes/1276' data-type=\"list(Typedtree.structure_item) => list((int, node))\">chart</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1277' data-type=\"list(Typedtree.structure_item)\">structureItems</span>) =&gt; {\n  open Typedtree;\n  <span class=\"ident\" data-type=\"(\n  (list((int, node)), Typedtree.structure_item) => list(\n    (int, node)\n  ),\n  list((int, node)),\n  list(Typedtree.structure_item)\n) => list((int, node))\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='Descartes/1278' data-type=\"list((int, node))\">items</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1279' data-type=\"Typedtree.structure_item\">item</span>) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='Descartes/1280' data-type=\"list((int, node))\">more</span> = switch (<span class=\"ident\" data-type=\"Typedtree.structure_item\" data-local-use='Descartes/1279'>item</span>.<span class=\"field\" data-type=\"Typedtree.structure_item_desc\">str_desc</span>) {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_value</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1281' data-type=\"Asttypes.rec_flag\">recc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1282' data-type=\"list(Typedtree.value_binding)\">bindings</span>) =&gt; (\n        <span class=\"ident\" data-type=\"list(Typedtree.value_binding)\" data-local-use='Descartes/1282'>bindings</span> <span class=\"operator\" data-type=\"(\n  list(Typedtree.value_binding),\n  list(Typedtree.value_binding) => list(\n    (int, node)\n  )\n) => list((int, node))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  Typedtree.value_binding => option((int, node)),\n  list(Typedtree.value_binding)\n) => list((int, node))\" data-global-use='Descartes/1008'>filterNil</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1289' data-type=\"Typedtree.value_binding\">binding</span> =&gt; switch <span class=\"ident\" data-type=\"Typedtree.value_binding\" data-local-use='Descartes/1289'>binding</span> {\n        | {<span class=\"pattern-ident\" data-local-define='Descartes/1293' data-type=\"Location.t\">vb_loc</span>, vb_pat: {pat_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_var</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1290' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1291' data-type=\"string\">name</span>}, _), <span class=\"pattern-ident\" data-local-define='Descartes/1292' data-type=\"Types.type_expr\">pat_type</span>}} =&gt; {\n          let (<span class=\"pattern-ident\" data-local-define='Descartes/1294' data-type=\"list((Location.t, list(tag)))\">markupTags</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1295' data-type=\"list(Path.t)\">externalValues</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1296' data-type=\"list(Path.t)\">externalTypes</span>) = <span class=\"ident\" data-type=\"Typedtree.structure_item => (\n  list((Location.t, list(tag))),\n  list(Path.t),\n  list(Path.t)\n)\" data-global-use='Descartes/1203'>highlightItem</span>(<span data-type=\"Typedtree.structure_item\">{...<span class=\"ident\" data-type=\"Typedtree.structure_item\" data-local-use='Descartes/1279'>item</span>, str_desc: <span class=\"constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_value</span>(<span class=\"ident\" data-type=\"Asttypes.rec_flag\" data-local-use='Descartes/1281'>recc</span>, [<span data-type=\"list(Typedtree.value_binding)\"><span class=\"ident\" data-type=\"Typedtree.value_binding\" data-local-use='Descartes/1289'><span class=\"constructor\" data-type=\"list(Typedtree.value_binding)\">binding</span></span></span>])}</span>);\n          <span class=\"constructor\" data-type=\"option((int, node))\">Some</span>((<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1290'>stamp</span>, <span class=\"constructor\" data-type=\"node\">Item</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1293'>vb_loc</span>, <span class=\"constructor\" data-type=\"item\">Value</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1291'>name</span>, <span class=\"ident\" data-type=\"Types.type_expr => string\" data-global-use='Descartes/1014'>showType</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1292'>pat_type</span>)), <span class=\"ident\" data-type=\"list((Location.t, list(tag)))\" data-local-use='Descartes/1294'>markupTags</span>, <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1295'>externalValues</span>, <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1296'>externalTypes</span>)))\n        }\n        | _ =&gt; <span class=\"constructor\" data-type=\"option((int, node))\">None</span>\n        }),\n      )\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_type</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1283' data-type=\"list(Typedtree.type_declaration)\">decls</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Typedtree.type_declaration => (int, node),\n  list(Typedtree.type_declaration)\n) => list((int, node))\" data-stamp-missing>List.map</span>(({<span class=\"pattern-ident\" data-local-define='Descartes/1299' data-type=\"Location.t\">typ_loc</span>, typ_id: {<span class=\"pattern-ident\" data-local-define='Descartes/1297' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1298' data-type=\"string\">name</span>}} as decl) =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='Descartes/1301' data-type=\"list((Location.t, list(tag)))\">markupTags</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1302' data-type=\"list(Path.t)\">externalValues</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1303' data-type=\"list(Path.t)\">externalTypes</span>) = <span class=\"ident\" data-type=\"Typedtree.structure_item => (\n  list((Location.t, list(tag))),\n  list(Path.t),\n  list(Path.t)\n)\" data-global-use='Descartes/1203'>highlightItem</span>(<span data-type=\"Typedtree.structure_item\">{...<span class=\"ident\" data-type=\"Typedtree.structure_item\" data-local-use='Descartes/1279'>item</span>, str_desc: <span class=\"constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_type</span>([<span data-type=\"list(Typedtree.type_declaration)\"><span class=\"ident\" data-type=\"Typedtree.type_declaration\" data-local-use='Descartes/1300'><span class=\"constructor\" data-type=\"list(Typedtree.type_declaration)\">decl</span></span></span>])}</span>);\n        ((<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1297'>stamp</span>, <span class=\"constructor\" data-type=\"node\">Item</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1299'>typ_loc</span>, <span class=\"constructor\" data-type=\"item\">Type</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1298'>name</span>, <span class=\"string\" data-type=\"string\">&quot;&quot;</span>), <span class=\"ident\" data-type=\"list((Location.t, list(tag)))\" data-local-use='Descartes/1301'>markupTags</span>, <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1302'>externalValues</span>, <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1303'>externalTypes</span>)))\n      }, <span class=\"ident\" data-type=\"list(Typedtree.type_declaration)\" data-local-use='Descartes/1283'>decls</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.structure_item_desc\">Tstr_module</span>({mb_id: {<span class=\"pattern-ident\" data-local-define='Descartes/1284' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1285' data-type=\"string\">name</span>}, mb_expr: {\n        <span class=\"pattern-ident\" data-local-define='Descartes/1288' data-type=\"Types.module_type\">mod_type</span>,\n        mod_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_structure</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1286' data-type=\"Typedtree.structure\">structure</span>) | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_constraint</span>({mod_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.module_expr_desc\">Tmod_structure</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1286' data-type=\"Typedtree.structure\">structure</span>)}, _, _, _)\n      }}) =&gt; {\n        /* TODO do I need to record modules as such? */\n        let <span class=\"pattern-ident\" data-local-define='Descartes/1304' data-type=\"list((int, node))\">children</span> = <span class=\"ident\" data-type=\"list(Typedtree.structure_item) => list((int, node))\" data-global-use='Descartes/1276'>chart</span>(<span class=\"ident\" data-type=\"Typedtree.structure\" data-local-use='Descartes/1286'>structure</span>.<span class=\"field\" data-type=\"list(Typedtree.structure_item)\">str_items</span>);\n        [<span data-type=\"list((int, node))\"><span class=\"constructor\" data-type=\"list((int, node))\">(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1284'>stamp</span>, <span class=\"constructor\" data-type=\"node\">Module</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1285'>name</span>, <span class=\"ident\" data-type=\"list((int, node))\" data-local-use='Descartes/1304'>children</span>))</span></span>]\n      }\n      | _ =&gt; <span class=\"constructor\" data-type=\"list((int, node))\">[]</span>\n      };\n      <span class=\"ident\" data-type=\"list((int, node))\" data-local-use='Descartes/1280'>more</span> <span class=\"operator\" data-type=\"(list((int, node)), list((int, node))) => list((int, node))\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"list((int, node))\" data-local-use='Descartes/1278'>items</span>\n  }, <span class=\"constructor\" data-type=\"list((int, node))\">[]</span>, <span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='Descartes/1277'>structureItems</span>)\n}", "values": [{"id": "Descartes/1008", "name": "filterNil", "moduleName": "Descartes"}, {"id": "Descartes/1014", "name": "showType", "moduleName": "Descartes"}, {"id": "Descartes/1203", "name": "highlightItem", "moduleName": "Descartes"}], "chars": 1333, "lines": 29, "type": "list(Typedtree.structure_item) => list((int, node))"},
"MainAux/1195": {"name": "htmlName", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1195' data-type=\"string => string\">htmlName</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1196' data-type=\"string\">path</span> =&gt; {\n  if (<span class=\"ident\" data-type=\"string => bool\" data-global-use='MainAux/1193'>isReadme</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1196'>path</span>)) {\n    <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1196'>path</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1196'>path</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"string\" data-type=\"string\">&quot;/readme.md&quot;</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.html&quot;</span>\n  } else {\n    <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1191'>asHtml</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1196'>path</span>)\n  }\n}", "values": [{"id": "MainAux/1193", "name": "isReadme", "moduleName": "MainAux"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "MainAux/1191", "name": "asHtml", "moduleName": "MainAux"}], "chars": 173, "lines": 6, "type": "string => string"},
"Docs/1019": {"name": "page", "moduleName": "Docs", "html": "let <span class=\"pattern-ident\" data-local-define='Docs/1019' data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option('a),\n  ~jsLoc: option('a),\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\">page</span> = (~<span class=\"pattern-ident\" data-local-define='Docs/1020' data-type=\"option(string)\">sourceUrl</span>, ~<span class=\"pattern-ident\" data-local-define='Docs/1021' data-type=\"string\">relativeToRoot</span>, ~<span class=\"pattern-ident\" data-local-define='Docs/1022' data-type=\"option('a)\">cssLoc</span>, ~<span class=\"pattern-ident\" data-local-define='Docs/1023' data-type=\"option('a)\">jsLoc</span>, <span class=\"pattern-ident\" data-local-define='Docs/1025' data-type=\"bool\">~checkHashes=<span class=\"constructor\" data-type=\"bool\">false</span></span>, <span class=\"pattern-ident\" data-local-define='Docs/1027' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Docs/1028' data-type=\"list((int, string, string, string))\">tocs</span>, <span class=\"pattern-ident\" data-local-define='Docs/1029' data-type=\"list((string, string))\">projectNames</span>, <span class=\"pattern-ident\" data-local-define='Docs/1030' data-type=\"list((string, string))\">markdowns</span>, <span class=\"pattern-ident\" data-local-define='Docs/1031' data-type=\"string\">contents</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string, string) => string,\n  (string, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string) => string,\n  (string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|\n    %s\n    %s\n    &lt;div class=&#39;container&#39;&gt;\n    %s\n    &lt;div class=&#39;main&#39;&gt;\n    %s\n    %s\n    &lt;/div&gt;\n    &lt;div class=&#39;right-blank&#39;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  |}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"(\n  ~relativeToRoot: string,\n  ~?cssLoc: option('a),\n  ~?jsLoc: option('a),\n  string\n) => string\" data-global-use='DocsTemplate/1013'>DocsTemplate.head</span>(~<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1021'>relativeToRoot</span>, ~<span class=\"ident\" data-type=\"option('a)\" data-local-use='Docs/1022'>cssLoc</span>?, ~<span class=\"ident\" data-type=\"option('a)\" data-local-use='Docs/1023'>jsLoc</span>?, <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1027'>name</span>),\n  <span class=\"ident\" data-type=\"bool\" data-local-use='Docs/1025'>checkHashes</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&lt;script&gt;window.shouldCheckHashes=true&lt;/script&gt;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>,\n  <span class=\"ident\" data-type=\"(\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\" data-global-use='Sidebar/1022'>Sidebar.generate</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1027'>name</span>, <span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='Docs/1028'>tocs</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Docs/1029'>projectNames</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Docs/1030'>markdowns</span>, <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='Infix/1049'>Infix.fileConcat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1021'>relativeToRoot</span>, <span class=\"string\" data-type=\"string\">&quot;search.html&quot;</span>)),\n  <span class=\"ident\" data-type=\"option(string)\" data-local-use='Docs/1020'>sourceUrl</span> <span class=\"operator\" data-type=\"(option(string), string => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (<span class=\"pattern-ident\" data-local-define='Docs/1032' data-type=\"string\">url</span> =&gt; {\n    <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;%s&quot; class=&quot;edit-link&quot;&gt;Edit&lt;/a&gt;|}</span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1032'>url</span>)\n  }) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1031'>contents</span>)\n}", "values": [{"id": "DocsTemplate/1013", "name": "head", "moduleName": "DocsTemplate"}, {"id": "Sidebar/1022", "name": "generate", "moduleName": "Sidebar"}, {"id": "Infix/1049", "name": "fileConcat", "moduleName": "Infix"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}], "chars": 659, "lines": 19, "type": "(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option('a),\n  ~jsLoc: option('a),\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string"},
"CmtFindStamps/1127": {"name": "stampsFromTypedtreeInterface", "moduleName": "CmtFindStamps", "html": "let rec <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1127' data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), T.pathType)))\">stampsFromTypedtreeInterface</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1128' data-type=\"('a, list(string))\">currentPath</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1129' data-type=\"list(Typedtree.signature_item)\">types</span>) =&gt; {\n  open Typedtree;\n  <span class=\"ident\" data-type=\"(\n  (\n    list((int, ('a, list(string), T.pathType))),\n    Typedtree.signature_item\n  ) => list((int, ('a, list(string), T.pathType))),\n  list((int, ('a, list(string), T.pathType))),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), T.pathType)))\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1130' data-type=\"list((int, ('a, list(string), T.pathType)))\">items</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1131' data-type=\"Typedtree.signature_item\">item</span>) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1132' data-type=\"list((int, ('a, list(string), T.pathType)))\">more</span> = switch (<span class=\"ident\" data-type=\"Typedtree.signature_item\" data-local-use='CmtFindStamps/1131'>item</span>.<span class=\"field\" data-type=\"Typedtree.signature_item_desc\">sig_desc</span>) {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_value</span>({val_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1133' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1134' data-type=\"string\">name</span>}}) =&gt; [<span data-type=\"list((int, ('a, list(string), T.pathType)))\"><span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">(<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1133'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1128'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1134'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PValue</span>))</span></span>]\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_type</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1135' data-type=\"list(Typedtree.type_declaration)\">decls</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Typedtree.type_declaration => (\n    int,\n    ('a, list(string), T.pathType)\n  ),\n  list(Typedtree.type_declaration)\n) => list((int, ('a, list(string), T.pathType)))\" data-stamp-missing>List.map</span>(({typ_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1143' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1144' data-type=\"string\">name</span>}}) =&gt; (<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1143'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1128'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1144'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PType</span>)), <span class=\"ident\" data-type=\"list(Typedtree.type_declaration)\" data-local-use='CmtFindStamps/1135'>decls</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_include</span>({<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1136' data-type=\"Typedtree.module_type\">incl_mod</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1137' data-type=\"Types.signature\">incl_type</span>}) =&gt; <span class=\"ident\" data-type=\"(('a, list(string)), Types.signature) => list(\n  (int, ('a, list(string), T.pathType))\n)\" data-global-use='CmtFindStamps/1016'>stampsFromTypesSignature</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1128'>currentPath</span>, <span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindStamps/1137'>incl_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_module</span>({md_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1138' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1139' data-type=\"string\">name</span>}, md_type: {mty_desc: <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_signature</span>(<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1140' data-type=\"Typedtree.signature\">signature</span>)}}) =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1145' data-type=\"list((int, ('a, list(string), T.pathType)))\">stamps</span>) = <span class=\"ident\" data-type=\"(\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), T.pathType)))\" data-global-use='CmtFindStamps/1127'>stampsFromTypedtreeInterface</span>(<span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1128'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1139'>name</span>), <span class=\"ident\" data-type=\"Typedtree.signature\" data-local-use='CmtFindStamps/1140'>signature</span>.<span class=\"field\" data-type=\"list(Typedtree.signature_item)\">sig_items</span>);\n        [<span data-type=\"list((int, ('a, list(string), T.pathType)))\">(<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1138'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1128'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1139'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PModule</span>)), ...<span class=\"ident\" data-type=\"list((int, ('a, list(string), T.pathType)))\" data-local-use='CmtFindStamps/1145'>stamps</span></span>]\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_module</span>({md_id: {<span class=\"pattern-ident\" data-local-define='CmtFindStamps/1141' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='CmtFindStamps/1142' data-type=\"string\">name</span>}}) =&gt; [<span data-type=\"list((int, ('a, list(string), T.pathType)))\"><span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">(<span class=\"ident\" data-type=\"int\" data-local-use='CmtFindStamps/1141'>stamp</span>, <span class=\"ident\" data-type=\"(('a, list(string)), string) => ('a, list(string))\" data-global-use='PrepareUtils/1008'>addToPath</span>(<span class=\"ident\" data-type=\"('a, list(string))\" data-local-use='CmtFindStamps/1128'>currentPath</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CmtFindStamps/1142'>name</span>) <span class=\"operator\" data-type=\"(\n  ('a, list(string)),\n  ('a, list(string)) => ('a, list(string), T.pathType)\n) => ('a, list(string), T.pathType)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(T.pathType, ('a, list(string))) => (\n  'a,\n  list(string),\n  T.pathType\n)\" data-global-use='PrepareUtils/1012'>toFullPath</span>(<span class=\"constructor\" data-type=\"T.pathType\">PModule</span>))</span></span>]\n      | _ =&gt; <span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">[]</span>\n      };\n      <span class=\"ident\" data-type=\"list((int, ('a, list(string), T.pathType)))\" data-local-use='CmtFindStamps/1132'>more</span> <span class=\"operator\" data-type=\"(\n  list((int, ('a, list(string), T.pathType))),\n  list((int, ('a, list(string), T.pathType)))\n) => list((int, ('a, list(string), T.pathType)))\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"list((int, ('a, list(string), T.pathType)))\" data-local-use='CmtFindStamps/1130'>items</span>\n  }, <span class=\"constructor\" data-type=\"list((int, ('a, list(string), T.pathType)))\">[]</span>, <span class=\"ident\" data-type=\"list(Typedtree.signature_item)\" data-local-use='CmtFindStamps/1129'>types</span>)\n}", "values": [{"id": "CmtFindStamps/1016", "name": "stampsFromTypesSignature", "moduleName": "CmtFindStamps"}, {"id": "PrepareUtils/1008", "name": "addToPath", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1012", "name": "toFullPath", "moduleName": "PrepareUtils"}], "chars": 961, "lines": 16, "type": "(\n  ('a, list(string)),\n  list(Typedtree.signature_item)\n) => list((int, ('a, list(string), T.pathType)))"},
"CodeSnippets/1327": {"name": "testBlock", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1327' data-type=\"(\n  string,\n  ~base: string,\n  State.Model.compilationResult,\n  State.Model.codeOptions,\n  string,\n  int\n) => unit\">testBlock</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1328' data-type=\"string\">packageJsonName</span>, ~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1329' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1330' data-type=\"State.Model.compilationResult\">status</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1331' data-type=\"State.Model.codeOptions\">options</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1332' data-type=\"string\">fileName</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1333' data-type=\"int\">id</span>) =&gt; {\n  open State.Model;\n  if (<span class=\"ident\" data-type=\"State.Model.expectation => bool\" data-global-use='CodeSnippets/1325'>shouldTest</span>(<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1331'>options</span>.<span class=\"field\" data-type=\"State.Model.expectation\">expectation</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1331'>options</span>.<span class=\"field\" data-type=\"State.Model.codeContext\">context</span> <span class=\"operator\" data-type=\"(State.Model.codeContext, State.Model.codeContext) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"State.Model.codeContext\">Normal</span>) {\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1333'>id</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; - &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1332'>fileName</span>);\n    switch <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1330'>status</span> {\n    | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">Success</span>(_, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1334' data-type=\"string\">js</span>) =&gt;\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1335' data-type=\"string\">cmd</span> = <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">&quot;node -e \\&quot;%s\\&quot;&quot;</span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"(string, string, string) => string\" data-global-use='CodeSnippets/1166'>snippetLoader</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1328'>packageJsonName</span>, <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Files.absify</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1329'>base</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1334'>js</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-global-use='CodeSnippets/1323'>escape</span>);\n    let (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1336' data-type=\"list(string)\">output</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1337' data-type=\"list(string)\">err</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1338' data-type=\"bool\">success</span>) = <span class=\"ident\" data-type=\"(\n  ~?input: option('a),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)\" data-global-use='Commands/1008'>Commands.execFull</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1335'>cmd</span>);\n    if (<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1331'>options</span>.<span class=\"field\" data-type=\"State.Model.expectation\">expectation</span> <span class=\"operator\" data-type=\"(State.Model.expectation, State.Model.expectation) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"State.Model.expectation\">State.Model.Raise</span>) {\n      if (<span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1338'>success</span>) {\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1336'>output</span>));\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1337'>err</span>));\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Expected to fail but didnt &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1333'>id</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; in &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1332'>fileName</span>);\n      }\n    } else {\n      if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1338'>success</span>) {\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1336'>output</span>));\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1337'>err</span>));\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Failed to run &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1333'>id</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; in &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1332'>fileName</span>);\n      };\n    }\n    | _ =&gt; <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Not running because of error&quot;</span>)\n    }\n  };\n\n}", "values": [{"id": "CodeSnippets/1325", "name": "shouldTest", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1166", "name": "snippetLoader", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1323", "name": "escape", "moduleName": "CodeSnippets"}, {"id": "Commands/1008", "name": "execFull", "moduleName": "Commands"}], "chars": 1025, "lines": 25, "type": "(\n  string,\n  ~base: string,\n  State.Model.compilationResult,\n  State.Model.codeOptions,\n  string,\n  int\n) => unit"},
"Markdown/1021": {"name": "sliceToEnd", "moduleName": "Markdown", "html": "let <span class=\"pattern-ident\" data-local-define='Markdown/1021' data-type=\"(string, int) => string\">sliceToEnd</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1022' data-type=\"string\">s</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1023' data-type=\"int\">num</span>) =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1022'>s</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;</span> <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1023'>num</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1022'>s</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1022'>s</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1023'>num</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1022'>s</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1023'>num</span>)", "values": [], "chars": 100, "lines": 0, "type": "(string, int) => string"},
"PrepareUtils/1051": {"name": "findDocAttribute", "moduleName": "PrepareUtils", "html": "let rec <span class=\"pattern-ident\" data-local-define='PrepareUtils/1051' data-type=\"list((Asttypes.loc(string), Parsetree.payload)) => option(\n  Omd.t\n)\">findDocAttribute</span> = <span class=\"pattern-ident\" data-local-define='PrepareUtils/1052' data-type=\"list((Asttypes.loc(string), Parsetree.payload))\">attributes</span> =&gt; {\n  open Parsetree;\n  switch <span class=\"ident\" data-type=\"list((Asttypes.loc(string), Parsetree.payload))\" data-local-use='PrepareUtils/1052'>attributes</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list((Asttypes.loc(string), Parsetree.payload))\">[]</span> =&gt; <span class=\"constructor\" data-type=\"option(Omd.t)\">None</span>\n  | [<span data-type=\"list((Asttypes.loc(string), Parsetree.payload))\">({Asttypes.txt: <span class=\"string\" data-type=\"string\">&quot;ocaml.doc&quot;</span>}, <span class=\"pattern-constructor\" data-type=\"Parsetree.payload\">PStr</span>([<span data-type=\"Parsetree.structure\"><span class=\"pattern-constructor\" data-type=\"list(Parsetree.structure_item)\">{pstr_desc: <span class=\"pattern-constructor\" data-type=\"Parsetree.structure_item_desc\">Pstr_eval</span>({pexp_desc: <span class=\"pattern-constructor\" data-type=\"Parsetree.expression_desc\">Pexp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_string</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1053' data-type=\"string\">doc</span>, _))}, _)}</span></span>])), ...<span class=\"pattern-ident\" data-local-define='PrepareUtils/1054' data-type=\"list((Asttypes.loc(string), Parsetree.payload))\">rest</span></span>] =&gt; <span class=\"constructor\" data-type=\"option(Omd.t)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-global-use='PrepareUtils/1038'>cleanOffStars</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1053'>doc</span>) <span class=\"operator\" data-type=\"(string, string => Omd.t) => Omd.t\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>)\n  | [<span data-type=\"list((Asttypes.loc(string), Parsetree.payload))\">_, ...<span class=\"pattern-ident\" data-local-define='PrepareUtils/1055' data-type=\"list((Asttypes.loc(string), Parsetree.payload))\">rest</span></span>] =&gt; <span class=\"ident\" data-type=\"list((Asttypes.loc(string), Parsetree.payload)) => option(\n  Omd.t\n)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"list((Asttypes.loc(string), Parsetree.payload))\" data-local-use='PrepareUtils/1055'>rest</span>)\n  }\n}", "values": [{"id": "PrepareUtils/1038", "name": "cleanOffStars", "moduleName": "PrepareUtils"}], "chars": 321, "lines": 7, "type": "list((Asttypes.loc(string), Parsetree.payload)) => option(\n  Omd.t\n)"},
"Descartes/1495": {"name": "main", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1495' data-type=\"unit => unit\">main</span> = <span class=\"pattern-constructor\" data-type=\"unit\">()</span> =&gt; {\n  switch (<span class=\"ident\" data-type=\"array(string)\" data-stamp-missing>Sys.argv</span> <span class=\"operator\" data-type=\"(array(string), array(string) => list(string)) => list(\n  string\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"array(string) => list(string)\" data-stamp-missing>Array.to_list</span>) {\n  | [<span data-type=\"list(string)\">_, <span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='Descartes/1496' data-type=\"string\">cmtdir</span>, <span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='Descartes/1497' data-type=\"string\">srcdir</span>, ...<span class=\"pattern-ident\" data-local-define='Descartes/1498' data-type=\"list(string)\">skip</span></span></span></span>] =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1499' data-type=\"list((string, string))\">files</span> = <span class=\"ident\" data-type=\"(string, string, list(string)) => list((string, string))\" data-global-use='Descartes/1487'>gatherCmts</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1496'>cmtdir</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1497'>srcdir</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Descartes/1498'>skip</span>);\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1500' data-type=\"list((string, list(Typedtree.structure_item), string))\">ready</span> = <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1499'>files</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list(\n    (\n      string,\n      list(Typedtree.structure_item),\n      string\n    )\n  )\n) => list((string, list(Typedtree.structure_item), string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string) => (\n    string,\n    list(Typedtree.structure_item),\n    string\n  ),\n  list((string, string))\n) => list((string, list(Typedtree.structure_item), string))\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Descartes/1501' data-type=\"string\">cmt</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1502' data-type=\"string\">src</span>)) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='Descartes/1503' data-type=\"string\">name</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1501'>cmt</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span> <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.capitalize</span>;\n      let <span class=\"pattern-ident\" data-local-define='Descartes/1504' data-type=\"Cmt_format.binary_annots\">annots</span> = <span class=\"ident\" data-type=\"string => Cmt_format.cmt_infos\" data-stamp-missing>Cmt_format.read_cmt</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1501'>cmt</span>).<span class=\"field\" data-type=\"Cmt_format.binary_annots\">Cmt_format.cmt_annots</span>;\n      switch <span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='Descartes/1504'>annots</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Implementation</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1505' data-type=\"list(Typedtree.structure_item)\">str_items</span>}) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1503'>name</span>, <span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='Descartes/1505'>str_items</span>, <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1502'>src</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Unable to read source file&quot;</span>)\n      | _ =&gt; <span class=\"ident\" data-type=\"string => (string, list(Typedtree.structure_item), string)\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Bad cmt&quot;</span>)\n      }\n    });\n\n    let (<span class=\"pattern-ident\" data-local-define='Descartes/1506' data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\">allValues</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1507' data-type=\"list((string, string, list(string)))\">allModules</span>) = <span class=\"ident\" data-type=\"list((string, list(Typedtree.structure_item), string)) => (\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  ),\n  list((string, string, list(string)))\n)\" data-global-use='Descartes/1417'>processMany</span>(<span class=\"ident\" data-type=\"list((string, list(Typedtree.structure_item), string))\" data-local-use='Descartes/1500'>ready</span>);\n    let <span class=\"pattern-ident\" data-local-define='Descartes/1508' data-type=\"string\">contents</span> = <span class=\"string\" data-type=\"string\">&quot;window.DATA = {&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;,\\n&quot;</span>, <span class=\"ident\" data-type=\"(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  ) => string,\n  list(\n    (\n      string,\n      string,\n      string,\n      string,\n      Location.t,\n      string,\n      list(fullItem),\n      list(fullItem)\n    )\n  )\n) => list(string)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Descartes/1509' data-type=\"string\">id</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1510' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1511' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1512' data-type=\"string\">typ</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1513' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1514' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1515' data-type=\"list(fullItem)\">vals</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1516' data-type=\"list(fullItem)\">typs</span>)) =&gt; {\n      <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (\n      string,\n      string,\n      string,\n      string,\n      string,\n      int,\n      int,\n      string\n    ) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string,\n  string,\n  string,\n  int,\n  int,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n        <span class=\"constructor\" data-type=\"Pervasives.format(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string,\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string,\n  (\n    string,\n    string,\n    string,\n    string,\n    int,\n    int,\n    string\n  ) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, int, int, string) => string,\n  (string, string, string, int, int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, int, int, string) => string,\n  (string, string, int, int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, int, int, string) => string,\n  (string, int, int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, int, string) => string,\n  (int, int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, int, string) => string,\n  (int, int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&quot;%s&quot;: {&quot;name&quot;: %S, &quot;moduleName&quot;: %S, &quot;html&quot;: %S, &quot;values&quot;: %s, &quot;chars&quot;: %d, &quot;lines&quot;: %d, &quot;type&quot;: %S}|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>,\n        <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1509'>id</span>,\n        <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1510'>name</span>,\n        <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1511'>moduleName</span>,\n        <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1514'>text</span>,\n        <span class=\"string\" data-type=\"string\">&quot;[&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;, &quot;</span>, <span class=\"ident\" data-type=\"(fullItem => string, list(fullItem)) => list(string)\" data-stamp-missing>List.map</span>(({<span class=\"pattern-ident\" data-local-define='Descartes/1517' data-type=\"string\">id</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1518' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1519' data-type=\"string\">moduleName</span>}) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|{&quot;id&quot;: %S, &quot;name&quot;: %S, &quot;moduleName&quot;: %S}|}</span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1517'>id</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1518'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1519'>moduleName</span>), <span class=\"ident\" data-type=\"list(fullItem)\" data-local-use='Descartes/1515'>vals</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;]&quot;</span>,\n        <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1513'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1513'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>,\n        <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1513'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_lnum</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1513'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_lnum</span>,\n        <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1512'>typ</span>\n      )\n    }, <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    string,\n    string,\n    string,\n    Location.t,\n    string,\n    list(fullItem),\n    list(fullItem)\n  )\n)\" data-local-use='Descartes/1506'>allValues</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;};\\nwindow.MODULES = {&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span>\n    <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;,\\n&quot;</span>, <span class=\"ident\" data-type=\"list((string, string, list(string)))\" data-local-use='Descartes/1507'>allModules</span> <span class=\"operator\" data-type=\"(\n  list((string, string, list(string))),\n  list((string, string, list(string))) => list(\n    string\n  )\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string, list(string)) => string,\n  list((string, string, list(string)))\n) => list(string)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Descartes/1520' data-type=\"string\">id</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1521' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1522' data-type=\"list(string)\">ids</span>)) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|%S: {&quot;name&quot;: %S, &quot;ids&quot;: [%s]}|}</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1520'>id</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1521'>name</span>, <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;, &quot;</span>, <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">&quot;%S&quot;</span></span></span></span></span>), <span class=\"ident\" data-type=\"list(string)\" data-local-use='Descartes/1522'>ids</span>)))))\n    <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;}&quot;</span>;\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"string\" data-type=\"string\">&quot;./docs/descartes/descartes.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1508'>contents</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>\n  }\n  | _ =&gt; <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Usage: descartes cmtdir srcdir&quot;</span>)\n  }\n}", "values": [{"id": "Descartes/1487", "name": "gatherCmts", "moduleName": "Descartes"}, {"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "Descartes/1417", "name": "processMany", "moduleName": "Descartes"}], "chars": 1652, "lines": 33, "type": "unit => unit"},
"CliToInput/1026": {"name": "startsWith", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1026' data-type=\"(string, string) => bool\">startsWith</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1027' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1028' data-type=\"string\">prefix</span>) =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1028'>prefix</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1027'>text</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1027'>text</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1028'>prefix</span>)) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1028'>prefix</span>", "values": [], "chars": 137, "lines": 1, "type": "(string, string) => bool"},
"ElasticRaw/1008": {"name": "raw", "moduleName": "ElasticRaw", "html": "let <span class=\"pattern-ident\" data-local-define='ElasticRaw/1008' data-type=\"string\">raw</span> = <span class=\"string\" data-type=\"string\">{|\n/**\n * elasticlunr - http://weixsong.github.io\n * Lightweight full-text search engine in Javascript for browser search and offline search. - 0.9.5\n *\n * Copyright (C) 2017 Oliver Nightingale\n * Copyright (C) 2017 Wei Song\n * MIT Licensed\n * @license\n */\n!function(){function e(e){if(null===e||&quot;object&quot;!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&amp;&amp;(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&amp;&amp;e.call(n,n),n};t.version=&quot;0.9.5&quot;,lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&amp;&amp;console.warn&amp;&amp;console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?&quot;&quot;:e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if(&quot;function&quot;!=typeof t)throw new TypeError(&quot;last argument must be a function&quot;);n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&amp;&amp;(this.events[e].splice(n,1),0==this.events[e].length&amp;&amp;delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\\s\\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&amp;&amp;void 0!==e&amp;&amp;&quot;object&quot;==typeof e&amp;&amp;(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&amp;&amp;t.utils.warn(&quot;Overwriting existing registered function: &quot;+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&amp;&amp;e.label in this.registeredFunctions;n||t.utils.warn(&quot;Function is not registered with pipeline. This may cause problems when serialising the index.\\n&quot;,e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error(&quot;Cannot load un-registered function: &quot;+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error(&quot;Cannot find existingFn&quot;);this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error(&quot;Cannot find existingFn&quot;);this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&amp;&amp;this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n&gt;o;o++){for(var r=e[o],s=0;i&gt;s&amp;&amp;(r=this._queue[s](r,o,e),void 0!==r&amp;&amp;null!==r);s++);void 0!==r&amp;&amp;null!==r&amp;&amp;t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref=&quot;id&quot;,this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on(&quot;add&quot;,&quot;remove&quot;,&quot;update&quot;,function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&amp;&amp;t.utils.warn(&quot;version mismatch: current &quot;+t.version+&quot; importing &quot;+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&amp;&amp;this.eventEmitter.emit(&quot;add&quot;,e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&amp;&amp;this.documentStore.isDocStored()!==!1&amp;&amp;this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&amp;&amp;(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&amp;&amp;this.eventEmitter.emit(&quot;remove&quot;,e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&amp;&amp;this.eventEmitter.emit(&quot;update&quot;,e,this)},t.Index.prototype.idf=function(e,t){var n=&quot;@&quot;+t+&quot;/&quot;+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e=&quot;string&quot;==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&amp;&amp;(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u&lt;s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&amp;&amp;(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&amp;&amp;(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&amp;&amp;&quot;AND&quot;==i){var l={};for(var c in s)c in o&amp;&amp;(l[c]=o[c]);o=l}n==e&amp;&amp;this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&amp;&amp;(h=1/Math.sqrt(f));var p=1;n!=e&amp;&amp;(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if(&quot;AND&quot;==n){var i={};for(var o in t)o in e&amp;&amp;(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&amp;&amp;(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&amp;&amp;void 0!==e&amp;&amp;0!=this.hasDoc(e)&amp;&amp;(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&amp;&amp;void 0!==e&amp;&amp;0!=this.hasDoc(e)&amp;&amp;this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&amp;&amp;t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:&quot;ate&quot;,tional:&quot;tion&quot;,enci:&quot;ence&quot;,anci:&quot;ance&quot;,izer:&quot;ize&quot;,bli:&quot;ble&quot;,alli:&quot;al&quot;,entli:&quot;ent&quot;,eli:&quot;e&quot;,ousli:&quot;ous&quot;,ization:&quot;ize&quot;,ation:&quot;ate&quot;,ator:&quot;ate&quot;,alism:&quot;al&quot;,iveness:&quot;ive&quot;,fulness:&quot;ful&quot;,ousness:&quot;ous&quot;,aliti:&quot;al&quot;,iviti:&quot;ive&quot;,biliti:&quot;ble&quot;,logi:&quot;log&quot;},t={icate:&quot;ic&quot;,ative:&quot;&quot;,alize:&quot;al&quot;,iciti:&quot;ic&quot;,ical:&quot;ic&quot;,ful:&quot;&quot;,ness:&quot;&quot;},n=&quot;[^aeiou]&quot;,i=&quot;[aeiouy]&quot;,o=n+&quot;[^aeiouy]*&quot;,r=i+&quot;[aeiou]*&quot;,s=&quot;^(&quot;+o+&quot;)?&quot;+r+o,u=&quot;^(&quot;+o+&quot;)?&quot;+r+o+&quot;(&quot;+r+&quot;)?$&quot;,a=&quot;^(&quot;+o+&quot;)?&quot;+r+o+r+o,l=&quot;^(&quot;+o+&quot;)?&quot;+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp(&quot;([^aeiouylsz])\\\\1$&quot;),w=new RegExp(&quot;^&quot;+o+i+&quot;[^aeiouwxy]$&quot;),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp(&quot;^&quot;+o+i+&quot;[^aeiouwxy]$&quot;),z=function(n){var i,o,r,s,u,a,l;if(n.length&lt;3)return n;if(r=n.substr(0,1),&quot;y&quot;==r&amp;&amp;(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,&quot;$1$2&quot;):u.test(n)&amp;&amp;(n=n.replace(u,&quot;$1$2&quot;)),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&amp;&amp;(s=y,n=n.replace(s,&quot;&quot;))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&amp;&amp;(n=i,u=S,a=x,l=w,u.test(n)?n+=&quot;e&quot;:a.test(n)?(s=y,n=n.replace(s,&quot;&quot;)):l.test(n)&amp;&amp;(n+=&quot;e&quot;))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+&quot;i&quot;}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&amp;&amp;(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&amp;&amp;(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&amp;&amp;(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&amp;&amp;(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&amp;&amp;!a.test(i))&amp;&amp;(n=i)}return s=P,u=d,s.test(n)&amp;&amp;u.test(n)&amp;&amp;(s=y,n=n.replace(s,&quot;&quot;)),&quot;y&quot;==r&amp;&amp;(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,&quot;stemmer&quot;),t.stopWordFilter=function(e){return e&amp;&amp;t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&amp;&amp;Array.isArray(e)!==!1&amp;&amp;e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={&quot;&quot;:!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,&quot;do&quot;:!0,does:!0,either:!0,&quot;else&quot;:!0,ever:!0,every:!0,&quot;for&quot;:!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,&quot;if&quot;:!0,&quot;in&quot;:!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,&quot;this&quot;:!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,&quot;while&quot;:!0,who:!0,whom:!0,why:!0,will:!0,&quot;with&quot;:!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,&quot;stopWordFilter&quot;),t.trimmer=function(e){if(null===e||void 0===e)throw new Error(&quot;token should not be undefined&quot;);return e.replace(/^\\W+/,&quot;&quot;).replace(/\\W+$/,&quot;&quot;)},t.Pipeline.registerFunction(t.trimmer,&quot;trimmer&quot;),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i&lt;=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n&lt;e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n&lt;e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&amp;&amp;t in n.docs&amp;&amp;(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||&quot;&quot;==e)return[];var t=t||[];if(void 0==n&amp;&amp;(n=this.getNode(e),null==n))return t;n.df&gt;0&amp;&amp;t.push(e);for(var i in n)&quot;docs&quot;!==i&amp;&amp;&quot;df&quot;!==i&amp;&amp;this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||&quot;&quot;;if(void 0==n||null==n)throw new Error(&quot;fields should not be null&quot;);this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn(&quot;user configuration parse failed, will use default configuration&quot;),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:&quot;OR&quot;,expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i=&quot;OR&quot;,o=!1;if(this.reset(),&quot;bool&quot;in e&amp;&amp;(i=e.bool||i),&quot;expand&quot;in e&amp;&amp;(o=e.expand||o),&quot;fields&quot;in e)for(var r in e.fields)if(n.indexOf(r)&gt;-1){var s=e.fields[r],u=o;void 0!=s.expand&amp;&amp;(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn(&quot;field name in user configuration not found in index instance fields&quot;);else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e&lt;arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i&gt;1;){if(r===e)return o;e&gt;r&amp;&amp;(t=o),r&gt;e&amp;&amp;(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i&gt;1;)e&gt;r&amp;&amp;(t=o),r&gt;e&amp;&amp;(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r&gt;e?o:e&gt;r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n&gt;o-1||i&gt;r-1)break;s[n]!==u[i]?s[n]&lt;u[i]?n++:s[n]&gt;u[i]&amp;&amp;i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length&gt;=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o&lt;r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){&quot;function&quot;==typeof define&amp;&amp;define.amd?define(t):&quot;object&quot;==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();\n|}</span>", "values": [], "chars": 18067, "lines": 11, "type": "string"},
"CodeHighlight/1008": {"name": "addHtmlEscapedToBuffer", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1008' data-type=\"(Buffer.t, char) => unit\">addHtmlEscapedToBuffer</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1009' data-type=\"Buffer.t\">buffer</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1010' data-type=\"char\">char</span>) =&gt; {\n  /* Handle htmlentities */\n  switch <span class=\"ident\" data-type=\"char\" data-local-use='CodeHighlight/1010'>char</span> {\n  | (&#39;0&#39;..&#39;9&#39; | &#39;a&#39;..&#39;z&#39; | &#39;A&#39;..&#39;Z&#39;) as c =&gt; <span class=\"ident\" data-type=\"(Buffer.t, char) => unit\" data-stamp-missing>Buffer.add_char</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1009'>buffer</span>, <span class=\"ident\" data-type=\"char\" data-local-use='CodeHighlight/1011'>c</span>)\n  | &#39;&quot;&#39; =&gt; <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1009'>buffer</span>, <span class=\"string\" data-type=\"string\">&quot;&amp;quot;&quot;</span>)\n  | &#39;\\&#39;&#39; =&gt; <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1009'>buffer</span>, <span class=\"string\" data-type=\"string\">&quot;&amp;#39;&quot;</span>)\n  | &#39;&amp;&#39; =&gt; <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1009'>buffer</span>, <span class=\"string\" data-type=\"string\">&quot;&amp;amp;&quot;</span>)\n  | &#39;&lt;&#39; =&gt; <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1009'>buffer</span>, <span class=\"string\" data-type=\"string\">&quot;&amp;lt;&quot;</span>)\n  | &#39;&gt;&#39; =&gt; <span class=\"ident\" data-type=\"(Buffer.t, string) => unit\" data-stamp-missing>Buffer.add_string</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1009'>buffer</span>, <span class=\"string\" data-type=\"string\">&quot;&amp;gt;&quot;</span>)\n  | <span class=\"pattern-ident\" data-local-define='CodeHighlight/1012' data-type=\"char\">c</span> =&gt; <span class=\"ident\" data-type=\"(Buffer.t, char) => unit\" data-stamp-missing>Buffer.add_char</span>(<span class=\"ident\" data-type=\"Buffer.t\" data-local-use='CodeHighlight/1009'>buffer</span>, <span class=\"ident\" data-type=\"char\" data-local-use='CodeHighlight/1012'>c</span>)\n  };\n}", "values": [], "chars": 437, "lines": 11, "type": "(Buffer.t, char) => unit"},
"CodeSnippets/1064": {"name": "highlight", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1064' data-type=\"(\n  ~editingEnabled: bool,\n  int,\n  string,\n  State.Model.codeOptions,\n  State.Model.compilationResult,\n  string => string\n) => string\">highlight</span> = (~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1065' data-type=\"bool\">editingEnabled</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1066' data-type=\"int\">id</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1067' data-type=\"string\">content</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1068' data-type=\"State.Model.codeOptions\">options</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1069' data-type=\"State.Model.compilationResult\">status</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1070' data-type=\"string => string\">bundle</span>) =&gt; {\n  open State.Model;\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1071' data-type=\"option(string)\">cmt</span> = switch <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1069'>status</span> {\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">ParseError</span>(_) =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">TypeError</span>(_, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1072' data-type=\"string\">cmt</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1072'>cmt</span>)\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">Success</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1073' data-type=\"string\">cmt</span>, _) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1073'>cmt</span>)\n  };\n  let (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1074' data-type=\"string\">pre</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1075' data-type=\"string\">code</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1076' data-type=\"string\">post</span>) = switch <span class=\"ident\" data-type=\"option(string)\" data-local-use='CodeSnippets/1071'>cmt</span> {\n  | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; {\n    let (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1078' data-type=\"string\">pre</span>, _, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1079' data-type=\"string\">code</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1080' data-type=\"string\">post</span>, _) = <span class=\"ident\" data-type=\"string => (string, int, string, string, int)\" data-global-use='CodeHighlight/1276'>CodeHighlight.codeSections</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1067'>content</span>);\n    (<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1078'>pre</span>, <span class=\"ident\" data-type=\"(~?md: option(bool), string) => string\" data-global-use='CodeSnippets/1059'>html</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1079'>code</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1080'>post</span>)\n  }\n  | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1077' data-type=\"string\">cmt</span>) =&gt; <span class=\"ident\" data-type=\"(string, string) => (string, string, string)\" data-global-use='CodeHighlight/1287'>CodeHighlight.highlight</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1067'>content</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1077'>cmt</span>)\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1081' data-type=\"string\">after</span> = switch <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1069'>status</span> {\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">ParseError</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1082' data-type=\"string\">text</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-global-use='CodeSnippets/1058'>sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|&lt;div class=&#39;parse-error&#39;&gt;Parse Error:\\n%s&lt;/div&gt;|}</span></span></span></span></span></span>, <span class=\"ident\" data-type=\"(~?md: option(bool), string) => string\" data-global-use='CodeSnippets/1059'>html</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1082'>text</span>))\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">TypeError</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1083' data-type=\"string\">text</span>, _) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-global-use='CodeSnippets/1058'>sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|&lt;div class=&#39;type-error&#39;&gt;Type Error:\\n%s&lt;/div&gt;|}</span></span></span></span></span></span>, <span class=\"ident\" data-type=\"(~?md: option(bool), string) => string\" data-global-use='CodeSnippets/1059'>html</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1083'>text</span>))\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">Success</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1084' data-type=\"string\">cmt</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1085' data-type=\"string\">js</span>) =&gt; <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"State.Model.expectation => bool\" data-global-use='CodeSnippets/1062'>shouldBundle</span>(<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1068'>options</span>.<span class=\"field\" data-type=\"State.Model.expectation\">expectation</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, int, string) => string,\n    unit,\n    string\n  ),\n  string,\n  int,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, int, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, int, string) => string,\n  (string, int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|%s&lt;script type=&#39;docre-bundle&#39; data-block-id=&#39;%d&#39;&gt;%s&lt;/script&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span>,\n      switch <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1068'>options</span>.<span class=\"field\" data-type=\"State.Model.codeContext\">context</span> {\n      | <span class=\"pattern-constructor\" data-type=\"State.Model.codeContext\">Node</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;&quot;</span>\n      | _ =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format((int, string) => string, unit, string),\n  int,\n  string\n) => string\" data-global-use='CodeSnippets/1058'>sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((int, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|&lt;div data-block-id=&#39;%d&#39; data-context=%S class=&#39;block-target&#39;&gt;&lt;/div&gt;|}</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1066'>id</span>, <span class=\"ident\" data-type=\"State.Model.codeContext => string\" data-global-use='State/1028'>contextString</span>(<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1068'>options</span>.<span class=\"field\" data-type=\"State.Model.codeContext\">context</span>))\n      },\n      <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1066'>id</span>,\n      <span class=\"ident\" data-type=\"string => string\" data-local-use='CodeSnippets/1070'>bundle</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1085'>js</span>)\n    )\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1086' data-type=\"string\">preCode</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1074'>pre</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&lt;div class=&#39;code-pre&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(~?md: option(bool), string) => string\" data-global-use='CodeSnippets/1059'>html</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1074'>pre</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/div&gt;&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1087' data-type=\"string\">postCode</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1076'>post</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&lt;div class=&#39;code-post&#39;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(~?md: option(bool), string) => string\" data-global-use='CodeSnippets/1059'>html</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1076'>post</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/div&gt;&quot;</span>;\n\n  <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (\n      string,\n      int,\n      int,\n      string,\n      string,\n      string,\n      string\n    ) => string,\n    unit,\n    string\n  ),\n  string,\n  int,\n  int,\n  string,\n  string,\n  string,\n  string\n) => string\" data-global-use='CodeSnippets/1058'>sprintf</span>(\n    <span class=\"constructor\" data-type=\"Pervasives.format(\n  (\n    string,\n    int,\n    int,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    int,\n    int,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    int,\n    int,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (\n    string,\n    int,\n    int,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  (\n    string,\n    int,\n    int,\n    string,\n    string,\n    string,\n    string\n  ) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, int, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, int, string, string, string, string) => string,\n  (int, int, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, int, string, string, string, string) => string,\n  (int, int, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string, string, string, string) => string,\n  (int, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string, string, string, string) => string,\n  (int, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string) => string,\n  (string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;div class=&#39;code-block&#39;&gt;\n  %s\n  &lt;pre class=&#39;code&#39; data-block-id=&#39;%d&#39; id=&#39;block-%d&#39;&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/pre&gt;\n  %s\n  %s\n  %s\n&lt;/div&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1086'>preCode</span>,\n    <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1066'>id</span>,\n    <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1066'>id</span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1075'>code</span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1087'>postCode</span>,\n    (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1065'>editingEnabled</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1068'>options</span>.<span class=\"field\" data-type=\"State.Model.codeDisplay\">codeDisplay</span>.<span class=\"field\" data-type=\"bool\">noEdit</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(\n  Pervasives.format((int, string) => string, unit, string),\n  int,\n  string\n) => string\" data-global-use='CodeSnippets/1058'>sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((int, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string) => string,\n  (int, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;script type=&#39;docre-source&#39; data-block-id=&quot;%d&quot;&gt;%s&lt;/script&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1066'>id</span>, <span class=\"ident\" data-type=\"string => string\" data-global-use='CodeSnippets/1060'>escapeScript</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1067'>content</span>)),\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1081'>after</span>\n  )\n}", "values": [{"id": "CodeHighlight/1276", "name": "codeSections", "moduleName": "CodeHighlight"}, {"id": "CodeHighlight/1287", "name": "highlight", "moduleName": "CodeHighlight"}, {"id": "CodeSnippets/1062", "name": "shouldBundle", "moduleName": "CodeSnippets"}, {"id": "State/1028", "name": "contextString", "moduleName": "State"}, {"id": "CodeSnippets/1059", "name": "html", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1058", "name": "sprintf", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1060", "name": "escapeScript", "moduleName": "CodeSnippets"}], "chars": 1587, "lines": 47, "type": "(\n  ~editingEnabled: bool,\n  int,\n  string,\n  State.Model.codeOptions,\n  State.Model.compilationResult,\n  string => string\n) => string"},
"Descartes/1378": {"name": "deepType", "moduleName": "Descartes", "html": "let rec <span class=\"pattern-ident\" data-local-define='Descartes/1378' data-type=\"(\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        list(('a, 'a)),\n        'a,\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'b | `Missing ]\">deepType</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1379' data-type=\"list('a)\">names</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1380' data-type=\"'a\">_name</span>, (<span class=\"pattern-ident\" data-local-define='Descartes/1381' data-type=\"list(('a, 'a))\">types</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1382' data-type=\"'a\">_values</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1383' data-type=\"list(('a, 'a))\">modules</span>)), <span class=\"pattern-ident\" data-local-define='Descartes/1384' data-type=\"'a\">typStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1385' data-type=\"Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))\">modStamps</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1379'>names</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list('a)\">[]</span> =&gt; `Missing\n  | [<span data-type=\"list('a)\"><span class=\"pattern-ident\" data-local-define='Descartes/1386' data-type=\"'a\"><span class=\"pattern-constructor\" data-type=\"list('a)\">name</span></span></span>] =&gt; switch (<span class=\"ident\" data-type=\"('a, list(('a, 'a))) => 'a\" data-stamp-missing>List.assoc</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1386'>name</span>, <span class=\"ident\" data-type=\"list(('a, 'a))\" data-local-use='Descartes/1381'>types</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; `Missing\n    | <span class=\"pattern-ident\" data-local-define='Descartes/1389' data-type=\"'a\">id</span> =&gt; `Global(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1389'>id</span>)\n    }\n  | [<span data-type=\"list('a)\"><span class=\"pattern-ident\" data-local-define='Descartes/1387' data-type=\"'a\">modname</span>, ...<span class=\"pattern-ident\" data-local-define='Descartes/1388' data-type=\"list('a)\">names</span></span>] =&gt; switch (<span class=\"ident\" data-type=\"('a, list(('a, 'a))) => 'a\" data-stamp-missing>List.assoc</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1387'>modname</span>, <span class=\"ident\" data-type=\"list(('a, 'a))\" data-local-use='Descartes/1383'>modules</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; `Missing\n    | <span class=\"pattern-ident\" data-local-define='Descartes/1390' data-type=\"'a\">id</span> =&gt; <span class=\"ident\" data-type=\"(\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        list(('a, 'a)),\n        'a,\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'b | `Missing ]\" data-global-use='Descartes/1378'>deepType</span>(<span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1388'>names</span>, <span class=\"ident\" data-type=\"(\n  Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a))))),\n  'a\n) => ('a, (list(('a, 'a)), 'a, list(('a, 'a))))\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))\" data-local-use='Descartes/1385'>modStamps</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1390'>id</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1384'>typStamps</span>, <span class=\"ident\" data-type=\"Hashtbl.t('a, ('a, (list(('a, 'a)), 'a, list(('a, 'a)))))\" data-local-use='Descartes/1385'>modStamps</span>)\n    }\n  }\n}", "values": [], "chars": 438, "lines": 12, "type": "(\n  list('a),\n  ('a, (list(('a, 'a)), 'a, list(('a, 'a)))),\n  'a,\n  Hashtbl.t(\n    'a,\n    (\n      'a,\n      (\n        list(('a, 'a)),\n        'a,\n        list(\n          ('a, 'a)\n        )\n      )\n    )\n  )\n) => [&gt; `Global of 'b | `Missing ]"},
"PrepareUtils/1077": {"name": "eitherFirst", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1077' data-type=\"(option('a), (option('a), 'a)) => (option('a), 'a)\">eitherFirst</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1078' data-type=\"option('a)\">opt</span>, (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1079' data-type=\"option('a)\">opt2</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1080' data-type=\"'a\">second</span>)) =&gt; {\n  (<span class=\"ident\" data-type=\"(option('a), option('a)) => option('a)\" data-global-use='PrepareUtils/1068'>either</span>(<span class=\"ident\" data-type=\"option('a)\" data-local-use='PrepareUtils/1078'>opt</span>, <span class=\"ident\" data-type=\"option('a)\" data-local-use='PrepareUtils/1079'>opt2</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1080'>second</span>)\n}", "values": [{"id": "PrepareUtils/1068", "name": "either", "moduleName": "PrepareUtils"}], "chars": 76, "lines": 2, "type": "(option('a), (option('a), 'a)) => (option('a), 'a)"},
"CliToInput/1016": {"name": "shouldExist", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1016' data-type=\"(string, string) => string\">shouldExist</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1017' data-type=\"string\">message</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1018' data-type=\"string\">v</span>) =&gt; <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1018'>v</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1018'>v</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"string => string\" data-global-use='CliToInput/1008'>fail</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1017'>message</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1018'>v</span>)", "values": [{"id": "CliToInput/1008", "name": "fail", "moduleName": "CliToInput"}], "chars": 82, "lines": 0, "type": "(string, string) => string"},
"Descartes/1305": {"name": "slice", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1305' data-type=\"(string, int, int) => string\">slice</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1306' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1307' data-type=\"int\">pstart</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1308' data-type=\"int\">pend</span>) =&gt; <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1306'>text</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1307'>pstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1308'>pend</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1307'>pstart</span>)", "values": [], "chars": 75, "lines": 0, "type": "(string, int, int) => string"},
"GenerateDoc/1085": {"name": "cleanForLink", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1085' data-type=\"string => string\">cleanForLink</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1086' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp</span>(<span class=\"string\" data-type=\"string\">&quot;[^a-zA-Z0-9_.-]&quot;</span>), <span class=\"string\" data-type=\"string\">&quot;-&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1086'>text</span>)", "values": [], "chars": 87, "lines": 0, "type": "string => string"},
"InputToModel/1047": {"name": "htmlName", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1047' data-type=\"string => string\">htmlName</span> = <span class=\"pattern-ident\" data-local-define='InputToModel/1048' data-type=\"string\">path</span> =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Path for html name &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1048'>path</span>);\n  if (<span class=\"ident\" data-type=\"string => bool\" data-global-use='InputToModel/1043'>isReadme</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1048'>path</span>)) {\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Readme folks &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1048'>path</span>);\n    <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1048'>path</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1048'>path</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"string\" data-type=\"string\">&quot;/readme.md&quot;</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.html&quot;</span>\n  } else {\n    <span class=\"ident\" data-type=\"string => string\" data-global-use='InputToModel/1045'>asHtml</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1048'>path</span>)\n  }\n}", "values": [{"id": "InputToModel/1043", "name": "isReadme", "moduleName": "InputToModel"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "InputToModel/1045", "name": "asHtml", "moduleName": "InputToModel"}], "chars": 265, "lines": 8, "type": "string => string"},
"PrepareUtils/1073": {"name": "mapFst", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1073' data-type=\"('a => 'a, ('a, 'a)) => ('a, 'a)\">mapFst</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1074' data-type=\"'a => 'a\">fn</span>, (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1075' data-type=\"'a\">a</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1076' data-type=\"'a\">b</span>)) =&gt; (<span class=\"ident\" data-type=\"'a => 'a\" data-local-use='PrepareUtils/1074'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1075'>a</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1076'>b</span>)", "values": [], "chars": 39, "lines": 0, "type": "('a => 'a, ('a, 'a)) => ('a, 'a)"},
"Descartes/1413": {"name": "unique", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1413' data-type=\"list('a) => list('a)\">unique</span> = <span class=\"pattern-ident\" data-local-define='Descartes/1414' data-type=\"list('a)\">list</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1415' data-type=\"Hashtbl.t('a, bool)\">hash</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t('a, bool)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">10</span>);\n  <span class=\"ident\" data-type=\"list('a)\" data-local-use='Descartes/1414'>list</span> <span class=\"operator\" data-type=\"(list('a), list('a) => list('a)) => list('a)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"('a => bool, list('a)) => list('a)\" data-stamp-missing>List.filter</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1416' data-type=\"'a\">item</span> =&gt; <span class=\"ident\" data-type=\"(Hashtbl.t('a, bool), 'a) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, bool)\" data-local-use='Descartes/1415'>hash</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1416'>item</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"constructor\" data-type=\"bool\">false</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> {<span class=\"ident\" data-type=\"(Hashtbl.t('a, bool), 'a, bool) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, bool)\" data-local-use='Descartes/1415'>hash</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Descartes/1416'>item</span>, <span class=\"constructor\" data-type=\"bool\">true</span>); <span class=\"constructor\" data-type=\"bool\">true</span>})\n}", "values": [], "chars": 160, "lines": 3, "type": "list('a) => list('a)"},
"Descartes/1319": {"name": "process", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1319' data-type=\"(\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(string, fullItem)\n) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\">process</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1320' data-type=\"string\">moduleName</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1321' data-type=\"list(Typedtree.structure_item)\">structure</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1322' data-type=\"string\">sourceText</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1323' data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\">modStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1324' data-type=\"Hashtbl.t(string, fullItem)\">typStamps</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1325' data-type=\"Hashtbl.t(string, fullItem)\">valStamps</span>) =&gt; {\n  /* let stamps = Hashtbl.create(100); */\n  /* let rootNode = Module(moduleName, topChildren); */\n  /* let items = ref([]);\n  let add = t =&gt; items := [t, ...items^]; */\n\n  /*\n   * I want to be able to line up a `Path.t` to a stamp.\n   * So that means:\n   * - each module needs separate lists of types, values, and submodules\n   */\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1326' data-type=\"int => string\">id</span> = <span class=\"pattern-ident\" data-local-define='Descartes/1327' data-type=\"int\">stamp</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1320'>moduleName</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;/&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1327'>stamp</span>);\n\n  /* TODO I could probably inline this into `chart` */\n  let rec <span class=\"pattern-ident\" data-local-define='Descartes/1328' data-type=\"list((int, node)) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\">collect</span> = (<span class=\"pattern-ident\" data-local-define='Descartes/1329' data-type=\"list((int, node))\">nodes</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(\n  (\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    ),\n    (int, node)\n  ) => (\n    list((string, string)),\n    list((string, string)),\n    list((string, string))\n  ),\n  (\n    list((string, string)),\n    list((string, string)),\n    list((string, string))\n  ),\n  list((int, node))\n) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\" data-stamp-missing>List.fold_left</span>(((<span class=\"pattern-ident\" data-local-define='Descartes/1330' data-type=\"list((string, string))\">types</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1331' data-type=\"list((string, string))\">values</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1332' data-type=\"list((string, string))\">modules</span>), (<span class=\"pattern-ident\" data-local-define='Descartes/1333' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1334' data-type=\"node\">node</span>)) =&gt; {\n      switch <span class=\"ident\" data-type=\"node\" data-local-use='Descartes/1334'>node</span> {\n      | <span class=\"pattern-constructor\" data-type=\"node\">Module</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1335' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1336' data-type=\"list((int, node))\">children</span>) =&gt; {\n        let <span class=\"pattern-ident\" data-local-define='Descartes/1342' data-type=\"(\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\">organized</span> = <span class=\"ident\" data-type=\"list((int, node)) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\" data-local-use='Descartes/1328'>collect</span>(<span class=\"ident\" data-type=\"list((int, node))\" data-local-use='Descartes/1336'>children</span>);\n        <span class=\"ident\" data-type=\"(\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t(\n  string,\n  (\n    string,\n    (\n      list((string, string)),\n      list((string, string)),\n      list((string, string))\n    )\n  )\n)\" data-local-use='Descartes/1323'>modStamps</span>, <span class=\"ident\" data-type=\"int => string\" data-local-use='Descartes/1326'>id</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1333'>stamp</span>), (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1335'>name</span>, <span class=\"ident\" data-type=\"(\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\" data-local-use='Descartes/1342'>organized</span>));\n        (<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1330'>types</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1331'>values</span>, [<span data-type=\"list((string, string))\">(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1335'>name</span>, <span class=\"ident\" data-type=\"int => string\" data-local-use='Descartes/1326'>id</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1333'>stamp</span>)), ...<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1332'>modules</span></span>])\n      }\n      | <span class=\"pattern-constructor\" data-type=\"node\">Item</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1337' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1338' data-type=\"item\">item</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1339' data-type=\"list((Location.t, list(tag)))\">tags</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1340' data-type=\"list(Path.t)\">vals</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1341' data-type=\"list(Path.t)\">typs</span>) =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='Descartes/1343' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1344' data-type=\"Hashtbl.t(string, fullItem)\">table</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1345' data-type=\"string\">typ</span>) = switch <span class=\"ident\" data-type=\"item\" data-local-use='Descartes/1338'>item</span> {\n        | <span class=\"pattern-constructor\" data-type=\"item\">Type</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1346' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1347' data-type=\"string\">typ</span>) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1346'>name</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1324'>typStamps</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1347'>typ</span>)\n        | <span class=\"pattern-constructor\" data-type=\"item\">Value</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1348' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1349' data-type=\"string\">typ</span>) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1348'>name</span>, <span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1325'>valStamps</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1349'>typ</span>)\n        };\n        <span class=\"ident\" data-type=\"(Hashtbl.t(string, fullItem), string, fullItem) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, fullItem)\" data-local-use='Descartes/1344'>table</span>, <span class=\"ident\" data-type=\"int => string\" data-local-use='Descartes/1326'>id</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1333'>stamp</span>), <span data-type=\"fullItem\">{id: <span class=\"ident\" data-type=\"int => string\" data-local-use='Descartes/1326'>id</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1333'>stamp</span>), <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1343'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1320'>moduleName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1345'>typ</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1337'>loc</span>, <span class=\"ident\" data-type=\"list((Location.t, list(tag)))\" data-local-use='Descartes/1339'>tags</span>, <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1340'>vals</span>, <span class=\"ident\" data-type=\"list(Path.t)\" data-local-use='Descartes/1341'>typs</span>, text: <span class=\"ident\" data-type=\"(string, int, int) => string\" data-global-use='Descartes/1305'>slice</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1322'>sourceText</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1337'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1337'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>)}</span>);\n        switch <span class=\"ident\" data-type=\"item\" data-local-use='Descartes/1338'>item</span> {\n        | <span class=\"pattern-constructor\" data-type=\"item\">Type</span>(_) =&gt; ([<span data-type=\"list((string, string))\">(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1343'>name</span>, <span class=\"ident\" data-type=\"int => string\" data-local-use='Descartes/1326'>id</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1333'>stamp</span>)), ...<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1330'>types</span></span>], <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1331'>values</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1332'>modules</span>)\n        | <span class=\"pattern-constructor\" data-type=\"item\">Value</span>(_) =&gt; (<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1330'>types</span>, [<span data-type=\"list((string, string))\">(<span class=\"ident\" data-type=\"string\" data-local-use='Descartes/1343'>name</span>, <span class=\"ident\" data-type=\"int => string\" data-local-use='Descartes/1326'>id</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1333'>stamp</span>)), ...<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1331'>values</span></span>], <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Descartes/1332'>modules</span>)\n        }\n      }\n      }\n    }, (<span class=\"constructor\" data-type=\"list((string, string))\">[]</span>, <span class=\"constructor\" data-type=\"list((string, string))\">[]</span>, <span class=\"constructor\" data-type=\"list((string, string))\">[]</span>), <span class=\"ident\" data-type=\"list((int, node))\" data-local-use='Descartes/1329'>nodes</span>)\n  };\n\n  <span class=\"ident\" data-type=\"list((int, node)) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)\" data-local-use='Descartes/1328'>collect</span>(<span class=\"ident\" data-type=\"list(Typedtree.structure_item) => list((int, node))\" data-global-use='Descartes/1276'>chart</span>(<span class=\"ident\" data-type=\"list(Typedtree.structure_item)\" data-local-use='Descartes/1321'>structure</span>))\n}", "values": [{"id": "Descartes/1305", "name": "slice", "moduleName": "Descartes"}, {"id": "Descartes/1276", "name": "chart", "moduleName": "Descartes"}], "chars": 1524, "lines": 38, "type": "(\n  string,\n  list(Typedtree.structure_item),\n  string,\n  Hashtbl.t(\n    string,\n    (\n      string,\n      (\n        list((string, string)),\n        list((string, string)),\n        list((string, string))\n      )\n    )\n  ),\n  Hashtbl.t(string, fullItem),\n  Hashtbl.t(string, fullItem)\n) => (\n  list((string, string)),\n  list((string, string)),\n  list((string, string))\n)"},
"PrintType/1033": {"name": "sepd_list", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1033' data-type=\"(Pretty.doc, list('a), 'a => Pretty.doc) => Pretty.doc\">sepd_list</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1034' data-type=\"Pretty.doc\">sep</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1035' data-type=\"list('a)\">items</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1036' data-type=\"'a => Pretty.doc\">loop</span>) =&gt; {\n  let rec <span class=\"pattern-ident\" data-local-define='PrintType/1037' data-type=\"list('a) => Pretty.doc\">recur</span> = <span class=\"pattern-ident\" data-local-define='PrintType/1038' data-type=\"list('a)\">items</span> =&gt; switch <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrintType/1038'>items</span> {\n    | <span class=\"pattern-constructor\" data-type=\"list('a)\">[]</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n    | [<span data-type=\"list('a)\"><span class=\"pattern-ident\" data-local-define='PrintType/1039' data-type=\"'a\"><span class=\"pattern-constructor\" data-type=\"list('a)\">one</span></span></span>] =&gt; <span class=\"ident\" data-type=\"'a => Pretty.doc\" data-local-use='PrintType/1036'>loop</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrintType/1039'>one</span>)\n    | [<span data-type=\"list('a)\"><span class=\"pattern-ident\" data-local-define='PrintType/1040' data-type=\"'a\">one</span>, ...<span class=\"pattern-ident\" data-local-define='PrintType/1041' data-type=\"list('a)\">more</span></span>] =&gt; <span class=\"ident\" data-type=\"'a => Pretty.doc\" data-local-use='PrintType/1036'>loop</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrintType/1040'>one</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc\" data-local-use='PrintType/1034'>sep</span> <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"list('a) => Pretty.doc\" data-local-use='PrintType/1037'>recur</span>(<span class=\"ident\" data-type=\"list('a)\" data-local-use='PrintType/1041'>more</span>)\n  };\n  <span class=\"ident\" data-type=\"list('a) => Pretty.doc\" data-local-use='PrintType/1037'>recur</span>(<span class=\"ident\" data-type=\"list('a)\" data-local-use='PrintType/1035'>items</span>)\n}", "values": [{"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}], "chars": 209, "lines": 7, "type": "(Pretty.doc, list('a), 'a => Pretty.doc) => Pretty.doc"},
"CodeSnippets/1058": {"name": "sprintf", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1058' data-type=\"Pervasives.format('a, unit, string) => 'a\">sprintf</span> = <span class=\"ident\" data-type=\"Pervasives.format('a, unit, string) => 'a\" data-stamp-missing>Printf.sprintf</span>", "values": [], "chars": 28, "lines": 0, "type": "Pervasives.format('a, unit, string) => 'a"},
"SerializeBinary/1008": {"name": "array_str1", "moduleName": "SerializeBinary", "html": "let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1008' data-type=\"array(string)\">array_str1</span> = <span class=\"ident\" data-type=\"(int, int => string) => array(string)\" data-stamp-missing>Array.init</span>(<span class=\"int\" data-type=\"int\">256</span>, (<span class=\"pattern-ident\" data-local-define='SerializeBinary/1009' data-type=\"int\">i</span>) =&gt; <span class=\"ident\" data-type=\"(int, char) => string\" data-stamp-missing>String.make</span>(<span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"int => char\" data-stamp-missing>Char.chr</span>(<span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1009'>i</span>)))", "values": [], "chars": 68, "lines": 0, "type": "array(string)"},
"Descartes/1014": {"name": "showType", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1014' data-type=\"Types.type_expr => string\">showType</span> = <span class=\"pattern-ident\" data-local-define='Descartes/1015' data-type=\"Types.type_expr\">typ</span> =&gt; <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-global-use='PrintType/1201'>PrintType.default</span>.<span class=\"field\" data-type=\"(PrintType.T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-global-use='PrintType/1201'>PrintType.default</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Descartes/1015'>typ</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>GenerateDoc.prettyString</span>", "values": [{"id": "PrintType/1201", "name": "default", "moduleName": "PrintType"}, {"id": "GenerateDoc/1079", "name": "prettyString", "moduleName": "GenerateDoc"}], "chars": 96, "lines": 0, "type": "Types.type_expr => string"},
"MainAux/1197": {"name": "getOrder", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1197' data-type=\"string => string\">getOrder</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1198' data-type=\"string\">path</span> =&gt; {\n  if (<span class=\"ident\" data-type=\"string => bool\" data-global-use='MainAux/1193'>isReadme</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1198'>path</span>)) {\n    &quot;&quot;\n  } else {\n    <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1198'>path</span>\n  }\n}", "values": [{"id": "MainAux/1193", "name": "isReadme", "moduleName": "MainAux"}], "chars": 81, "lines": 6, "type": "string => string"},
"PrintType/1045": {"name": "indentGroup", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1045' data-type=\"Pretty.doc => Pretty.doc\">indentGroup</span> = <span class=\"pattern-ident\" data-local-define='PrintType/1046' data-type=\"Pretty.doc\">doc</span> =&gt; <span class=\"ident\" data-type=\"(int, Pretty.doc) => Pretty.doc\" data-stamp-missing>Pretty.indent</span>(<span class=\"int\" data-type=\"int\">2</span>, <span class=\"ident\" data-type=\"Pretty.doc => Pretty.doc\" data-stamp-missing>Pretty.group</span>(<span class=\"ident\" data-type=\"Pretty.doc\" data-local-use='PrintType/1046'>doc</span>))", "values": [], "chars": 60, "lines": 0, "type": "Pretty.doc => Pretty.doc"},
"MainAux/1256": {"name": "help", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1256' data-type=\"string\">help</span> = <span class=\"string\" data-type=\"string\">{|\n# docre - a clean &amp; easy documentation generator\n\nUsage: docre [options]\n\n  --root (default: current directory)\n      expected to contain bsconfig.json, and bs-platform in the node_modules\n  --target (default: {root}/docs)\n      where we should write out the docs\n  --name (default: the name of the directory, capitalized)\n      what this project is called\n  --cmi-directory\n  --bs-root (default: root/node_modules/bs-platform)\n  --doctest (default: false)\n      execute the documentation snippets to make sure they run w/o erroring\n  -h, --help\n      print this help\n|}</span>", "values": [], "chars": 584, "lines": 17, "type": "string"},
"CompileCode/1010": {"name": "block", "moduleName": "CompileCode", "html": "let <span class=\"pattern-ident\" data-local-define='CompileCode/1010' data-type=\"(\n  ~editingEnabled: bool,\n  ~bundle: string => string,\n  State.bucklescriptOptions,\n  State.Model.package,\n  int,\n  (\n    string,\n    string,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n) => State.Model.codeBlock\">block</span> = (\n  ~<span class=\"pattern-ident\" data-local-define='CompileCode/1011' data-type=\"bool\">editingEnabled</span>,\n  ~<span class=\"pattern-ident\" data-local-define='CompileCode/1012' data-type=\"string => string\">bundle</span>,\n  {<span class=\"pattern-ident\" data-local-define='CompileCode/1013' data-type=\"string\">State.bsRoot</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1014' data-type=\"string\">refmt</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1016' data-type=\"string\">tmp</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1017' data-type=\"list((string, string))\">compiledDependencyDirectories</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1015' data-type=\"option(string)\">browserCompilerPath</span>},\n  {<span class=\"pattern-ident\" data-local-define='CompileCode/1040' data-type=\"string\">State.Model.name</span>},\n  <span class=\"pattern-ident\" data-local-define='CompileCode/1041' data-type=\"int\">i</span>,\n  (<span class=\"pattern-ident\" data-local-define='CompileCode/1042' data-type=\"string\">page</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1043' data-type=\"string\">lang</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1044' data-type=\"string\">raw</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1045' data-type=\"string\">fullContent</span>, <span class=\"pattern-ident\" data-local-define='CompileCode/1046' data-type=\"State.Model.codeOptions\">options</span>)\n) =&gt; {\n  open State.Model;\n  let <span class=\"pattern-ident\" data-local-define='CompileCode/1051' data-type=\"string\">name</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='CompileCode/1008'>sanitize</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1040'>name</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;__&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string => string\" data-global-use='CompileCode/1008'>sanitize</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1042'>page</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;_CODE_BLOCK_&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CompileCode/1041'>i</span>);\n  let <span class=\"pattern-ident\" data-local-define='CompileCode/1052' data-type=\"string\">reasonContent</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='CodeSnippets/1093'>CodeSnippets.removeHashes</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1045'>fullContent</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; /* &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1051'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; */&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='CompileCode/1053' data-type=\"State.Model.compilationResult\">compilationResult</span> = <span class=\"ident\" data-type=\"(\n  string,\n  string,\n  string,\n  string,\n  State.Model.codeOptions,\n  string,\n  list(string)\n) => State.Model.compilationResult\" data-global-use='CodeSnippets/1231'>CodeSnippets.processBlock</span>(\n    <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1013'>bsRoot</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1016'>tmp</span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1051'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1014'>refmt</span>,\n    <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CompileCode/1046'>options</span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1052'>reasonContent</span>,\n    <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CompileCode/1017'>compiledDependencyDirectories</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>fst</span>)\n  );\n  let <span class=\"pattern-ident\" data-local-define='CompileCode/1054' data-type=\"string\">html</span> = <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CompileCode/1046'>options</span>.<span class=\"field\" data-type=\"State.Model.codeDisplay\">codeDisplay</span>.<span class=\"field\" data-type=\"bool\">hide</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(\n  ~editingEnabled: bool,\n  int,\n  string,\n  State.Model.codeOptions,\n  State.Model.compilationResult,\n  string => string\n) => string\" data-global-use='CodeSnippets/1064'>CodeSnippets.highlight</span>(\n    ~<span class=\"ident\" data-type=\"bool\" data-local-use='CompileCode/1011'>editingEnabled</span>,\n    <span class=\"ident\" data-type=\"int\" data-local-use='CompileCode/1041'>i</span>, /* TODO stop using this data structure, and pass in the name */\n    <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1045'>fullContent</span>,\n    <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CompileCode/1046'>options</span>,\n    <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CompileCode/1053'>compilationResult</span>,\n    <span class=\"ident\" data-type=\"string => string\" data-local-use='CompileCode/1012'>bundle</span>\n  );\n  <span data-type=\"State.Model.codeBlock\">{<span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1043'>State.Model.lang</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1054'>html</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1044'>raw</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1042'>page</span>, filePath: <span class=\"ident\" data-type=\"string\" data-local-use='CompileCode/1051'>name</span>, <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CompileCode/1053'>compilationResult</span>}</span>\n}", "values": [{"id": "CompileCode/1008", "name": "sanitize", "moduleName": "CompileCode"}, {"id": "CodeSnippets/1093", "name": "removeHashes", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1231", "name": "processBlock", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1064", "name": "highlight", "moduleName": "CodeSnippets"}], "chars": 883, "lines": 27, "type": "(\n  ~editingEnabled: bool,\n  ~bundle: string => string,\n  State.bucklescriptOptions,\n  State.Model.package,\n  int,\n  (\n    string,\n    string,\n    string,\n    string,\n    State.Model.codeOptions\n  )\n) => State.Model.codeBlock"},
"NewMain/1087": {"name": "main", "moduleName": "NewMain", "html": "let <span class=\"pattern-ident\" data-local-define='NewMain/1087' data-type=\"unit => unit\">main</span> = <span class=\"pattern-constructor\" data-type=\"unit\">()</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1088' data-type=\"State.Input.t\">input</span> = <span class=\"ident\" data-type=\"array(string) => State.Input.t\" data-global-use='CliToInput/1140'>CliToInput.parse</span>(<span class=\"ident\" data-type=\"array(string)\" data-stamp-missing>Sys.argv</span>);\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1094' data-type=\"State.Model.package\">package</span> = <span class=\"ident\" data-type=\"State.Input.packageInput => State.Model.package\" data-global-use='InputToModel/1081'>InputToModel.package</span>(<span class=\"ident\" data-type=\"State.Input.t\" data-local-use='NewMain/1088'>input</span>.<span class=\"field\" data-type=\"State.Input.packageInput\">Input.packageInput</span>);\n  let <span class=\"pattern-ident\" data-local-define='NewMain/1095' data-type=\"option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\">compilationResults</span> = <span class=\"ident\" data-type=\"State.Model.package => option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\" data-global-use='NewMain/1084'>compilePackage</span>(<span class=\"ident\" data-type=\"State.Model.package\" data-local-use='NewMain/1094'>package</span>);\n  /* outputPackage(package, allCodeBlocks, input.Input.target); */\n  <span class=\"ident\" data-type=\"(\n  State.Model.package,\n  option(\n    (\n      list(State.Model.codeBlock),\n      option((string, option((string, Buffer.t))))\n    )\n  ),\n  State.Input.target,\n  State.Input.env\n) => unit\" data-global-use='ModelToOutput/1166'>ModelToOutput.package</span>(<span class=\"ident\" data-type=\"State.Model.package\" data-local-use='NewMain/1094'>package</span>, <span class=\"ident\" data-type=\"option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\" data-local-use='NewMain/1095'>compilationResults</span>, <span class=\"ident\" data-type=\"State.Input.t\" data-local-use='NewMain/1088'>input</span>.<span class=\"field\" data-type=\"State.Input.target\">Input.target</span>, <span class=\"ident\" data-type=\"State.Input.t\" data-local-use='NewMain/1088'>input</span>.<span class=\"field\" data-type=\"State.Input.env\">Input.env</span>);\n}", "values": [{"id": "CliToInput/1140", "name": "parse", "moduleName": "CliToInput"}, {"id": "InputToModel/1081", "name": "package", "moduleName": "InputToModel"}, {"id": "NewMain/1084", "name": "compilePackage", "moduleName": "NewMain"}, {"id": "ModelToOutput/1166", "name": "package", "moduleName": "ModelToOutput"}], "chars": 336, "lines": 6, "type": "unit => unit"},
"CodeSnippets/1176": {"name": "getSourceDirectories", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1176' data-type=\"(string, Json.t) => list(string)\">getSourceDirectories</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1177' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1178' data-type=\"Json.t\">config</span>) =&gt; {\n  let rec <span class=\"pattern-ident\" data-local-define='CodeSnippets/1179' data-type=\"(string, Json.t) => list(string)\">handleItem</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1180' data-type=\"string\">current</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1181' data-type=\"Json.t\">item</span>) =&gt; {\n    switch <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1181'>item</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.Array</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1182' data-type=\"list(Json.t)\">contents</span>) =&gt; <span class=\"ident\" data-type=\"(Json.t => list(string), list(Json.t)) => list(list(string))\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-local-use='CodeSnippets/1179'>handleItem</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1180'>current</span>), <span class=\"ident\" data-type=\"list(Json.t)\" data-local-use='CodeSnippets/1182'>contents</span>) <span class=\"operator\" data-type=\"(\n  list(list(string)),\n  list(list(string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list(string)) => list(string)\" data-stamp-missing>List.concat</span>\n    | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.String</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1183' data-type=\"string\">text</span>) =&gt; [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1180'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1183'>text</span></span></span>]\n    | <span class=\"pattern-constructor\" data-type=\"Json.t\">Json.Object</span>(_) =&gt;\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1184' data-type=\"string\">dir</span> = <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;dir&quot;</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1181'>item</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"string\" data-type=\"string\">&quot;Must specify directory&quot;</span>;\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1185' data-type=\"list(string)\">backend</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1181'>item</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;backend&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(list(Json.t))) => option(\n  list(Json.t)\n)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(list(Json.t))\" data-stamp-missing>Json.array</span> <span class=\"operator\" data-type=\"(\n  option(list(Json.t)),\n  list(Json.t) => list(string)\n) => option(list(string))\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(Json.t => option(string), list(Json.t)) => list(string)\" data-global-use='CodeSnippets/1170'>optMap</span>(<span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span>) <span class=\"operator\" data-type=\"(option(list(string)), list(string)) => list(string)\" data-global-use='Infix/1012'>|?</span> [<span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\"><span class=\"constructor\" data-type=\"list(string)\">&quot;js&quot;</span></span></span>];\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1186' data-type=\"string\">typ</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1181'>item</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;type&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"string\" data-type=\"string\">&quot;lib&quot;</span>;\n      if (<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1186'>typ</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;dev&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;js&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1185'>backend</span>)) {\n        <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n      } else {\n        [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1180'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1184'>dir</span>, ...switch (<span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1181'>item</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;subdirs&quot;</span>)) {\n        | <span class=\"pattern-constructor\" data-type=\"option(Json.t)\">None</span> =&gt; <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n        | <span class=\"pattern-constructor\" data-type=\"option(Json.t)\">Some</span>(<span class=\"pattern-constructor\" data-type=\"Json.t\">Json.True</span>) =&gt; <span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.collectDirs</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1177'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1180'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1184'>dir</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1177'>base</span>))\n        | <span class=\"pattern-constructor\" data-type=\"option(Json.t)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1187' data-type=\"Json.t\">item</span>) =&gt; <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-local-use='CodeSnippets/1179'>handleItem</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1180'>current</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1184'>dir</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1187'>item</span>)\n        }</span>]\n      }\n    | _ =&gt; <span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Invalid subdirs entry&quot;</span>)\n    };\n  };\n  <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1178'>config</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;sources&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => list(string)) => option(\n  list(string)\n)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-local-use='CodeSnippets/1179'>handleItem</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>) <span class=\"operator\" data-type=\"(option(list(string)), list(string)) => list(string)\" data-global-use='Infix/1012'>|?</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n}", "values": [{"id": "CodeSnippets/1170", "name": "optMap", "moduleName": "CodeSnippets"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}], "chars": 976, "lines": 22, "type": "(string, Json.t) => list(string)"},
"MainAux/1100": {"name": "generateMultiple", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1100' data-type=\"(\n  ~bsRoot: string,\n  ~editingEnabled: bool,\n  ~test: bool,\n  string,\n  string,\n  option(string),\n  string,\n  list(string),\n  list((string, option(string), Omd.t, string))\n) => unit\">generateMultiple</span> = (~<span class=\"pattern-ident\" data-local-define='MainAux/1101' data-type=\"string\">bsRoot</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1102' data-type=\"bool\">editingEnabled</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1103' data-type=\"bool\">test</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1104' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1105' data-type=\"string\">compiledBase</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1106' data-type=\"option(string)\">url</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1107' data-type=\"string\">dest</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1108' data-type=\"list(string)\">cmts</span>, markdowns: <span class=\"type-constructor\" data-local-use='MainAux/9'>list</span>((<span class=\"type-constructor\" data-local-use='MainAux/3'>string</span>, <span class=\"type-constructor\" data-local-use='MainAux/10'>option</span>(<span class=\"type-constructor\" data-local-use='MainAux/3'>string</span>), <span class=\"type-constructor\" data-stamp-missing>Omd.t</span>, <span class=\"type-constructor\" data-local-use='MainAux/3'>string</span>))) =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Files.mkdirp</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1110' data-type=\"list(string)\">cmts</span> = <span class=\"ident\" data-type=\"list(string) => list(string)\" data-global-use='MainAux/1084'>filterDuplicates</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1108'>cmts</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1111' data-type=\"string\">cssLoc</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>, <span class=\"string\" data-type=\"string\">&quot;styles.css&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1112' data-type=\"string\">jsLoc</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>, <span class=\"string\" data-type=\"string\">&quot;script.js&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1113' data-type=\"string\">allDeps</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>, <span class=\"string\" data-type=\"string\">&quot;all-deps.js&quot;</span>);\n\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1111'>cssLoc</span>, <span class=\"ident\" data-type=\"string\" data-global-use='DocsTemplate/1010'>DocsTemplate.styles</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1112'>jsLoc</span>, <span class=\"ident\" data-type=\"string\" data-global-use='DocsTemplate/1012'>DocsTemplate.script</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1114' data-type=\"list(string)\">names</span> = <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1068'>getName</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1110'>cmts</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1115' data-type=\"(\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\">searchHref</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1116' data-type=\"list(string)\">names</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1117' data-type=\"(string, list(string), CmtFindStamps.T.pathType)\">doc</span>) =&gt; {\n    switch (<span class=\"ident\" data-type=\"(\n  string,\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\" data-global-use='Docs/1009'>Docs.formatHref</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1116'>names</span>, <span class=\"ident\" data-type=\"(string, list(string), CmtFindStamps.T.pathType)\" data-local-use='MainAux/1117'>doc</span>)) {\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n    /* | Some(href) when href != &quot;&quot; &amp;&amp; href.[0] == &#39;#&#39; =&gt; Some(href) */\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1118' data-type=\"string\">href</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"string\" data-type=\"string\">&quot;./api/&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1118'>href</span>)\n    }\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1119' data-type=\"list(\n  (\n    string,\n    string,\n    list(\n      (\n        int,\n        (string, list(string), CmtFindStamps.T.pathType)\n      )\n    ),\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\">processedCmts</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1110'>cmts</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list(\n    (\n      string,\n      string,\n      list(\n        (\n          int,\n          (\n            string,\n            list(string),\n            CmtFindStamps.T.pathType\n          )\n        )\n      ),\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  )\n) => list(\n  (\n    string,\n    string,\n    list(\n      (\n        int,\n        (string, list(string), CmtFindStamps.T.pathType)\n      )\n    ),\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  string => (\n    string,\n    string,\n    list(\n      (\n        int,\n        (string, list(string), CmtFindStamps.T.pathType)\n      )\n    ),\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  ),\n  list(string)\n) => list(\n  (\n    string,\n    string,\n    list(\n      (\n        int,\n        (string, list(string), CmtFindStamps.T.pathType)\n      )\n    ),\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1120' data-type=\"string\">cmt</span> =&gt; <span class=\"ident\" data-type=\"(string, string) => (\n  string,\n  string,\n  list(\n    (\n      int,\n      (string, list(string), CmtFindStamps.T.pathType)\n    )\n  ),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='MainAux/1070'>processCmt</span>(<span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1068'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1120'>cmt</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1120'>cmt</span>));\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1121' data-type=\"Omd.element => option(string)\">codeBlocksOverride</span> = <span class=\"ident\" data-type=\"(\n  ~bsRoot: string,\n  ~editingEnabled: bool,\n  ~test: bool,\n  list((string, option(string), Omd.t, string)),\n  list(\n    (\n      string,\n      string,\n      list(\n        (\n          int,\n          (\n            string,\n            list(string),\n            CmtFindStamps.T.pathType\n          )\n        )\n      ),\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  ),\n  string,\n  string,\n  Omd.element\n) => option(string)\" data-global-use='CodeSnippets/1339'>CodeSnippets.process</span>(~<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1101'>bsRoot</span>, ~<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1102'>editingEnabled</span>, ~<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1103'>test</span>, <span class=\"ident\" data-type=\"list((string, option(string), Omd.t, string))\" data-local-use='MainAux/1109'>markdowns</span>, <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    string,\n    list(\n      (\n        int,\n        (string, list(string), CmtFindStamps.T.pathType)\n      )\n    ),\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\" data-local-use='MainAux/1119'>processedCmts</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1104'>base</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>);\n\n  let (<span class=\"pattern-ident\" data-local-define='MainAux/1122' data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\">searchables</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1123' data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.Representation.t\n) => string\">processDocString</span>) = <span class=\"ident\" data-type=\"(string, Omd.element => option(string)) => (\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  ),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.Representation.t\n  ) => string\n)\" data-global-use='Markdown/1054'>Markdown.makeDocStringProcessor</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>, <span class=\"ident\" data-type=\"Omd.element => option(string)\" data-local-use='MainAux/1121'>codeBlocksOverride</span>);\n\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1124' data-type=\"string\">api</span> = <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;api&quot;</span>;\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Files.mkdirp</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1124'>api</span>);\n  <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    string,\n    list(\n      (\n        int,\n        (string, list(string), CmtFindStamps.T.pathType)\n      )\n    ),\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\" data-local-use='MainAux/1119'>processedCmts</span> <span class=\"operator\" data-type=\"(\n  list(\n    (\n      string,\n      string,\n      list(\n        (\n          int,\n          (\n            string,\n            list(string),\n            CmtFindStamps.T.pathType\n          )\n        )\n      ),\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  ),\n  list(\n    (\n      string,\n      string,\n      list(\n        (\n          int,\n          (\n            string,\n            list(string),\n            CmtFindStamps.T.pathType\n          )\n        )\n      ),\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  ) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (\n    string,\n    string,\n    list(\n      (\n        int,\n        (string, list(string), CmtFindStamps.T.pathType)\n      )\n    ),\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  ) => unit,\n  list(\n    (\n      string,\n      string,\n      list(\n        (\n          int,\n          (\n            string,\n            list(string),\n            CmtFindStamps.T.pathType\n          )\n        )\n      ),\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  )\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='MainAux/1125' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1126' data-type=\"string\">cmt</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1127' data-type=\"list(\n  (int, (string, list(string), CmtFindStamps.T.pathType))\n)\">stamps</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1128' data-type=\"option(Omd.t)\">topdoc</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1129' data-type=\"list(State.Model.Docs.doc)\">allDocs</span>)) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1130' data-type=\"string\">name</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1068'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1126'>cmt</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1131' data-type=\"string\">output</span> = <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;api&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1130'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>;\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1132' data-type=\"string => string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1131'>output</span>));\n\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1133' data-type=\"list((string, string))\">markdowns</span> = <span class=\"ident\" data-type=\"(\n  (string, option(string), Omd.t, string) => (\n    string,\n    string\n  ),\n  list((string, option(string), Omd.t, string))\n) => list((string, string))\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='MainAux/1134' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1135' data-type=\"option(string)\">source</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1136' data-type=\"Omd.t\">_contents</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1137' data-type=\"string\">name</span>)) =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1132'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1134'>path</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1137'>name</span>), <span class=\"ident\" data-type=\"list((string, option(string), Omd.t, string))\" data-local-use='MainAux/1109'>markdowns</span>);\n\n    /* let (stamps, topdoc, allDocs) = processCmt(name, cmt); */\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1138' data-type=\"PrintType.T.stringifier\">searchPrinter</span> = <span class=\"ident\" data-type=\"(\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  ) => option(string),\n  list(\n    (\n      int,\n      (\n        string,\n        list(string),\n        CmtFindStamps.T.pathType\n      )\n    )\n  )\n) => PrintType.T.stringifier\" data-global-use='GenerateDoc/1052'>GenerateDoc.printer</span>(<span class=\"ident\" data-type=\"(\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\" data-local-use='MainAux/1115'>searchHref</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1114'>names</span>), <span class=\"ident\" data-type=\"list(\n  (int, (string, list(string), CmtFindStamps.T.pathType))\n)\" data-local-use='MainAux/1127'>stamps</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1140' data-type=\"option(string)\">sourceUrl</span> = <span class=\"ident\" data-type=\"option(string)\" data-local-use='MainAux/1106'>url</span> <span class=\"operator\" data-type=\"(option(string), string => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> (<span class=\"pattern-ident\" data-local-define='MainAux/1141' data-type=\"string\">url</span> =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='MainAux/1142' data-type=\"string\">relative</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1105'>compiledBase</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1126'>cmt</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>;\n      let <span class=\"pattern-ident\" data-local-define='MainAux/1143' data-type=\"bool\">isInterface</span> = <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1126'>cmt</span>, <span class=\"string\" data-type=\"string\">&quot;i&quot;</span>);\n      let <span class=\"pattern-ident\" data-local-define='MainAux/1144' data-type=\"string\">re</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1104'>base</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1142'>relative</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1143'>isInterface</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;.rei&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;.re&quot;</span>);\n      let <span class=\"pattern-ident\" data-local-define='MainAux/1145' data-type=\"string\">ml</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1104'>base</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1142'>relative</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1143'>isInterface</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;.mli&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;.ml&quot;</span>);\n      if (<span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1144'>re</span>)) {\n        <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1141'>url</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1142'>relative</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1143'>isInterface</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;.rei&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;.re&quot;</span>))\n      } else if (<span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1145'>ml</span>)) {\n        <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1141'>url</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1142'>relative</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1143'>isInterface</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;.mli&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;.ml&quot;</span>))\n      } else {\n        <span class=\"constructor\" data-type=\"option(string)\">None</span>\n      }\n    });\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1146' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option(string),\n  ~jsLoc: option(string),\n  ~processDocString: GenerateDoc.t,\n  string,\n  option(Omd.t),\n  list(\n    (\n      int,\n      (string, list(string), CmtFindStamps.T.pathType)\n    )\n  ),\n  list(State.Model.Docs.doc),\n  list(string),\n  list((string, string))\n) => string\" data-global-use='Docs/1033'>Docs.generate</span>(~<span class=\"ident\" data-type=\"option(string)\" data-local-use='MainAux/1140'>sourceUrl</span>, ~relativeToRoot=<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1132'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>), ~cssLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1132'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1111'>cssLoc</span>)), ~jsLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1132'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1112'>jsLoc</span>)), ~processDocString=<span class=\"ident\" data-type=\"(PrintType.T.stringifier, string, string) => GenerateDoc.t\" data-local-use='MainAux/1123'>processDocString</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='MainAux/1138'>searchPrinter</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1131'>output</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1130'>name</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1130'>name</span>, <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='MainAux/1128'>topdoc</span>, <span class=\"ident\" data-type=\"list(\n  (int, (string, list(string), CmtFindStamps.T.pathType))\n)\" data-local-use='MainAux/1127'>stamps</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='MainAux/1129'>allDocs</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1114'>names</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='MainAux/1133'>markdowns</span>);\n\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1131'>output</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1146'>text</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  });\n\n  (<span class=\"ident\" data-type=\"list((string, option(string), Omd.t, string))\" data-local-use='MainAux/1109'>markdowns</span>) <span class=\"operator\" data-type=\"(\n  list((string, option(string), Omd.t, string)),\n  list(\n    (\n      string,\n      option(string),\n      Omd.t,\n      string\n    )\n  ) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, option(string), Omd.t, string) => unit,\n  list((string, option(string), Omd.t, string))\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='MainAux/1147' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1148' data-type=\"option(string)\">source</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1149' data-type=\"Omd.Representation.t\">contents</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1150' data-type=\"string\">name</span>)) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1151' data-type=\"string => string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1147'>path</span>));\n    let (<span class=\"pattern-ident\" data-local-define='MainAux/1152' data-type=\"Pervasives.ref(list((int, string, string, string)))\">tocItems</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1153' data-type=\"Omd.element => option(string)\">override</span>) = <span class=\"ident\" data-type=\"(\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  Omd.element => option(string)\n)\" data-global-use='GenerateDoc/1130'>GenerateDoc.trackToc</span>(~lower=<span class=\"constructor\" data-type=\"bool\">true</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"(\n  string,\n  string,\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)\" data-global-use='Markdown/1008'>Markdown.linkifyMarkdown</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1147'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>));\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1154' data-type=\"PrintType.T.stringifier\">searchPrinter</span> = <span class=\"ident\" data-type=\"(\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  ) => option(string),\n  list(\n    (\n      int,\n      (\n        string,\n        list(string),\n        'a\n      )\n    )\n  )\n) => PrintType.T.stringifier\" data-global-use='GenerateDoc/1052'>GenerateDoc.printer</span>(<span class=\"ident\" data-type=\"(\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\" data-local-use='MainAux/1115'>searchHref</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1114'>names</span>), <span class=\"constructor\" data-type=\"list((int, (string, list(string), 'a)))\">[]</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1155' data-type=\"string\">main</span> = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.Representation.t\n) => string\" data-local-use='MainAux/1123'>processDocString</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='MainAux/1154'>searchPrinter</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1147'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1150'>name</span>, ~<span class=\"ident\" data-type=\"Omd.element => option(string)\" data-local-use='MainAux/1153'>override</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1150'>name</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">None</span>, <span class=\"ident\" data-type=\"Omd.Representation.t\" data-local-use='MainAux/1149'>contents</span>);\n\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1156' data-type=\"option(string)\">sourceUrl</span> = <span class=\"ident\" data-type=\"option(string)\" data-local-use='MainAux/1106'>url</span> <span class=\"operator\" data-type=\"(option(string), string => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> (<span class=\"pattern-ident\" data-local-define='MainAux/1157' data-type=\"string\">url</span> =&gt; {\n      <span class=\"ident\" data-type=\"option(string)\" data-local-use='MainAux/1148'>source</span> <span class=\"operator\" data-type=\"(option(string), string => string) => option(string)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (<span class=\"pattern-ident\" data-local-define='MainAux/1158' data-type=\"string\">source</span> =&gt; {\n        let <span class=\"pattern-ident\" data-local-define='MainAux/1159' data-type=\"string\">relative</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1158'>source</span>);\n        <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1157'>url</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1104'>base</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1159'>relative</span>\n      })\n    });\n\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1160' data-type=\"list((string, string))\">markdowns</span> = <span class=\"ident\" data-type=\"(\n  (string, option(string), Omd.t, string) => (\n    string,\n    string\n  ),\n  list((string, option(string), Omd.t, string))\n) => list((string, string))\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='MainAux/1161' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1162' data-type=\"option(string)\">_source</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1163' data-type=\"Omd.t\">_contents</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1164' data-type=\"string\">name</span>)) =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1151'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1161'>path</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1164'>name</span>), <span class=\"ident\" data-type=\"list((string, option(string), Omd.t, string))\" data-local-use='MainAux/1109'>markdowns</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1165' data-type=\"list((string, string))\">projectListing</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1114'>names</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1166' data-type=\"string\">name</span> =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1151'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1124'>api</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1166'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1166'>name</span>));\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1167' data-type=\"string\">html</span> = <span class=\"ident\" data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option(string),\n  ~jsLoc: option(string),\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\" data-global-use='Docs/1019'>Docs.page</span>(~<span class=\"ident\" data-type=\"option(string)\" data-local-use='MainAux/1156'>sourceUrl</span>, ~relativeToRoot=<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1151'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>), ~cssLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1151'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1111'>cssLoc</span>)), ~jsLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1151'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1112'>jsLoc</span>)), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1150'>name</span>, <span class=\"ident\" data-type=\"list((int, string, string, string)) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='MainAux/1152'>tocItems</span><span class=\"operator\" data-type=\"Pervasives.ref(list((int, string, string, string))) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>^</span>), <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='MainAux/1165'>projectListing</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='MainAux/1160'>markdowns</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1155'>main</span>);\n\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1147'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1167'>html</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  });\n\n  {\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1168' data-type=\"string\">path</span> = <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;search.html&quot;</span>;\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1169' data-type=\"string => string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1168'>path</span>));\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1170' data-type=\"list((string, string))\">markdowns</span> = <span class=\"ident\" data-type=\"(\n  (string, option(string), Omd.t, string) => (\n    string,\n    string\n  ),\n  list((string, option(string), Omd.t, string))\n) => list((string, string))\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='MainAux/1171' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1172' data-type=\"option(string)\">source</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1173' data-type=\"Omd.t\">contents</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1174' data-type=\"string\">name</span>)) =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1169'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1171'>path</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1174'>name</span>), <span class=\"ident\" data-type=\"list((string, option(string), Omd.t, string))\" data-local-use='MainAux/1109'>markdowns</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1175' data-type=\"list((string, string))\">projectListing</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1114'>names</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1176' data-type=\"string\">name</span> =&gt; (<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1169'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1124'>api</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1176'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1176'>name</span>));\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1177' data-type=\"string\">main</span> = <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|\n      &lt;input placeholder=&quot;Search the docs&quot; id=&quot;search-input&quot;/&gt;\n      &lt;style&gt;%s&lt;/style&gt;\n      &lt;div id=&quot;search-results&quot;&gt;&lt;/div&gt;\n      &lt;link rel=stylesheet href=&quot;search.css&quot;&gt;\n      &lt;script defer src=&quot;searchables.json.index.js&quot;&gt;&lt;/script&gt;\n      &lt;script defer src=&quot;elasticlunr.js&quot;&gt;&lt;/script&gt;\n      &lt;script defer src=&quot;search.js&quot;&gt;&lt;/script&gt;\n    |}</span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-global-use='DocsTemplate/1008'>DocsTemplate.searchStyle</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1178' data-type=\"string\">html</span> = <span class=\"ident\" data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option(string),\n  ~jsLoc: option(string),\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\" data-global-use='Docs/1019'>Docs.page</span>(~sourceUrl=<span class=\"constructor\" data-type=\"option(string)\">None</span>, ~relativeToRoot=<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1169'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span>), ~cssLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1169'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1111'>cssLoc</span>)), ~jsLoc=<span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='MainAux/1169'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1112'>jsLoc</span>)), <span class=\"string\" data-type=\"string\">&quot;Search&quot;</span>, <span class=\"constructor\" data-type=\"list((int, string, string, string))\">[]</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='MainAux/1175'>projectListing</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='MainAux/1170'>markdowns</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1177'>main</span>);\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1168'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1178'>html</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;search.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-global-use='SearchScript/1009'>SearchScript.js</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;elasticlunr.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-global-use='ElasticRaw/1008'>ElasticRaw.raw</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n    <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;searchables.json&quot;</span>, <span class=\"ident\" data-type=\"list((string, string, string, string, string)) => string\" data-global-use='Search/1020'>Search.serializeSearchables</span>(<span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\" data-local-use='MainAux/1122'>searchables</span><span class=\"operator\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n) => list((string, string, string, string, string))\" data-stamp-missing>^</span>)) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n    <span class=\"ident\" data-type=\"(string, string) => unit\" data-global-use='MakeIndex/1009'>MakeIndex.run</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;elasticlunr.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1107'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;searchables.json&quot;</span>)\n  };\n}", "values": [{"id": "MainAux/1084", "name": "filterDuplicates", "moduleName": "MainAux"}, {"id": "DocsTemplate/1010", "name": "styles", "moduleName": "DocsTemplate"}, {"id": "DocsTemplate/1012", "name": "script", "moduleName": "DocsTemplate"}, {"id": "Docs/1009", "name": "formatHref", "moduleName": "Docs"}, {"id": "MainAux/1070", "name": "processCmt", "moduleName": "MainAux"}, {"id": "CodeSnippets/1339", "name": "process", "moduleName": "CodeSnippets"}, {"id": "Markdown/1054", "name": "makeDocStringProcessor", "moduleName": "Markdown"}, {"id": "MainAux/1068", "name": "getName", "moduleName": "MainAux"}, {"id": "Docs/1033", "name": "generate", "moduleName": "Docs"}, {"id": "GenerateDoc/1130", "name": "trackToc", "moduleName": "GenerateDoc"}, {"id": "Markdown/1008", "name": "linkifyMarkdown", "moduleName": "Markdown"}, {"id": "GenerateDoc/1052", "name": "printer", "moduleName": "GenerateDoc"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "DocsTemplate/1008", "name": "searchStyle", "moduleName": "DocsTemplate"}, {"id": "Docs/1019", "name": "page", "moduleName": "Docs"}, {"id": "SearchScript/1009", "name": "js", "moduleName": "SearchScript"}, {"id": "ElasticRaw/1008", "name": "raw", "moduleName": "ElasticRaw"}, {"id": "Search/1020", "name": "serializeSearchables", "moduleName": "Search"}, {"id": "MakeIndex/1009", "name": "run", "moduleName": "MakeIndex"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 4632, "lines": 99, "type": "(\n  ~bsRoot: string,\n  ~editingEnabled: bool,\n  ~test: bool,\n  string,\n  string,\n  option(string),\n  string,\n  list(string),\n  list((string, option(string), Omd.t, string))\n) => unit"},
"Typing/1027": {"name": "showPath", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1027' data-type=\"(~?paren: option(string => bool), Path.t) => string\">showPath</span> = <span class=\"ident\" data-type=\"(~?paren: option(string => bool), Path.t) => string\" data-stamp-missing>Path.name</span>", "values": [], "chars": 24, "lines": 0, "type": "(~?paren: option(string => bool), Path.t) => string"},
"GenerateDoc/1155": {"name": "textForDoc", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1155' data-type=\"(\n  list(string),\n  (string, 'a, State.Model.Docs.docItem)\n) => option((string, string))\">textForDoc</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1156' data-type=\"list(string)\">path</span>, (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1157' data-type=\"string\">name</span>, _, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1158' data-type=\"State.Model.Docs.docItem\">content</span>)) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1159' data-type=\"CmtFindStamps.T.pathType => string\">id</span> = <span class=\"ident\" data-type=\"(list(string), CmtFindStamps.T.pathType) => string\" data-global-use='GenerateDoc/1071'>makeId</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1156'>path</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => list(string)\" data-stamp-missing>@</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1157'><span class=\"constructor\" data-type=\"list(string)\">name</span></span></span>]);\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1160' data-type=\"PrintType.T.stringifier\">printer</span> = <span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-global-use='PrintType/1201'>PrintType.default</span>;\n  switch <span class=\"ident\" data-type=\"State.Model.Docs.docItem\" data-local-use='GenerateDoc/1158'>content</span> {\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1161' data-type=\"State.Model.Docs.moduleContents\">items</span>) =&gt; <span class=\"constructor\" data-type=\"option((string, string))\">Some</span>((<span class=\"string\" data-type=\"string\">&quot;module &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1157'>name</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1159'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PModule</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(_) =&gt; <span class=\"constructor\" data-type=\"option((string, string))\">None</span>\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1184' data-type=\"Types.type_expr\">typ</span>) =&gt; <span class=\"constructor\" data-type=\"option((string, string))\">Some</span>((<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1160'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  Types.type_expr\n) => Pretty.doc\">value</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1160'>printer</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1157'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1157'>name</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='GenerateDoc/1184'>typ</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>prettyString</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1159'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PValue</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1185' data-type=\"Types.type_declaration\">typ</span>) =&gt; <span class=\"constructor\" data-type=\"option((string, string))\">Some</span>((<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1160'>printer</span>.<span class=\"field\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  Types.type_declaration\n) => Pretty.doc\">decl</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1160'>printer</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1157'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1157'>name</span>, <span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='GenerateDoc/1185'>typ</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Pretty.doc => string\" data-global-use='GenerateDoc/1079'>prettyString</span>, <span class=\"ident\" data-type=\"CmtFindStamps.T.pathType => string\" data-local-use='GenerateDoc/1159'>id</span>(<span class=\"constructor\" data-type=\"CmtFindStamps.T.pathType\">PType</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">StandaloneDoc</span>(_) =&gt; <span class=\"constructor\" data-type=\"option((string, string))\">None</span>\n  };\n}", "values": [{"id": "GenerateDoc/1071", "name": "makeId", "moduleName": "GenerateDoc"}, {"id": "PrintType/1201", "name": "default", "moduleName": "PrintType"}, {"id": "GenerateDoc/1079", "name": "prettyString", "moduleName": "GenerateDoc"}], "chars": 440, "lines": 10, "type": "(\n  list(string),\n  (string, 'a, State.Model.Docs.docItem)\n) => option((string, string))"},
"CmtFindDocItems/1043": {"name": "moduleContents", "moduleName": "CmtFindDocItems", "html": "and <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1043' data-type=\"Types.module_type => State.Model.Docs.moduleContents\">moduleContents</span> = <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1158' data-type=\"Types.module_type\">md_type</span> =&gt; {\n  open Types;\n  switch <span class=\"ident\" data-type=\"Types.module_type\" data-local-use='CmtFindDocItems/1158'>md_type</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_ident</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1159' data-type=\"Path.t\">path</span>) | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_alias</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1159' data-type=\"Path.t\">path</span>) =&gt; <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Alias</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1159'>path</span>) /* TODO moduleContents */\n  | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_signature</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1161' data-type=\"Types.signature\">signature</span>) =&gt; <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Items</span>(<span class=\"ident\" data-type=\"Types.signature => list(State.Model.Docs.doc)\" data-global-use='CmtFindDocItems/1042'>docItemsFromTypes</span>(<span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindDocItems/1161'>signature</span>))\n  | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_functor</span>(_, _, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1162' data-type=\"Types.module_type\">typ</span>) =&gt; <span class=\"ident\" data-type=\"Types.module_type => State.Model.Docs.moduleContents\" data-global-use='CmtFindDocItems/1043'>moduleContents</span>(<span class=\"ident\" data-type=\"Types.module_type\" data-local-use='CmtFindDocItems/1162'>typ</span>)\n  }\n}", "values": [{"id": "CmtFindDocItems/1042", "name": "docItemsFromTypes", "moduleName": "CmtFindDocItems"}], "chars": 269, "lines": 7, "type": "Types.module_type => State.Model.Docs.moduleContents"},
"DocsTemplate/1012": {"name": "script", "moduleName": "DocsTemplate", "html": "let <span class=\"pattern-ident\" data-local-define='DocsTemplate/1012' data-type=\"string\">script</span> = <span class=\"string\" data-type=\"string\">&quot;;(function() {&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-global-use='SearchScript/1008'>SearchScript.framework</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-global-use='DocsTemplate/1011'>typeScript</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">{|\nvar checkHash = () =&gt; {\n  if (!window.shouldCheckHashes) {\n    return\n  }\n  var id = window.location.hash.slice(1)\n  if (id &amp;&amp; !document.getElementById(id)) {\n    document.getElementById(&quot;error-message&quot;).style.display = &#39;block&#39;\n    var parts = id.split(&#39;-&#39;)\n    document.querySelector(&#39;#error-message span&#39;).textContent = parts[0]\n    document.querySelector(&#39;#error-message code&#39;).textContent = parts[1]\n  } else {\n    document.getElementById(&quot;error-message&quot;).style.display = &#39;none&#39;\n  }\n}\nwindow.onload = () =&gt; {\n  checkHash()\n  var expander = document.querySelector(&#39;.sidebar-expander&#39;)\n  expander.onclick = () =&gt; {\n    var sidebar = document.querySelector(&#39;.sidebar&#39;);\n    if (sidebar.classList.contains(&#39;expanded&#39;)) {\n      sidebar.classList.remove(&#39;expanded&#39;)\n      expander.textContent = &#39;Show navigation&#39;\n    } else {\n      sidebar.classList.add(&#39;expanded&#39;)\n      expander.textContent = &#39;Hide navigation&#39;\n    }\n  }\n  listenForTypes();\n}\nwindow.onhashchange = checkHash\n|}</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;})();&quot;</span>", "values": [{"id": "SearchScript/1008", "name": "framework", "moduleName": "SearchScript"}, {"id": "DocsTemplate/1011", "name": "typeScript", "moduleName": "DocsTemplate"}], "chars": 1064, "lines": 31, "type": "string"},
"Infix/1041": {"name": "|.!", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1041' data-type=\"('a => option('a), string, 'a) => 'a\">(|.!)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1042' data-type=\"'a => option('a)\">fn</span>, <span class=\"pattern-ident\" data-local-define='Infix/1043' data-type=\"string\">message</span>, <span class=\"pattern-ident\" data-local-define='Infix/1044' data-type=\"'a\">arg</span>) =&gt; <span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='Infix/1042'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1044'>arg</span>) <span class=\"operator\" data-type=\"(option('a), string) => 'a\" data-global-use='Infix/1008'>|!</span> <span class=\"ident\" data-type=\"string\" data-local-use='Infix/1043'>message</span>", "values": [{"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}], "chars": 52, "lines": 0, "type": "('a => option('a), string, 'a) => 'a"},
"CliToInput/1070": {"name": "isSourceFile", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1070' data-type=\"string => bool\">isSourceFile</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1071' data-type=\"string\">name</span> =&gt;\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1071'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.re&quot;</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1071'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.rei&quot;</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1071'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.ml&quot;</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1071'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.mli&quot;</span>)", "values": [], "chars": 185, "lines": 4, "type": "string => bool"},
"Docs/1008": {"name": "allGlobals", "moduleName": "Docs", "html": "let <span class=\"pattern-ident\" data-local-define='Docs/1008' data-type=\"list(string)\">allGlobals</span> = [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;int&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;float&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;string&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;list&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;option&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;bool&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;unit&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;array&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;char&quot;</span>, <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;int64&quot;</span></span></span></span></span></span></span></span></span></span></span></span>]", "values": [], "chars": 103, "lines": 0, "type": "list(string)"},
"Highlighting/1126": {"name": "locPair", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1126' data-type=\"Location.t => (int, int)\">locPair</span> = ({<span class=\"pattern-ident\" data-local-define='Highlighting/1127' data-type=\"Lexing.position\">Location.loc_start</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1128' data-type=\"Lexing.position\">loc_end</span>}) =&gt; (<span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Highlighting/1127'>loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"Lexing.position\" data-local-use='Highlighting/1128'>loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>)", "values": [], "chars": 87, "lines": 0, "type": "Location.t => (int, int)"},
"CliToInput/1074": {"name": "getName", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1074' data-type=\"string => string\">getName</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1075' data-type=\"string\">x</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1075'>x</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>", "values": [], "chars": 66, "lines": 0, "type": "string => string"},
"PrintType/1031": {"name": "str", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1031' data-type=\"(~?len: option(int), string) => Pretty.doc\">str</span> = <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-stamp-missing>Pretty.text</span>", "values": [], "chars": 21, "lines": 0, "type": "(~?len: option(int), string) => Pretty.doc"},
"MainAux/1203": {"name": "getMarkdowns", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1203' data-type=\"(string, string, string) => list(\n  (string, option(string), Omd.t, string)\n)\">getMarkdowns</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1204' data-type=\"string\">projectName</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1205' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1206' data-type=\"string\">target</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1207' data-type=\"list(string)\">files</span> = <span class=\"ident\" data-type=\"(string, string => bool) => list(string)\" data-stamp-missing>Files.collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1206'>target</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1208' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1208'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.md&quot;</span>));\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1209' data-type=\"list((string, string, option(string), string, string))\">files</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1207'>files</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list(\n    (\n      string,\n      string,\n      option(string),\n      string,\n      string\n    )\n  )\n) => list((string, string, option(string), string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  string => (\n    string,\n    string,\n    option(string),\n    string,\n    string\n  ),\n  list(string)\n) => list((string, string, option(string), string, string))\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1210' data-type=\"string\">path</span> =&gt; {\n    (<span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1197'>getOrder</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1210'>path</span>), <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1195'>htmlName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1210'>path</span>), <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1210'>path</span>), <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1210'>path</span>) <span class=\"operator\" data-type=\"(option(string), option(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, option(string)) => string\" data-global-use='MainAux/1179'>unwrap</span>(<span class=\"string\" data-type=\"string\">&quot;Unable to read markdown file &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1210'>path</span>), <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='MainAux/1199'>getTitle</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1210'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1206'>target</span>))\n  });\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1211' data-type=\"list((string, string, option(string), string, string))\">files</span> = if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(\n  (string, string, option(string), string, string) => bool,\n  list(\n    (\n      string,\n      string,\n      option(string),\n      string,\n      string\n    )\n  )\n) => bool\" data-stamp-missing>List.exists</span>(((_, <span class=\"pattern-ident\" data-local-define='MainAux/1212' data-type=\"string\">path</span>, _, _, _)) =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1212'>path</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1206'>target</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;readme.md&quot;</span>, <span class=\"ident\" data-type=\"list((string, string, option(string), string, string))\" data-local-use='MainAux/1209'>files</span>)) {\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1213' data-type=\"string\">readme</span> = <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1205'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;Readme.md&quot;</span>;\n    switch (<span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.readDirectory</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1205'>base</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => bool, list(string)) => string\" data-stamp-missing>List.find</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1214' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1214'>name</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;readme.md&quot;</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {\n      [<span data-type=\"list((string, string, option(string), string, string))\">(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1206'>target</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.html&quot;</span>, <span class=\"constructor\" data-type=\"option(string)\">None</span>,  <span class=\"string\" data-type=\"string\">&quot;# &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1204'>projectName</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\n\\nWelcome to the documentation!&quot;</span>, <span class=\"string\" data-type=\"string\">&quot;Home&quot;</span>), ...<span class=\"ident\" data-type=\"list((string, string, option(string), string, string))\" data-local-use='MainAux/1209'>files</span></span>]\n    }\n    | <span class=\"pattern-ident\" data-local-define='MainAux/1215' data-type=\"string\">name</span> =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='MainAux/1216' data-type=\"string\">readme</span> = <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1205'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1215'>name</span>;\n      let <span class=\"pattern-ident\" data-local-define='MainAux/1217' data-type=\"string\">contents</span> = <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1216'>readme</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Unable to read &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1216'>readme</span>;\n      [<span data-type=\"list((string, string, option(string), string, string))\">(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1206'>target</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.html&quot;</span>, <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1216'>readme</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1217'>contents</span>, <span class=\"string\" data-type=\"string\">&quot;Home&quot;</span>), ...<span class=\"ident\" data-type=\"list((string, string, option(string), string, string))\" data-local-use='MainAux/1209'>files</span></span>]\n    }\n    }\n  } else {\n    <span class=\"ident\" data-type=\"list((string, string, option(string), string, string))\" data-local-use='MainAux/1209'>files</span>\n  };\n  <span class=\"ident\" data-type=\"(\n  (\n    (string, string, option(string), string, string),\n    (\n      string,\n      string,\n      option(string),\n      string,\n      string\n    )\n  ) => int,\n  list(\n    (\n      string,\n      string,\n      option(string),\n      string,\n      string\n    )\n  )\n) => list((string, string, option(string), string, string))\" data-stamp-missing>List.sort</span>(<span class=\"ident\" data-type=\"(\n  (string, string, option(string), string, string),\n  (string, string, option(string), string, string)\n) => int\" data-stamp-missing>compare</span>, <span class=\"ident\" data-type=\"list((string, string, option(string), string, string))\" data-local-use='MainAux/1211'>files</span>) <span class=\"operator\" data-type=\"(\n  list((string, string, option(string), string, string)),\n  list(\n    (\n      string,\n      string,\n      option(string),\n      string,\n      string\n    )\n  ) => list(\n    (string, option(string), Omd.t, string)\n  )\n) => list((string, option(string), Omd.t, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string, option(string), string, string) => (\n    string,\n    option(string),\n    Omd.t,\n    string\n  ),\n  list(\n    (\n      string,\n      string,\n      option(string),\n      string,\n      string\n    )\n  )\n) => list((string, option(string), Omd.t, string))\" data-stamp-missing>List.map</span>(((_, <span class=\"pattern-ident\" data-local-define='MainAux/1218' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1219' data-type=\"option(string)\">source</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1220' data-type=\"string\">contents</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1221' data-type=\"string\">name</span>)) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1218'>html</span>, <span class=\"ident\" data-type=\"option(string)\" data-local-use='MainAux/1219'>source</span>, <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1220'>contents</span>), <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1221'>name</span>))\n}", "values": [{"id": "MainAux/1197", "name": "getOrder", "moduleName": "MainAux"}, {"id": "MainAux/1195", "name": "htmlName", "moduleName": "MainAux"}, {"id": "MainAux/1179", "name": "unwrap", "moduleName": "MainAux"}, {"id": "MainAux/1199", "name": "getTitle", "moduleName": "MainAux"}, {"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 1126, "lines": 21, "type": "(string, string, string) => list(\n  (string, option(string), Omd.t, string)\n)"},
"ReadMlast/1016": {"name": "skip_header", "moduleName": "ReadMlast", "html": "let <span class=\"pattern-ident\" data-local-define='ReadMlast/1016' data-type=\"Pervasives.in_channel => unit\">skip_header</span> = <span class=\"pattern-ident\" data-local-define='ReadMlast/1017' data-type=\"Pervasives.in_channel\">ic</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ReadMlast/1018' data-type=\"int\">dep_size</span> = <span class=\"ident\" data-type=\"Pervasives.in_channel => int\" data-stamp-missing>input_binary_int</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1017'>ic</span>);\n  <span class=\"ident\" data-type=\"(Pervasives.in_channel, int) => unit\" data-stamp-missing>seek_in</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1017'>ic</span>, <span class=\"ident\" data-type=\"Pervasives.in_channel => int\" data-stamp-missing>pos_in</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1017'>ic</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='ReadMlast/1018'>dep_size</span>);\n}", "values": [], "chars": 104, "lines": 3, "type": "Pervasives.in_channel => unit"},
"Sidebar/1022": {"name": "generate", "moduleName": "Sidebar", "html": "let <span class=\"pattern-ident\" data-local-define='Sidebar/1022' data-type=\"(\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\">generate</span> = (<span class=\"pattern-ident\" data-local-define='Sidebar/1023' data-type=\"'a\">name</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1024' data-type=\"list((int, string, string, string))\">tocItems</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1025' data-type=\"list((string, string))\">projectListing</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1026' data-type=\"list((string, string))\">markdowns</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1027' data-type=\"string\">searchPath</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string) => string,\n  (string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|\n    &lt;div class=&#39;sidebar-wrapper&#39;&gt;\n    &lt;div class=&#39;sidebar-expander&#39;&gt;Show navigation&lt;/div&gt;\n    &lt;div class=&#39;sidebar&#39;&gt;\n      &lt;a href=&quot;%s&quot; style=&quot;display: block; padding: 0 8px;&quot;&gt;Search&lt;/a&gt;\n      %s\n      &lt;div class=&#39;table-of-contents&#39;&gt;\n      &lt;div class=&#39;toc-header&#39;&gt;Page Contents&lt;/div&gt;\n      %s\n      &lt;/div&gt;\n      %s\n    &lt;/div&gt;\n    &lt;/div&gt;\n  |}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1027'>searchPath</span>,\n  <span class=\"ident\" data-type=\"list((string, string)) => string\" data-global-use='Sidebar/1018'>makeMarkdowns</span>(<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Sidebar/1026'>markdowns</span>),\n  <span class=\"ident\" data-type=\"list((int, string, string, string)) => string\" data-global-use='Sidebar/1008'>makeToc</span>(<span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='Sidebar/1024'>tocItems</span>),\n  <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Sidebar/1025'>projectListing</span> <span class=\"operator\" data-type=\"(list((string, string)), list((string, string))) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list((string, string))\">[]</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"list((string, string)) => string\" data-global-use='Sidebar/1014'>showPackage</span>(<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Sidebar/1025'>projectListing</span>)\n  )\n}", "values": [{"id": "Sidebar/1018", "name": "makeMarkdowns", "moduleName": "Sidebar"}, {"id": "Sidebar/1008", "name": "makeToc", "moduleName": "Sidebar"}, {"id": "Sidebar/1014", "name": "showPackage", "moduleName": "Sidebar"}], "chars": 564, "lines": 20, "type": "(\n  'a,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string"},
"ModelToOutput/1166": {"name": "package", "moduleName": "ModelToOutput", "html": "let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1166' data-type=\"(\n  State.Model.package,\n  option(\n    (\n      list(State.Model.codeBlock),\n      option((string, option((string, Buffer.t))))\n    )\n  ),\n  State.Input.target,\n  State.Input.env\n) => unit\">package</span> = (\n  {<span class=\"pattern-ident\" data-local-define='ModelToOutput/1167' data-type=\"string\">State.Model.name</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1168' data-type=\"option(string)\">repo</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1169' data-type=\"list(State.Model.customPage)\">custom</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1170' data-type=\"option(list(State.Model.sidebar))\">sidebar</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1171' data-type=\"list(State.Model.topModule)\">modules</span>},\n  <span class=\"pattern-ident\" data-local-define='ModelToOutput/1172' data-type=\"option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\">compilationResults</span>,\n  {<span class=\"pattern-ident\" data-local-define='ModelToOutput/1173' data-type=\"string\">State.Input.directory</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1174' data-type=\"option(string)\">template</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1175' data-type=\"bool\">search</span>},\n  {<span class=\"pattern-ident\" data-local-define='ModelToOutput/1176' data-type=\"string\">State.Input.static</span>}\n) =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Files.mkdirp</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1177' data-type=\"list(State.Model.codeBlock)\">codeBlocks</span> = <span class=\"ident\" data-type=\"option(\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  )\n)\" data-local-use='ModelToOutput/1172'>compilationResults</span> <span class=\"operator\" data-type=\"(\n  option(\n    (\n      list(State.Model.codeBlock),\n      option((string, option((string, Buffer.t))))\n    )\n  ),\n  (\n    list(State.Model.codeBlock),\n    option((string, option((string, Buffer.t))))\n  ) => list(State.Model.codeBlock)\n) => option(list(State.Model.codeBlock))\" data-global-use='Infix/1032'>|?&gt;&gt;</span> (((<span class=\"pattern-ident\" data-local-define='ModelToOutput/1178' data-type=\"list(State.Model.codeBlock)\">codeBlocks</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1179' data-type=\"option((string, option((string, Buffer.t))))\">bundles</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(~source: string, ~dest: string) => unit\" data-stamp-missing>Files.copyExn</span>(~source=<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1176'>static</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;block-script.js&quot;</span>, ~dest=<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;block-script.js&quot;</span>);\n    <span class=\"ident\" data-type=\"option((string, option((string, Buffer.t))))\" data-local-use='ModelToOutput/1179'>bundles</span> <span class=\"operator\" data-type=\"(\n  option((string, option((string, Buffer.t)))),\n  (string, option((string, Buffer.t))) => unit\n) => unit\" data-global-use='Infix/1045'>|?&lt;</span> ((<span class=\"pattern-ident\" data-local-define='ModelToOutput/1180' data-type=\"string\">runtimeDeps</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1181' data-type=\"option((string, Buffer.t))\">compilerDeps</span>)) =&gt; {\n      <span class=\"ident\" data-type=\"(string, string) => unit\" data-stamp-missing>Files.writeFileExn</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;all-deps.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1180'>runtimeDeps</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;;window.loadedAllDeps = true;&quot;</span>);\n      /* This is where we handle stuff for the editor. should be named &quot;editorArtifacts&quot; or something */\n      <span class=\"ident\" data-type=\"option((string, Buffer.t))\" data-local-use='ModelToOutput/1181'>compilerDeps</span> <span class=\"operator\" data-type=\"(\n  option((string, Buffer.t)),\n  (string, Buffer.t) => unit\n) => unit\" data-global-use='Infix/1045'>|?&lt;</span> <span class=\"ident\" data-type=\"(string, string, (string, Buffer.t)) => unit\" data-global-use='ModelToOutput/1008'>writeEditorSupport</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1176'>static</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>);\n    };\n    <span class=\"ident\" data-type=\"list(State.Model.codeBlock)\" data-local-use='ModelToOutput/1178'>codeBlocks</span>;\n  }) <span class=\"operator\" data-type=\"(\n  option(list(State.Model.codeBlock)),\n  list(State.Model.codeBlock)\n) => list(State.Model.codeBlock)\" data-global-use='Infix/1012'>|?</span> <span class=\"constructor\" data-type=\"list(State.Model.codeBlock)\">[]</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1182' data-type=\"string\">cssLoc</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>, <span class=\"string\" data-type=\"string\">&quot;styles.css&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1183' data-type=\"string\">jsLoc</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Filename.concat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>, <span class=\"string\" data-type=\"string\">&quot;script.js&quot;</span>);\n\n  <span class=\"ident\" data-type=\"(~source: string, ~dest: string) => unit\" data-stamp-missing>Files.copyExn</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1176'>static</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;styles.css&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1182'>cssLoc</span>);\n  <span class=\"ident\" data-type=\"(~source: string, ~dest: string) => unit\" data-stamp-missing>Files.copyExn</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1176'>static</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;script.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1183'>jsLoc</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1184' data-type=\"Hashtbl.t((Omd.name, string), State.Model.codeBlock)\">codeBlocksMap</span> = <span class=\"ident\" data-type=\"list(State.Model.codeBlock) => Hashtbl.t(\n  (Omd.name, string),\n  State.Model.codeBlock\n)\" data-global-use='ModelToOutput/1087'>makeCodeBlocksMap</span>(<span class=\"ident\" data-type=\"list(State.Model.codeBlock)\" data-local-use='ModelToOutput/1177'>codeBlocks</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1185' data-type=\"list(string)\">names</span> = <span class=\"ident\" data-type=\"list(State.Model.topModule)\" data-local-use='ModelToOutput/1171'>modules</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.topModule),\n  list(State.Model.topModule) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.topModule => string,\n  list(State.Model.topModule)\n) => list(string)\" data-stamp-missing>List.map</span>(({<span class=\"pattern-ident\" data-local-define='ModelToOutput/1187' data-type=\"string\">Model.sourcePath</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1186' data-type=\"string\">name</span>}) =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1186'>name</span>);\n\n  let (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1188' data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\">searchables</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1189' data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.Representation.t\n) => string\">processDocString</span>) = <span class=\"ident\" data-type=\"(string, Omd.element => option(string)) => (\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  ),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.Representation.t\n  ) => string\n)\" data-global-use='Markdown/1054'>Markdown.makeDocStringProcessor</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1190' data-type=\"Omd.element\">element</span> =&gt; switch <span class=\"ident\" data-type=\"Omd.element\" data-local-use='ModelToOutput/1190'>element</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Omd.element\">Omd.Code_block</span>(<span class=\"pattern-ident\" data-local-define='ModelToOutput/1191' data-type=\"Omd.name\">lang</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1192' data-type=\"string\">content</span>) =&gt; {\n    switch (<span class=\"ident\" data-type=\"(\n  Hashtbl.t((Omd.name, string), State.Model.codeBlock),\n  (Omd.name, string)\n) => State.Model.codeBlock\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t((Omd.name, string), State.Model.codeBlock)\" data-local-use='ModelToOutput/1184'>codeBlocksMap</span>, (<span class=\"ident\" data-type=\"Omd.name\" data-local-use='ModelToOutput/1191'>lang</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1192'>content</span>))) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {\n      switch (<span class=\"ident\" data-type=\"(Omd.name, State.Model.codeOptions) => option(\n  State.Model.codeOptions\n)\" data-global-use='CodeSnippets/1012'>CodeSnippets.parseCodeOptions</span>(<span class=\"ident\" data-type=\"Omd.name\" data-local-use='ModelToOutput/1191'>lang</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-global-use='State/1055'>State.Model.defaultOptions</span>)) {\n      | <span class=\"pattern-constructor\" data-type=\"option(State.Model.codeOptions)\">Some</span>({codeDisplay: {hide: <span class=\"pattern-constructor\" data-type=\"bool\">true</span>}}) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>)\n      | _ =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n      }\n    }\n    | {<span class=\"pattern-ident\" data-local-define='ModelToOutput/1193' data-type=\"string\">raw</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1194' data-type=\"string\">html</span>} =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1194'>html</span>)\n    }\n  }\n  | _ =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  });\n\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Files.mkdirp</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;api&quot;</span>);\n\n  <span class=\"ident\" data-type=\"list(State.Model.topModule)\" data-local-use='ModelToOutput/1171'>modules</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.topModule),\n  list(State.Model.topModule) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.topModule => unit,\n  list(State.Model.topModule)\n) => unit\" data-stamp-missing>List.iter</span>(<span class=\"ident\" data-type=\"(\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  list(State.Model.codeBlock),\n  list(State.Model.customPage),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  ) => option(string),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string\n  ) => GenerateDoc.t,\n  list(string),\n  State.Model.topModule\n) => unit\" data-global-use='ModelToOutput/1062'>outputModule</span>(~<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1182'>cssLoc</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1183'>jsLoc</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>, <span class=\"ident\" data-type=\"list(State.Model.codeBlock)\" data-local-use='ModelToOutput/1177'>codeBlocks</span>, <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ModelToOutput/1169'>custom</span>, <span class=\"ident\" data-type=\"(\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\" data-global-use='ModelToOutput/1135'>searchHref</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1185'>names</span>), <span class=\"ident\" data-type=\"option(string)\" data-local-use='ModelToOutput/1168'>repo</span>, <span class=\"ident\" data-type=\"(PrintType.T.stringifier, string, string) => GenerateDoc.t\" data-local-use='ModelToOutput/1189'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1185'>names</span>));\n\n  <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ModelToOutput/1169'>custom</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.customPage),\n  list(State.Model.customPage) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.customPage => unit,\n  list(State.Model.customPage)\n) => unit\" data-stamp-missing>List.iter</span>(<span class=\"ident\" data-type=\"(\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  list(State.Model.customPage),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  ) => option(string),\n  option(string),\n  (\n    PrintType.T.stringifier,\n    string,\n    string,\n    ~?override: option(Omd.element => option(string)),\n    list(string),\n    string,\n    option(State.Model.Docs.docItem),\n    Omd.t\n  ) => string,\n  list(string),\n  State.Model.customPage\n) => unit\" data-global-use='ModelToOutput/1032'>outputCustom</span>(~<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1182'>cssLoc</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1183'>jsLoc</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>, <span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ModelToOutput/1169'>custom</span>, <span class=\"ident\" data-type=\"(\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\" data-global-use='ModelToOutput/1135'>searchHref</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1185'>names</span>), <span class=\"ident\" data-type=\"option(string)\" data-local-use='ModelToOutput/1168'>repo</span>, <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  string,\n  string,\n  ~?override: option(Omd.element => option(string)),\n  list(string),\n  string,\n  option(State.Model.Docs.docItem),\n  Omd.t\n) => string\" data-local-use='ModelToOutput/1189'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1185'>names</span>));\n\n  <span class=\"ident\" data-type=\"(\n  ~markdowns: list(State.Model.customPage),\n  ~names: list(string),\n  ~cssLoc: string,\n  ~jsLoc: string,\n  string,\n  Pervasives.ref(\n    list((string, string, string, string, string))\n  )\n) => unit\" data-global-use='ModelToOutput/1015'>makeSearchPage</span>(~markdowns=<span class=\"ident\" data-type=\"list(State.Model.customPage)\" data-local-use='ModelToOutput/1169'>custom</span>, ~<span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1185'>names</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1182'>cssLoc</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1183'>jsLoc</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>, <span class=\"ident\" data-type=\"Pervasives.ref(\n  list((string, string, string, string, string))\n)\" data-local-use='ModelToOutput/1188'>searchables</span>);\n\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Ok packaged folks &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1195' data-type=\"string\">localUrl</span> = <span class=\"string\" data-type=\"string\">&quot;file://&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Files.absify</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.html&quot;</span>;\n  <span class=\"ident\" data-type=\"unit => unit\" data-stamp-missing>print_newline</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Complete! Docs are available in &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1173'>directory</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\nOpen &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1195'>localUrl</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; in your browser to view&quot;</span>);\n  <span class=\"ident\" data-type=\"unit => unit\" data-stamp-missing>print_newline</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n}", "values": [{"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "Infix/1045", "name": "|?<", "moduleName": "Infix"}, {"id": "ModelToOutput/1008", "name": "writeEditorSupport", "moduleName": "ModelToOutput"}, {"id": "ModelToOutput/1087", "name": "makeCodeBlocksMap", "moduleName": "ModelToOutput"}, {"id": "Markdown/1054", "name": "makeDocStringProcessor", "moduleName": "Markdown"}, {"id": "CodeSnippets/1012", "name": "parseCodeOptions", "moduleName": "CodeSnippets"}, {"id": "State/1055", "name": "defaultOptions", "moduleName": "State"}, {"id": "ModelToOutput/1062", "name": "outputModule", "moduleName": "ModelToOutput"}, {"id": "ModelToOutput/1032", "name": "outputCustom", "moduleName": "ModelToOutput"}, {"id": "ModelToOutput/1135", "name": "searchHref", "moduleName": "ModelToOutput"}, {"id": "ModelToOutput/1015", "name": "makeSearchPage", "moduleName": "ModelToOutput"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 2194, "lines": 57, "type": "(\n  State.Model.package,\n  option(\n    (\n      list(State.Model.codeBlock),\n      option((string, option((string, Buffer.t))))\n    )\n  ),\n  State.Input.target,\n  State.Input.env\n) => unit"},
"PrepareUtils/1081": {"name": "compose", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1081' data-type=\"('a => bool, 'a => option('a), 'a) => option('a)\">compose</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1082' data-type=\"'a => bool\">filter</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1083' data-type=\"'a => option('a)\">opter</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1084' data-type=\"'a\">value</span>) =&gt; if (<span class=\"ident\" data-type=\"'a => bool\" data-local-use='PrepareUtils/1082'>filter</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1084'>value</span>)) {\n  <span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='PrepareUtils/1083'>opter</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1084'>value</span>)\n} else {\n  <span class=\"constructor\" data-type=\"option('a)\">None</span>\n}", "values": [], "chars": 93, "lines": 4, "type": "('a => bool, 'a => option('a), 'a) => option('a)"},
"CmtFindDocItems/1172": {"name": "eitherFirst", "moduleName": "CmtFindDocItems", "html": "let <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1172' data-type=\"(option('a), (option('a), 'a)) => (option('a), 'a)\">eitherFirst</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1173' data-type=\"option('a)\">opt</span>, (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1174' data-type=\"option('a)\">opt2</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1175' data-type=\"'a\">second</span>)) =&gt; {\n  (<span class=\"ident\" data-type=\"(option('a), option('a)) => option('a)\" data-global-use='CmtFindDocItems/1163'>either</span>(<span class=\"ident\" data-type=\"option('a)\" data-local-use='CmtFindDocItems/1173'>opt</span>, <span class=\"ident\" data-type=\"option('a)\" data-local-use='CmtFindDocItems/1174'>opt2</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='CmtFindDocItems/1175'>second</span>)\n}", "values": [{"id": "CmtFindDocItems/1163", "name": "either", "moduleName": "CmtFindDocItems"}], "chars": 76, "lines": 2, "type": "(option('a), (option('a), 'a)) => (option('a), 'a)"},
"CodeHighlight/1270": {"name": "separateHashed", "moduleName": "CodeHighlight", "html": "let rec <span class=\"pattern-ident\" data-local-define='CodeHighlight/1270' data-type=\"(int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)\">separateHashed</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1271' data-type=\"int\">offset</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1272' data-type=\"list(string)\">collector</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1273' data-type=\"list(string)\">lines</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1273'>lines</span> {\n  | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='CodeHighlight/1274' data-type=\"string\">line</span>, ...<span class=\"pattern-ident\" data-local-define='CodeHighlight/1275' data-type=\"list(string)\">rest</span></span>] when <span class=\"ident\" data-type=\"string => bool\" data-global-use='CodeHighlight/1266'>isHashed</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1274'>line</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)\" data-global-use='CodeHighlight/1270'>separateHashed</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1271'>offset</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1274'>line</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1274'>line</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;!&#39; <span class=\"pattern-constructor\" data-type=\"bool\">?</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string => string\" data-global-use='CodeHighlight/1268'>unHash</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1274'>line</span>), ...<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1272'>collector</span></span>] <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1272'>collector</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1275'>rest</span>)\n  }\n  | _ =&gt; (<span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1271'>offset</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1272'>collector</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1273'>lines</span>)\n  }\n}", "values": [{"id": "CodeHighlight/1266", "name": "isHashed", "moduleName": "CodeHighlight"}, {"id": "CodeHighlight/1268", "name": "unHash", "moduleName": "CodeHighlight"}], "chars": 283, "lines": 7, "type": "(int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)"},
"PrintType/1029": {"name": "space", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1029' data-type=\"Pretty.doc\">space</span> = <span class=\"ident\" data-type=\"string => Pretty.doc\" data-stamp-missing>Pretty.line</span>(<span class=\"string\" data-type=\"string\">&quot; &quot;</span>)", "values": [], "chars": 28, "lines": 0, "type": "Pretty.doc"},
"CodeSnippets/1012": {"name": "parseCodeOptions", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1012' data-type=\"(string, 'a) => option(State.Model.codeOptions)\">parseCodeOptions</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1013' data-type=\"string\">lang</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1014' data-type=\"'a\">defaultOptions</span>) =&gt; {\n  open State.Model;\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1041' data-type=\"list(string)\">parts</span> = <span class=\"ident\" data-type=\"(Str.regexp, string) => list(string)\" data-stamp-missing>Str.split</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;;&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1013'>lang</span>);\n  if (<span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;bash&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1041'>parts</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;txt&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1041'>parts</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;js&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1041'>parts</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;javascript&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1041'>parts</span>)\n  <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, list(string)) => bool\" data-stamp-missing>List.mem</span>(<span class=\"string\" data-type=\"string\">&quot;sh&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1041'>parts</span>)) {\n    <span class=\"constructor\" data-type=\"option(State.Model.codeOptions)\">None</span>\n  } else {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1042' data-type=\"State.Model.codeOptions\">options</span> = <span class=\"ident\" data-type=\"(\n  (\n    State.Model.codeOptions,\n    string\n  ) => State.Model.codeOptions,\n  State.Model.codeOptions,\n  list(string)\n) => State.Model.codeOptions\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1043' data-type=\"State.Model.codeOptions\">options</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1044' data-type=\"string\">item</span>) =&gt; {\n      switch <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'>item</span> {\n      | <span class=\"string\" data-type=\"string\">&quot;window&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, context: <span class=\"constructor\" data-type=\"State.Model.codeContext\">Window</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;canvas&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, context: <span class=\"constructor\" data-type=\"State.Model.codeContext\">Canvas</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;iframe&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, context: <span class=\"constructor\" data-type=\"State.Model.codeContext\">Iframe</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;log&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, context: <span class=\"constructor\" data-type=\"State.Model.codeContext\">Log</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;div&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, context: <span class=\"constructor\" data-type=\"State.Model.codeContext\">Div</span>}</span>\n\n      | <span class=\"string\" data-type=\"string\">&quot;raises&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, expectation: <span class=\"constructor\" data-type=\"State.Model.expectation\">Raise</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;parse-fail&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, expectation: <span class=\"constructor\" data-type=\"State.Model.expectation\">ParseFail</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;skip&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, expectation: <span class=\"constructor\" data-type=\"State.Model.expectation\">Skip</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;type-fail&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, expectation: <span class=\"constructor\" data-type=\"State.Model.expectation\">TypeFail</span>}</span>\n      /* | &quot;isolate&quot; =&gt; {...options, isolate: true} */\n      | <span class=\"string\" data-type=\"string\">&quot;no-run&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, expectation: <span class=\"constructor\" data-type=\"State.Model.expectation\">DontRun</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;no-edit&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, codeDisplay: <span data-type=\"State.Model.codeDisplay\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>.<span class=\"field\" data-type=\"State.Model.codeDisplay\">codeDisplay</span>, noEdit: <span class=\"constructor\" data-type=\"bool\">true</span>}</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;hide&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, codeDisplay: <span data-type=\"State.Model.codeDisplay\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>.<span class=\"field\" data-type=\"State.Model.codeDisplay\">codeDisplay</span>, hide: <span class=\"constructor\" data-type=\"bool\">true</span>}</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;reason&quot;</span> | <span class=\"string\" data-type=\"string\">&quot;re&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, lang: <span class=\"constructor\" data-type=\"State.Model.lang\">Reason</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;ocaml&quot;</span> | <span class=\"string\" data-type=\"string\">&quot;ml&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, lang: <span class=\"constructor\" data-type=\"State.Model.lang\">OCaml</span>}</span>\n      | <span class=\"string\" data-type=\"string\">&quot;txt&quot;</span> =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, lang: <span class=\"constructor\" data-type=\"State.Model.lang\">Txt</span>}</span>\n      | _ =&gt; {\n        switch (<span class=\"ident\" data-type=\"(string, string) => option(string)\" data-global-use='CodeSnippets/1009'>matchOption</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'>item</span>, <span class=\"string\" data-type=\"string\">&quot;shared&quot;</span>)) {\n        | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1045' data-type=\"string\">name</span>) =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, sharedAs: <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1045'>name</span>)}</span>\n        | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; switch (<span class=\"ident\" data-type=\"(string, string) => option(string)\" data-global-use='CodeSnippets/1009'>matchOption</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'>item</span>, <span class=\"string\" data-type=\"string\">&quot;use&quot;</span>)) {\n          | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1046' data-type=\"string\">name</span>) =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, uses: [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1046'>name</span>, ...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>.<span class=\"field\" data-type=\"list(string)\">uses</span></span>]}</span>\n          | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; switch (<span class=\"ident\" data-type=\"(string, string) => option(string)\" data-global-use='CodeSnippets/1009'>matchOption</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'>item</span>, <span class=\"string\" data-type=\"string\">&quot;prefix&quot;</span>)) {\n            | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1047' data-type=\"string\">content</span>) =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, codeDisplay: <span data-type=\"State.Model.codeDisplay\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>.<span class=\"field\" data-type=\"State.Model.codeDisplay\">codeDisplay</span>, prefix: <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>int_of_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1047'>content</span>)}</span>}</span>\n            | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; switch (<span class=\"ident\" data-type=\"(string, string) => option(string)\" data-global-use='CodeSnippets/1009'>matchOption</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'>item</span>, <span class=\"string\" data-type=\"string\">&quot;suffix&quot;</span>)) {\n              | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1048' data-type=\"string\">content</span>) =&gt; <span data-type=\"State.Model.codeOptions\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, codeDisplay: <span data-type=\"State.Model.codeDisplay\">{...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>.<span class=\"field\" data-type=\"State.Model.codeDisplay\">codeDisplay</span>, suffix: <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>int_of_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1048'>content</span>)}</span>}</span>\n              | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; {\n                if (<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1041'>parts</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => bool\" data-stamp-missing>==</span> [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'><span class=\"constructor\" data-type=\"list(string)\">item</span></span></span>]) <span data-type=\"State.Model.codeOptions\">{\n                  {...<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>, lang: <span class=\"constructor\" data-type=\"State.Model.lang\">OtherLang</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'>item</span>)}\n                }</span> else {\n                  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Skipping unexpected code option: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1044'>item</span>);\n                  <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1043'>options</span>\n                }\n              }\n            }\n\n          }\n        }\n        }\n      }\n      }\n    }, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-global-use='State/1055'>defaultOptions</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1041'>parts</span>);\n    if (<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1042'>options</span>.<span class=\"field\" data-type=\"State.Model.lang\">lang</span> <span class=\"operator\" data-type=\"(State.Model.lang, State.Model.lang) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"State.Model.lang\">Reason</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1042'>options</span>.<span class=\"field\" data-type=\"State.Model.lang\">lang</span> <span class=\"operator\" data-type=\"(State.Model.lang, State.Model.lang) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"State.Model.lang\">OCaml</span>) {\n      <span class=\"constructor\" data-type=\"option(State.Model.codeOptions)\">Some</span>(<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1042'>options</span>)\n    } else {\n      <span class=\"constructor\" data-type=\"option(State.Model.codeOptions)\">None</span>\n    }\n  }\n}", "values": [{"id": "CodeSnippets/1009", "name": "matchOption", "moduleName": "CodeSnippets"}, {"id": "State/1055", "name": "defaultOptions", "moduleName": "State"}], "chars": 2345, "lines": 60, "type": "(string, 'a) => option(State.Model.codeOptions)"},
"GenerateDoc/1036": {"name": "isUpperCase", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1036' data-type=\"char => bool\">isUpperCase</span> = <span class=\"pattern-ident\" data-local-define='GenerateDoc/1037' data-type=\"char\">t</span> =&gt; <span class=\"ident\" data-type=\"char\" data-local-use='GenerateDoc/1037'>t</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&gt;=</span> &#39;A&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"char\" data-local-use='GenerateDoc/1037'>t</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&lt;=</span> &#39;Z&#39;", "values": [], "chars": 43, "lines": 0, "type": "char => bool"},
"Typing/1028": {"name": "showLident", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1028' data-type=\"Longident.t => string\">showLident</span> = <span class=\"pattern-ident\" data-local-define='Typing/1029' data-type=\"Longident.t\">l</span> =&gt; <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span>, <span class=\"ident\" data-type=\"Longident.t => list(string)\" data-stamp-missing>Longident.flatten</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1029'>l</span>))", "values": [], "chars": 62, "lines": 0, "type": "Longident.t => string"},
"GenerateDoc/1197": {"name": "docsForModule", "moduleName": "GenerateDoc", "html": "and <span class=\"pattern-ident\" data-local-define='GenerateDoc/1197' data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))\">docsForModule</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1234' data-type=\"PrintType.T.stringifier\">printer</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1235' data-type=\"t\">processDocString</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1236' data-type=\"list(string)\">path</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1237' data-type=\"int\">tocLevel</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1238' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1239' data-type=\"Omd.t\">docString</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1240' data-type=\"list(State.Model.Docs.doc)\">contents</span>) =&gt; {\n  open Omd;\n\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1241' data-type=\"Hashtbl.t(State.Model.Docs.doc, bool)\">shownItems</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  State.Model.Docs.doc,\n  bool\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1242' data-type=\"Pervasives.ref(bool)\">shownAll</span> = <span class=\"ident\" data-type=\"bool => Pervasives.ref(bool)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"bool\">false</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1243' data-type=\"list(State.Model.Docs.doc)\">docItems</span> = <span class=\"ident\" data-type=\"list(State.Model.Docs.doc) => list(State.Model.Docs.doc)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(State.Model.Docs.doc) => list(State.Model.Docs.doc)\" data-global-use='GenerateDoc/1087'>uniqueItems</span>(<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1240'>contents</span>));\n\n  let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1244' data-type=\"(\n  list((int, string, string, string)) => 'a,\n  Pervasives.ref(int),\n  'a,\n  Omd.element\n) => option(string)\">processMagics</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1245' data-type=\"list((int, string, string, string)) => 'a\">addTocs</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1246' data-type=\"Pervasives.ref(int)\">lastLevel</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1247' data-type=\"'a\">recur</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1248' data-type=\"Omd.element\">element</span>) =&gt; switch <span class=\"ident\" data-type=\"Omd.element\" data-local-use='GenerateDoc/1248'>element</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Omd.element\">Paragraph</span>([<span data-type=\"Omd.t\"><span class=\"pattern-constructor\" data-type=\"list(Omd.element)\"><span class=\"pattern-constructor\" data-type=\"Omd.element\">Text</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1249' data-type=\"string\">t</span>)</span></span>]) =&gt; {\n    if (<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1249'>t</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;@all&quot;</span>) {\n      <span class=\"constructor\" data-type=\"option(string)\">Some</span>((<span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => string,\n  list(State.Model.Docs.doc)\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1250' data-type=\"State.Model.Docs.doc\">doc</span> =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1251' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1252' data-type=\"list((int, string, string, string))\">tocs</span>) = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  State.Model.Docs.doc\n) => (string, list((int, string, string, string)))\" data-global-use='GenerateDoc/1196'>generateDoc</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1234'>printer</span>, <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1235'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1236'>path</span>, <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1237'>tocLevel</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='GenerateDoc/1246'>lastLevel</span><span class=\"operator\" data-type=\"Pervasives.ref(int) => int\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1250'>doc</span>);\n        <span class=\"ident\" data-type=\"Pervasives.ref(bool)\" data-local-use='GenerateDoc/1242'>shownAll</span> <span class=\"operator\" data-type=\"(Pervasives.ref(bool), bool) => unit\" data-stamp-missing>:=</span> <span class=\"constructor\" data-type=\"bool\">true</span>;\n        <span class=\"ident\" data-type=\"list((int, string, string, string)) => 'a\" data-local-use='GenerateDoc/1245'>addTocs</span>(<span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1252'>tocs</span>);\n        <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1251'>html</span>\n      }, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1243'>docItems</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n\\n&quot;</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>)\n    } else if (<span class=\"ident\" data-type=\"(Str.regexp, string, int) => bool\" data-stamp-missing>Str.string_match</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp</span>(<span class=\"string\" data-type=\"string\">&quot;^@doc [^\\n]+&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1249'>t</span>, <span class=\"int\" data-type=\"int\">0</span>)) {\n      <span class=\"constructor\" data-type=\"option(string)\">Some</span>({\n        let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1253' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Str.matched_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1249'>t</span>);\n        let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1254' data-type=\"string\">raw</span> = <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1253'>text</span>, <span class=\"int\" data-type=\"int\">5</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1253'>text</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">5</span>);\n        let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1255' data-type=\"list(string)\">items</span> = <span class=\"ident\" data-type=\"(Str.regexp, string) => list(string)\" data-stamp-missing>Str.split</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;,&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1254'>raw</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>);\n        (<span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1255'>items</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1256' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"(\n  option(State.Model.Docs.doc),\n  string,\n  State.Model.Docs.doc => string\n) => string\" data-global-use='Infix/1036'>fold</span>(<span class=\"ident\" data-type=\"(list(State.Model.Docs.doc), string) => option(\n  State.Model.Docs.doc\n)\" data-global-use='GenerateDoc/1015'>findByName</span>(<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1243'>docItems</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1256'>name</span>), <span class=\"string\" data-type=\"string\">&quot;Invalid doc item referenced: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1256'>name</span>, (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1257' data-type=\"State.Model.Docs.doc\">doc</span>) =&gt; {\n          <span class=\"ident\" data-type=\"(\n  Hashtbl.t(State.Model.Docs.doc, bool),\n  State.Model.Docs.doc,\n  bool\n) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(State.Model.Docs.doc, bool)\" data-local-use='GenerateDoc/1241'>shownItems</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1257'>doc</span>, <span class=\"constructor\" data-type=\"bool\">true</span>);\n          let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1258' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1259' data-type=\"list((int, string, string, string))\">tocs</span>) = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  State.Model.Docs.doc\n) => (string, list((int, string, string, string)))\" data-global-use='GenerateDoc/1196'>generateDoc</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1234'>printer</span>, <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1235'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1236'>path</span>, <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1237'>tocLevel</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='GenerateDoc/1246'>lastLevel</span><span class=\"operator\" data-type=\"Pervasives.ref(int) => int\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1257'>doc</span>);\n          <span class=\"ident\" data-type=\"list((int, string, string, string)) => 'a\" data-local-use='GenerateDoc/1245'>addTocs</span>(<span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1259'>tocs</span>);\n          <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1258'>html</span>\n        }))) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n\\n&quot;</span>);\n      })\n    } else if (<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1249'>t</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;@includes&quot;</span>) {\n      <span class=\"constructor\" data-type=\"option(string)\">Some</span>({\n        let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1260' data-type=\"list(State.Model.Docs.doc)\">items</span> = <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1243'>docItems</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => list(\n    State.Model.Docs.doc\n  )\n) => list(State.Model.Docs.doc)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => bool,\n  list(State.Model.Docs.doc)\n) => list(State.Model.Docs.doc)\" data-stamp-missing>List.filter</span>(((_, _, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1261' data-type=\"State.Model.Docs.docItem\">docItem</span>)) =&gt; switch <span class=\"ident\" data-type=\"State.Model.Docs.docItem\" data-local-use='GenerateDoc/1261'>docItem</span> {\n        | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(_) =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n        | _ =&gt; <span class=\"constructor\" data-type=\"bool\">false</span>\n        });\n        <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1260'>items</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => string,\n  list(State.Model.Docs.doc)\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1262' data-type=\"State.Model.Docs.doc\">doc</span> =&gt; {\n          <span class=\"ident\" data-type=\"(\n  Hashtbl.t(State.Model.Docs.doc, bool),\n  State.Model.Docs.doc,\n  bool\n) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(State.Model.Docs.doc, bool)\" data-local-use='GenerateDoc/1241'>shownItems</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1262'>doc</span>, <span class=\"constructor\" data-type=\"bool\">true</span>);\n          let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1263' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1264' data-type=\"list((int, string, string, string))\">tocs</span>) = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  State.Model.Docs.doc\n) => (string, list((int, string, string, string)))\" data-global-use='GenerateDoc/1196'>generateDoc</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1234'>printer</span>, <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1235'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1236'>path</span>, <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1237'>tocLevel</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='GenerateDoc/1246'>lastLevel</span><span class=\"operator\" data-type=\"Pervasives.ref(int) => int\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1262'>doc</span>);\n          <span class=\"ident\" data-type=\"list((int, string, string, string)) => 'a\" data-local-use='GenerateDoc/1245'>addTocs</span>(<span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1264'>tocs</span>);\n          <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1263'>html</span>\n        }) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n\\n&quot;</span>)\n      })\n    } else if (<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1249'>t</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;@rest&quot;</span>) {\n      let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1265' data-type=\"list(State.Model.Docs.doc)\">itemsLeft</span> = <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1243'>docItems</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => list(\n    State.Model.Docs.doc\n  )\n) => list(State.Model.Docs.doc)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => bool,\n  list(State.Model.Docs.doc)\n) => list(State.Model.Docs.doc)\" data-stamp-missing>List.filter</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1266' data-type=\"State.Model.Docs.doc\">item</span> =&gt; <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(\n  Hashtbl.t(State.Model.Docs.doc, bool),\n  State.Model.Docs.doc\n) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(State.Model.Docs.doc, bool)\" data-local-use='GenerateDoc/1241'>shownItems</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1266'>item</span>));\n      if (<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1265'>itemsLeft</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc)\n) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"Pervasives.ref(bool)\" data-local-use='GenerateDoc/1242'>shownAll</span><span class=\"operator\" data-type=\"Pervasives.ref(bool) => bool\" data-stamp-missing>^</span>) {\n        <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>)\n      } else {\n        <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"string\" data-type=\"string\">&quot;&lt;p&gt;other items defined&lt;/p&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='GenerateDoc/1265'>itemsLeft</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => string,\n  list(State.Model.Docs.doc)\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1267' data-type=\"State.Model.Docs.doc\">doc</span> =&gt; {\n          <span class=\"ident\" data-type=\"(\n  Hashtbl.t(State.Model.Docs.doc, bool),\n  State.Model.Docs.doc,\n  bool\n) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(State.Model.Docs.doc, bool)\" data-local-use='GenerateDoc/1241'>shownItems</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1267'>doc</span>, <span class=\"constructor\" data-type=\"bool\">true</span>);\n          let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1268' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1269' data-type=\"list((int, string, string, string))\">tocs</span>) = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  State.Model.Docs.doc\n) => (string, list((int, string, string, string)))\" data-global-use='GenerateDoc/1196'>generateDoc</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='GenerateDoc/1234'>printer</span>, <span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1235'>processDocString</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1236'>path</span>, <span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1237'>tocLevel</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='GenerateDoc/1246'>lastLevel</span><span class=\"operator\" data-type=\"Pervasives.ref(int) => int\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='GenerateDoc/1267'>doc</span>);\n          <span class=\"ident\" data-type=\"list((int, string, string, string)) => 'a\" data-local-use='GenerateDoc/1245'>addTocs</span>(<span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='GenerateDoc/1269'>tocs</span>);\n          <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1268'>html</span>\n        }) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n\\n&quot;</span>)))\n      }\n    } else {\n      <span class=\"constructor\" data-type=\"option(string)\">None</span>\n    }\n  }\n  | _ =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  };\n\n  let (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1270' data-type=\"Pervasives.ref(list((int, string, string, string)))\">tocItems</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1271' data-type=\"Omd.element => option(string)\">override</span>) = <span class=\"ident\" data-type=\"(\n  ~?lower: option(bool),\n  int,\n  (\n    list((int, string, string, string)) => unit,\n    Pervasives.ref(int),\n    Omd.element => option(string),\n    Omd.element\n  ) => option(string)\n) => (\n  Pervasives.ref(list((int, string, string, string))),\n  Omd.element => option(string)\n)\" data-global-use='GenerateDoc/1130'>trackToc</span>(<span class=\"ident\" data-type=\"int\" data-local-use='GenerateDoc/1237'>tocLevel</span>, <span class=\"ident\" data-type=\"(\n  list((int, string, string, string)) => unit,\n  Pervasives.ref(int),\n  Omd.element => option(string),\n  Omd.element\n) => option(string)\" data-local-use='GenerateDoc/1244'>processMagics</span>);\n\n  (<span class=\"ident\" data-type=\"t\" data-local-use='GenerateDoc/1235'>processDocString</span>(~<span class=\"ident\" data-type=\"Omd.element => option(string)\" data-local-use='GenerateDoc/1271'>override</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='GenerateDoc/1236'>path</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1238'>name</span>, <span class=\"constructor\" data-type=\"option(State.Model.Docs.docItem)\">Some</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Items</span>(<span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span>))), <span class=\"ident\" data-type=\"Omd.t\" data-local-use='GenerateDoc/1239'>docString</span> <span class=\"operator\" data-type=\"(Omd.t, list(Omd.element)) => Omd.t\" data-stamp-missing>@</span> [<span data-type=\"list(Omd.element)\"><span class=\"constructor\" data-type=\"list(Omd.element)\"><span class=\"constructor\" data-type=\"Omd.element\">Omd.Paragraph</span>([<span data-type=\"Omd.t\"><span class=\"constructor\" data-type=\"list(Omd.element)\"><span class=\"constructor\" data-type=\"Omd.element\">Omd.Text</span>(<span class=\"string\" data-type=\"string\">&quot;@rest&quot;</span>)</span></span>])</span></span>]), <span class=\"ident\" data-type=\"Pervasives.ref(list((int, string, string, string)))\" data-local-use='GenerateDoc/1270'>tocItems</span><span class=\"operator\" data-type=\"Pervasives.ref(list((int, string, string, string))) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>^</span>)\n}", "values": [{"id": "GenerateDoc/1087", "name": "uniqueItems", "moduleName": "GenerateDoc"}, {"id": "Infix/1036", "name": "fold", "moduleName": "Infix"}, {"id": "GenerateDoc/1015", "name": "findByName", "moduleName": "GenerateDoc"}, {"id": "GenerateDoc/1196", "name": "generateDoc", "moduleName": "GenerateDoc"}, {"id": "GenerateDoc/1130", "name": "trackToc", "moduleName": "GenerateDoc"}], "chars": 2493, "lines": 64, "type": "(\n  PrintType.T.stringifier,\n  t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))"},
"ReadMlast/1008": {"name": "read_ml_ast", "moduleName": "ReadMlast", "html": "let <span class=\"pattern-ident\" data-local-define='ReadMlast/1008' data-type=\"Pervasives.in_channel => Parsetree.structure\">read_ml_ast</span>: <span class=\"type-constructor\" data-stamp-missing>in_channel</span> =&gt; <span class=\"type-constructor\" data-stamp-missing>Parsetree.structure</span> = <span class=\"pattern-ident\" data-local-define='ReadMlast/1009' data-type=\"Pervasives.in_channel\">ic</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ReadMlast/1010' data-type=\"string\">magic</span> = <span class=\"ident\" data-type=\"string\" data-stamp-missing>Config.ast_impl_magic_number</span>;\n  let <span class=\"pattern-ident\" data-local-define='ReadMlast/1011' data-type=\"string\">buffer</span> = <span class=\"ident\" data-type=\"(Pervasives.in_channel, int) => string\" data-stamp-missing>really_input_string</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1009'>ic</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1010'>magic</span>));\n  assert (<span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1011'>buffer</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1010'>magic</span>); /* already checked by apply_rewriter */\n  <span class=\"ident\" data-type=\"Pervasives.ref(string)\" data-stamp-missing>Location.input_name</span> <span class=\"operator\" data-type=\"(Pervasives.ref(string), string) => unit\" data-stamp-missing>:=</span> <span class=\"ident\" data-type=\"Pervasives.in_channel => string\" data-stamp-missing>input_value</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1009'>ic</span>);\n  <span class=\"ident\" data-type=\"Pervasives.in_channel => Parsetree.structure\" data-stamp-missing>input_value</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1009'>ic</span>);\n}", "values": [], "chars": 297, "lines": 6, "type": "Pervasives.in_channel => Parsetree.structure"},
"MainAux/1179": {"name": "unwrap", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1179' data-type=\"(string, option('a)) => 'a\">unwrap</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1180' data-type=\"string\">m</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1181' data-type=\"option('a)\">n</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='MainAux/1181'>n</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"string => 'a\" data-stamp-missing>failwith</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1180'>m</span>) | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1182' data-type=\"'a\">n</span>) =&gt; <span class=\"ident\" data-type=\"'a\" data-local-use='MainAux/1182'>n</span> }", "values": [], "chars": 72, "lines": 0, "type": "(string, option('a)) => 'a"},
"CmtFindDocItems/1179": {"name": "docItemsFromSignature", "moduleName": "CmtFindDocItems", "html": "and <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1179' data-type=\"list(Typedtree.signature_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\">docItemsFromSignature</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1230' data-type=\"list(Typedtree.signature_item)\">signature</span>) =&gt; {\n  open Typedtree;\n  <span class=\"ident\" data-type=\"(\n  (\n    (option(Omd.t), list(State.Model.Docs.doc)),\n    Typedtree.signature_item\n  ) => (option(Omd.t), list(State.Model.Docs.doc)),\n  (option(Omd.t), list(State.Model.Docs.doc)),\n  list(Typedtree.signature_item)\n) => (option(Omd.t), list(State.Model.Docs.doc))\" data-stamp-missing>List.fold_left</span>(((<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1231' data-type=\"option(Omd.t)\">global</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1232' data-type=\"list(State.Model.Docs.doc)\">items</span>), <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1233' data-type=\"Typedtree.signature_item\">item</span>) =&gt; switch (<span class=\"ident\" data-type=\"Typedtree.signature_item\" data-local-use='CmtFindDocItems/1233'>item</span>.<span class=\"field\" data-type=\"Typedtree.signature_item_desc\">sig_desc</span>) {\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_value</span>({val_name: {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1234' data-type=\"string\">txt</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1235' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1236' data-type=\"Types.value_description\">val_val</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1238' data-type=\"Typedtree.attributes\">val_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1237' data-type=\"Location.t\">val_loc</span>}) =&gt;\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Typedtree.attributes => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1238'>val_attributes</span>)) {\n      (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, [<span data-type=\"list(State.Model.Docs.doc)\">(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1234'>txt</span>, <span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1238'>val_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(<span class=\"ident\" data-type=\"Types.value_description\" data-local-use='CmtFindDocItems/1236'>val_val</span>.<span class=\"field\" data-type=\"Types.type_expr\">val_type</span>)), ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span></span>])\n    } else {(<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span>)}\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_attribute</span>(({Asttypes.txt: <span class=\"string\" data-type=\"string\">&quot;ocaml.doc&quot;</span>}, <span class=\"pattern-constructor\" data-type=\"Parsetree.payload\">PStr</span>([<span data-type=\"Parsetree.structure\"><span class=\"pattern-constructor\" data-type=\"list(Parsetree.structure_item)\">{pstr_desc: <span class=\"pattern-constructor\" data-type=\"Parsetree.structure_item_desc\">Pstr_eval</span>({pexp_desc: <span class=\"pattern-constructor\" data-type=\"Parsetree.expression_desc\">Pexp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_string</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1239' data-type=\"string\">doc</span>, _))}, _)}</span></span>]))) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1249' data-type=\"Omd.t\">doc</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='PrepareUtils/1038'>cleanOffStars</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1239'>doc</span>) <span class=\"operator\" data-type=\"(string, string => Omd.t) => Omd.t\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>;\n    if (<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc)\n) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span> <span class=\"operator\" data-type=\"(option(Omd.t), option(Omd.t)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"option(Omd.t)\">None</span>) {\n      (<span class=\"constructor\" data-type=\"option(Omd.t)\">Some</span>(<span class=\"ident\" data-type=\"Omd.t\" data-local-use='CmtFindDocItems/1249'>doc</span>), <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span>)\n    } else {\n      (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, [<span data-type=\"list(State.Model.Docs.doc)\">(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"constructor\" data-type=\"option(Omd.t)\">None</span>, <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">StandaloneDoc</span>(<span class=\"ident\" data-type=\"Omd.t\" data-local-use='CmtFindDocItems/1249'>doc</span>)), ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span></span>])\n    }\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_include</span>({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1242' data-type=\"Location.t\">incl_loc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1240' data-type=\"Typedtree.module_type\">incl_mod</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1243' data-type=\"list(Typedtree.attribute)\">incl_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1241' data-type=\"Types.signature\">incl_type</span>}) =&gt; {\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"list(Typedtree.attribute) => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"list(Typedtree.attribute)\" data-local-use='CmtFindDocItems/1243'>incl_attributes</span>)) {\n      switch <span class=\"ident\" data-type=\"Typedtree.module_type\" data-local-use='CmtFindDocItems/1240'>incl_mod</span>.<span class=\"field\" data-type=\"Typedtree.module_type_desc\">mty_desc</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_ident</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1251' data-type=\"Path.t\">path</span>, _) | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_alias</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1251' data-type=\"Path.t\">path</span>, _) =&gt; <span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">Some</span>((<span class=\"ident\" data-type=\"(~?paren: option(string => bool), Path.t) => string\" data-stamp-missing>Path.name</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1251'>path</span>), <span class=\"ident\" data-type=\"list(Typedtree.attribute) => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"list(Typedtree.attribute)\" data-local-use='CmtFindDocItems/1243'>incl_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(<span class=\"constructor\" data-type=\"option(Path.t)\">Some</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1251'>path</span>), <span class=\"ident\" data-type=\"Types.signature => list(State.Model.Docs.doc)\" data-global-use='CmtFindDocItems/1042'>docItemsFromTypes</span>(<span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindDocItems/1241'>incl_type</span>))))\n      | _ =&gt; <span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">Some</span>((<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"list(Typedtree.attribute) => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"list(Typedtree.attribute)\" data-local-use='CmtFindDocItems/1243'>incl_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(<span class=\"constructor\" data-type=\"option(Path.t)\">None</span>, <span class=\"ident\" data-type=\"Types.signature => list(State.Model.Docs.doc)\" data-global-use='CmtFindDocItems/1042'>docItemsFromTypes</span>(<span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindDocItems/1241'>incl_type</span>))))\n      } <span class=\"operator\" data-type=\"(\n  option(State.Model.Docs.doc),\n  option(State.Model.Docs.doc) => (\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n) => (option(Omd.t), list(State.Model.Docs.doc))\" data-stamp-missing>|&gt;</span> <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1253' data-type=\"option(State.Model.Docs.doc)\">a</span> =&gt; switch <span class=\"ident\" data-type=\"option(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1253'>a</span> {\n      | <span class=\"pattern-constructor\" data-type=\"option(State.Model.Docs.doc)\">None</span> =&gt; (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span>)\n      | <span class=\"pattern-constructor\" data-type=\"option(State.Model.Docs.doc)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1254' data-type=\"State.Model.Docs.doc\">item</span>) =&gt; {\n        (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, [<span data-type=\"list(State.Model.Docs.doc)\"><span class=\"ident\" data-type=\"State.Model.Docs.doc\" data-local-use='CmtFindDocItems/1254'>item</span>, ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span></span>])\n      }\n      }\n    } else {(<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span>)}\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_type</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1244' data-type=\"list(Typedtree.type_declaration)\">decls</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Typedtree.type_declaration => option(\n    State.Model.Docs.doc\n  ),\n  list(Typedtree.type_declaration),\n  list(State.Model.Docs.doc)\n) => list(State.Model.Docs.doc)\" data-global-use='PrepareUtils/1061'>foldOpt</span>(({typ_name: {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1255' data-type=\"string\">txt</span>}, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1257' data-type=\"Location.t\">typ_loc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1258' data-type=\"Typedtree.attributes\">typ_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1256' data-type=\"Types.type_declaration\">typ_type</span>}) =&gt;\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Typedtree.attributes => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1258'>typ_attributes</span>)) {\n      <span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">Some</span>((<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1255'>txt</span>, <span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1258'>typ_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(<span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='CmtFindDocItems/1256'>typ_type</span>)))\n    } else {<span class=\"constructor\" data-type=\"option(State.Model.Docs.doc)\">None</span>}, <span class=\"ident\" data-type=\"list(Typedtree.type_declaration)\" data-local-use='CmtFindDocItems/1244'>decls</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span>) <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => (\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n) => (option(Omd.t), list(State.Model.Docs.doc))\" data-stamp-missing>|&gt;</span> <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1259' data-type=\"list(State.Model.Docs.doc)\">a</span> =&gt; (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1259'>a</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.signature_item_desc\">Tsig_module</span>({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1247' data-type=\"Typedtree.attributes\">md_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1248' data-type=\"Location.t\">md_loc</span>, md_name: {<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1245' data-type=\"string\">txt</span>}, md_type: <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1246' data-type=\"Typedtree.module_type\">module_type</span>}) =&gt; {\n    if (<span class=\"ident\" data-type=\"Typedtree.attributes => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1247'>md_attributes</span>)) {\n      (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span>)\n    } else {\n      let (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1260' data-type=\"option(Omd.t)\">docc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1261' data-type=\"State.Model.Docs.moduleContents\">contents</span>) = <span class=\"ident\" data-type=\"Typedtree.module_type => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\" data-global-use='CmtFindDocItems/1180'>moduleContentsSig</span>(<span class=\"ident\" data-type=\"Typedtree.module_type\" data-local-use='CmtFindDocItems/1246'>module_type</span>);\n      (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, [<span data-type=\"list(State.Model.Docs.doc)\">(<span class=\"ident\" data-type=\"string\" data-local-use='CmtFindDocItems/1245'>txt</span>, <span class=\"ident\" data-type=\"(option(Omd.t), option(Omd.t)) => option(Omd.t)\" data-global-use='CmtFindDocItems/1163'>either</span>(<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1260'>docc</span>, <span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1247'>md_attributes</span>)), <span class=\"constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"ident\" data-type=\"State.Model.Docs.moduleContents\" data-local-use='CmtFindDocItems/1261'>contents</span>)), ...<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span></span>])\n    }\n  }\n  | _ =&gt; (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1231'>global</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1232'>items</span>)\n  }, (<span class=\"constructor\" data-type=\"option(Omd.t)\">None</span>, <span class=\"constructor\" data-type=\"list(State.Model.Docs.doc)\">[]</span>), <span class=\"ident\" data-type=\"list(Typedtree.signature_item)\" data-local-use='CmtFindDocItems/1230'>signature</span>);\n}", "values": [{"id": "PrepareUtils/1038", "name": "cleanOffStars", "moduleName": "PrepareUtils"}, {"id": "CmtFindDocItems/1042", "name": "docItemsFromTypes", "moduleName": "CmtFindDocItems"}, {"id": "PrepareUtils/1061", "name": "foldOpt", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1057", "name": "hasNoDoc", "moduleName": "PrepareUtils"}, {"id": "CmtFindDocItems/1180", "name": "moduleContentsSig", "moduleName": "CmtFindDocItems"}, {"id": "CmtFindDocItems/1163", "name": "either", "moduleName": "CmtFindDocItems"}, {"id": "PrepareUtils/1051", "name": "findDocAttribute", "moduleName": "PrepareUtils"}], "chars": 1907, "lines": 42, "type": "list(Typedtree.signature_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)"},
"CodeSnippets/1223": {"name": "refmtCommand", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1223' data-type=\"(string, string, string) => string\">refmtCommand</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1224' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1225' data-type=\"string\">re</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1226' data-type=\"string\">refmt</span>) =&gt; {\n  <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (\n      string,\n      string,\n      string,\n      string,\n      string,\n      string\n    ) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string,\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    string\n  ) => string,\n  (\n    string,\n    string,\n    string,\n    string,\n    string,\n    string\n  ) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string, string) => string,\n  (string, string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string, string) => string,\n  (string, string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|cat %s | %s --print binary &gt; %s.ast &amp;&amp; %s %s.ast %s_ppx.ast|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1225'>re</span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1226'>refmt</span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1225'>re</span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1224'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/reactjs_jsx_ppx_2.exe&quot;</span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1225'>re</span>,\n  <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1225'>re</span>\n  )\n}", "values": [{"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 200, "lines": 9, "type": "(string, string, string) => string"},
"CodeSnippets/1008": {"name": "codeBlockPrefix", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1008' data-type=\"string\">codeBlockPrefix</span> = <span class=\"string\" data-type=\"string\">&quot;DOCRE_CODE_BLOCK_&quot;</span>", "values": [], "chars": 41, "lines": 0, "type": "string"},
"CmtFindDocItems/1180": {"name": "moduleContentsSig", "moduleName": "CmtFindDocItems", "html": "and <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1180' data-type=\"Typedtree.module_type => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\">moduleContentsSig</span> = ({<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1262' data-type=\"Typedtree.module_type_desc\">Typedtree.mty_desc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1264' data-type=\"Typedtree.attributes\">mty_attributes</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1263' data-type=\"Location.t\">mty_loc</span>}) =&gt; {\n  open Typedtree;\n  switch <span class=\"ident\" data-type=\"Typedtree.module_type_desc\" data-local-use='CmtFindDocItems/1262'>mty_desc</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_signature</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1265' data-type=\"Typedtree.signature\">signature</span>) =&gt; {\n    let (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1271' data-type=\"option(Omd.t)\">docc</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1272' data-type=\"list(State.Model.Docs.doc)\">contents</span>) = <span class=\"ident\" data-type=\"list(Typedtree.signature_item) => (\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='CmtFindDocItems/1179'>docItemsFromSignature</span>(<span class=\"ident\" data-type=\"Typedtree.signature\" data-local-use='CmtFindDocItems/1265'>signature</span>.<span class=\"field\" data-type=\"list(Typedtree.signature_item)\">sig_items</span>);\n    (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CmtFindDocItems/1271'>docc</span>, <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Items</span>(<span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1272'>contents</span>))\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_alias</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1266' data-type=\"Path.t\">path</span>, _) | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_ident</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1266' data-type=\"Path.t\">path</span>, _) =&gt; (<span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1264'>mty_attributes</span>), <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Alias</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1266'>path</span>))\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_functor</span>(_, _, _, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1268' data-type=\"Typedtree.module_type\">result</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.module_type => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\" data-global-use='CmtFindDocItems/1180'>moduleContentsSig</span>(<span class=\"ident\" data-type=\"Typedtree.module_type\" data-local-use='CmtFindDocItems/1268'>result</span>) <span class=\"operator\" data-type=\"(\n  (option(Omd.t), State.Model.Docs.moduleContents),\n  (option(Omd.t), State.Model.Docs.moduleContents) => (\n    option(Omd.t),\n    State.Model.Docs.moduleContents\n  )\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  option(Omd.t) => option(Omd.t),\n  (option(Omd.t), State.Model.Docs.moduleContents)\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-global-use='CmtFindDocItems/1168'>mapFst</span>(<span class=\"ident\" data-type=\"(option(Omd.t), option(Omd.t)) => option(Omd.t)\" data-global-use='CmtFindDocItems/1163'>either</span>(<span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1264'>mty_attributes</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_with</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1269' data-type=\"Typedtree.module_type\">inner</span>, _) =&gt; <span class=\"ident\" data-type=\"Typedtree.module_type => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)\" data-global-use='CmtFindDocItems/1180'>moduleContentsSig</span>(<span class=\"ident\" data-type=\"Typedtree.module_type\" data-local-use='CmtFindDocItems/1269'>inner</span>) <span class=\"operator\" data-type=\"(\n  (option(Omd.t), State.Model.Docs.moduleContents),\n  (option(Omd.t), State.Model.Docs.moduleContents) => (\n    option(Omd.t),\n    State.Model.Docs.moduleContents\n  )\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  option(Omd.t) => option(Omd.t),\n  (option(Omd.t), State.Model.Docs.moduleContents)\n) => (option(Omd.t), State.Model.Docs.moduleContents)\" data-global-use='CmtFindDocItems/1168'>mapFst</span>(<span class=\"ident\" data-type=\"(option(Omd.t), option(Omd.t)) => option(Omd.t)\" data-global-use='CmtFindDocItems/1163'>either</span>(<span class=\"ident\" data-type=\"Typedtree.attributes => option(Omd.t)\" data-global-use='PrepareUtils/1051'>findDocAttribute</span>(<span class=\"ident\" data-type=\"Typedtree.attributes\" data-local-use='CmtFindDocItems/1264'>mty_attributes</span>)))\n  | <span class=\"pattern-constructor\" data-type=\"Typedtree.module_type_desc\">Tmty_typeof</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1270' data-type=\"Typedtree.module_expr\">modd</span>)\n    =&gt; assert(<span class=\"constructor\" data-type=\"bool\">false</span>)\n  }\n}", "values": [{"id": "CmtFindDocItems/1179", "name": "docItemsFromSignature", "moduleName": "CmtFindDocItems"}, {"id": "CmtFindDocItems/1168", "name": "mapFst", "moduleName": "CmtFindDocItems"}, {"id": "CmtFindDocItems/1163", "name": "either", "moduleName": "CmtFindDocItems"}, {"id": "PrepareUtils/1051", "name": "findDocAttribute", "moduleName": "PrepareUtils"}], "chars": 617, "lines": 13, "type": "Typedtree.module_type => (\n  option(Omd.t),\n  State.Model.Docs.moduleContents\n)"},
"PrepareUtils/1038": {"name": "cleanOffStars", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1038' data-type=\"string => string\">cleanOffStars</span> = <span class=\"pattern-ident\" data-local-define='PrepareUtils/1039' data-type=\"string\">doc</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1040' data-type=\"list(string)\">lines</span> = <span class=\"ident\" data-type=\"(Str.regexp, string) => list(string)\" data-stamp-missing>Str.split</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1039'>doc</span>);\n  let rec <span class=\"pattern-ident\" data-local-define='PrepareUtils/1041' data-type=\"(bool, list(string)) => option(int)\">loop</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1042' data-type=\"bool\">first</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1043' data-type=\"list(string)\">lines</span>) =&gt; {\n    switch <span class=\"ident\" data-type=\"list(string)\" data-local-use='PrepareUtils/1043'>lines</span> {\n    | <span class=\"pattern-constructor\" data-type=\"list(string)\">[]</span> =&gt; <span class=\"constructor\" data-type=\"option(int)\">None</span>\n    | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='PrepareUtils/1044' data-type=\"string\"><span class=\"pattern-constructor\" data-type=\"list(string)\">one</span></span></span>] =&gt; (<span class=\"ident\" data-type=\"bool\" data-local-use='PrepareUtils/1042'>first</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1044'>one</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"constructor\" data-type=\"option(int)\">None</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"string => option(int)\" data-global-use='PrepareUtils/1022'>findStars</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1044'>one</span>)\n    | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='PrepareUtils/1045' data-type=\"string\">one</span>, ...<span class=\"pattern-ident\" data-local-define='PrepareUtils/1046' data-type=\"list(string)\">rest</span></span>] =&gt; (<span class=\"ident\" data-type=\"bool\" data-local-use='PrepareUtils/1042'>first</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1045'>one</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"(bool, list(string)) => option(int)\" data-local-use='PrepareUtils/1041'>loop</span>(<span class=\"constructor\" data-type=\"bool\">false</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='PrepareUtils/1046'>rest</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(option(int), option(int)) => option(int)\" data-global-use='PrepareUtils/1027'>combine</span>(<span class=\"ident\" data-type=\"string => option(int)\" data-global-use='PrepareUtils/1022'>findStars</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1045'>one</span>), <span class=\"ident\" data-type=\"(bool, list(string)) => option(int)\" data-local-use='PrepareUtils/1041'>loop</span>(<span class=\"constructor\" data-type=\"bool\">false</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='PrepareUtils/1046'>rest</span>))\n    }\n  };\n  let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1047' data-type=\"option(int)\">num</span> = <span class=\"ident\" data-type=\"(bool, list(string)) => option(int)\" data-local-use='PrepareUtils/1041'>loop</span>(<span class=\"constructor\" data-type=\"bool\">true</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='PrepareUtils/1040'>lines</span>);\n  switch <span class=\"ident\" data-type=\"option(int)\" data-local-use='PrepareUtils/1047'>num</span> {\n  | <span class=\"pattern-constructor\" data-type=\"option(int)\">None</span> | <span class=\"pattern-constructor\" data-type=\"option(int)\">Some</span>(<span class=\"int\" data-type=\"int\">0</span>) =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1039'>doc</span>\n  | <span class=\"pattern-constructor\" data-type=\"option(int)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1048' data-type=\"int\">num</span>) =&gt; switch <span class=\"ident\" data-type=\"list(string)\" data-local-use='PrepareUtils/1040'>lines</span> {\n    | <span class=\"pattern-constructor\" data-type=\"list(string)\">[]</span> | [<span data-type=\"list(string)\"><span class=\"pattern-constructor\" data-type=\"list(string)\">_</span></span>] =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1039'>doc</span>\n    | [<span data-type=\"list(string)\"><span class=\"pattern-ident\" data-local-define='PrepareUtils/1049' data-type=\"string\">one</span>, ...<span class=\"pattern-ident\" data-local-define='PrepareUtils/1050' data-type=\"list(string)\">rest</span></span>] =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1049'>one</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='PrepareUtils/1050'>rest</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(int, string) => string\" data-global-use='PrepareUtils/1034'>trimFirst</span>(<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1048'>num</span>)))\n    }\n  }\n}", "values": [{"id": "PrepareUtils/1027", "name": "combine", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1022", "name": "findStars", "moduleName": "PrepareUtils"}, {"id": "PrepareUtils/1034", "name": "trimFirst", "moduleName": "PrepareUtils"}], "chars": 607, "lines": 17, "type": "string => string"},
"ModelToOutput/1008": {"name": "writeEditorSupport", "moduleName": "ModelToOutput", "html": "let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1008' data-type=\"(string, string, (string, Buffer.t)) => unit\">writeEditorSupport</span> = (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1009' data-type=\"string\">static</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1010' data-type=\"string\">directory</span>, (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1011' data-type=\"string\">browserCompilerPath</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1012' data-type=\"Buffer.t\">compilerDepsBuffer</span>)) =&gt; {\n  <span class=\"ident\" data-type=\"(~source: string, ~dest: string) => unit\" data-stamp-missing>Files.copyExn</span>(~source=<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1011'>browserCompilerPath</span>, ~dest=<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1010'>directory</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bucklescript.js&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1013' data-type=\"Pervasives.out_channel\">out</span> = <span class=\"ident\" data-type=\"string => Pervasives.out_channel\" data-stamp-missing>open_out</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1010'>directory</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bucklescript-deps.js&quot;</span>);\n  <span class=\"ident\" data-type=\"(Pervasives.out_channel, Buffer.t) => unit\" data-stamp-missing>Buffer.output_buffer</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='ModelToOutput/1013'>out</span>, <span class=\"ident\" data-type=\"Buffer.t\" data-local-use='ModelToOutput/1012'>compilerDepsBuffer</span>);\n  <span class=\"ident\" data-type=\"Pervasives.out_channel => unit\" data-stamp-missing>close_out</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='ModelToOutput/1013'>out</span>);\n\n  [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;jsx-ppx.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;refmt.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/lib/codemirror.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/lib/codemirror.css&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/mode/rust/rust.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/addon/mode/simple.js&quot;</span></span></span></span></span></span></span></span>]\n  <span class=\"operator\" data-type=\"(list(string), list(string) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => unit, list(string)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"pattern-ident\" data-local-define='ModelToOutput/1014' data-type=\"string\">name</span> =&gt; {\n    <span class=\"ident\" data-type=\"(~source: string, ~dest: string) => unit\" data-stamp-missing>Files.copyExn</span>(~source=<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1009'>static</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1014'>name</span>, ~dest=<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1010'>directory</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1014'>name</span>));\n  });\n}", "values": [{"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 622, "lines": 15, "type": "(string, string, (string, Buffer.t)) => unit"},
"GenerateDoc/1192": {"name": "link", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1192' data-type=\"(string, string) => string\">link</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1193' data-type=\"string\">id</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1194' data-type=\"string\">text</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string, string) => string,\n  (string, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;#%s&quot; id=&quot;%s&quot;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1193'>id</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1193'>id</span>, <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1194'>text</span>)", "values": [], "chars": 87, "lines": 0, "type": "(string, string) => string"},
"PrepareUtils/1022": {"name": "findStars", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1022' data-type=\"string => option(int)\">findStars</span> = <span class=\"pattern-ident\" data-local-define='PrepareUtils/1023' data-type=\"string\">line</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1024' data-type=\"int\">l</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1023'>line</span>);\n  let rec <span class=\"pattern-ident\" data-local-define='PrepareUtils/1025' data-type=\"int => option(int)\">loop</span> = <span class=\"pattern-ident\" data-local-define='PrepareUtils/1026' data-type=\"int\">i</span> =&gt; {\n    if (<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1026'>i</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1024'>l</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>) {\n      <span class=\"constructor\" data-type=\"option(int)\">None</span>\n    } else if (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1023'>line</span>.[<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1026'>i</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;*&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='PrepareUtils/1023'>line</span>.[<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1026'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39; &#39;) {\n      <span class=\"constructor\" data-type=\"option(int)\">Some</span>(<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1026'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">2</span>)\n    } else {\n      <span class=\"ident\" data-type=\"int => option(int)\" data-local-use='PrepareUtils/1025'>loop</span>(<span class=\"ident\" data-type=\"int\" data-local-use='PrepareUtils/1026'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>)\n    }\n  };\n  <span class=\"ident\" data-type=\"int => option(int)\" data-local-use='PrepareUtils/1025'>loop</span>(<span class=\"int\" data-type=\"int\">0</span>)\n}", "values": [], "chars": 242, "lines": 12, "type": "string => option(int)"},
"CodeSnippets/1339": {"name": "process", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1339' data-type=\"(\n  ~bsRoot: string,\n  ~editingEnabled: bool,\n  ~test: bool,\n  list((string, 'a, Omd.t, 'a)),\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  ),\n  string,\n  string,\n  Omd.element\n) => option(string)\">process</span> = (~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1340' data-type=\"string\">bsRoot</span>, ~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1341' data-type=\"bool\">editingEnabled</span>, ~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1342' data-type=\"bool\">test</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1343' data-type=\"list((string, 'a, Omd.t, 'a))\">markdowns</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1344' data-type=\"list(\n  (\n    'a,\n    string,\n    'a,\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\">cmts</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1345' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1346' data-type=\"string\">dest</span>) =&gt;  {\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1347' data-type=\"list(codeBlock)\">blocks</span> = <span class=\"ident\" data-type=\"(\n  list((string, 'a, Omd.t, 'a)),\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  )\n) => list(codeBlock)\" data-global-use='CodeSnippets/1130'>getCodeBlocks</span>(<span class=\"ident\" data-type=\"list((string, 'a, Omd.t, 'a))\" data-local-use='CodeSnippets/1343'>markdowns</span>, <span class=\"ident\" data-type=\"list(\n  (\n    'a,\n    string,\n    'a,\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\" data-local-use='CodeSnippets/1344'>cmts</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1348' data-type=\"Json.t\">packageJson</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;package.json&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;No package.json in &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1349' data-type=\"string\">packageJsonName</span> = <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1348'>packageJson</span> <span class=\"operator\" data-type=\"(Json.t, Json.t => option(Json.t)) => option(Json.t)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, Json.t) => option(Json.t)\" data-stamp-missing>Json.get</span>(<span class=\"string\" data-type=\"string\">&quot;name&quot;</span>) <span class=\"operator\" data-type=\"(option(Json.t), Json.t => option(string)) => option(string)\" data-global-use='Infix/1028'>|?&gt;</span> <span class=\"ident\" data-type=\"Json.t => option(string)\" data-stamp-missing>Json.string</span> <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;Missing name in package.json&quot;</span>;\n\n  let (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1350' data-type=\"Hashtbl.t(Omd.element, compiledBlock)\">blocksByEl</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1351' data-type=\"list(compiledBlock)\">blocks</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1352' data-type=\"list((string, string))\">dependencyDirs</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1353' data-type=\"list(string)\">stdlibRequires</span>) = <span class=\"ident\" data-type=\"(~bsRoot: string, string, string, list(codeBlock)) => (\n  Hashtbl.t(Omd.element, compiledBlock),\n  list(compiledBlock),\n  list((string, string)),\n  list(string)\n)\" data-global-use='CodeSnippets/1255'>compileSnippets</span>(~<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1340'>bsRoot</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1346'>dest</span>, <span class=\"ident\" data-type=\"list(codeBlock)\" data-local-use='CodeSnippets/1347'>blocks</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1354' data-type=\"Pervasives.out_channel\">out</span> = <span class=\"ident\" data-type=\"string => Pervasives.out_channel\" data-stamp-missing>open_out</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1346'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bucklescript-deps.js&quot;</span>);\n  <span class=\"ident\" data-type=\"(\n  ~output_string: string => unit,\n  ~dependencyDirs: list((string, string)),\n  ~stdlibRequires: list(string),\n  ~bsRoot: string,\n  ~base: string\n) => unit\" data-global-use='CodeSnippets/1205'>writeDeps</span>(~output_string=<span class=\"ident\" data-type=\"(Pervasives.out_channel, string) => unit\" data-stamp-missing>output_string</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='CodeSnippets/1354'>out</span>), ~<span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CodeSnippets/1352'>dependencyDirs</span>, ~<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1353'>stdlibRequires</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1340'>bsRoot</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>);\n  <span class=\"ident\" data-type=\"Pervasives.out_channel => unit\" data-stamp-missing>close_out</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='CodeSnippets/1354'>out</span>);\n\n  if (<span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1342'>test</span>) {\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Running tests&quot;</span>);\n\n    /* TODO run in parallel - maybe all in the same node process?? */\n    <span class=\"ident\" data-type=\"list(compiledBlock)\" data-local-use='CodeSnippets/1351'>blocks</span> <span class=\"operator\" data-type=\"(list(compiledBlock), list(compiledBlock) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(compiledBlock => unit, list(compiledBlock)) => unit\" data-stamp-missing>List.iter</span>(({<span class=\"pattern-ident\" data-local-define='CodeSnippets/1358' data-type=\"State.Model.compilationResult\">status</span>, block: {<span class=\"pattern-ident\" data-local-define='CodeSnippets/1357' data-type=\"State.Model.codeOptions\">options</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1356' data-type=\"string\">fileName</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1355' data-type=\"int\">id</span>}}) =&gt; {\n      <span class=\"ident\" data-type=\"(\n  string,\n  ~base: string,\n  State.Model.compilationResult,\n  State.Model.codeOptions,\n  string,\n  int\n) => unit\" data-global-use='CodeSnippets/1327'>testBlock</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1349'>packageJsonName</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>, <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1358'>status</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1357'>options</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1356'>fileName</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1355'>id</span>);\n    });\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1359' data-type=\"list(string)\">allJsFiles</span>: <span class=\"type-constructor\" data-local-use='CodeSnippets/9'>list</span>(<span class=\"type-constructor\" data-local-use='CodeSnippets/3'>string</span>) = <span class=\"ident\" data-type=\"list(compiledBlock)\" data-local-use='CodeSnippets/1351'>blocks</span> <span class=\"operator\" data-type=\"(\n  list(compiledBlock),\n  list(compiledBlock) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  compiledBlock => option(string),\n  list(compiledBlock)\n) => list(string)\" data-global-use='CodeSnippets/1170'>optMap</span>(({<span class=\"pattern-ident\" data-local-define='CodeSnippets/1360' data-type=\"State.Model.compilationResult\">status</span>}) =&gt; switch <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1360'>status</span> {\n    | <span class=\"pattern-constructor\" data-type=\"State.Model.compilationResult\">Success</span>(_, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1361' data-type=\"string\">js</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1361'>js</span>) | _ =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1362' data-type=\"string\">bundle</span> = try (<span class=\"ident\" data-type=\"(\n  ~?mode: option(Packre.Types.mode),\n  ~renames: list((Packre.Types.StrMap.key, string)),\n  ~?extraRequires: option(list(Packre.Types.StrMap.key)),\n  ~?base: option(string),\n  list(Packre.Types.StrMap.key)\n) => string\" data-stamp-missing>Packre.Pack.process</span>(\n    ~mode=<span class=\"constructor\" data-type=\"Packre.Types.mode\">Packre.Types.JustExternals</span>,\n    ~renames=[<span data-type=\"list((Packre.Types.StrMap.key, string))\"><span class=\"constructor\" data-type=\"list((Packre.Types.StrMap.key, string))\">(<span class=\"ident\" data-type=\"Packre.Types.StrMap.key\" data-local-use='CodeSnippets/1349'>packageJsonName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>)</span></span>],\n    ~extraRequires=<span class=\"ident\" data-type=\"list(Packre.Types.StrMap.key)\" data-local-use='CodeSnippets/1353'>stdlibRequires</span>,\n    ~<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>,\n    <span class=\"ident\" data-type=\"list(Packre.Types.StrMap.key)\" data-local-use='CodeSnippets/1359'>allJsFiles</span>\n  )) {\n    | _ =&gt; <span class=\"string\" data-type=\"string\">&quot;alert(&#39;Failed to bundle&#39;)&quot;</span>\n  };\n  <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Files.writeFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1346'>dest</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;all-deps.js&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1362'>bundle</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;;window.loadedAllDeps = true;&quot;</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n\n  (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1363' data-type=\"Omd.element\">element</span>) =&gt; switch <span class=\"ident\" data-type=\"Omd.element\" data-local-use='CodeSnippets/1363'>element</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Omd.element\">Omd.Code_block</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1364' data-type=\"Omd.name\">lang</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1365' data-type=\"string\">content</span>) =&gt; {\n    switch (<span class=\"ident\" data-type=\"(\n  Hashtbl.t(Omd.element, compiledBlock),\n  Omd.element\n) => compiledBlock\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Omd.element, compiledBlock)\" data-local-use='CodeSnippets/1350'>blocksByEl</span>, <span class=\"ident\" data-type=\"Omd.element\" data-local-use='CodeSnippets/1363'>element</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1369' data-type=\"option(State.Model.codeOptions)\">options</span> = <span class=\"ident\" data-type=\"(Omd.name, State.Model.codeOptions) => option(\n  State.Model.codeOptions\n)\" data-global-use='CodeSnippets/1012'>parseCodeOptions</span>(<span class=\"ident\" data-type=\"Omd.name\" data-local-use='CodeSnippets/1364'>lang</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-global-use='State/1055'>State.Model.defaultOptions</span>);\n      switch <span class=\"ident\" data-type=\"option(State.Model.codeOptions)\" data-local-use='CodeSnippets/1369'>options</span> {\n      | <span class=\"pattern-constructor\" data-type=\"option(State.Model.codeOptions)\">Some</span>({sharedAs: <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(_)}) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>)\n      | _ =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n      }\n    }\n    | {<span class=\"pattern-ident\" data-local-define='CodeSnippets/1366' data-type=\"codeBlock\">block</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1367' data-type=\"State.Model.compilationResult\">status</span>} =&gt; {\n      if (<span class=\"ident\" data-type=\"codeBlock\" data-local-use='CodeSnippets/1366'>block</span>.<span class=\"field\" data-type=\"State.Model.codeOptions\">options</span>.<span class=\"field\" data-type=\"State.Model.codeDisplay\">State.Model.codeDisplay</span>.<span class=\"field\" data-type=\"bool\">hide</span>) {\n        <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>)\n      } else {\n        <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(\n  ~editingEnabled: bool,\n  int,\n  string,\n  State.Model.codeOptions,\n  State.Model.compilationResult,\n  Packre.Types.StrMap.key => string\n) => string\" data-global-use='CodeSnippets/1064'>highlight</span>(~<span class=\"ident\" data-type=\"bool\" data-local-use='CodeSnippets/1341'>editingEnabled</span>, <span class=\"ident\" data-type=\"codeBlock\" data-local-use='CodeSnippets/1366'>block</span>.<span class=\"field\" data-type=\"int\">id</span>, <span class=\"ident\" data-type=\"codeBlock\" data-local-use='CodeSnippets/1366'>block</span>.<span class=\"field\" data-type=\"string\">content</span>, <span class=\"ident\" data-type=\"codeBlock\" data-local-use='CodeSnippets/1366'>block</span>.<span class=\"field\" data-type=\"State.Model.codeOptions\">options</span>, <span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1367'>status</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1368' data-type=\"Packre.Types.StrMap.key\">js</span> =&gt; <span class=\"ident\" data-type=\"(\n  ~?mode: option(Packre.Types.mode),\n  ~renames: list((Packre.Types.StrMap.key, string)),\n  ~?extraRequires: option(list(Packre.Types.StrMap.key)),\n  ~?base: option(string),\n  list(Packre.Types.StrMap.key)\n) => string\" data-stamp-missing>Packre.Pack.process</span>(~mode=<span class=\"constructor\" data-type=\"Packre.Types.mode\">Packre.Types.ExternalEverything</span>, ~renames=[<span data-type=\"list((Packre.Types.StrMap.key, string))\"><span class=\"constructor\" data-type=\"list((Packre.Types.StrMap.key, string))\">(<span class=\"ident\" data-type=\"Packre.Types.StrMap.key\" data-local-use='CodeSnippets/1349'>packageJsonName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>)</span></span>], ~<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1345'>base</span>, [<span data-type=\"list(Packre.Types.StrMap.key)\"><span class=\"ident\" data-type=\"Packre.Types.StrMap.key\" data-local-use='CodeSnippets/1368'><span class=\"constructor\" data-type=\"list(Packre.Types.StrMap.key)\">js</span></span></span>])))\n      }\n    }\n    }\n  }\n  | _ =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  };\n}", "values": [{"id": "CodeSnippets/1130", "name": "getCodeBlocks", "moduleName": "CodeSnippets"}, {"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "Infix/1028", "name": "|?>", "moduleName": "Infix"}, {"id": "CodeSnippets/1255", "name": "compileSnippets", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1205", "name": "writeDeps", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1327", "name": "testBlock", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1170", "name": "optMap", "moduleName": "CodeSnippets"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "CodeSnippets/1064", "name": "highlight", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1012", "name": "parseCodeOptions", "moduleName": "CodeSnippets"}, {"id": "State/1055", "name": "defaultOptions", "moduleName": "State"}], "chars": 2048, "lines": 57, "type": "(\n  ~bsRoot: string,\n  ~editingEnabled: bool,\n  ~test: bool,\n  list((string, 'a, Omd.t, 'a)),\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  ),\n  string,\n  string,\n  Omd.element\n) => option(string)"},
"CodeSnippets/1060": {"name": "escapeScript", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1060' data-type=\"string => string\">escapeScript</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1061' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;&lt;/script&quot;</span>), <span class=\"string\" data-type=\"string\">&quot;&lt;\\\\/script&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1061'>text</span>)", "values": [], "chars": 96, "lines": 0, "type": "string => string"},
"Search/1020": {"name": "serializeSearchables", "moduleName": "Search", "html": "let <span class=\"pattern-ident\" data-local-define='Search/1020' data-type=\"list((string, string, string, string, string)) => string\">serializeSearchables</span> = <span class=\"pattern-ident\" data-local-define='Search/1021' data-type=\"list((string, string, string, string, string))\">searchables</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;[&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;,\\n&quot;</span>, <span class=\"ident\" data-type=\"(\n  (string, string, string, string, string) => string,\n  list((string, string, string, string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string, string, string, string) => string\" data-global-use='Search/1014'>serializeSearchable</span>, <span class=\"ident\" data-type=\"list((string, string, string, string, string))\" data-local-use='Search/1021'>searchables</span>)) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;]&quot;</span>", "values": [{"id": "Search/1014", "name": "serializeSearchable", "moduleName": "Search"}], "chars": 120, "lines": 0, "type": "list((string, string, string, string, string)) => string"},
"Infix/1052": {"name": "/+", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1052' data-type=\"(string, string) => string\">(/+)</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='Infix/1049'>fileConcat</span>", "values": [{"id": "Infix/1049", "name": "fileConcat", "moduleName": "Infix"}], "chars": 21, "lines": 0, "type": "(string, string) => string"},
"GenerateDoc/1074": {"name": "defaultMain", "moduleName": "GenerateDoc", "html": "let <span class=\"pattern-ident\" data-local-define='GenerateDoc/1074' data-type=\"(~?addHeading: option(bool), string) => string\">defaultMain</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1076' data-type=\"bool\">~addHeading=<span class=\"constructor\" data-type=\"bool\">false</span></span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1078' data-type=\"string\">name</span>) =&gt; {\n  (<span class=\"ident\" data-type=\"bool\" data-local-use='GenerateDoc/1076'>addHeading</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;# &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='GenerateDoc/1078'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\n\\n&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span>\n  <span class=\"string\" data-type=\"string\">&quot;&lt;span class=&#39;missing&#39;&gt;This module does not have a toplevel documentation block.&lt;/span&gt;\\n\\n@all&quot;</span>;\n}", "values": [], "chars": 198, "lines": 3, "type": "(~?addHeading: option(bool), string) => string"},
"ProcessCode/1012": {"name": "startsWith", "moduleName": "ProcessCode", "html": "let <span class=\"pattern-ident\" data-local-define='ProcessCode/1012' data-type=\"(string, string) => bool\">startsWith</span> = (<span class=\"pattern-ident\" data-local-define='ProcessCode/1013' data-type=\"string\">prefix</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1014' data-type=\"string\">string</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1015' data-type=\"int\">lp</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1013'>prefix</span>);\n  <span class=\"ident\" data-type=\"int\" data-local-use='ProcessCode/1015'>lp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1014'>string</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1014'>string</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"int\" data-local-use='ProcessCode/1015'>lp</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1013'>prefix</span>\n}", "values": [], "chars": 143, "lines": 3, "type": "(string, string) => bool"},
"Typing/1021": {"name": "toString", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1021' data-type=\"('a => string, ('a, tag)) => string\">toString</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1022' data-type=\"'a => string\">fn</span>, (<span class=\"pattern-ident\" data-local-define='Typing/1023' data-type=\"'a\">a</span>, <span class=\"pattern-ident\" data-local-define='Typing/1024' data-type=\"tag\">tag</span>)) =&gt; switch <span class=\"ident\" data-type=\"tag\" data-local-use='Typing/1024'>tag</span> {\n| <span class=\"pattern-constructor\" data-type=\"tag\">Type</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;type: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"'a => string\" data-local-use='Typing/1022'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1023'>a</span>)\n| <span class=\"pattern-constructor\" data-type=\"tag\">Value</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;value: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"'a => string\" data-local-use='Typing/1022'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1023'>a</span>)\n| <span class=\"pattern-constructor\" data-type=\"tag\">Constructor</span>(<span class=\"pattern-ident\" data-local-define='Typing/1025' data-type=\"string\">b</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;constr: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"'a => string\" data-local-use='Typing/1022'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1023'>a</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; - &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1025'>b</span>\n| <span class=\"pattern-constructor\" data-type=\"tag\">Attribute</span>(<span class=\"pattern-ident\" data-local-define='Typing/1026' data-type=\"string\">b</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot;attr: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"'a => string\" data-local-use='Typing/1022'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1023'>a</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; - &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1026'>b</span>\n| <span class=\"pattern-constructor\" data-type=\"tag\">Module</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;module: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"'a => string\" data-local-use='Typing/1022'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Typing/1023'>a</span>)\n}", "values": [], "chars": 241, "lines": 6, "type": "('a => string, ('a, tag)) => string"},
"GenerateDoc/1015": {"name": "findByName", "moduleName": "GenerateDoc", "html": "let rec <span class=\"pattern-ident\" data-local-define='GenerateDoc/1015' data-type=\"(list(('a, 'a, 'a)), 'a) => option(('a, 'a, 'a))\">findByName</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1016' data-type=\"list(('a, 'a, 'a))\">allDocs</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1017' data-type=\"'a\">name</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"list(('a, 'a, 'a))\" data-local-use='GenerateDoc/1016'>allDocs</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(('a, 'a, 'a))\">[]</span> =&gt; <span class=\"constructor\" data-type=\"option(('a, 'a, 'a))\">None</span>\n  | [<span data-type=\"list(('a, 'a, 'a))\">(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1018' data-type=\"'a\">n</span>, _, _) as doc, ...<span class=\"pattern-ident\" data-local-define='GenerateDoc/1020' data-type=\"list(('a, 'a, 'a))\">rest</span></span>] when <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1018'>n</span> <span class=\"operator\" data-type=\"('a, 'a) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1017'>name</span> =&gt; <span class=\"constructor\" data-type=\"option(('a, 'a, 'a))\">Some</span>(<span class=\"ident\" data-type=\"('a, 'a, 'a)\" data-local-use='GenerateDoc/1019'>doc</span>)\n  | [<span data-type=\"list(('a, 'a, 'a))\">_, ...<span class=\"pattern-ident\" data-local-define='GenerateDoc/1021' data-type=\"list(('a, 'a, 'a))\">rest</span></span>] =&gt; <span class=\"ident\" data-type=\"(list(('a, 'a, 'a)), 'a) => option(('a, 'a, 'a))\" data-global-use='GenerateDoc/1015'>findByName</span>(<span class=\"ident\" data-type=\"list(('a, 'a, 'a))\" data-local-use='GenerateDoc/1021'>rest</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1017'>name</span>)\n  }\n}", "values": [], "chars": 184, "lines": 6, "type": "(list(('a, 'a, 'a)), 'a) => option(('a, 'a, 'a))"},
"InputToModel/1043": {"name": "isReadme", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1043' data-type=\"string => bool\">isReadme</span> = <span class=\"pattern-ident\" data-local-define='InputToModel/1044' data-type=\"string\">path</span> =&gt; <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1044'>path</span>), <span class=\"string\" data-type=\"string\">&quot;/readme.md&quot;</span>)", "values": [], "chars": 82, "lines": 0, "type": "string => bool"},
"CodeSnippets/1255": {"name": "compileSnippets", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1255' data-type=\"(~bsRoot: string, string, 'a, list(codeBlock)) => (\n  Hashtbl.t(Omd.element, compiledBlock),\n  list(compiledBlock),\n  list((string, string)),\n  list(string)\n)\">compileSnippets</span> = (~<span class=\"pattern-ident\" data-local-define='CodeSnippets/1256' data-type=\"string\">bsRoot</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1257' data-type=\"string\">base</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1258' data-type=\"'a\">dest</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1259' data-type=\"list(codeBlock)\">blocks</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1260' data-type=\"Json.t\">config</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1257'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bsconfig.json&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;No bsconfig.json found&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1261' data-type=\"string\">compilationBase</span> = <span class=\"ident\" data-type=\"Json.t => bool\" data-global-use='CodeSnippets/1188'>isNative</span>(<span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1260'>config</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/js&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> (<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1257'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/ocaml&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> (<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1257'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs&quot;</span>));\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1262' data-type=\"list((string, string))\">mine</span> = <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-global-use='CodeSnippets/1176'>getSourceDirectories</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1257'>base</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1260'>config</span>) <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1263' data-type=\"string\">name</span> =&gt; (\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1261'>compilationBase</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1263'>name</span>,\n    <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1257'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/js&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1263'>name</span>\n  )) <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"((string, string) => bool, list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>List.filter</span>(((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1264' data-type=\"string\">compiled</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1265' data-type=\"string\">sourced</span>)) =&gt; <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1264'>compiled</span>));\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1266' data-type=\"list((string, string))\">dependencyDirs</span> = <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CodeSnippets/1262'>mine</span> <span class=\"operator\" data-type=\"(list((string, string)), list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>@</span> <span class=\"ident\" data-type=\"(string, Json.t) => list((string, string))\" data-global-use='CodeSnippets/1190'>getDependencyDirs</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1257'>base</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CodeSnippets/1260'>config</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1267' data-type=\"string\">stdlib</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1256'>bsRoot</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/js&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1268' data-type=\"list(string)\">stdlibRequires</span> = <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1267'>stdlib</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> (<span class=\"ident\" data-type=\"string => list(string)\" data-stamp-missing>Files.readDirectory</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1267'>stdlib</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => bool, list(string)) => list(string)\" data-stamp-missing>List.filter</span>(<span class=\"ident\" data-type=\"(string => bool, string) => bool\" data-global-use='CodeSnippets/1202'>invert</span>(<span class=\"ident\" data-type=\"(string, string) => bool\" data-global-use='CodeSnippets/1110'>startsWith</span>(<span class=\"string\" data-type=\"string\">&quot;node_&quot;</span>))) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1269' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1267'>stdlib</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1269'>name</span>)) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1270' data-type=\"string\">tmp</span> = <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1257'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;node_modules/.docre&quot;</span>;\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Files.mkdirp</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1270'>tmp</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1271' data-type=\"int => string\">blockFileName</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1272' data-type=\"int\">id</span> =&gt; <span class=\"ident\" data-type=\"string\" data-global-use='CodeSnippets/1008'>codeBlockPrefix</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1272'>id</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1273' data-type=\"string\">refmt</span> = <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1256'>bsRoot</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/refmt3.exe&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1012'>|?</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1256'>bsRoot</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/refmt.exe&quot;</span>;\n\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1274' data-type=\"Hashtbl.t(Omd.element, compiledBlock)\">blocksByEl</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  Omd.element,\n  compiledBlock\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1313' data-type=\"list(compiledBlock)\">blocks</span> = <span class=\"ident\" data-type=\"list(codeBlock)\" data-local-use='CodeSnippets/1259'>blocks</span> <span class=\"operator\" data-type=\"(\n  list(codeBlock),\n  list(codeBlock) => list(compiledBlock)\n) => list(compiledBlock)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(codeBlock => compiledBlock, list(codeBlock)) => list(\n  compiledBlock\n)\" data-stamp-missing>List.map</span>(({<span class=\"pattern-ident\" data-local-define='CodeSnippets/1314' data-type=\"Omd.element\">el</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1315' data-type=\"int\">id</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1316' data-type=\"string\">fileName</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1317' data-type=\"State.Model.codeOptions\">options</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1318' data-type=\"string\">content</span>} as block) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1320' data-type=\"string\">name</span> = <span class=\"ident\" data-type=\"int => string\" data-local-use='CodeSnippets/1271'>blockFileName</span>(<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1315'>id</span>);\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1321' data-type=\"string\">reasonContent</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='CodeSnippets/1093'>removeHashes</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1318'>content</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; /* &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1316'>fileName</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; */&quot;</span>;\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1322' data-type=\"State.Model.compilationResult\">status</span> = <span class=\"ident\" data-type=\"(\n  string,\n  string,\n  string,\n  string,\n  State.Model.codeOptions,\n  string,\n  list(string)\n) => State.Model.compilationResult\" data-global-use='CodeSnippets/1231'>processBlock</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1256'>bsRoot</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1270'>tmp</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1320'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1273'>refmt</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1317'>options</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1321'>reasonContent</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CodeSnippets/1266'>dependencyDirs</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string) => string,\n  list((string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>fst</span>));\n    <span class=\"ident\" data-type=\"(\n  Hashtbl.t(Omd.element, compiledBlock),\n  Omd.element,\n  compiledBlock\n) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t(Omd.element, compiledBlock)\" data-local-use='CodeSnippets/1274'>blocksByEl</span>, <span class=\"ident\" data-type=\"Omd.element\" data-local-use='CodeSnippets/1314'>el</span>, <span data-type=\"compiledBlock\">{<span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1322'>status</span>, <span class=\"ident\" data-type=\"codeBlock\" data-local-use='CodeSnippets/1319'>block</span>}</span>);\n    <span data-type=\"compiledBlock\">{<span class=\"ident\" data-type=\"State.Model.compilationResult\" data-local-use='CodeSnippets/1322'>status</span>, <span class=\"ident\" data-type=\"codeBlock\" data-local-use='CodeSnippets/1319'>block</span>}</span>\n  });\n\n  (<span class=\"ident\" data-type=\"Hashtbl.t(Omd.element, compiledBlock)\" data-local-use='CodeSnippets/1274'>blocksByEl</span>, <span class=\"ident\" data-type=\"list(compiledBlock)\" data-local-use='CodeSnippets/1313'>blocks</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='CodeSnippets/1266'>dependencyDirs</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeSnippets/1268'>stdlibRequires</span>)\n}", "values": [{"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "CodeSnippets/1188", "name": "isNative", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1176", "name": "getSourceDirectories", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1190", "name": "getDependencyDirs", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1202", "name": "invert", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1110", "name": "startsWith", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1008", "name": "codeBlockPrefix", "moduleName": "CodeSnippets"}, {"id": "Infix/1012", "name": "|?", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "CodeSnippets/1093", "name": "removeHashes", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1231", "name": "processBlock", "moduleName": "CodeSnippets"}], "chars": 1441, "lines": 29, "type": "(~bsRoot: string, string, 'a, list(codeBlock)) => (\n  Hashtbl.t(Omd.element, compiledBlock),\n  list(compiledBlock),\n  list((string, string)),\n  list(string)\n)"},
"Infix/1024": {"name": "|??#", "moduleName": "Infix", "html": "/** Lazy optional default wrapped operator */\nlet <span class=\"pattern-ident\" data-local-define='Infix/1024' data-type=\"(option('a), Lazy.t(option('a))) => option('a)\">(|??#)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1025' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1026' data-type=\"Lazy.t(option('a))\">d</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1025'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"Lazy.t(option('a)) => option('a)\" data-stamp-missing>Lazy.force</span>(<span class=\"ident\" data-type=\"Lazy.t(option('a))\" data-local-use='Infix/1026'>d</span>) | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1027' data-type=\"'a\">v</span>) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1027'>v</span>) }", "values": [], "chars": 126, "lines": 1, "type": "(option('a), Lazy.t(option('a))) => option('a)"},
"Typing/1032": {"name": "showType", "moduleName": "Typing", "html": "let <span class=\"pattern-ident\" data-local-define='Typing/1032' data-type=\"Types.type_expr => string\">showType</span> = <span class=\"pattern-ident\" data-local-define='Typing/1033' data-type=\"Types.type_expr\">loc</span> =&gt; {<span class=\"ident\" data-type=\"(Format.formatter, Types.type_expr) => unit\" data-stamp-missing>Printtyp.type_expr</span>(<span class=\"ident\" data-type=\"Format.formatter\" data-stamp-missing>Format.str_formatter</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Typing/1033'>loc</span>); <span class=\"ident\" data-type=\"unit => string\" data-stamp-missing>Format.flush_str_formatter</span><span class=\"constructor\" data-type=\"unit\">()</span>}", "values": [], "chars": 99, "lines": 0, "type": "Types.type_expr => string"},
"CodeHighlight/1263": {"name": "sliceToEnd", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1263' data-type=\"(string, int) => string\">sliceToEnd</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1264' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1265' data-type=\"int\">i</span>) =&gt; <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1264'>text</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1265'>i</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1264'>text</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1265'>i</span>)", "values": [], "chars": 74, "lines": 0, "type": "(string, int) => string"},
"GenerateDoc/1022": {"name": "findTypeByName", "moduleName": "GenerateDoc", "html": "let rec <span class=\"pattern-ident\" data-local-define='GenerateDoc/1022' data-type=\"(list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)\">findTypeByName</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1023' data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">allDocs</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1024' data-type=\"'a\">name</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"list(('a, 'a, State.Model.Docs.docItem))\" data-local-use='GenerateDoc/1023'>allDocs</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">[]</span> =&gt; <span class=\"constructor\" data-type=\"option(('a, 'a, State.Model.Docs.docItem))\">None</span>\n  | [<span data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1025' data-type=\"'a\">n</span>, _, <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Type</span>(_)) as doc, ...<span class=\"pattern-ident\" data-local-define='GenerateDoc/1027' data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">rest</span></span>] when <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1025'>n</span> <span class=\"operator\" data-type=\"('a, 'a) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1024'>name</span> =&gt; <span class=\"constructor\" data-type=\"option(('a, 'a, State.Model.Docs.docItem))\">Some</span>(<span class=\"ident\" data-type=\"('a, 'a, State.Model.Docs.docItem)\" data-local-use='GenerateDoc/1026'>doc</span>)\n  | [<span data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">_, ...<span class=\"pattern-ident\" data-local-define='GenerateDoc/1028' data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">rest</span></span>] =&gt; <span class=\"ident\" data-type=\"(list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)\" data-global-use='GenerateDoc/1015'>findByName</span>(<span class=\"ident\" data-type=\"list(('a, 'a, State.Model.Docs.docItem))\" data-local-use='GenerateDoc/1028'>rest</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1024'>name</span>)\n  }\n}", "values": [{"id": "GenerateDoc/1015", "name": "findByName", "moduleName": "GenerateDoc"}], "chars": 194, "lines": 6, "type": "(list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)"},
"PrepareUtils/1012": {"name": "toFullPath", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1012' data-type=\"('a, ('a, 'a)) => ('a, 'a, 'a)\">toFullPath</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1013' data-type=\"'a\">pathType</span>, (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1014' data-type=\"'a\">name</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1015' data-type=\"'a\">inner</span>)) =&gt; (<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1014'>name</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1015'>inner</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1013'>pathType</span>)", "values": [], "chars": 69, "lines": 0, "type": "('a, ('a, 'a)) => ('a, 'a, 'a)"},
"PrintType/1056": {"name": "print_expr", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1056' data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\">print_expr</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1057' data-type=\"T.stringifier\">stringifier</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1058' data-type=\"Types.type_expr\">typ</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='PrintType/1059' data-type=\"Types.type_expr => Pretty.doc\">loop</span> = <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1057'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1057'>stringifier</span>);\n  open Types;\n  switch (<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1058'>typ</span>.<span class=\"field\" data-type=\"Types.type_desc\">desc</span>) {\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tvar</span>(<span class=\"pattern-constructor\" data-type=\"option(string)\">None</span>) =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;&#39;a&quot;</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tvar</span>(<span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1158' data-type=\"string\">s</span>)) =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;&#39;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1158'>s</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tarrow</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1159' data-type=\"Asttypes.label\">label</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1160' data-type=\"Types.type_expr\">arg</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1161' data-type=\"Types.type_expr\">result</span>, _) =&gt; {\n    let (<span class=\"pattern-ident\" data-local-define='PrintType/1167' data-type=\"list((Asttypes.label, Types.type_expr))\">args</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1168' data-type=\"Types.type_expr\">result</span>) = <span class=\"ident\" data-type=\"(\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)\" data-global-use='PrintType/1008'>collectArgs</span>([<span data-type=\"list((Asttypes.label, Types.type_expr))\"><span class=\"constructor\" data-type=\"list((Asttypes.label, Types.type_expr))\">(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='PrintType/1159'>label</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1160'>arg</span>)</span></span>], <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1161'>result</span>);\n    let <span class=\"pattern-ident\" data-local-define='PrintType/1169' data-type=\"list((Asttypes.label, Types.type_expr))\">args</span> = <span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr)) => list(\n  (Asttypes.label, Types.type_expr)\n)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='PrintType/1167'>args</span>);\n    switch <span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='PrintType/1169'>args</span> {\n    | [<span data-type=\"list((Asttypes.label, Types.type_expr))\"><span class=\"pattern-constructor\" data-type=\"list((Asttypes.label, Types.type_expr))\">(<span class=\"string\" data-type=\"Asttypes.label\">&quot;&quot;</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1170' data-type=\"Types.type_expr\">typ</span>)</span></span>] =&gt; {\n      <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1170'>typ</span>)\n    }\n    | _ =&gt; {\n\n    <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;(&quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n    <span class=\"ident\" data-type=\"Pretty.doc => Pretty.doc\" data-global-use='PrintType/1045'>indentGroup</span>(\n      <span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1028'>break</span> <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n    <span class=\"ident\" data-type=\"(\n  (Asttypes.label, Types.type_expr) => Pretty.doc,\n  list((Asttypes.label, Types.type_expr))\n) => Pretty.doc\" data-global-use='PrintType/1042'>commad_list</span>(((<span class=\"pattern-ident\" data-local-define='PrintType/1171' data-type=\"Asttypes.label\">label</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1172' data-type=\"Types.type_expr\">typ</span>)) =&gt; {\n      if (<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='PrintType/1171'>label</span> <span class=\"operator\" data-type=\"(Asttypes.label, Asttypes.label) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"Asttypes.label\">&quot;&quot;</span>) {\n        <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1172'>typ</span>)\n      } else {\n        <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;~&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='PrintType/1171'>label</span> <span class=\"operator\" data-type=\"(Asttypes.label, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;: &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1172'>typ</span>)\n      }\n    }, <span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='PrintType/1169'>args</span>)\n    <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1030'>dedent</span>\n    ) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;)&quot;</span>)\n    }\n    }\n     <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot; =&gt; &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n    <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1168'>result</span>);\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Ttuple</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1162' data-type=\"list(Types.type_expr)\">items</span>) =&gt; <span class=\"ident\" data-type=\"(\n  list(Types.type_expr),\n  Types.type_expr => Pretty.doc\n) => Pretty.doc\" data-global-use='PrintType/1047'>tuple_list</span>(<span class=\"ident\" data-type=\"list(Types.type_expr)\" data-local-use='PrintType/1162'>items</span>, <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tconstr</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1163' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1164' data-type=\"list(Types.type_expr)\">args</span>, _) =&gt; {\n    <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1057'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Path.t, pathType) => Pretty.doc\">path</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1057'>stringifier</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='PrintType/1163'>path</span>, <span class=\"constructor\" data-type=\"pathType\">PType</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n    switch <span class=\"ident\" data-type=\"list(Types.type_expr)\" data-local-use='PrintType/1164'>args</span> {\n    | <span class=\"pattern-constructor\" data-type=\"list(Types.type_expr)\">[]</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n    | <span class=\"pattern-ident\" data-local-define='PrintType/1173' data-type=\"list(Types.type_expr)\">args</span> =&gt; <span class=\"ident\" data-type=\"(\n  list(Types.type_expr),\n  Types.type_expr => Pretty.doc\n) => Pretty.doc\" data-global-use='PrintType/1047'>tuple_list</span>(<span class=\"ident\" data-type=\"list(Types.type_expr)\" data-local-use='PrintType/1173'>args</span>, <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>)\n    }\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tlink</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1165' data-type=\"Types.type_expr\">inner</span>) =&gt; <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1165'>inner</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tsubst</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1166' data-type=\"Types.type_expr\">inner</span>) =&gt; <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1059'>loop</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1166'>inner</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tfield</span>(_, _, _, _)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tnil</span>\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tvariant</span>(_)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tunivar</span>(_)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tpoly</span>(_, _)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tpackage</span>(_, _, _)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tobject</span>(_, _) =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>({<span class=\"ident\" data-type=\"(Format.formatter, Types.type_expr) => unit\" data-stamp-missing>Printtyp.type_expr</span>(<span class=\"ident\" data-type=\"Format.formatter\" data-stamp-missing>Format.str_formatter</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1058'>typ</span>); <span class=\"ident\" data-type=\"unit => string\" data-stamp-missing>Format.flush_str_formatter</span><span class=\"constructor\" data-type=\"unit\">()</span>} <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-global-use='PrintType/1054'>htmlEscape</span>)\n  }\n}", "values": [{"id": "PrintType/1008", "name": "collectArgs", "moduleName": "PrintType"}, {"id": "PrintType/1045", "name": "indentGroup", "moduleName": "PrintType"}, {"id": "PrintType/1028", "name": "break", "moduleName": "PrintType"}, {"id": "PrintType/1042", "name": "commad_list", "moduleName": "PrintType"}, {"id": "PrintType/1030", "name": "dedent", "moduleName": "PrintType"}, {"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1047", "name": "tuple_list", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}, {"id": "PrintType/1054", "name": "htmlEscape", "moduleName": "PrintType"}], "chars": 1198, "lines": 50, "type": "(T.stringifier, Types.type_expr) => Pretty.doc"},
"Commands/1040": {"name": "execWithInput", "moduleName": "Commands", "html": "/**\n * Get the output of a command, in lines.\n */\nlet <span class=\"pattern-ident\" data-local-define='Commands/1040' data-type=\"(string, string) => (list(string), bool)\">execWithInput</span> = (<span class=\"pattern-ident\" data-local-define='Commands/1041' data-type=\"string\">cmd</span>, <span class=\"pattern-ident\" data-local-define='Commands/1042' data-type=\"string\">input</span>) =&gt; {\n  let (<span class=\"pattern-ident\" data-local-define='Commands/1043' data-type=\"Pervasives.in_channel\">stdout</span>, <span class=\"pattern-ident\" data-local-define='Commands/1044' data-type=\"Pervasives.out_channel\">stdin</span>) = <span class=\"ident\" data-type=\"string => (Pervasives.in_channel, Pervasives.out_channel)\" data-stamp-missing>Unix.open_process</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Commands/1041'>cmd</span>);\n  <span class=\"ident\" data-type=\"(Pervasives.out_channel, string) => unit\" data-stamp-missing>output_string</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='Commands/1044'>stdin</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Commands/1042'>input</span>);\n  <span class=\"ident\" data-type=\"Pervasives.out_channel => unit\" data-stamp-missing>close_out</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='Commands/1044'>stdin</span>);\n  try {\n    let rec <span class=\"pattern-ident\" data-local-define='Commands/1045' data-type=\"unit => list(string)\">loop</span> = <span class=\"pattern-constructor\" data-type=\"unit\">()</span> =&gt;\n      switch (<span class=\"ident\" data-type=\"Pervasives.in_channel => string\" data-stamp-missing>Pervasives.input_line</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1043'>stdout</span>)) {\n      | exception <span class=\"pattern-constructor\" data-type=\"exn\">End_of_file</span> =&gt; <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n      | <span class=\"pattern-ident\" data-local-define='Commands/1046' data-type=\"string\">line</span> =&gt; {\n        [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='Commands/1046'>line</span>, ...<span class=\"ident\" data-type=\"unit => list(string)\" data-local-use='Commands/1045'>loop</span><span class=\"constructor\" data-type=\"unit\">()</span></span>]\n      }\n      };\n    let <span class=\"pattern-ident\" data-local-define='Commands/1047' data-type=\"list(string)\">lines</span> = <span class=\"ident\" data-type=\"unit => list(string)\" data-local-use='Commands/1045'>loop</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n    switch (<span class=\"ident\" data-type=\"(\n  Pervasives.in_channel,\n  Pervasives.out_channel\n) => Unix.process_status\" data-stamp-missing>Unix.close_process</span>((<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1043'>stdout</span>, <span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='Commands/1044'>stdin</span>))) {\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WEXITED</span>(<span class=\"int\" data-type=\"int\">0</span>) =&gt; (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1047'>lines</span>, <span class=\"constructor\" data-type=\"bool\">true</span>)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WEXITED</span>(_)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WSIGNALED</span>(_)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WSTOPPED</span>(_) =&gt; (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1047'>lines</span>, <span class=\"constructor\" data-type=\"bool\">false</span>)\n    }\n  } {\n  | <span class=\"pattern-constructor\" data-type=\"exn\">End_of_file</span> =&gt; (<span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"constructor\" data-type=\"bool\">false</span>)\n  }\n}", "values": [], "chars": 593, "lines": 25, "type": "(string, string) => (list(string), bool)"},
"Commands/1008": {"name": "execFull", "moduleName": "Commands", "html": "let <span class=\"pattern-ident\" data-local-define='Commands/1008' data-type=\"(\n  ~?input: option('a),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)\">execFull</span> = (<span class=\"pattern-ident\" data-local-define='Commands/1009' data-type=\"option('a)\">~input=?</span>, <span class=\"pattern-ident\" data-local-define='Commands/1011' data-type=\"array(string)\">~env=<span class=\"ident\" data-type=\"unit => array(string)\" data-stamp-missing>Unix.environment</span><span class=\"constructor\" data-type=\"unit\">()</span></span>, <span class=\"pattern-ident\" data-local-define='Commands/1013' data-type=\"string\">cmd</span>) =&gt; {\n  let (<span class=\"pattern-ident\" data-local-define='Commands/1014' data-type=\"Pervasives.in_channel\">cmd_out</span>, <span class=\"pattern-ident\" data-local-define='Commands/1015' data-type=\"Pervasives.out_channel\">cmd_in</span>, <span class=\"pattern-ident\" data-local-define='Commands/1016' data-type=\"Pervasives.in_channel\">cmd_err</span>) = <span class=\"ident\" data-type=\"(string, array(string)) => (\n  Pervasives.in_channel,\n  Pervasives.out_channel,\n  Pervasives.in_channel\n)\" data-stamp-missing>Unix.open_process_full</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Commands/1013'>cmd</span>, <span class=\"ident\" data-type=\"array(string)\" data-local-use='Commands/1011'>env</span>);\n\n  switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Commands/1009'>input</span> {\n  | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n  | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Commands/1017' data-type=\"'a\">text</span>) =&gt; <span class=\"ident\" data-type=\"(Pervasives.out_channel, string) => unit\" data-stamp-missing>output_string</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='Commands/1015'>cmd_in</span>, <span class=\"string\" data-type=\"string\">&quot;This line has a vt33 lurking in it\\n&quot;</span>)\n  };\n  <span class=\"ident\" data-type=\"Pervasives.out_channel => unit\" data-stamp-missing>close_out</span>(<span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='Commands/1015'>cmd_in</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='Commands/1018' data-type=\"Unix.file_descr\">cmd_out_descr</span> = <span class=\"ident\" data-type=\"Pervasives.in_channel => Unix.file_descr\" data-stamp-missing>Unix.descr_of_in_channel</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1014'>cmd_out</span>);\n  let <span class=\"pattern-ident\" data-local-define='Commands/1019' data-type=\"Unix.file_descr\">cmd_err_descr</span> = <span class=\"ident\" data-type=\"Pervasives.in_channel => Unix.file_descr\" data-stamp-missing>Unix.descr_of_in_channel</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1016'>cmd_err</span>);\n  let rec <span class=\"pattern-ident\" data-local-define='Commands/1020' data-type=\"(list(string), list(string), list(Unix.file_descr)) => (\n  list(string),\n  list(string)\n)\">loop</span> = ((<span class=\"pattern-ident\" data-local-define='Commands/1021' data-type=\"list(string)\">out</span>, <span class=\"pattern-ident\" data-local-define='Commands/1022' data-type=\"list(string)\">err</span>, <span class=\"pattern-ident\" data-local-define='Commands/1023' data-type=\"list(Unix.file_descr)\">opens</span>)) =&gt; {\n    if (<span class=\"ident\" data-type=\"list(Unix.file_descr)\" data-local-use='Commands/1023'>opens</span> <span class=\"operator\" data-type=\"(list(Unix.file_descr), list(Unix.file_descr)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(Unix.file_descr)\">[]</span>) {\n      (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1021'>out</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1022'>err</span>)\n    } else {\n      let (<span class=\"pattern-ident\" data-local-define='Commands/1024' data-type=\"list(Unix.file_descr)\">can_read</span>, _, _) = <span class=\"ident\" data-type=\"(\n  list(Unix.file_descr),\n  list(Unix.file_descr),\n  list(Unix.file_descr),\n  float\n) => (\n  list(Unix.file_descr),\n  list(Unix.file_descr),\n  list(Unix.file_descr)\n)\" data-stamp-missing>Unix.select</span>(<span class=\"ident\" data-type=\"list(Unix.file_descr)\" data-local-use='Commands/1023'>opens</span>, <span class=\"constructor\" data-type=\"list(Unix.file_descr)\">[]</span>, <span class=\"constructor\" data-type=\"list(Unix.file_descr)\">[]</span>, <span class=\"float\" data-type=\"float\">1.0</span>);\n      <span class=\"ident\" data-type=\"(\n  (\n    (list(string), list(string), list(Unix.file_descr)),\n    Unix.file_descr\n  ) => (list(string), list(string), list(Unix.file_descr)),\n  (list(string), list(string), list(Unix.file_descr)),\n  list(Unix.file_descr)\n) => (list(string), list(string), list(Unix.file_descr))\" data-stamp-missing>List.fold_left</span>(\n        ((<span class=\"pattern-ident\" data-local-define='Commands/1025' data-type=\"list(string)\">out</span>, <span class=\"pattern-ident\" data-local-define='Commands/1026' data-type=\"list(string)\">err</span>, <span class=\"pattern-ident\" data-local-define='Commands/1027' data-type=\"list(Unix.file_descr)\">opens</span>), <span class=\"pattern-ident\" data-local-define='Commands/1028' data-type=\"Unix.file_descr\">fh</span>) =&gt;\n          try (\n            if (<span class=\"ident\" data-type=\"Unix.file_descr\" data-local-use='Commands/1028'>fh</span> <span class=\"operator\" data-type=\"(Unix.file_descr, Unix.file_descr) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"Unix.file_descr\" data-local-use='Commands/1019'>cmd_err_descr</span>) {\n              (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1025'>out</span>, [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"Pervasives.in_channel => string\" data-stamp-missing>input_line</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1016'>cmd_err</span>), ...<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1026'>err</span></span>], <span class=\"ident\" data-type=\"list(Unix.file_descr)\" data-local-use='Commands/1027'>opens</span>);\n            } else {\n              ([<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"Pervasives.in_channel => string\" data-stamp-missing>input_line</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1014'>cmd_out</span>), ...<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1025'>out</span></span>], <span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1026'>err</span>, <span class=\"ident\" data-type=\"list(Unix.file_descr)\" data-local-use='Commands/1027'>opens</span>);\n            }\n          ) {\n          | <span class=\"pattern-constructor\" data-type=\"exn\">End_of_file</span> =&gt; (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1025'>out</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1026'>err</span>, <span class=\"ident\" data-type=\"(Unix.file_descr => bool, list(Unix.file_descr)) => list(\n  Unix.file_descr\n)\" data-stamp-missing>List.filter</span>((<span class=\"pattern-ident\" data-local-define='Commands/1029' data-type=\"Unix.file_descr\">fh&#39;</span>) =&gt; <span class=\"ident\" data-type=\"Unix.file_descr\" data-local-use='Commands/1028'>fh</span> <span class=\"operator\" data-type=\"(Unix.file_descr, Unix.file_descr) => bool\" data-stamp-missing>!=</span> <span class=\"ident\" data-type=\"Unix.file_descr\" data-local-use='Commands/1029'>fh&#39;</span>, <span class=\"ident\" data-type=\"list(Unix.file_descr)\" data-local-use='Commands/1027'>opens</span>))\n          },\n        (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1021'>out</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1022'>err</span>, <span class=\"ident\" data-type=\"list(Unix.file_descr)\" data-local-use='Commands/1023'>opens</span>),\n        <span class=\"ident\" data-type=\"list(Unix.file_descr)\" data-local-use='Commands/1024'>can_read</span>\n      ) <span class=\"operator\" data-type=\"(\n  (list(string), list(string), list(Unix.file_descr)),\n  (list(string), list(string), list(Unix.file_descr)) => (\n    list(string),\n    list(string)\n  )\n) => (list(string), list(string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(list(string), list(string), list(Unix.file_descr)) => (\n  list(string),\n  list(string)\n)\" data-local-use='Commands/1020'>loop</span>\n    };\n  };\n  let (<span class=\"pattern-ident\" data-local-define='Commands/1030' data-type=\"list(string)\">out</span>, <span class=\"pattern-ident\" data-local-define='Commands/1031' data-type=\"list(string)\">err</span>) = <span class=\"ident\" data-type=\"(list(string), list(string), list(Unix.file_descr)) => (\n  list(string),\n  list(string)\n)\" data-local-use='Commands/1020'>loop</span>((<span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>, [<span data-type=\"list(Unix.file_descr)\"><span class=\"constructor\" data-type=\"list(Unix.file_descr)\"><span class=\"ident\" data-type=\"Unix.file_descr\" data-local-use='Commands/1018'>cmd_out_descr</span>, <span data-type=\"list(Unix.file_descr)\"><span class=\"ident\" data-type=\"Unix.file_descr\" data-local-use='Commands/1019'>cmd_err_descr</span></span></span></span>]));\n  let <span class=\"pattern-ident\" data-local-define='Commands/1032' data-type=\"list(string)\">out</span> = <span class=\"ident\" data-type=\"list(string) => list(string)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1030'>out</span>);\n  let <span class=\"pattern-ident\" data-local-define='Commands/1033' data-type=\"list(string)\">err</span> = <span class=\"ident\" data-type=\"list(string) => list(string)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1031'>err</span>);\n  switch(<span class=\"ident\" data-type=\"(\n  Pervasives.in_channel,\n  Pervasives.out_channel,\n  Pervasives.in_channel\n) => Unix.process_status\" data-stamp-missing>Unix.close_process_full</span>((<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1014'>cmd_out</span>, <span class=\"ident\" data-type=\"Pervasives.out_channel\" data-local-use='Commands/1015'>cmd_in</span>, <span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1016'>cmd_err</span>))) {\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WEXITED</span>(<span class=\"int\" data-type=\"int\">0</span>) =&gt; (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1032'>out</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1033'>err</span>, <span class=\"constructor\" data-type=\"bool\">true</span>)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WEXITED</span>(_)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WSIGNALED</span>(_)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WSTOPPED</span>(_) =&gt; (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1032'>out</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1033'>err</span>, <span class=\"constructor\" data-type=\"bool\">false</span>)\n  }\n}", "values": [], "chars": 1285, "lines": 41, "type": "(\n  ~?input: option('a),\n  ~?env: option(array(string)),\n  string\n) => (list(string), list(string), bool)"},
"ProcessCode/1043": {"name": "resolveShared", "moduleName": "ProcessCode", "html": "let <span class=\"pattern-ident\" data-local-define='ProcessCode/1043' data-type=\"list(\n  ('a, 'a, string, State.Model.codeOptions)\n) => Hashtbl.t(string, string)\">resolveShared</span> = <span class=\"pattern-ident\" data-local-define='ProcessCode/1044' data-type=\"list(('a, 'a, string, State.Model.codeOptions))\">codeBlocks</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1045' data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions))\">shared</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(\n  string,\n  (string, State.Model.codeOptions)\n)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">10</span>);\n\n  <span class=\"ident\" data-type=\"list(('a, 'a, string, State.Model.codeOptions))\" data-local-use='ProcessCode/1044'>codeBlocks</span> <span class=\"operator\" data-type=\"(\n  list(('a, 'a, string, State.Model.codeOptions)),\n  list(\n    (\n      'a,\n      'a,\n      string,\n      State.Model.codeOptions\n    )\n  ) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  ('a, 'a, string, State.Model.codeOptions) => unit,\n  list(('a, 'a, string, State.Model.codeOptions))\n) => unit\" data-stamp-missing>List.iter</span>(((_, _, <span class=\"pattern-ident\" data-local-define='ProcessCode/1084' data-type=\"string\">content</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1085' data-type=\"State.Model.codeOptions\">options</span>)) =&gt; {\n    switch (<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1085'>options</span>.<span class=\"field\" data-type=\"option(string)\">State.Model.sharedAs</span>) {\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n    | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='ProcessCode/1086' data-type=\"string\">name</span>) =&gt; {\n      if (<span class=\"ident\" data-type=\"(\n  Hashtbl.t(string, (string, State.Model.codeOptions)),\n  string\n) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions))\" data-local-use='ProcessCode/1045'>shared</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1086'>name</span>)) {\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Warning! shared() name must be unique within a package: &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1086'>name</span>);\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;This will soon be an error&quot;</span>);\n      };\n      <span class=\"ident\" data-type=\"(\n  Hashtbl.t(string, (string, State.Model.codeOptions)),\n  string,\n  (string, State.Model.codeOptions)\n) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions))\" data-local-use='ProcessCode/1045'>shared</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1086'>name</span>, (<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1084'>content</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1085'>options</span>));\n    }\n    };\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1087' data-type=\"Hashtbl.t(string, bool)\">started</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(string, bool)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions)) => int\" data-stamp-missing>Hashtbl.length</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions))\" data-local-use='ProcessCode/1045'>shared</span>));\n  let <span class=\"pattern-ident\" data-local-define='ProcessCode/1088' data-type=\"Hashtbl.t(string, string)\">processed</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(string, string)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions)) => int\" data-stamp-missing>Hashtbl.length</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions))\" data-local-use='ProcessCode/1045'>shared</span>));\n\n  let rec <span class=\"pattern-ident\" data-local-define='ProcessCode/1089' data-type=\"string => string\">getFullShared</span> = (<span class=\"pattern-ident\" data-local-define='ProcessCode/1090' data-type=\"string\">name</span>) =&gt; {\n    switch (<span class=\"ident\" data-type=\"(Hashtbl.t(string, string), string) => string\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, string)\" data-local-use='ProcessCode/1088'>processed</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1090'>name</span>)) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {\n      if (<span class=\"ident\" data-type=\"(Hashtbl.t(string, bool), string) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, bool)\" data-local-use='ProcessCode/1087'>started</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1090'>name</span>)) {\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Recursive dependency in shared() block &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1090'>name</span>);\n      };\n      <span class=\"ident\" data-type=\"(Hashtbl.t(string, bool), string, bool) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, bool)\" data-local-use='ProcessCode/1087'>started</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1090'>name</span>, <span class=\"constructor\" data-type=\"bool\">true</span>);\n\n      let (<span class=\"pattern-ident\" data-local-define='ProcessCode/1092' data-type=\"string\">content</span>, <span class=\"pattern-ident\" data-local-define='ProcessCode/1093' data-type=\"State.Model.codeOptions\">options</span>) = <span class=\"ident\" data-type=\"(\n  Hashtbl.t(string, (string, State.Model.codeOptions)),\n  string\n) => (string, State.Model.codeOptions)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions))\" data-local-use='ProcessCode/1045'>shared</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1090'>name</span>);\n      let <span class=\"pattern-ident\" data-local-define='ProcessCode/1094' data-type=\"string\">newContent</span> = <span class=\"ident\" data-type=\"(\n  string => string,\n  State.Model.codeOptions,\n  string\n) => string\" data-global-use='CodeSnippets/1114'>CodeSnippets.fullContent</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ProcessCode/1089'>getFullShared</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='ProcessCode/1093'>options</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1092'>content</span>);\n      <span class=\"ident\" data-type=\"(Hashtbl.t(string, string), string, string) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, string)\" data-local-use='ProcessCode/1088'>processed</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1090'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1094'>newContent</span>);\n      <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1094'>newContent</span>\n    }\n    | <span class=\"pattern-ident\" data-local-define='ProcessCode/1091' data-type=\"string\">newContent</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1091'>newContent</span>\n    }\n  };\n\n  <span class=\"ident\" data-type=\"Hashtbl.t(string, (string, State.Model.codeOptions))\" data-local-use='ProcessCode/1045'>shared</span> <span class=\"operator\" data-type=\"(\n  Hashtbl.t(string, (string, State.Model.codeOptions)),\n  Hashtbl.t(\n    string,\n    (string, State.Model.codeOptions)\n  ) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, (string, State.Model.codeOptions)) => unit,\n  Hashtbl.t(\n    string,\n    (string, State.Model.codeOptions)\n  )\n) => unit\" data-stamp-missing>Hashtbl.iter</span>((<span class=\"pattern-ident\" data-local-define='ProcessCode/1117' data-type=\"string\">name</span>, _) =&gt; <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>ignore</span>(<span class=\"ident\" data-type=\"string => string\" data-local-use='ProcessCode/1089'>getFullShared</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ProcessCode/1117'>name</span>)));\n\n  <span class=\"ident\" data-type=\"Hashtbl.t(string, string)\" data-local-use='ProcessCode/1088'>processed</span>;\n}", "values": [{"id": "CodeSnippets/1114", "name": "fullContent", "moduleName": "CodeSnippets"}], "chars": 1204, "lines": 39, "type": "list(\n  ('a, 'a, string, State.Model.codeOptions)\n) => Hashtbl.t(string, string)"},
"Typing/1065": {"name": "relative", "moduleName": "Typing", "html": "let rec <span class=\"pattern-ident\" data-local-define='Typing/1065' data-type=\"(Longident.t, Path.t) => Path.t\">relative</span> = (<span class=\"pattern-ident\" data-local-define='Typing/1066' data-type=\"Longident.t\">ident</span>, <span class=\"pattern-ident\" data-local-define='Typing/1067' data-type=\"Path.t\">path</span>) =&gt; switch (<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1066'>ident</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1067'>path</span>) {\n| (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Lident</span>(<span class=\"pattern-ident\" data-local-define='Typing/1068' data-type=\"string\">name</span>), <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pdot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1069' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Typing/1070' data-type=\"string\">pname</span>, _)) when <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1070'>pname</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='Typing/1068'>name</span> =&gt; <span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1069'>path</span>\n| (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Ldot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1071' data-type=\"Longident.t\">ident</span>, _), <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pdot</span>(<span class=\"pattern-ident\" data-local-define='Typing/1072' data-type=\"Path.t\">path</span>, _, _)) =&gt; <span class=\"ident\" data-type=\"(Longident.t, Path.t) => Path.t\" data-global-use='Typing/1065'>relative</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1071'>ident</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1072'>path</span>)\n| _ =&gt; <span class=\"ident\" data-type=\"string => Path.t\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot relative &quot;</span>  <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(~?paren: option(string => bool), Path.t) => string\" data-stamp-missing>Path.name</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Typing/1067'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span>, <span class=\"ident\" data-type=\"Longident.t => list(string)\" data-stamp-missing>Longident.flatten</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Typing/1066'>ident</span>)))\n}", "values": [], "chars": 329, "lines": 4, "type": "(Longident.t, Path.t) => Path.t"},
"NewMain/1039": {"name": "invert", "moduleName": "NewMain", "html": "let <span class=\"pattern-ident\" data-local-define='NewMain/1039' data-type=\"('a => bool, 'a) => bool\">invert</span> = (<span class=\"pattern-ident\" data-local-define='NewMain/1040' data-type=\"'a => bool\">f</span>, <span class=\"pattern-ident\" data-local-define='NewMain/1041' data-type=\"'a\">a</span>) =&gt; <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"'a => bool\" data-local-use='NewMain/1040'>f</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='NewMain/1041'>a</span>)", "values": [], "chars": 28, "lines": 0, "type": "('a => bool, 'a) => bool"},
"CodeHighlight/1048": {"name": "iterTags", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1048' data-type=\"(\n  Cmt_format.binary_annots,\n  (Location.t, string) => unit\n) => unit\">iterTags</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1049' data-type=\"Cmt_format.binary_annots\">cmt</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1050' data-type=\"(Location.t, string) => unit\">addTag</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1051' data-type=\"(Location.t, string) => unit\">addColor</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1052' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1053' data-type=\"string\">className</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1050'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1052'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;class=&#39;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1053'>className</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&#39;&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1054' data-type=\"(Location.t, string, Types.type_expr) => unit\">addColorType</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1055' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1056' data-type=\"string\">className</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1057' data-type=\"Types.type_expr\">typ</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1050'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1055'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;class=&#39;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1056'>className</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&#39; data-type=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"Types.type_expr => string\" data-global-use='CodeHighlight/1045'>showType</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1057'>typ</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1058' data-type=\"(Location.t, Types.type_expr) => unit\">addType</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1059' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1060' data-type=\"Types.type_expr\">typ</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1050'>addTag</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1059'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;data-type=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"Types.type_expr => string\" data-global-use='CodeHighlight/1045'>showType</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1060'>typ</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>);\n  /* TODO report types with all of this probably? */\n  let module Iter = {\n    include TypedtreeIter.DefaultIteratorArgument;\n    let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1173' data-type=\"Typedtree.expression => unit\">enter_expression</span> = ({<span class=\"pattern-ident\" data-local-define='CodeHighlight/1174' data-type=\"Typedtree.expression_desc\">exp_desc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1175' data-type=\"Location.t\">exp_loc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1176' data-type=\"Types.type_expr\">exp_type</span>}) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1177' data-type=\"(Location.t, string) => unit\">addColorT</span> = (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1178' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1179' data-type=\"string\">cls</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='CodeHighlight/1054'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1178'>loc</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1179'>cls</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1176'>exp_type</span>);\n      switch <span class=\"ident\" data-type=\"Typedtree.expression_desc\" data-local-use='CodeHighlight/1174'>exp_desc</span> {\n      /* TODO dive into the longident */\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_ident</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1180' data-type=\"Path.t\">path</span>, {txt: <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1181' data-type=\"string\">text</span>), <span class=\"pattern-ident\" data-local-define='CodeHighlight/1182' data-type=\"Location.t\">loc</span>}, _) when <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span>(<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1181'>text</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&gt;=</span> &#39;a&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1181'>text</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&lt;=</span> &#39;z&#39;) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1177'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1182'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;operator&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_ident</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1183' data-type=\"Path.t\">path</span>, {<span class=\"pattern-ident\" data-local-define='CodeHighlight/1184' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1185' data-type=\"Location.t\">loc</span>}, _) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1177'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1185'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;ident&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_int</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1177'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1175'>exp_loc</span>, <span class=\"string\" data-type=\"string\">&quot;int&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_float</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1177'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1175'>exp_loc</span>, <span class=\"string\" data-type=\"string\">&quot;float&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_string</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1186' data-type=\"string\">content</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1187' data-type=\"option(string)\">tag</span>)) =&gt; {\n        let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1199' data-type=\"int\">expectedMaxSize</span> = switch <span class=\"ident\" data-type=\"option(string)\" data-local-use='CodeHighlight/1187'>tag</span> {\n        | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.escaped</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1186'>content</span>)) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">2</span>\n        | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1200' data-type=\"string\">tag</span>) =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.escaped</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1186'>content</span>)) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> (<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1200'>tag</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>*</span> <span class=\"int\" data-type=\"int\">2</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">4</span>\n        };\n        if (<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1175'>exp_loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1175'>exp_loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1199'>expectedMaxSize</span>) {\n          /* This is the jsx &lt;div&gt; bug where the div string thinks it&#39;s the size of the whole tag. */\n          <span class=\"constructor\" data-type=\"unit\">()</span>\n        } else {\n          <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1177'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1175'>exp_loc</span>, <span class=\"string\" data-type=\"string\">&quot;string&quot;</span>)\n        }\n      }\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_field</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1188' data-type=\"Typedtree.expression\">target</span>, {<span class=\"pattern-ident\" data-local-define='CodeHighlight/1189' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1190' data-type=\"Location.t\">loc</span>}, {<span class=\"pattern-ident\" data-local-define='CodeHighlight/1191' data-type=\"Types.type_expr\">lbl_arg</span>}) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='CodeHighlight/1054'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1190'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;field&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1191'>lbl_arg</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_construct</span>({txt: <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"string\" data-type=\"string\">&quot;::&quot;</span>), <span class=\"pattern-ident\" data-local-define='CodeHighlight/1192' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1193' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1194' data-type=\"list(Typedtree.expression)\">args</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, Types.type_expr) => unit\" data-local-use='CodeHighlight/1058'>addType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1192'>loc</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1176'>exp_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_construct</span>({<span class=\"pattern-ident\" data-local-define='CodeHighlight/1195' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1196' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1197' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1198' data-type=\"list(Typedtree.expression)\">args</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1177'>addColorT</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1196'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;constructor&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.expression_desc\">Texp_record</span>(_) =&gt; <span class=\"ident\" data-type=\"(Location.t, Types.type_expr) => unit\" data-local-use='CodeHighlight/1058'>addType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1175'>exp_loc</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1176'>exp_type</span>)\n      /* | Texp_variant */\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      /* | _ =&gt; addType(exp_loc, exp_type) */\n      }\n    };\n    let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1201' data-type=\"Typedtree.core_type => unit\">enter_core_type</span> = ({<span class=\"pattern-ident\" data-local-define='CodeHighlight/1202' data-type=\"Typedtree.core_type_desc\">ctyp_desc</span>, ctyp_loc: <span class=\"pattern-ident\" data-local-define='CodeHighlight/1203' data-type=\"Location.t\">loc</span>}) =&gt; {\n      switch <span class=\"ident\" data-type=\"Typedtree.core_type_desc\" data-local-use='CodeHighlight/1202'>ctyp_desc</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.core_type_desc\">Ttyp_var</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1204' data-type=\"string\">string</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1051'>addColor</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1203'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;type-vbl&quot;</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.core_type_desc\">Ttyp_constr</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1205' data-type=\"Path.t\">path</span>, {<span class=\"pattern-ident\" data-local-define='CodeHighlight/1206' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1207' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1208' data-type=\"list(Typedtree.core_type)\">args</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string) => unit\" data-local-use='CodeHighlight/1051'>addColor</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1207'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;type-constructor&quot;</span>)\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      }\n    };\n    let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1209' data-type=\"Typedtree.pattern => unit\">enter_pattern</span> = ({<span class=\"pattern-ident\" data-local-define='CodeHighlight/1210' data-type=\"Typedtree.pattern_desc\">pat_desc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1211' data-type=\"Location.t\">pat_loc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1212' data-type=\"Types.type_expr\">pat_type</span>}) =&gt; {\n      switch <span class=\"ident\" data-type=\"Typedtree.pattern_desc\" data-local-use='CodeHighlight/1210'>pat_desc</span> {\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_var</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1213' data-type=\"Ident.t\">path</span>, {<span class=\"pattern-ident\" data-local-define='CodeHighlight/1214' data-type=\"string\">txt</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1215' data-type=\"Location.t\">loc</span>}) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='CodeHighlight/1054'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1215'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;pattern-ident&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1212'>pat_type</span>)\n      /* | Tpat_construct({txt, loc}, desc, args) =&gt; addColorType(loc, &quot;patern-constructor&quot;, pat_type) */\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_construct</span>({txt: <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lident</span>(<span class=\"string\" data-type=\"string\">&quot;::&quot;</span>), <span class=\"pattern-ident\" data-local-define='CodeHighlight/1216' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1217' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1218' data-type=\"list(Typedtree.pattern)\">args</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, Types.type_expr) => unit\" data-local-use='CodeHighlight/1058'>addType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1216'>loc</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1212'>pat_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_construct</span>({<span class=\"pattern-ident\" data-local-define='CodeHighlight/1219' data-type=\"Longident.t\">txt</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1220' data-type=\"Location.t\">loc</span>}, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1221' data-type=\"Types.constructor_description\">desc</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1222' data-type=\"list(Typedtree.pattern)\">args</span>) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='CodeHighlight/1054'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1220'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;pattern-constructor&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1212'>pat_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_int</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='CodeHighlight/1054'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1211'>pat_loc</span>, <span class=\"string\" data-type=\"string\">&quot;int&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1212'>pat_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_float</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='CodeHighlight/1054'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1211'>pat_loc</span>, <span class=\"string\" data-type=\"string\">&quot;float&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1212'>pat_type</span>)\n      | <span class=\"pattern-constructor\" data-type=\"Typedtree.pattern_desc\">Tpat_constant</span>(<span class=\"pattern-constructor\" data-type=\"Asttypes.constant\">Const_string</span>(_)) =&gt; <span class=\"ident\" data-type=\"(Location.t, string, Types.type_expr) => unit\" data-local-use='CodeHighlight/1054'>addColorType</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='CodeHighlight/1211'>pat_loc</span>, <span class=\"string\" data-type=\"string\">&quot;string&quot;</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='CodeHighlight/1212'>pat_type</span>)\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      }\n    };\n  };\n  let module IterIter = TypedtreeIter.MakeIterator(Iter);\n\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1242' data-type=\"Cmt_format.binary_part => unit\">iter_part</span> = <span class=\"pattern-ident\" data-local-define='CodeHighlight/1243' data-type=\"Cmt_format.binary_part\">part</span> =&gt; switch <span class=\"ident\" data-type=\"Cmt_format.binary_part\" data-local-use='CodeHighlight/1243'>part</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Cmt_format.Partial_structure</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1244' data-type=\"Typedtree.structure\">str</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.structure => unit\" data-stamp-missing>IterIter.iter_structure</span>(<span class=\"ident\" data-type=\"Typedtree.structure\" data-local-use='CodeHighlight/1244'>str</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Partial_structure_item</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1245' data-type=\"Typedtree.structure_item\">str</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.structure_item => unit\" data-stamp-missing>IterIter.iter_structure_item</span>(<span class=\"ident\" data-type=\"Typedtree.structure_item\" data-local-use='CodeHighlight/1245'>str</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Partial_signature</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1246' data-type=\"Typedtree.signature\">str</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.signature => unit\" data-stamp-missing>IterIter.iter_signature</span>(<span class=\"ident\" data-type=\"Typedtree.signature\" data-local-use='CodeHighlight/1246'>str</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Partial_signature_item</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1247' data-type=\"Typedtree.signature_item\">str</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.signature_item => unit\" data-stamp-missing>IterIter.iter_signature_item</span>(<span class=\"ident\" data-type=\"Typedtree.signature_item\" data-local-use='CodeHighlight/1247'>str</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Partial_expression</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1248' data-type=\"Typedtree.expression\">expression</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.expression => unit\" data-stamp-missing>IterIter.iter_expression</span>(<span class=\"ident\" data-type=\"Typedtree.expression\" data-local-use='CodeHighlight/1248'>expression</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Partial_pattern</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1249' data-type=\"Typedtree.pattern\">pattern</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.pattern => unit\" data-stamp-missing>IterIter.iter_pattern</span>(<span class=\"ident\" data-type=\"Typedtree.pattern\" data-local-use='CodeHighlight/1249'>pattern</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Partial_class_expr</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1250' data-type=\"Typedtree.class_expr\">class_expr</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.class_expr => unit\" data-stamp-missing>IterIter.iter_class_expr</span>(<span class=\"ident\" data-type=\"Typedtree.class_expr\" data-local-use='CodeHighlight/1250'>class_expr</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_part\">Partial_module_type</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1251' data-type=\"Typedtree.module_type\">module_type</span>) =&gt; <span class=\"ident\" data-type=\"Typedtree.module_type => unit\" data-stamp-missing>IterIter.iter_module_type</span>(<span class=\"ident\" data-type=\"Typedtree.module_type\" data-local-use='CodeHighlight/1251'>module_type</span>)\n  };\n\n  switch <span class=\"ident\" data-type=\"Cmt_format.binary_annots\" data-local-use='CodeHighlight/1049'>cmt</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Implementation</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1252' data-type=\"Typedtree.structure\">str</span>) =&gt; {\n    <span class=\"ident\" data-type=\"Typedtree.structure => unit\" data-stamp-missing>IterIter.iter_structure</span>(<span class=\"ident\" data-type=\"Typedtree.structure\" data-local-use='CodeHighlight/1252'>str</span>);\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Interface</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1253' data-type=\"Typedtree.signature\">sign</span>) =&gt; {\n    <span class=\"ident\" data-type=\"Typedtree.signature => unit\" data-stamp-missing>IterIter.iter_signature</span>(<span class=\"ident\" data-type=\"Typedtree.signature\" data-local-use='CodeHighlight/1253'>sign</span>);\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Partial_implementation</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1254' data-type=\"array(Cmt_format.binary_part)\">parts</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Cmt_format.binary_annots\">Cmt_format.Partial_interface</span>(<span class=\"pattern-ident\" data-local-define='CodeHighlight/1254' data-type=\"array(Cmt_format.binary_part)\">parts</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(\n  Cmt_format.binary_part => unit,\n  array(Cmt_format.binary_part)\n) => unit\" data-stamp-missing>Array.iter</span>(<span class=\"ident\" data-type=\"Cmt_format.binary_part => unit\" data-local-use='CodeHighlight/1242'>iter_part</span>, <span class=\"ident\" data-type=\"array(Cmt_format.binary_part)\" data-local-use='CodeHighlight/1254'>parts</span>);\n  }\n  | _ =&gt; <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;Not a valid cmt file&quot;</span>)\n  };\n}", "values": [{"id": "CodeHighlight/1045", "name": "showType", "moduleName": "CodeHighlight"}], "chars": 3951, "lines": 82, "type": "(\n  Cmt_format.binary_annots,\n  (Location.t, string) => unit\n) => unit"},
"PrintType/1174": {"name": "print_constructor", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1174' data-type=\"(\n  Types.type_expr => Pretty.doc,\n  Types.constructor_declaration\n) => Pretty.doc\">print_constructor</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1175' data-type=\"Types.type_expr => Pretty.doc\">loop</span>, {Types.cd_id: {<span class=\"pattern-ident\" data-local-define='PrintType/1176' data-type=\"string\">name</span>}, <span class=\"pattern-ident\" data-local-define='PrintType/1177' data-type=\"list(Types.type_expr)\">cd_args</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1178' data-type=\"option(Types.type_expr)\">cd_res</span>}) =&gt; {\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1176'>name</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  (switch <span class=\"ident\" data-type=\"list(Types.type_expr)\" data-local-use='PrintType/1177'>cd_args</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(Types.type_expr)\">[]</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n  | <span class=\"pattern-ident\" data-local-define='PrintType/1179' data-type=\"list(Types.type_expr)\">args</span> =&gt; <span class=\"ident\" data-type=\"(\n  list(Types.type_expr),\n  Types.type_expr => Pretty.doc\n) => Pretty.doc\" data-global-use='PrintType/1047'>tuple_list</span>(<span class=\"ident\" data-type=\"list(Types.type_expr)\" data-local-use='PrintType/1179'>args</span>, <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1175'>loop</span>)\n  }) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  (switch <span class=\"ident\" data-type=\"option(Types.type_expr)\" data-local-use='PrintType/1178'>cd_res</span> {\n  | <span class=\"pattern-constructor\" data-type=\"option(Types.type_expr)\">None</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n  | <span class=\"pattern-constructor\" data-type=\"option(Types.type_expr)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1180' data-type=\"Types.type_expr\">typ</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;: &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n    <span class=\"ident\" data-type=\"Types.type_expr => Pretty.doc\" data-local-use='PrintType/1175'>loop</span>(<span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1180'>typ</span>)\n  }\n  })\n}", "values": [{"id": "PrintType/1047", "name": "tuple_list", "moduleName": "PrintType"}, {"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}], "chars": 281, "lines": 13, "type": "(\n  Types.type_expr => Pretty.doc,\n  Types.constructor_declaration\n) => Pretty.doc"},
"MainAux/1224": {"name": "getBsbVersion", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1224' data-type=\"string => string\">getBsbVersion</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1225' data-type=\"string\">base</span> =&gt; {\n  let (<span class=\"pattern-ident\" data-local-define='MainAux/1226' data-type=\"list(string)\">out</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1227' data-type=\"bool\">success</span>) = <span class=\"ident\" data-type=\"string => (list(string), bool)\" data-global-use='Commands/1034'>Commands.execSync</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1225'>base</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;node_modules/.bin/bsb -version&quot;</span>);\n  if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1227'>success</span>) {\n    &quot;2.2.3&quot;\n  } else {\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1228' data-type=\"string\">out</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1226'>out</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>;\n    <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1228'>out</span>\n  }\n}", "values": [{"id": "Commands/1034", "name": "execSync", "moduleName": "Commands"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 221, "lines": 8, "type": "string => string"},
"Template/1010": {"name": "make", "moduleName": "Template", "html": "let <span class=\"pattern-ident\" data-local-define='Template/1010' data-type=\"(string, string) => string\">make</span> = (<span class=\"pattern-ident\" data-local-define='Template/1011' data-type=\"string\">body</span>, <span class=\"pattern-ident\" data-local-define='Template/1012' data-type=\"string\">typeText</span>) =&gt; {\n  <span class=\"ident\" data-type=\"string\" data-global-use='Template/1008'>header</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;pre id=\\&quot;main\\&quot;&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Template/1011'>body</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/pre&gt;&lt;script&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Template/1012'>typeText</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/script&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-global-use='Template/1009'>final</span>\n}", "values": [{"id": "Template/1008", "name": "header", "moduleName": "Template"}, {"id": "Template/1009", "name": "final", "moduleName": "Template"}], "chars": 130, "lines": 2, "type": "(string, string) => string"},
"MainAux/1092": {"name": "slice", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1092' data-type=\"(string, int, int) => string\">slice</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1093' data-type=\"string\">s</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1094' data-type=\"int\">pre</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1095' data-type=\"int\">post</span>) =&gt; <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1093'>s</span>, <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1094'>pre</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1093'>s</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1094'>pre</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1095'>post</span>)", "values": [], "chars": 79, "lines": 0, "type": "(string, int, int) => string"},
"MainAux/1089": {"name": "sliceToEnd", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1089' data-type=\"(string, int) => string\">sliceToEnd</span> = (<span class=\"pattern-ident\" data-local-define='MainAux/1090' data-type=\"string\">s</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1091' data-type=\"int\">num</span>) =&gt; <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1090'>s</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;</span> <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1091'>num</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1090'>s</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1090'>s</span>, <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1091'>num</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1090'>s</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='MainAux/1091'>num</span>)", "values": [], "chars": 100, "lines": 0, "type": "(string, int) => string"},
"MainAux/1191": {"name": "asHtml", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1191' data-type=\"string => string\">asHtml</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1192' data-type=\"string\">path</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1192'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>", "values": [], "chars": 61, "lines": 0, "type": "string => string"},
"ReadMlast/1024": {"name": "structure", "moduleName": "ReadMlast", "html": "let <span class=\"pattern-ident\" data-local-define='ReadMlast/1024' data-type=\"string => Parsetree.structure\">structure</span> = <span class=\"pattern-ident\" data-local-define='ReadMlast/1025' data-type=\"string\">fn</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='ReadMlast/1026' data-type=\"Pervasives.in_channel\">ic</span> = <span class=\"ident\" data-type=\"string => Pervasives.in_channel\" data-stamp-missing>open_in_bin</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ReadMlast/1025'>fn</span>);\n  try {\n    <span class=\"ident\" data-type=\"Pervasives.in_channel => unit\" data-global-use='ReadMlast/1016'>skip_header</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1026'>ic</span>);\n    let <span class=\"pattern-ident\" data-local-define='ReadMlast/1027' data-type=\"Parsetree.structure\">ast</span> = <span class=\"ident\" data-type=\"Pervasives.in_channel => Parsetree.structure\" data-global-use='ReadMlast/1008'>read_ml_ast</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1026'>ic</span>);\n    <span class=\"ident\" data-type=\"Pervasives.in_channel => unit\" data-stamp-missing>close_in</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1026'>ic</span>);\n    <span class=\"ident\" data-type=\"Parsetree.structure\" data-local-use='ReadMlast/1027'>ast</span>\n  } { | <span class=\"pattern-ident\" data-local-define='ReadMlast/1028' data-type=\"exn\">exn</span> =&gt; {<span class=\"ident\" data-type=\"Pervasives.in_channel => unit\" data-stamp-missing>close_in</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='ReadMlast/1026'>ic</span>); <span class=\"ident\" data-type=\"exn => Parsetree.structure\" data-stamp-missing>raise</span>(<span class=\"ident\" data-type=\"exn\" data-local-use='ReadMlast/1028'>exn</span>)}}\n}", "values": [{"id": "ReadMlast/1016", "name": "skip_header", "moduleName": "ReadMlast"}, {"id": "ReadMlast/1008", "name": "read_ml_ast", "moduleName": "ReadMlast"}], "chars": 182, "lines": 8, "type": "string => Parsetree.structure"},
"Base/1008": {"name": "css", "moduleName": "Base", "html": "let <span class=\"pattern-ident\" data-local-define='Base/1008' data-type=\"string\">css</span> = <span class=\"string\" data-type=\"string\">{|\nbody {\n  font-family: system-ui;\n  font-weight: 200;\n  margin: 48px auto;\n}\n\nbody {\n  font-size: 17px;\n  line-height: 26px;\n  font-weight: 400;\n  letter-spacing: -0.021em;\n  font-family: &quot;SF Pro Text&quot;, &quot;SF Pro Icons&quot;, &quot;Helvetica Neue&quot;, &quot;Helvetica&quot;, &quot;Arial&quot;, sans-serif;\n\n  font-weight: 200;\n  letter-spacing: 0.04em;\n}\n\nh4.item {\n  font-family: sf mono, monospace;\n  padding-top: 8px;\n  border-top: 1px solid #ddd;\n  white-space: pre;\n  padding-bottom: 16px;\n  margin-bottom: 0;\n  margin-top: 16px;\n  font-weight: 400;\n\n  font-weight: 200;\n  letter-spacing: 0.4em;\n}\n\nblockquote {\n  border-left: 2px solid #006fc9;\n  margin-left: 0;\n  padding-left: 16px;\n}\n\n.code-block {\n  margin: 32px 0;\n}\n\npre {\n  margin: 0;\n  padding: 8px 16px;\n  background-color: #f1f8ff;\n  overflow: auto;\n}\n\ndiv.compile-error {\n  padding: 8px 16px;\n  background-color: #ffebeb;\n  margin-top: -24px;\n  margin-bottom: 32px;\n  white-space: pre-wrap;\n}\n\n.CodeMirror {\n  height: auto!important;\n}\n\n.CodeMirror-error-mark {\n  background-color: red;\n}\n\n.code-edit-run,\n.code-edit-button {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 4px 8px;\n  background-color: #eee;\n  border: none;\n  cursor: pointer;\n  opacity: 0;\n}\n\n.code-edit-run {\n  opacity: 1;\n  background-color: #8aff62;\n  z-index: 1000;\n  border-radius: 3px;\n}\n\n.code-block:hover .code-edit-button {\n  opacity: 1;\n}\n\n.code-post, .code-pre {\n  padding: 8px 16px;\n  background-color: #eee;\n}\n\n.code-post {\n  border-bottom-left-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.code-pre {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n\n.code-post,\n.code-pre,\n.CodeMirror,\n.CodeMirror pre,\n.code-block,\n.code-block .CodeMirror pre,\npre &gt; code,\nh4.item,\n.type-viewer,\ndiv.compile-error,\np code {\n  font-family: &#39;SF Mono&#39;, Menlo, monospace;\n  letter-spacing: 0;\n  font-size: 15px;\n  line-height: 1.5em;\n\n  font-weight: 200;\n  color: #666;\n}\n\n.body {\n  margin-left: 24px;\n  margin-bottom: 48px;\n  line-height: 1.5em;\n  font-size: 20px;\n  letter-spacing: 1px;\n}\n.body-empty,\n.include-body .body {\n  margin-bottom: 0;\n}\n\n.include-body .item {\n  padding: 0;\n  border-top: 0;\n  margin: 0;\n}\n\n.missing {\n  font-style: italic;\n  font-size: 16px;\n  color: #777;\n}\nh1, h2 {\n  margin-top: 24px;\n}\nh1, h2, h3, h4 {\n  color: #444;\n}\n\nh4.module {\n  font-size: 110%%;\n  font-weight: 600;\n}\n.module-body {\n  border-left: 1px solid #ddd;\n  padding-left: 24px;\n}\n\n.body &gt; pre:first-child {\n  margin-top: 8px;\n}\n.body &gt; p:first-child {\n  margin-top: 0px;\n}\n\n.body &gt; pre:last-child,\n.body &gt; p:last-child {\n  margin-bottom: 8px;\n}\n\np code {\n  padding: 1px 4px;\n  background: #eee;\n  border-radius: 3px;\n  font-family: &#39;sf mono&#39;, monospace;\n  font-size: 0.9em;\n  background: white;\n  /* color: #222; */\n  box-shadow: 0 0 1px #aaa;\n}\n\na {\n  text-decoration: none;\n}\na:hover, a:focus {\n  text-decoration: underline;\n}\n\n.doc-item {\n  font-size: 16px;\n}\n\n\n\n.container {\n  display: flex;\n  justify-content: center;\n  margin: 48px auto;\n}\n\n.main {\n  width: 600px;\n  padding: 0 16px;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.edit-link {\n  position: absolute;\n  top: 0;\n  right: 16px;\n  margin: 24px 0;\n}\n\na, a:visited,\n.table-of-contents a.module,\n.project-listing a,\n.main a, .main a:visited {\n  color: #0070c9;\n}\n\n.right-blank {\n  width: 200px;\n}\n\n.sidebar {\n  width: 200px;\n  position: sticky;\n  position: -webkit-sticky;\n  top: 0;\n  overflow: auto;\n  max-height: 100vh;\n  word-break: break-word;\n}\n\n.table-of-contents {\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n}\n.project-listing {\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n  font-size: 14px;\n  padding-bottom: 32px;\n}\n\n.table-of-contents .toc-header,\n.project-listing .project-title {\n  font-size: 14px;\n  font-weight: bold;\n  margin: 16px 0 8px;\n}\n\n.sidebar-expander {\n  display: none;\n}\n\n.docs-listing {\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n}\n\n@media(max-width: 1000px) {\n  .sidebar {\n    position: static;\n    width: 600px;\n    margin: auto;\n    max-height: unset;\n    display: none;\n  }\n  .sidebar-expander {\n    text-align: center;\n    width: 600px;\n    margin: auto;\n    display: block;\n  }\n\n  .sidebar.expanded {\n    display: block;\n  }\n\n  .container {\n    display: block;\n  }\n\n  .right-blank {\n    display: none;\n  }\n\n  .main {\n    margin: auto;\n  }\n}\n\n@media(max-width: 620px) {\n  .sidebar-expander,\n  .sidebar {\n    width: auto;\n    margin: 0;\n  }\n  .main {\n    width: auto;\n    padding: 0;\n    margin: 0;\n  }\n  .container {\n    padding: 0 20px;\n  }\n  h4.item {\n    font-size: 14px;\n    overflow: auto;\n    max-width: 100%%;\n    padding-right: 16px;\n  }\n  .body {\n    font-size: 17px;\n    margin-left: 0;\n    margin-bottom: 32px;\n  }\n}\n\n.table-of-contents a {\n  color: unset;\n  padding: 2px 0;\n}\n.table-of-contents a:hover {\n  background-color: #fafafa;\n}\n\n.table-of-contents a.header {\n  font-weight: 400;\n}\n\na.level-1 {\n  margin-left: 0px;\n}\n\na.level-2 {\n  margin-left: 6px;\n}\na.level-3 {\n  margin-left: 12px;\n}\na.level-4 {\n  margin-left: 18px;\n}\na.level-5 {\n  margin-left: 24px;\n}\n\n#error-message {\n  display: none;\n  background-color: #fde6e6;\n  padding: 8px 16px;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px #d8a2a2;\n  margin-bottom: 32px;\n  margin: 0 auto;\n  max-width: 600px;\n}\n\n.external-link:after {\n  /* from font-awesome */\n  background: url(&#39;data:image/svg+xml;utf8,&lt;svg version=&quot;1.1&quot; id=&quot;Capa_1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot; width=&quot;511.626px&quot; height=&quot;511.627px&quot; viewBox=&quot;0 0 511.626 511.627&quot; style=&quot;enable-background:new 0 0 511.626 511.627;&quot; xml:space=&quot;preserve&quot;&gt;&lt;g&gt;&lt;path d=&quot;M392.857,292.354h-18.274c-2.669,0-4.859,0.855-6.563,2.573c-1.718,1.708-2.573,3.897-2.573,6.563v91.361 c0,12.563-4.47,23.315-13.415,32.262c-8.945,8.945-19.701,13.414-32.264,13.414H82.224c-12.562,0-23.317-4.469-32.264-13.414 c-8.945-8.946-13.417-19.698-13.417-32.262V155.31c0-12.562,4.471-23.313,13.417-32.259c8.947-8.947,19.702-13.418,32.264-13.418 h200.994c2.669,0,4.859-0.859,6.57-2.57c1.711-1.713,2.566-3.9,2.566-6.567V82.221c0-2.662-0.855-4.853-2.566-6.563 c-1.711-1.713-3.901-2.568-6.57-2.568H82.224c-22.648,0-42.016,8.042-58.102,24.125C8.042,113.297,0,132.665,0,155.313v237.542 c0,22.647,8.042,42.018,24.123,58.095c16.086,16.084,35.454,24.13,58.102,24.13h237.543c22.647,0,42.017-8.046,58.101-24.13 c16.085-16.077,24.127-35.447,24.127-58.095v-91.358c0-2.669-0.856-4.859-2.574-6.57 C397.709,293.209,395.519,292.354,392.857,292.354z&quot;/&gt;&lt;path d=&quot;M506.199,41.971c-3.617-3.617-7.905-5.424-12.85-5.424H347.171c-4.948,0-9.233,1.807-12.847,5.424 c-3.617,3.615-5.428,7.898-5.428,12.847s1.811,9.233,5.428,12.85l50.247,50.248L198.424,304.067 c-1.906,1.903-2.856,4.093-2.856,6.563c0,2.479,0.953,4.668,2.856,6.571l32.548,32.544c1.903,1.903,4.093,2.852,6.567,2.852 s4.665-0.948,6.567-2.852l186.148-186.148l50.251,50.248c3.614,3.617,7.898,5.426,12.847,5.426s9.233-1.809,12.851-5.426 c3.617-3.616,5.424-7.898,5.424-12.847V54.818C511.626,49.866,509.813,45.586,506.199,41.971z&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;&#39;);\n  margin-left: 4px;\n  content: &#39; &#39;;\n  width: 10px;\n  height: 10px;\n  display: inline-block;\n  background-size: contain;\n}\n|}</span>", "values": [], "chars": 7132, "lines": 378, "type": "string"},
"ModelToOutput/1135": {"name": "searchHref", "moduleName": "ModelToOutput", "html": "let <span class=\"pattern-ident\" data-local-define='ModelToOutput/1135' data-type=\"(\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\">searchHref</span> = (<span class=\"pattern-ident\" data-local-define='ModelToOutput/1136' data-type=\"list(string)\">names</span>, <span class=\"pattern-ident\" data-local-define='ModelToOutput/1137' data-type=\"(string, list(string), CmtFindStamps.T.pathType)\">doc</span>) =&gt; {\n  switch (<span class=\"ident\" data-type=\"(\n  string,\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\" data-global-use='Docs/1009'>Docs.formatHref</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='ModelToOutput/1136'>names</span>, <span class=\"ident\" data-type=\"(string, list(string), CmtFindStamps.T.pathType)\" data-local-use='ModelToOutput/1137'>doc</span>)) {\n  | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='ModelToOutput/1138' data-type=\"string\">href</span>) =&gt; <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"string\" data-type=\"string\">&quot;./api/&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='ModelToOutput/1138'>href</span>)\n  }\n}", "values": [{"id": "Docs/1009", "name": "formatHref", "moduleName": "Docs"}], "chars": 143, "lines": 5, "type": "(\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)"},
"CliToInput/1076": {"name": "filterDuplicates", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1076' data-type=\"list(string) => list(string)\">filterDuplicates</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1077' data-type=\"list(string)\">cmts</span> =&gt; {\n  /* Remove .cmt&#39;s that have .cmti&#39;s */\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1078' data-type=\"Hashtbl.t(string, bool)\">intfs</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(string, bool)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1077'>cmts</span> <span class=\"operator\" data-type=\"(list(string), list(string) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => unit, list(string)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1117' data-type=\"string\">path</span> =&gt; if (<span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1117'>path</span>, <span class=\"string\" data-type=\"string\">&quot;.rei&quot;</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1117'>path</span>, <span class=\"string\" data-type=\"string\">&quot;.mli&quot;</span>)) {\n    <span class=\"ident\" data-type=\"(Hashtbl.t(string, bool), string, bool) => unit\" data-stamp-missing>Hashtbl.add</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, bool)\" data-local-use='CliToInput/1078'>intfs</span>, <span class=\"ident\" data-type=\"string => string\" data-global-use='CliToInput/1074'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1117'>path</span>), <span class=\"constructor\" data-type=\"bool\">true</span>)\n  });\n  <span class=\"ident\" data-type=\"list(string)\" data-local-use='CliToInput/1077'>cmts</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => bool, list(string)) => list(string)\" data-stamp-missing>List.filter</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1118' data-type=\"string\">path</span> =&gt; {\n    <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span>((<span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1118'>path</span>, <span class=\"string\" data-type=\"string\">&quot;.re&quot;</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1118'>path</span>, <span class=\"string\" data-type=\"string\">&quot;.ml&quot;</span>)) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(Hashtbl.t(string, bool), string) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(string, bool)\" data-local-use='CliToInput/1078'>intfs</span>, <span class=\"ident\" data-type=\"string => string\" data-global-use='CliToInput/1074'>getName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1118'>path</span>)))\n  });\n}", "values": [{"id": "CliToInput/1074", "name": "getName", "moduleName": "CliToInput"}], "chars": 426, "lines": 9, "type": "list(string) => list(string)"},
"Descartes/1203": {"name": "highlightItem", "moduleName": "Descartes", "html": "let <span class=\"pattern-ident\" data-local-define='Descartes/1203' data-type=\"Typedtree.structure_item => (\n  list((Location.t, list(tag))),\n  list(Path.t),\n  list(Path.t)\n)\">highlightItem</span> = <span class=\"pattern-ident\" data-local-define='Descartes/1204' data-type=\"Typedtree.structure_item\">item</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1205' data-type=\"Hashtbl.t(int, bool)\">valueStamps</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(int, bool)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1244' data-type=\"Hashtbl.t(int, bool)\">typeStamps</span> = <span class=\"ident\" data-type=\"(~?random: option(bool), int) => Hashtbl.t(int, bool)\" data-stamp-missing>Hashtbl.create</span>(<span class=\"int\" data-type=\"int\">100</span>);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1245' data-type=\"Pervasives.ref(list((Location.t, list(tag))))\">foundTags</span> = <span class=\"ident\" data-type=\"list((Location.t, list(tag))) => Pervasives.ref(\n  list((Location.t, list(tag)))\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list((Location.t, list(tag)))\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1246' data-type=\"Pervasives.ref(list(Path.t))\">externalValues</span> = <span class=\"ident\" data-type=\"list(Path.t) => Pervasives.ref(list(Path.t))\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list(Path.t)\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Descartes/1247' data-type=\"Pervasives.ref(list(Path.t))\">externalTypes</span> = <span class=\"ident\" data-type=\"list(Path.t) => Pervasives.ref(list(Path.t))\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list(Path.t)\">[]</span>);\n\n  let module TagIterator = TypedtreeIter.MakeIterator(val <span class=\"ident\" data-type=\"(\n  Location.t,\n  list(\n    tag\n  )\n) => unit => (module TypedtreeIter.IteratorArgument)\" data-global-use='Descartes/1024'>iterTags</span>((<span class=\"pattern-ident\" data-local-define='Descartes/1248' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1249' data-type=\"list(tag)\">tags</span>) =&gt; {\n    <span class=\"ident\" data-type=\"Pervasives.ref(list((Location.t, list(tag))))\" data-local-use='Descartes/1245'>foundTags</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list((Location.t, list(tag)))),\n  list((Location.t, list(tag)))\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list((Location.t, list(tag)))\">(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Descartes/1248'>loc</span>, <span class=\"ident\" data-type=\"list(tag)\" data-local-use='Descartes/1249'>tags</span>), ...<span class=\"ident\" data-type=\"Pervasives.ref(list((Location.t, list(tag))))\" data-local-use='Descartes/1245'>foundTags</span><span class=\"operator\" data-type=\"Pervasives.ref(list((Location.t, list(tag)))) => list(\n  (Location.t, list(tag))\n)\" data-stamp-missing>^</span></span>];\n    <span class=\"ident\" data-type=\"list(tag)\" data-local-use='Descartes/1249'>tags</span> <span class=\"operator\" data-type=\"(list(tag), list(tag) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(tag => unit, list(tag)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1250' data-type=\"tag\">tag</span> =&gt; switch <span class=\"ident\" data-type=\"tag\" data-local-use='Descartes/1250'>tag</span> {\n    | <span class=\"pattern-constructor\" data-type=\"tag\">TypeDef</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1251' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1252' data-type=\"string\">name</span>}) =&gt; <span class=\"ident\" data-type=\"(Hashtbl.t(int, bool), int, bool) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t(int, bool)\" data-local-use='Descartes/1244'>typeStamps</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1251'>stamp</span>, <span class=\"constructor\" data-type=\"bool\">true</span>)\n    | <span class=\"pattern-constructor\" data-type=\"tag\">ValueDef</span>({<span class=\"pattern-ident\" data-local-define='Descartes/1253' data-type=\"int\">stamp</span>, <span class=\"pattern-ident\" data-local-define='Descartes/1254' data-type=\"string\">name</span>}) =&gt; <span class=\"ident\" data-type=\"(Hashtbl.t(int, bool), int, bool) => unit\" data-stamp-missing>Hashtbl.replace</span>(<span class=\"ident\" data-type=\"Hashtbl.t(int, bool)\" data-local-use='Descartes/1205'>valueStamps</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1253'>stamp</span>, <span class=\"constructor\" data-type=\"bool\">true</span>)\n    | <span class=\"pattern-constructor\" data-type=\"tag\">TypeHover</span>(_) =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n    | <span class=\"pattern-constructor\" data-type=\"tag\">Cls</span>(_) =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n    | <span class=\"pattern-constructor\" data-type=\"tag\">ValueRef</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1255' data-type=\"Path.t\">path</span>) =&gt; {\n      let {<span class=\"pattern-ident\" data-local-define='Descartes/1257' data-type=\"int\">Ident.stamp</span>} = <span class=\"ident\" data-type=\"Path.t => Ident.t\" data-stamp-missing>Path.head</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1255'>path</span>);\n      if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(Hashtbl.t(int, bool), int) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(int, bool)\" data-local-use='Descartes/1205'>valueStamps</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1257'>stamp</span>)) {\n        <span class=\"ident\" data-type=\"Pervasives.ref(list(Path.t))\" data-local-use='Descartes/1246'>externalValues</span> <span class=\"operator\" data-type=\"(Pervasives.ref(list(Path.t)), list(Path.t)) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list(Path.t)\"><span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1255'>path</span>, ...<span class=\"ident\" data-type=\"Pervasives.ref(list(Path.t))\" data-local-use='Descartes/1246'>externalValues</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Path.t)) => list(Path.t)\" data-stamp-missing>^</span></span>];\n      }\n    }\n    | <span class=\"pattern-constructor\" data-type=\"tag\">TypeRef</span>(<span class=\"pattern-ident\" data-local-define='Descartes/1256' data-type=\"Path.t\">path</span>) =&gt; {\n      let {<span class=\"pattern-ident\" data-local-define='Descartes/1258' data-type=\"int\">Ident.stamp</span>} = <span class=\"ident\" data-type=\"Path.t => Ident.t\" data-stamp-missing>Path.head</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1256'>path</span>);\n      if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(Hashtbl.t(int, bool), int) => bool\" data-stamp-missing>Hashtbl.mem</span>(<span class=\"ident\" data-type=\"Hashtbl.t(int, bool)\" data-local-use='Descartes/1244'>typeStamps</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Descartes/1258'>stamp</span>)) {\n        <span class=\"ident\" data-type=\"Pervasives.ref(list(Path.t))\" data-local-use='Descartes/1247'>externalTypes</span> <span class=\"operator\" data-type=\"(Pervasives.ref(list(Path.t)), list(Path.t)) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list(Path.t)\"><span class=\"ident\" data-type=\"Path.t\" data-local-use='Descartes/1256'>path</span>, ...<span class=\"ident\" data-type=\"Pervasives.ref(list(Path.t))\" data-local-use='Descartes/1247'>externalTypes</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Path.t)) => list(Path.t)\" data-stamp-missing>^</span></span>];\n      }\n    }\n    })\n  }));\n\n  <span class=\"ident\" data-type=\"Typedtree.structure_item => unit\" data-stamp-missing>TagIterator.iter_structure_item</span>(<span class=\"ident\" data-type=\"Typedtree.structure_item\" data-local-use='Descartes/1204'>item</span>);\n\n  (<span class=\"ident\" data-type=\"Pervasives.ref(list((Location.t, list(tag))))\" data-local-use='Descartes/1245'>foundTags</span><span class=\"operator\" data-type=\"Pervasives.ref(list((Location.t, list(tag)))) => list(\n  (Location.t, list(tag))\n)\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"Pervasives.ref(list(Path.t))\" data-local-use='Descartes/1246'>externalValues</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Path.t)) => list(Path.t)\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"Pervasives.ref(list(Path.t))\" data-local-use='Descartes/1247'>externalTypes</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Path.t)) => list(Path.t)\" data-stamp-missing>^</span>)\n}", "values": [{"id": "Descartes/1024", "name": "iterTags", "moduleName": "Descartes"}], "chars": 1035, "lines": 32, "type": "Typedtree.structure_item => (\n  list((Location.t, list(tag))),\n  list(Path.t),\n  list(Path.t)\n)"},
"CodeSnippets/1130": {"name": "getCodeBlocks", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1130' data-type=\"(\n  list((string, 'a, Omd.t, 'a)),\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  )\n) => list(codeBlock)\">getCodeBlocks</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1131' data-type=\"list((string, 'a, Omd.t, 'a))\">markdowns</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1132' data-type=\"list(\n  (\n    'a,\n    string,\n    'a,\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\">cmts</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1133' data-type=\"Pervasives.ref((int, list(codeBlock)))\">codeBlocks</span> = <span class=\"ident\" data-type=\"(int, list(codeBlock)) => Pervasives.ref(\n  (int, list(codeBlock))\n)\" data-stamp-missing>ref</span>((<span class=\"int\" data-type=\"int\">0</span>, <span class=\"constructor\" data-type=\"list(codeBlock)\">[]</span>));\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1134' data-type=\"Pervasives.ref(list((string, string)))\">shared</span> = <span class=\"ident\" data-type=\"list((string, string)) => Pervasives.ref(\n  list((string, string))\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list((string, string))\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1135' data-type=\"(Omd.element, string, string, string) => unit\">addBlock</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1136' data-type=\"Omd.element\">el</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1137' data-type=\"string\">fileName</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1138' data-type=\"string\">lang</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1139' data-type=\"string\">content</span>) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1140' data-type=\"option(State.Model.codeOptions)\">options</span> = <span class=\"ident\" data-type=\"(string, State.Model.codeOptions) => option(\n  State.Model.codeOptions\n)\" data-global-use='CodeSnippets/1012'>parseCodeOptions</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1138'>lang</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-global-use='State/1055'>State.Model.defaultOptions</span>);\n    switch (<span class=\"ident\" data-type=\"option(State.Model.codeOptions)\" data-local-use='CodeSnippets/1140'>options</span>) {\n    | <span class=\"pattern-constructor\" data-type=\"option(State.Model.codeOptions)\">None</span> =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n    | <span class=\"pattern-constructor\" data-type=\"option(State.Model.codeOptions)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1141' data-type=\"State.Model.codeOptions\">options</span>) =&gt; {\n      let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1142' data-type=\"string\">content</span> = <span class=\"ident\" data-type=\"(\n  string => string,\n  State.Model.codeOptions,\n  string\n) => string\" data-global-use='CodeSnippets/1114'>fullContent</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1143' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"(string, list((string, string))) => string\" data-stamp-missing>List.assoc</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1143'>name</span>, <span class=\"ident\" data-type=\"Pervasives.ref(list((string, string)))\" data-local-use='CodeSnippets/1134'>shared</span><span class=\"operator\" data-type=\"Pervasives.ref(list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>^</span>), <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1141'>options</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1139'>content</span>);\n\n      switch (<span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1141'>options</span>.<span class=\"field\" data-type=\"option(string)\">sharedAs</span>) {\n      | <span class=\"pattern-constructor\" data-type=\"option(string)\">None</span> =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1145' data-type=\"int\">id</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1146' data-type=\"list(codeBlock)\">blocks</span>) = <span class=\"ident\" data-type=\"Pervasives.ref((int, list(codeBlock)))\" data-local-use='CodeSnippets/1133'>codeBlocks</span><span class=\"operator\" data-type=\"Pervasives.ref((int, list(codeBlock))) => (\n  int,\n  list(codeBlock)\n)\" data-stamp-missing>^</span>;\n        <span class=\"ident\" data-type=\"Pervasives.ref((int, list(codeBlock)))\" data-local-use='CodeSnippets/1133'>codeBlocks</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref((int, list(codeBlock))),\n  (int, list(codeBlock))\n) => unit\" data-stamp-missing>:=</span> (<span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1145'>id</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>, [<span data-type=\"list(codeBlock)\"><span data-type=\"codeBlock\">{<span class=\"ident\" data-type=\"Omd.element\" data-local-use='CodeSnippets/1136'>el</span>, <span class=\"ident\" data-type=\"int\" data-local-use='CodeSnippets/1145'>id</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1137'>fileName</span>, <span class=\"ident\" data-type=\"State.Model.codeOptions\" data-local-use='CodeSnippets/1141'>options</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1142'>content</span>}</span>, ...<span class=\"ident\" data-type=\"list(codeBlock)\" data-local-use='CodeSnippets/1146'>blocks</span></span>]);\n      }\n      | <span class=\"pattern-constructor\" data-type=\"option(string)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1144' data-type=\"string\">name</span>) =&gt; <span class=\"ident\" data-type=\"Pervasives.ref(list((string, string)))\" data-local-use='CodeSnippets/1134'>shared</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list((string, string))),\n  list((string, string))\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list((string, string))\">(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1144'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1142'>content</span>), ...<span class=\"ident\" data-type=\"Pervasives.ref(list((string, string)))\" data-local-use='CodeSnippets/1134'>shared</span><span class=\"operator\" data-type=\"Pervasives.ref(list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>^</span></span>];\n      };\n    }\n    }\n  };\n\n  let rec <span class=\"pattern-ident\" data-local-define='CodeSnippets/1147' data-type=\"(string, Omd.t) => unit\">collect</span> = (<span class=\"pattern-ident\" data-local-define='CodeSnippets/1148' data-type=\"string\">fileName</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1149' data-type=\"Omd.t\">md</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Omd.Representation.element => option(\n    Omd.Representation.t\n  ),\n  Omd.Representation.t\n) => Omd.Representation.t\" data-stamp-missing>Omd.Representation.visit</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1150' data-type=\"Omd.Representation.element\">el</span> =&gt; switch <span class=\"ident\" data-type=\"Omd.Representation.element\" data-local-use='CodeSnippets/1150'>el</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Html_comment</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1151' data-type=\"string\">text</span>) when <span class=\"ident\" data-type=\"(string, string) => bool\" data-global-use='CodeSnippets/1110'>startsWith</span>(<span class=\"string\" data-type=\"string\">&quot;&lt;!--!&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1151'>text</span>) =&gt; {\n      <span class=\"ident\" data-type=\"(string, Omd.t) => unit\" data-local-use='CodeSnippets/1147'>collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1148'>fileName</span>, <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"(string, int, int) => string\" data-global-use='CodeSnippets/1106'>slice</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1151'>text</span>, <span class=\"int\" data-type=\"int\">5</span>, <span class=\"int\" data-type=\"int\">-3</span>)));\n      <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n    }\n    | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Html_comment</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1152' data-type=\"string\">text</span>) =&gt; {\n      <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n    }\n    | <span class=\"pattern-constructor\" data-type=\"Omd.Representation.element\">Omd.Code_block</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1153' data-type=\"Omd.name\">lang</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1154' data-type=\"string\">contents</span>) =&gt; {\n      <span class=\"ident\" data-type=\"(Omd.element, string, Omd.name, string) => unit\" data-local-use='CodeSnippets/1135'>addBlock</span>(<span class=\"ident\" data-type=\"Omd.Representation.element\" data-local-use='CodeSnippets/1150'>el</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1148'>fileName</span>, <span class=\"ident\" data-type=\"Omd.name\" data-local-use='CodeSnippets/1153'>lang</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1154'>contents</span>);\n      <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n    }\n    | _ =&gt; <span class=\"constructor\" data-type=\"option(Omd.Representation.t)\">None</span>\n  }, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='CodeSnippets/1149'>md</span>) <span class=\"operator\" data-type=\"(Omd.Representation.t, Omd.Representation.t => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Omd.Representation.t => unit\" data-stamp-missing>ignore</span>;\n\n  <span class=\"ident\" data-type=\"list((string, 'a, Omd.t, 'a))\" data-local-use='CodeSnippets/1131'>markdowns</span> <span class=\"operator\" data-type=\"(\n  list((string, 'a, Omd.t, 'a)),\n  list((string, 'a, Omd.t, 'a)) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, 'a, Omd.t, 'a) => unit,\n  list((string, 'a, Omd.t, 'a))\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1155' data-type=\"string\">path</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1156' data-type=\"'a\">source</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1157' data-type=\"Omd.t\">contents</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1158' data-type=\"'a\">name</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(string, Omd.t) => unit\" data-local-use='CodeSnippets/1147'>collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1155'>path</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='CodeSnippets/1157'>contents</span>);\n  });\n\n  <span class=\"ident\" data-type=\"list(\n  (\n    'a,\n    string,\n    'a,\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  )\n)\" data-local-use='CodeSnippets/1132'>cmts</span> <span class=\"operator\" data-type=\"(\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  ),\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  ) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (\n    'a,\n    string,\n    'a,\n    option(Omd.t),\n    list(State.Model.Docs.doc)\n  ) => unit,\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  )\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1159' data-type=\"'a\">name</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1160' data-type=\"string\">cmt</span>, _, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1161' data-type=\"option(Omd.t)\">topDoc</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1162' data-type=\"list(State.Model.Docs.doc)\">allDocs</span>)) =&gt; {\n    Infix.(<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CodeSnippets/1161'>topDoc</span> <span class=\"operator\" data-type=\"(option(Omd.t), Omd.t => unit) => option(unit)\" data-global-use='Infix/1032'>|?&gt;&gt;</span> <span class=\"ident\" data-type=\"(string, Omd.t) => unit\" data-local-use='CodeSnippets/1147'>collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1160'>cmt</span>) <span class=\"operator\" data-type=\"(option(unit), option(unit) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"option(unit) => unit\" data-stamp-missing>ignore</span>);\n    <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CodeSnippets/1162'>allDocs</span> <span class=\"operator\" data-type=\"(\n  list(State.Model.Docs.doc),\n  list(State.Model.Docs.doc) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => unit,\n  list(State.Model.Docs.doc)\n) => unit\" data-stamp-missing>List.iter</span>(<span class=\"ident\" data-type=\"(\n  (string, option(Omd.t), State.Model.Docs.docItem) => unit,\n  State.Model.Docs.doc\n) => unit\" data-global-use='CmtFindDocItems/1012'>CmtFindDocItems.iter</span>(((<span class=\"pattern-ident\" data-local-define='CodeSnippets/1163' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='CodeSnippets/1164' data-type=\"option(Omd.t)\">docString</span>, _)) =&gt; {\n      switch <span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='CodeSnippets/1164'>docString</span> {\n      | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">None</span> =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">Some</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1165' data-type=\"Omd.t\">docString</span>) =&gt; <span class=\"ident\" data-type=\"(string, Omd.t) => unit\" data-local-use='CodeSnippets/1147'>collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1160'>cmt</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; &gt; &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1163'>name</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='CodeSnippets/1165'>docString</span>)\n      }\n    }))\n  });\n\n  <span class=\"ident\" data-type=\"Pervasives.ref((int, list(codeBlock)))\" data-local-use='CodeSnippets/1133'>codeBlocks</span><span class=\"operator\" data-type=\"Pervasives.ref((int, list(codeBlock))) => (\n  int,\n  list(codeBlock)\n)\" data-stamp-missing>^</span> <span class=\"operator\" data-type=\"(\n  (int, list(codeBlock)),\n  (int, list(codeBlock)) => list(codeBlock)\n) => list(codeBlock)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(int, list(codeBlock)) => list(codeBlock)\" data-stamp-missing>snd</span>\n}", "values": [{"id": "CodeSnippets/1012", "name": "parseCodeOptions", "moduleName": "CodeSnippets"}, {"id": "State/1055", "name": "defaultOptions", "moduleName": "State"}, {"id": "CodeSnippets/1114", "name": "fullContent", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1110", "name": "startsWith", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1106", "name": "slice", "moduleName": "CodeSnippets"}, {"id": "Infix/1032", "name": "|?>>", "moduleName": "Infix"}, {"id": "CmtFindDocItems/1012", "name": "iter", "moduleName": "CmtFindDocItems"}], "chars": 1500, "lines": 51, "type": "(\n  list((string, 'a, Omd.t, 'a)),\n  list(\n    (\n      'a,\n      string,\n      'a,\n      option(Omd.t),\n      list(State.Model.Docs.doc)\n    )\n  )\n) => list(codeBlock)"},
"Sidebar/1008": {"name": "makeToc", "moduleName": "Sidebar", "html": "let <span class=\"pattern-ident\" data-local-define='Sidebar/1008' data-type=\"list((int, string, string, string)) => string\">makeToc</span> = <span class=\"pattern-ident\" data-local-define='Sidebar/1009' data-type=\"list((int, string, string, string))\">tocItems</span> =&gt; {\n  <span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='Sidebar/1009'>tocItems</span> <span class=\"operator\" data-type=\"(\n  list((int, string, string, string)),\n  list((int, string, string, string)) => list(\n    string\n  )\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (int, string, string, string) => string,\n  list((int, string, string, string))\n) => list(string)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='Sidebar/1010' data-type=\"int\">level</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1011' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1012' data-type=\"string\">id</span>, <span class=\"pattern-ident\" data-local-define='Sidebar/1013' data-type=\"string\">cls</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, int, string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  int,\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (string, int, string, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, int, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, int, string, string) => string,\n  (string, int, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (int, string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.int_conv\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (int, string, string) => string,\n  (int, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.precision(\n  (int, string, string) => string,\n  (int, string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;#%s&quot; class=&#39;level-%d %s&#39;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1012'>id</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Sidebar/1010'>level</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1013'>cls</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Sidebar/1011'>name</span>)\n  }) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>);\n}", "values": [], "chars": 198, "lines": 4, "type": "list((int, string, string, string)) => string"},
"InputToModel/1045": {"name": "asHtml", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1045' data-type=\"string => string\">asHtml</span> = <span class=\"pattern-ident\" data-local-define='InputToModel/1046' data-type=\"string\">path</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1046'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>", "values": [], "chars": 61, "lines": 0, "type": "string => string"},
"Highlighting/1137": {"name": "collect", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1137' data-type=\"(\n  Parsetree.structure,\n  'a,\n  Hashtbl.t((int, int), (Path.t, Typing.tag))\n) => list(\n  (int, int, string, [&gt; `Full of string | `Normal ])\n)\">collect</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1138' data-type=\"Parsetree.structure\">ast</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1139' data-type=\"'a\">bindingsMap</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1140' data-type=\"Hashtbl.t((int, int), (Path.t, Typing.tag))\">locToPath</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1141' data-type=\"Pervasives.ref(\n  list(\n    (int, int, string, [&gt; `Full of string | `Normal ])\n  )\n)\">ranges</span> = <span class=\"ident\" data-type=\"list(\n  (\n    int,\n    int,\n    string,\n    [&gt; `Full of string | `Normal ]\n  )\n) => Pervasives.ref(\n  list(\n    (int, int, string, [&gt; `Full of string | `Normal ])\n  )\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list((int, int, string, [&gt; `Full of string | `Normal ]))\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1142' data-type=\"(\n  int,\n  int,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\">addNums</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1143' data-type=\"int\">cstart</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1144' data-type=\"int\">cend</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1145' data-type=\"string\">className</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1146' data-type=\"[&gt; `Full of string | `Normal ]\">id</span>) =&gt; <span class=\"ident\" data-type=\"Pervasives.ref(\n  list(\n    (int, int, string, [&gt; `Full of string | `Normal ])\n  )\n)\" data-local-use='Highlighting/1141'>ranges</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(\n    list(\n      (\n        int,\n        int,\n        string,\n        [&gt; `Full of string | `Normal ]\n      )\n    )\n  ),\n  list(\n    (\n      int,\n      int,\n      string,\n      [&gt; `Full of string | `Normal ]\n    )\n  )\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list((int, int, string, [&gt; `Full of string | `Normal ]))\">(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1143'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1144'>cend</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1145'>className</span>, <span class=\"ident\" data-type=\"[&gt; `Full of string | `Normal ]\" data-local-use='Highlighting/1146'>id</span>), ...<span class=\"ident\" data-type=\"Pervasives.ref(\n  list(\n    (int, int, string, [&gt; `Full of string | `Normal ])\n  )\n)\" data-local-use='Highlighting/1141'>ranges</span><span class=\"operator\" data-type=\"Pervasives.ref(\n  list(\n    (\n      int,\n      int,\n      string,\n      [&gt; `Full of string | `Normal ]\n    )\n  )\n) => list(\n  (int, int, string, [&gt; `Full of string | `Normal ])\n)\" data-stamp-missing>^</span></span>];\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1147' data-type=\"(\n  Location.t,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\">addRange</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1148' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1149' data-type=\"string\">className</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1150' data-type=\"[&gt; `Full of string | `Normal ]\">id</span>) =&gt; {\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1148'>loc</span>.<span class=\"field\" data-type=\"bool\">Location.loc_ghost</span>) {\n      <span class=\"ident\" data-type=\"(\n  int,\n  int,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1142'>addNums</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1148'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1148'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1149'>className</span>, <span class=\"ident\" data-type=\"[&gt; `Full of string | `Normal ]\" data-local-use='Highlighting/1150'>id</span>);\n    }\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1151' data-type=\"(\n  int,\n  int,\n  string,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\">addIdentifier</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1152' data-type=\"int\">cstart</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1153' data-type=\"int\">cend</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1154' data-type=\"string\">txt</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1155' data-type=\"string\">prefix</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1156' data-type=\"[&gt; `Full of string | `Normal ]\">id</span>) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='Highlighting/1157' data-type=\"string\">txt</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1154'>txt</span>);\n    let <span class=\"pattern-ident\" data-local-define='Highlighting/1158' data-type=\"string\">cls</span> = if (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&gt;=</span> &#39;A&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&lt;=</span> &#39;Z&#39;) {\n      /* print_endline(&quot;Mod &quot; ++ txt); */\n      &quot;module-identifier&quot;\n    } else if (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;_&#39;) {\n      &quot;unused-identifier&quot;\n    } else if (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&lt;</span> &#39;a&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&gt;</span> &#39;z&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;!&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;!&quot;</span> <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1157'>txt</span> <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;not&quot;</span>) {\n      &quot;operator&quot;\n    } else {\n      &quot;value-identifier&quot;\n    };\n    <span class=\"ident\" data-type=\"(\n  int,\n  int,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1142'>addNums</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1152'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1153'>cend</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1155'>prefix</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1158'>cls</span>, <span class=\"ident\" data-type=\"[&gt; `Full of string | `Normal ]\" data-local-use='Highlighting/1156'>id</span>);\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1159' data-type=\"('a, int, int) => [&gt; `Full of string | `Normal ]\">getId</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1160' data-type=\"'a\">name</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1161' data-type=\"int\">cstart</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1162' data-type=\"int\">cend</span>) =&gt; {\n    switch (<span class=\"ident\" data-type=\"(\n  Hashtbl.t((int, int), (Path.t, Typing.tag)),\n  (int, int)\n) => (Path.t, Typing.tag)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t((int, int), (Path.t, Typing.tag))\" data-local-use='Highlighting/1140'>locToPath</span>, (<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1161'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1162'>cend</span>))) {\n    | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; `Normal\n    | <span class=\"pattern-ident\" data-local-define='Highlighting/1201' data-type=\"(Path.t, Typing.tag)\">path</span> =&gt; `Full(<span class=\"ident\" data-type=\"(Path.t, Typing.tag)\" data-local-use='Highlighting/1201'>path</span> <span class=\"operator\" data-type=\"(\n  (Path.t, Typing.tag),\n  (Path.t, Typing.tag) => string\n) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>))\n    }\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1205' data-type=\"('a, Location.t) => [&gt; `Full of string | `Normal ]\">idForLoc</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1206' data-type=\"'a\">name</span>, {Location.loc_start: {<span class=\"pattern-ident\" data-local-define='Highlighting/1207' data-type=\"int\">pos_cnum</span>}, loc_end: {pos_cnum: <span class=\"pattern-ident\" data-local-define='Highlighting/1208' data-type=\"int\">cend</span>}}) =&gt; {\n    <span class=\"ident\" data-type=\"('a, int, int) => [&gt; `Full of string | `Normal ]\" data-local-use='Highlighting/1159'>getId</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1206'>name</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1207'>pos_cnum</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1208'>cend</span>)\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1209' data-type=\"(Longident.t, int, int, string) => unit\">addLident</span> = (lident: <span class=\"type-constructor\" data-stamp-missing>Longident.t</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1211' data-type=\"int\">cstart</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1212' data-type=\"int\">cend</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1213' data-type=\"string\">prefix</span>) =&gt; {\n    switch <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1210'>lident</span> {\n    | <span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Lident</span>(<span class=\"string\" data-type=\"string\">&quot;()&quot;</span>) =&gt; <span class=\"ident\" data-type=\"(\n  int,\n  int,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1142'>addNums</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1211'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1212'>cend</span>, <span class=\"string\" data-type=\"string\">&quot;unit&quot;</span>, `Normal)\n    | _ =&gt; {\n      switch (<span class=\"ident\" data-type=\"(\n  Hashtbl.t((int, int), (Path.t, Typing.tag)),\n  (int, int)\n) => (Path.t, Typing.tag)\" data-stamp-missing>Hashtbl.find</span>(<span class=\"ident\" data-type=\"Hashtbl.t((int, int), (Path.t, Typing.tag))\" data-local-use='Highlighting/1140'>locToPath</span>, (<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1211'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1212'>cend</span>))) {\n      | exception <span class=\"pattern-constructor\" data-type=\"exn\">Not_found</span> =&gt; {\n        <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;No binding path for &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1211'>cstart</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;-&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1212'>cend</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;.&quot;</span>, <span class=\"ident\" data-type=\"Longident.t => list(string)\" data-stamp-missing>Longident.flatten</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1210'>lident</span>))));\n        <span class=\"constructor\" data-type=\"unit\">()</span>\n      }\n      | <span class=\"pattern-ident\" data-local-define='Highlighting/1214' data-type=\"(Path.t, Typing.tag)\">path</span> =&gt; {\n        let (<span class=\"pattern-ident\" data-local-define='Highlighting/1215' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1216' data-type=\"option(Longident.t)\">inner</span>) = switch <span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1210'>lident</span> {\n        | <span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Lident</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1217' data-type=\"string\">txt</span>) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1217'>txt</span>, <span class=\"constructor\" data-type=\"option(Longident.t)\">None</span>)\n        | <span class=\"pattern-constructor\" data-type=\"Longident.t\">Ldot</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1218' data-type=\"Longident.t\">inner</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1219' data-type=\"string\">txt</span>) =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1219'>txt</span>, <span class=\"constructor\" data-type=\"option(Longident.t)\">Some</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1218'>inner</span>))\n        | <span class=\"pattern-constructor\" data-type=\"Longident.t\">Lapply</span>(_) =&gt; assert(<span class=\"constructor\" data-type=\"bool\">false</span>)\n        };\n        <span class=\"ident\" data-type=\"(\n  int,\n  int,\n  string,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1151'>addIdentifier</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1212'>cend</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1215'>name</span>), <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1212'>cend</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1215'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1213'>prefix</span>, `Full(<span class=\"ident\" data-type=\"(Path.t, Typing.tag)\" data-local-use='Highlighting/1214'>path</span> <span class=\"operator\" data-type=\"(\n  (Path.t, Typing.tag),\n  (Path.t, Typing.tag) => string\n) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>)));\n        let <span class=\"pattern-ident\" data-local-define='Highlighting/1220' data-type=\"Path.t\">innerPath</span> = switch (<span class=\"ident\" data-type=\"(Path.t, Typing.tag) => Path.t\" data-global-use='Typing/1019'>Typing.contents</span>(<span class=\"ident\" data-type=\"(Path.t, Typing.tag)\" data-local-use='Highlighting/1214'>path</span>)) {\n        | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pident</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1221' data-type=\"Ident.t\">x</span>) =&gt; <span class=\"constructor\" data-type=\"Path.t\">Path.Pident</span>(<span class=\"ident\" data-type=\"Ident.t\" data-local-use='Highlighting/1221'>x</span>)\n        | <span class=\"pattern-constructor\" data-type=\"Path.t\">Pdot</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1222' data-type=\"Path.t\">inner</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1223' data-type=\"string\">x</span>, _) =&gt; <span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1222'>inner</span>\n        | <span class=\"pattern-constructor\" data-type=\"Path.t\">Papply</span>(_, _) =&gt; assert(<span class=\"constructor\" data-type=\"bool\">false</span>)\n        };\n        let rec <span class=\"pattern-ident\" data-local-define='Highlighting/1224' data-type=\"(Longident.t, int, int, Path.t) => unit\">loop</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1225' data-type=\"Longident.t\">lident</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1226' data-type=\"int\">cstart</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1227' data-type=\"int\">cend</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1228' data-type=\"Path.t\">path</span>) =&gt; {\n          let <span class=\"pattern-ident\" data-local-define='Highlighting/1229' data-type=\"string\">id</span> = (<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1228'>path</span>, <span class=\"constructor\" data-type=\"Typing.tag\">Typing.Module</span>) <span class=\"operator\" data-type=\"(\n  (Path.t, Typing.tag),\n  (Path.t, Typing.tag) => string\n) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Path.t => string, (Path.t, Typing.tag)) => string\" data-global-use='Typing/1021'>Typing.toString</span>(<span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>);\n          switch (<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1225'>lident</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1228'>path</span>) {\n          | (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Lident</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1230' data-type=\"string\">txt</span>), _) =&gt; <span class=\"ident\" data-type=\"(\n  int,\n  int,\n  string,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1151'>addIdentifier</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1226'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1227'>cend</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1230'>txt</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1213'>prefix</span>, `Full(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1229'>id</span>))\n          | (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Ldot</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1231' data-type=\"Longident.t\">inner</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1232' data-type=\"string\">txt</span>), <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pdot</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1233' data-type=\"Path.t\">pleft</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1234' data-type=\"string\">pname</span>, _)) =&gt; {\n            <span class=\"ident\" data-type=\"(Longident.t, int, int, Path.t) => unit\" data-local-use='Highlighting/1224'>loop</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1231'>inner</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1226'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1227'>cend</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1232'>txt</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1233'>pleft</span>);\n            <span class=\"ident\" data-type=\"(\n  int,\n  int,\n  string,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1151'>addIdentifier</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1227'>cend</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1232'>txt</span>), <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1227'>cend</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1232'>txt</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1213'>prefix</span>, `Full(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1229'>id</span>))\n          }\n          | (<span class=\"pattern-constructor\" data-type=\"Longident.t\">Longident.Lapply</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1235' data-type=\"Longident.t\">first</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1236' data-type=\"Longident.t\">second</span>), _) =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n          | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n          }\n        };\n        switch <span class=\"ident\" data-type=\"option(Longident.t)\" data-local-use='Highlighting/1216'>inner</span> {\n        | <span class=\"pattern-constructor\" data-type=\"option(Longident.t)\">None</span> =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n        | <span class=\"pattern-constructor\" data-type=\"option(Longident.t)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1237' data-type=\"Longident.t\">inner</span>) =&gt; <span class=\"ident\" data-type=\"(Longident.t, int, int, Path.t) => unit\" data-local-use='Highlighting/1224'>loop</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1237'>inner</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1211'>cstart</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1212'>cend</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1215'>name</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1220'>innerPath</span>)\n        }\n      }\n      }\n    }\n    }\n  };\n\n  let module Mapper = F({\n    let <span class=\"pattern-ident\" data-local-define='Highlighting/1238' data-type=\"(Longident.t, Location.t, string) => unit\">lident</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1239' data-type=\"Longident.t\">ident</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1240' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1241' data-type=\"string\">prefix</span>) =&gt; {\n      if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1240'>loc</span>.<span class=\"field\" data-type=\"bool\">Location.loc_ghost</span>) {\n        <span class=\"ident\" data-type=\"(Longident.t, int, int, string) => unit\" data-local-use='Highlighting/1209'>addLident</span>(<span class=\"ident\" data-type=\"Longident.t\" data-local-use='Highlighting/1239'>ident</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1240'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_start</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1240'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1241'>prefix</span>)\n      };\n    };\n    let <span class=\"pattern-ident\" data-local-define='Highlighting/1242' data-type=\"('a, Location.t) => unit\">pat_var</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1243' data-type=\"'a\">str</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1244' data-type=\"Location.t\">loc</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Location.t,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1147'>addRange</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1244'>loc</span>, <span class=\"string\" data-type=\"string\">&quot;declaration-var&quot;</span>, <span class=\"ident\" data-type=\"('a, Location.t) => [&gt; `Full of string | `Normal ]\" data-local-use='Highlighting/1205'>idForLoc</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1243'>str</span>, <span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1244'>loc</span>));\n    let <span class=\"pattern-ident\" data-local-define='Highlighting/1245' data-type=\"(\n  [&lt; `String | `Int | `Float | `Char | `Boolean ],\n  Location.t\n) => unit\">constant</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1246' data-type=\"[&lt; `String | `Int | `Float | `Char | `Boolean ]\">t</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1247' data-type=\"Location.t\">loc</span>) =&gt; <span class=\"ident\" data-type=\"(\n  Location.t,\n  string,\n  [&gt; `Full of string | `Normal ]\n) => unit\" data-local-use='Highlighting/1147'>addRange</span>(<span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1247'>loc</span>, switch <span class=\"ident\" data-type=\"[&lt; `String | `Int | `Float | `Char | `Boolean ]\" data-local-use='Highlighting/1246'>t</span> {\n    | `String =&gt; <span class=\"string\" data-type=\"string\">&quot;string&quot;</span>\n    | `Int =&gt; <span class=\"string\" data-type=\"string\">&quot;int&quot;</span>\n    | `Float =&gt; <span class=\"string\" data-type=\"string\">&quot;float&quot;</span>\n    | `Char =&gt; <span class=\"string\" data-type=\"string\">&quot;char&quot;</span>\n    | `Boolean =&gt; <span class=\"string\" data-type=\"string\">&quot;boolean&quot;</span>\n    }, `Normal);\n  });\n\n  <span class=\"ident\" data-type=\"Ast_mapper.mapper\" data-stamp-missing>Mapper.mapper</span>.<span class=\"field\" data-type=\"(\n  Ast_mapper.mapper,\n  Parsetree.structure\n) => Parsetree.structure\">structure</span>(<span class=\"ident\" data-type=\"Ast_mapper.mapper\" data-stamp-missing>Mapper.mapper</span>, <span class=\"ident\" data-type=\"Parsetree.structure\" data-local-use='Highlighting/1138'>ast</span>) <span class=\"operator\" data-type=\"(Parsetree.structure, Parsetree.structure => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"Parsetree.structure => unit\" data-stamp-missing>ignore</span>;\n  <span class=\"ident\" data-type=\"Pervasives.ref(\n  list(\n    (int, int, string, [&gt; `Full of string | `Normal ])\n  )\n)\" data-local-use='Highlighting/1141'>ranges</span><span class=\"operator\" data-type=\"Pervasives.ref(\n  list(\n    (\n      int,\n      int,\n      string,\n      [&gt; `Full of string | `Normal ]\n    )\n  )\n) => list(\n  (int, int, string, [&gt; `Full of string | `Normal ])\n)\" data-stamp-missing>^</span> <span class=\"operator\" data-type=\"(\n  list(\n    (int, int, string, [&gt; `Full of string | `Normal ])\n  ),\n  list(\n    (\n      int,\n      int,\n      string,\n      [&gt; `Full of string | `Normal ]\n    )\n  ) => list(\n    (\n      int,\n      int,\n      string,\n      [&gt; `Full of string | `Normal ]\n    )\n  )\n) => list(\n  (int, int, string, [&gt; `Full of string | `Normal ])\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (\n    (int, int, string, [&gt; `Full of string | `Normal ]),\n    (\n      int,\n      int,\n      string,\n      [&gt; `Full of string | `Normal ]\n    )\n  ) => int,\n  list(\n    (\n      int,\n      int,\n      string,\n      [&gt; `Full of string | `Normal ]\n    )\n  )\n) => list(\n  (int, int, string, [&gt; `Full of string | `Normal ])\n)\" data-stamp-missing>List.sort</span>(((<span class=\"pattern-ident\" data-local-define='Highlighting/1249' data-type=\"int\">ast</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1250' data-type=\"int\">ae</span>, _, _), (<span class=\"pattern-ident\" data-local-define='Highlighting/1251' data-type=\"int\">bst</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1252' data-type=\"int\">be</span>, _, _)) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='Highlighting/1253' data-type=\"int\">sdiff</span> = <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1249'>ast</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1251'>bst</span>;\n    /** If they start at the same time, the *larger* range should go First */\n    if (<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1253'>sdiff</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>===</span> <span class=\"int\" data-type=\"int\">0</span>) {\n      <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1252'>be</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1250'>ae</span>\n    } else {\n      <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1253'>sdiff</span>\n    }\n  });\n}", "values": [{"id": "Typing/1019", "name": "contents", "moduleName": "Typing"}, {"id": "Typing/1021", "name": "toString", "moduleName": "Typing"}, {"id": "Highlighting/1129", "name": "pathName", "moduleName": "Highlighting"}], "chars": 3681, "lines": 104, "type": "(\n  Parsetree.structure,\n  'a,\n  Hashtbl.t((int, int), (Path.t, Typing.tag))\n) => list(\n  (int, int, string, [&gt; `Full of string | `Normal ])\n)"},
"CliToInput/1072": {"name": "compiledName", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1072' data-type=\"string => string\">compiledName</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1073' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1073'>name</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1073'>name</span>.[<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1073'>name</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;i&#39; <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;.cmti&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;.cmt&quot;</span>)", "values": [], "chars": 118, "lines": 0, "type": "string => string"},
"CliToInput/1137": {"name": "help", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1137' data-type=\"string\">help</span> = <span class=\"string\" data-type=\"string\">{|\n# docre - a clean &amp; easy documentation generator\n\nUsage: docre [options]\n\n  --root (default: current directory)\n      expected to contain bsconfig.json, and bs-platform in the node_modules\n  --target (default: {root}/docs)\n      where we should write out the docs\n  --name (default: the name of the directory, capitalized)\n      what this project is called\n  --project-file\n      specified as /abs/path/to/.cmt:rel/path/from/repo/root\n  --dependency-directory\n      a directory containing &quot;.cmj&quot; files that should be &#39;-I&#39;d when compiling snippets\n  --bs-root (default: root/node_modules/bs-platform)\n  --doctest (default: false)\n      execute the documentation snippets to make sure they run w/o erroring\n  -h, --help\n      print this help\n|}</span>", "values": [], "chars": 756, "lines": 20, "type": "string"},
"CliToInput/1138": {"name": "fail", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1138' data-type=\"string => 'a\">fail</span> = (<span class=\"pattern-ident\" data-local-define='CliToInput/1139' data-type=\"string\">msg</span>) =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1139'>msg</span>);\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"ident\" data-type=\"string\" data-global-use='CliToInput/1137'>help</span>);\n  <span class=\"ident\" data-type=\"int => 'a\" data-stamp-missing>exit</span>(<span class=\"int\" data-type=\"int\">1</span>);\n}", "values": [{"id": "CliToInput/1137", "name": "help", "moduleName": "CliToInput"}], "chars": 79, "lines": 4, "type": "string => 'a"},
"PrintType/1008": {"name": "collectArgs", "moduleName": "PrintType", "html": "let rec <span class=\"pattern-ident\" data-local-define='PrintType/1008' data-type=\"(\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)\">collectArgs</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1009' data-type=\"list((Asttypes.label, Types.type_expr))\">coll</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1010' data-type=\"Types.type_expr\">typ</span>) =&gt; switch <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1010'>typ</span>.<span class=\"field\" data-type=\"Types.type_desc\">Types.desc</span> {\n| <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Types.Tarrow</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1011' data-type=\"Asttypes.label\">label</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1012' data-type=\"Types.type_expr\">arg</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1013' data-type=\"Types.type_expr\">result</span>, _) =&gt; <span class=\"ident\" data-type=\"(\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)\" data-global-use='PrintType/1008'>collectArgs</span>([<span data-type=\"list((Asttypes.label, Types.type_expr))\">(<span class=\"ident\" data-type=\"Asttypes.label\" data-local-use='PrintType/1011'>label</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1012'>arg</span>), ...<span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='PrintType/1009'>coll</span></span>], <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1013'>result</span>)\n| <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tlink</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1014' data-type=\"Types.type_expr\">inner</span>) =&gt; <span class=\"ident\" data-type=\"(\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)\" data-global-use='PrintType/1008'>collectArgs</span>(<span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='PrintType/1009'>coll</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1014'>inner</span>)\n| <span class=\"pattern-constructor\" data-type=\"Types.type_desc\">Tsubst</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1015' data-type=\"Types.type_expr\">inner</span>) =&gt; <span class=\"ident\" data-type=\"(\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)\" data-global-use='PrintType/1008'>collectArgs</span>(<span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='PrintType/1009'>coll</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1015'>inner</span>)\n| _ =&gt; (<span class=\"ident\" data-type=\"list((Asttypes.label, Types.type_expr))\" data-local-use='PrintType/1009'>coll</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1010'>typ</span>)\n}", "values": [], "chars": 254, "lines": 5, "type": "(\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n) => (\n  list((Asttypes.label, Types.type_expr)),\n  Types.type_expr\n)"},
"CmtFindDocItems/1168": {"name": "mapFst", "moduleName": "CmtFindDocItems", "html": "let <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1168' data-type=\"('a => 'a, ('a, 'a)) => ('a, 'a)\">mapFst</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1169' data-type=\"'a => 'a\">fn</span>, (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1170' data-type=\"'a\">a</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1171' data-type=\"'a\">b</span>)) =&gt; (<span class=\"ident\" data-type=\"'a => 'a\" data-local-use='CmtFindDocItems/1169'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='CmtFindDocItems/1170'>a</span>), <span class=\"ident\" data-type=\"'a\" data-local-use='CmtFindDocItems/1171'>b</span>)", "values": [], "chars": 39, "lines": 0, "type": "('a => 'a, ('a, 'a)) => ('a, 'a)"},
"CliToInput/1146": {"name": "getRefmt", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1146' data-type=\"string => option(string)\">getRefmt</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1147' data-type=\"string\">bsRoot</span> =&gt; {\n  <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1147'>bsRoot</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/refmt3.exe&quot;</span>) <span class=\"operator\" data-type=\"(option(string), option(string)) => option(string)\" data-global-use='Infix/1016'>|??</span> <span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.ifExists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1147'>bsRoot</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/refmt.exe&quot;</span>)\n}", "values": [{"id": "Infix/1016", "name": "|??", "moduleName": "Infix"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 119, "lines": 2, "type": "string => option(string)"},
"Markdown/1008": {"name": "linkifyMarkdown", "moduleName": "Markdown", "html": "let <span class=\"pattern-ident\" data-local-define='Markdown/1008' data-type=\"(\n  string,\n  string,\n  'a,\n  'a,\n  Omd_representation.element => option(string),\n  Omd.element\n) => option(string)\">linkifyMarkdown</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1009' data-type=\"string\">curPath</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1010' data-type=\"string\">basePath</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1011' data-type=\"'a\">addTocs</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1012' data-type=\"'a\">tocLevel</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1013' data-type=\"Omd_representation.element => option(string)\">override</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1014' data-type=\"Omd.element\">element</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Markdown/1015' data-type=\"string => string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1009'>curPath</span>));\n  switch <span class=\"ident\" data-type=\"Omd.element\" data-local-use='Markdown/1014'>element</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Omd.element\">Omd.Url</span>(<span class=\"pattern-ident\" data-local-define='Markdown/1016' data-type=\"Omd.href\">href</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1017' data-type=\"Omd.t\">contents</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1018' data-type=\"Omd.title\">title</span>) when <span class=\"ident\" data-type=\"Omd.href => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>) <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;</span> <span class=\"int\" data-type=\"int\">0</span> =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='Markdown/1019' data-type=\"string\">contents</span> = <span class=\"ident\" data-type=\"(\n  ~?override: option(\n    Omd_representation.element => option(string)\n  ),\n  ~?pindent: option(bool),\n  ~?nl2br: option(bool),\n  ~?cs: option(Omd.code_stylist),\n  Omd.t\n) => string\" data-stamp-missing>Omd.to_html</span>(~<span class=\"ident\" data-type=\"Omd_representation.element => option(string)\" data-local-use='Markdown/1013'>override</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='Markdown/1017'>contents</span>);\n    if (<span class=\"ident\" data-type=\"(Omd.href, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;.&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(Omd.href, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;/&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(Omd.href, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(Omd.href, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;?&#39;) {\n      let <span class=\"pattern-ident\" data-local-define='Markdown/1020' data-type=\"Omd.href\">href</span> = if (<span class=\"ident\" data-type=\"(Omd.href, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;/&#39;) {\n        <span class=\"ident\" data-type=\"string => Omd.href\" data-local-use='Markdown/1015'>rel</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1010'>basePath</span> <span class=\"operator\" data-type=\"(string, Omd.href) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>)\n      } else if (<span class=\"ident\" data-type=\"(Omd.href, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;?&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(Omd.href, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;#&#39;) {\n        <span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>\n      } else {\n        <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1009'>curPath</span>) <span class=\"operator\" data-type=\"(string, Omd.href) => Omd.href\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>\n      };\n      <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (Omd.href, Omd.title, string) => string,\n    unit,\n    string\n  ),\n  Omd.href,\n  Omd.title,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (Omd.href, Omd.title, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.href, Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.href, Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (Omd.href, Omd.title, string) => string,\n  (Omd.href, Omd.title, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (Omd.title, string) => string,\n  (Omd.title, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;%s&quot; title=&quot;%s&quot;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1020'>href</span>, <span class=\"ident\" data-type=\"Omd.title\" data-local-use='Markdown/1018'>title</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1019'>contents</span>))\n    } else {\n      <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (Omd.href, Omd.title, string) => string,\n    unit,\n    string\n  ),\n  Omd.href,\n  Omd.title,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(\n  (Omd.href, Omd.title, string) => string,\n  unit,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.href, Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.href, Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (Omd.href, Omd.title, string) => string,\n  (Omd.href, Omd.title, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (Omd.title, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (Omd.title, string) => string,\n  (Omd.title, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|&lt;a href=&quot;%s&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot; title=&quot;%s&quot; class=&quot;external-link&quot;&gt;%s&lt;/a&gt;|}</span></span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"Omd.href\" data-local-use='Markdown/1016'>href</span>, <span class=\"ident\" data-type=\"Omd.title\" data-local-use='Markdown/1018'>title</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1019'>contents</span>))\n    }\n  }\n  | _ =&gt; <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  }\n}", "values": [{"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 844, "lines": 20, "type": "(\n  string,\n  string,\n  'a,\n  'a,\n  Omd_representation.element => option(string),\n  Omd.element\n) => option(string)"},
"CmtFindDocItems/1178": {"name": "moduleContentsType", "moduleName": "CmtFindDocItems", "html": "and <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1178' data-type=\"Types.module_type => State.Model.Docs.moduleContents\">moduleContentsType</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1225' data-type=\"Types.module_type\">modtype</span>) =&gt; Types.(switch <span class=\"ident\" data-type=\"Types.module_type\" data-local-use='CmtFindDocItems/1225'>modtype</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_ident</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1226' data-type=\"Path.t\">path</span>) | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_alias</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1226' data-type=\"Path.t\">path</span>) =&gt; <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Alias</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='CmtFindDocItems/1226'>path</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_functor</span>(_, _, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1228' data-type=\"Types.module_type\">tt</span>) =&gt; <span class=\"ident\" data-type=\"Types.module_type => State.Model.Docs.moduleContents\" data-global-use='CmtFindDocItems/1178'>moduleContentsType</span>(<span class=\"ident\" data-type=\"Types.module_type\" data-local-use='CmtFindDocItems/1228'>tt</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.module_type\">Mty_signature</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1229' data-type=\"Types.signature\">sign</span>) =&gt; <span class=\"constructor\" data-type=\"State.Model.Docs.moduleContents\">Items</span>(<span class=\"ident\" data-type=\"Types.signature => list(State.Model.Docs.doc)\" data-global-use='CmtFindDocItems/1042'>docItemsFromTypes</span>(<span class=\"ident\" data-type=\"Types.signature\" data-local-use='CmtFindDocItems/1229'>sign</span>))\n})", "values": [{"id": "CmtFindDocItems/1042", "name": "docItemsFromTypes", "moduleName": "CmtFindDocItems"}], "chars": 227, "lines": 4, "type": "Types.module_type => State.Model.Docs.moduleContents"},
"SerializeBinary/1010": {"name": "array_conv", "moduleName": "SerializeBinary", "html": "let <span class=\"pattern-ident\" data-local-define='SerializeBinary/1010' data-type=\"array(string)\">array_conv</span> = <span class=\"ident\" data-type=\"(int, int => string) => array(string)\" data-stamp-missing>Array.init</span>(<span class=\"int\" data-type=\"int\">16</span>, (<span class=\"pattern-ident\" data-local-define='SerializeBinary/1011' data-type=\"int\">i</span>) =&gt; <span class=\"ident\" data-type=\"(int, char) => string\" data-stamp-missing>String.make</span>(<span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"string\" data-type=\"string\">&quot;0123456789abcdef&quot;</span>.[<span class=\"ident\" data-type=\"int\" data-local-use='SerializeBinary/1011'>i</span>]</span>))", "values": [], "chars": 78, "lines": 0, "type": "array(string)"},
"CliToInput/1119": {"name": "findProjectFiles", "moduleName": "CliToInput", "html": "let <span class=\"pattern-ident\" data-local-define='CliToInput/1119' data-type=\"string => list((string, string))\">findProjectFiles</span> = <span class=\"pattern-ident\" data-local-define='CliToInput/1120' data-type=\"string\">root</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1121' data-type=\"Json.t\">config</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bsconfig.json&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;No bsconfig.json found&quot;</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1122' data-type=\"bool\">isNative</span> = <span class=\"ident\" data-type=\"Json.t => bool\" data-global-use='CliToInput/1056'>isNative</span>(<span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1121'>config</span>);\n  let <span class=\"pattern-ident\" data-local-define='CliToInput/1123' data-type=\"string\">compiledBase</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-global-use='CliToInput/1019'>oneShouldExist</span>(<span class=\"string\" data-type=\"string\">&quot;Cannot find directory for compiled artifacts.&quot;</span>,\n    <span class=\"ident\" data-type=\"bool\" data-local-use='CliToInput/1122'>isNative</span>\n      <span class=\"pattern-constructor\" data-type=\"bool\">?</span> [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/js&quot;</span>, <span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/native&quot;</span></span></span></span>]\n      <span class=\"pattern-constructor\" data-type=\"bool\">:</span> [<span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs&quot;</span>, <span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;lib/ocaml&quot;</span></span></span></span>]\n  );\n  <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-global-use='CliToInput/1044'>getSourceDirectories</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='CliToInput/1121'>config</span>)\n  <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(string, string) => string\" data-global-use='Infix/1049'>Infix.fileConcat</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span>))\n  <span class=\"operator\" data-type=\"(list(string), list(string) => list(list(string))) => list(\n  list(string)\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => list(string), list(string)) => list(list(string))\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1124' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"(string, string => bool) => list(string)\" data-stamp-missing>Files.collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1124'>name</span>, <span class=\"ident\" data-type=\"string => bool\" data-global-use='CliToInput/1070'>isSourceFile</span>))\n  <span class=\"operator\" data-type=\"(\n  list(list(string)),\n  list(list(string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list(string)) => list(string)\" data-stamp-missing>List.concat</span>\n  <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(string) => list(string)\" data-global-use='CliToInput/1076'>filterDuplicates</span>\n  <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CliToInput/1125' data-type=\"string\">path</span> =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='CliToInput/1126' data-type=\"string\">rel</span> = <span class=\"ident\" data-type=\"(string, string) => string\" data-stamp-missing>Files.relpath</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1120'>root</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1125'>path</span>);\n    (<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1123'>compiledBase</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string => string\" data-global-use='CliToInput/1072'>compiledName</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1126'>rel</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1126'>rel</span>)\n  }) <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"((string, string) => bool, list((string, string))) => list(\n  (string, string)\n)\" data-stamp-missing>List.filter</span>(((<span class=\"pattern-ident\" data-local-define='CliToInput/1127' data-type=\"string\">full</span>, <span class=\"pattern-ident\" data-local-define='CliToInput/1128' data-type=\"string\">rel</span>)) =&gt; <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CliToInput/1127'>full</span>))\n}", "values": [{"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "CliToInput/1056", "name": "isNative", "moduleName": "CliToInput"}, {"id": "CliToInput/1019", "name": "oneShouldExist", "moduleName": "CliToInput"}, {"id": "CliToInput/1044", "name": "getSourceDirectories", "moduleName": "CliToInput"}, {"id": "Infix/1049", "name": "fileConcat", "moduleName": "Infix"}, {"id": "CliToInput/1070", "name": "isSourceFile", "moduleName": "CliToInput"}, {"id": "CliToInput/1076", "name": "filterDuplicates", "moduleName": "CliToInput"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}, {"id": "CliToInput/1072", "name": "compiledName", "moduleName": "CliToInput"}], "chars": 709, "lines": 17, "type": "string => list((string, string))"},
"Docs/1033": {"name": "generate", "moduleName": "Docs", "html": "let <span class=\"pattern-ident\" data-local-define='Docs/1033' data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option('a),\n  ~jsLoc: option('a),\n  ~processDocString: GenerateDoc.t,\n  string,\n  option(Omd.t),\n  list((int, (string, list(string), 'a))),\n  list(State.Model.Docs.doc),\n  list(string),\n  list((string, string))\n) => string\">generate</span> = (~<span class=\"pattern-ident\" data-local-define='Docs/1034' data-type=\"option(string)\">sourceUrl</span>, ~<span class=\"pattern-ident\" data-local-define='Docs/1035' data-type=\"string\">relativeToRoot</span>, ~<span class=\"pattern-ident\" data-local-define='Docs/1036' data-type=\"option('a)\">cssLoc</span>, ~<span class=\"pattern-ident\" data-local-define='Docs/1037' data-type=\"option('a)\">jsLoc</span>, ~<span class=\"pattern-ident\" data-local-define='Docs/1038' data-type=\"GenerateDoc.t\">processDocString</span>, <span class=\"pattern-ident\" data-local-define='Docs/1039' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Docs/1040' data-type=\"option(Omd.t)\">topdoc</span>, <span class=\"pattern-ident\" data-local-define='Docs/1041' data-type=\"list((int, (string, list(string), 'a)))\">stamps</span>, <span class=\"pattern-ident\" data-local-define='Docs/1042' data-type=\"list(State.Model.Docs.doc)\">allDocs</span>, <span class=\"pattern-ident\" data-local-define='Docs/1043' data-type=\"list(string)\">projectNames</span>, <span class=\"pattern-ident\" data-local-define='Docs/1044' data-type=\"list((string, string))\">markdowns</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Docs/1045' data-type=\"Omd.t\">mainMarkdown</span> = switch (<span class=\"ident\" data-type=\"option(Omd.t)\" data-local-use='Docs/1040'>topdoc</span>) {\n  | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">None</span> =&gt; <span class=\"ident\" data-type=\"(\n  ~?extensions: option(Omd_representation.extensions),\n  ~?default_lang: option(Omd.name),\n  string\n) => Omd.t\" data-stamp-missing>Omd.of_string</span>(<span class=\"ident\" data-type=\"(~?addHeading: option(bool), string) => string\" data-global-use='GenerateDoc/1074'>GenerateDoc.defaultMain</span>(~addHeading=<span class=\"constructor\" data-type=\"bool\">true</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1039'>name</span>))\n  | <span class=\"pattern-constructor\" data-type=\"option(Omd.t)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Docs/1046' data-type=\"Omd.t\">doc</span>) =&gt; <span class=\"ident\" data-type=\"Omd.t\" data-local-use='Docs/1046'>doc</span>\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Docs/1047' data-type=\"PrintType.T.stringifier\">printer</span> = <span class=\"ident\" data-type=\"(\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  ) => option(string),\n  list(\n    (\n      int,\n      (\n        string,\n        list(string),\n        'a\n      )\n    )\n  )\n) => PrintType.T.stringifier\" data-global-use='GenerateDoc/1052'>GenerateDoc.printer</span>(<span class=\"ident\" data-type=\"(\n  string,\n  list(string),\n  (\n    string,\n    list(string),\n    CmtFindStamps.T.pathType\n  )\n) => option(string)\" data-global-use='Docs/1009'>formatHref</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1039'>name</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='Docs/1043'>projectNames</span>), <span class=\"ident\" data-type=\"list((int, (string, list(string), 'a)))\" data-local-use='Docs/1041'>stamps</span>);\n  let (<span class=\"pattern-ident\" data-local-define='Docs/1049' data-type=\"string\">html</span>, <span class=\"pattern-ident\" data-local-define='Docs/1050' data-type=\"list((int, string, string, string))\">tocs</span>) = <span class=\"ident\" data-type=\"(\n  PrintType.T.stringifier,\n  GenerateDoc.t,\n  list(string),\n  int,\n  string,\n  Omd.t,\n  list(State.Model.Docs.doc)\n) => (string, list((int, string, string, string)))\" data-global-use='GenerateDoc/1197'>GenerateDoc.docsForModule</span>(<span class=\"ident\" data-type=\"PrintType.T.stringifier\" data-local-use='Docs/1047'>printer</span>, <span class=\"ident\" data-type=\"GenerateDoc.t\" data-local-use='Docs/1038'>processDocString</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1039'>name</span>, <span class=\"ident\" data-type=\"Omd.t\" data-local-use='Docs/1045'>mainMarkdown</span>, <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='Docs/1042'>allDocs</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='Docs/1051' data-type=\"list((string, string))\">projectListing</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='Docs/1043'>projectNames</span> <span class=\"operator\" data-type=\"(\n  list(string),\n  list(string) => list((string, string))\n) => list((string, string))\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => (string, string), list(string)) => list(\n  (string, string)\n)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Docs/1052' data-type=\"string\">name</span> =&gt; (<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1052'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.html&quot;</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1052'>name</span>));\n  <span class=\"ident\" data-type=\"(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option('a),\n  ~jsLoc: option('a),\n  ~?checkHashes: option(bool),\n  string,\n  list((int, string, string, string)),\n  list((string, string)),\n  list((string, string)),\n  string\n) => string\" data-global-use='Docs/1019'>page</span>(~<span class=\"ident\" data-type=\"option(string)\" data-local-use='Docs/1034'>sourceUrl</span>, ~<span class=\"ident\" data-type=\"string\" data-local-use='Docs/1035'>relativeToRoot</span>, ~<span class=\"ident\" data-type=\"option('a)\" data-local-use='Docs/1036'>cssLoc</span>, ~<span class=\"ident\" data-type=\"option('a)\" data-local-use='Docs/1037'>jsLoc</span>, ~checkHashes=<span class=\"constructor\" data-type=\"bool\">true</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1039'>name</span>, <span class=\"ident\" data-type=\"list((int, string, string, string)) => list(\n  (int, string, string, string)\n)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list((int, string, string, string))\" data-local-use='Docs/1050'>tocs</span>), <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Docs/1051'>projectListing</span>, <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='Docs/1044'>markdowns</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Docs/1049'>html</span>)\n}", "values": [{"id": "GenerateDoc/1074", "name": "defaultMain", "moduleName": "GenerateDoc"}, {"id": "GenerateDoc/1052", "name": "printer", "moduleName": "GenerateDoc"}, {"id": "Docs/1009", "name": "formatHref", "moduleName": "Docs"}, {"id": "GenerateDoc/1197", "name": "docsForModule", "moduleName": "GenerateDoc"}, {"id": "Docs/1019", "name": "page", "moduleName": "Docs"}], "chars": 682, "lines": 11, "type": "(\n  ~sourceUrl: option(string),\n  ~relativeToRoot: string,\n  ~cssLoc: option('a),\n  ~jsLoc: option('a),\n  ~processDocString: GenerateDoc.t,\n  string,\n  option(Omd.t),\n  list((int, (string, list(string), 'a))),\n  list(State.Model.Docs.doc),\n  list(string),\n  list((string, string))\n) => string"},
"MainAux/1229": {"name": "generateProject", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1229' data-type=\"(\n  ~selfPath: string,\n  ~projectName: string,\n  ~root: string,\n  ~target: string,\n  ~sourceDirectories: list(string),\n  ~test: bool,\n  ~bsRoot: string\n) => unit\">generateProject</span> = (~<span class=\"pattern-ident\" data-local-define='MainAux/1230' data-type=\"string\">selfPath</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1231' data-type=\"string\">projectName</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1232' data-type=\"string\">root</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1233' data-type=\"string\">target</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1234' data-type=\"list(string)\">sourceDirectories</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1235' data-type=\"bool\">test</span>, ~<span class=\"pattern-ident\" data-local-define='MainAux/1236' data-type=\"string\">bsRoot</span>) =&gt; {\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>Files.mkdirp</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1233'>target</span>);\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1237' data-type=\"Json.t\">bsConfig</span> = <span class=\"ident\" data-type=\"string => Json.t\" data-stamp-missing>Json.parse</span>(<span class=\"ident\" data-type=\"string => option(string)\" data-stamp-missing>Files.readFile</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1232'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bsconfig.json&quot;</span>) <span class=\"operator\" data-type=\"(option(string), string) => string\" data-global-use='Infix/1008'>|!</span> <span class=\"string\" data-type=\"string\">&quot;No bsconfig.json found&quot;</span>);\n  let (<span class=\"pattern-ident\" data-local-define='MainAux/1238' data-type=\"list(string)\">found</span>, <span class=\"pattern-ident\" data-local-define='MainAux/1239' data-type=\"string\">compiledRoot</span>) = <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1234'>sourceDirectories</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> {\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1240' data-type=\"list(string)\">sourceDirectories</span> = <span class=\"ident\" data-type=\"(string, Json.t) => list(string)\" data-global-use='CodeSnippets/1176'>CodeSnippets.getSourceDirectories</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1232'>root</span>, <span class=\"ident\" data-type=\"Json.t\" data-local-use='MainAux/1237'>bsConfig</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1241' data-type=\"bool\">isNative</span> = <span class=\"ident\" data-type=\"Json.t => bool\" data-global-use='CodeSnippets/1188'>CodeSnippets.isNative</span>(<span class=\"ident\" data-type=\"Json.t\" data-local-use='MainAux/1237'>bsConfig</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1242' data-type=\"string\">compiledRoot</span> = <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1232'>root</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> (<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1241'>isNative</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs/js&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;lib/bs&quot;</span>);\n    let <span class=\"pattern-ident\" data-local-define='MainAux/1243' data-type=\"list(string)\">found</span> = <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1240'>sourceDirectories</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1244' data-type=\"string\">name</span> =&gt; <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1242'>compiledRoot</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1244'>name</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(list(string))) => list(\n  list(string)\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => list(string), list(string)) => list(list(string))\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1245' data-type=\"string\">p</span> =&gt; <span class=\"ident\" data-type=\"(string, string => bool) => list(string)\" data-stamp-missing>Files.collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1245'>p</span>, <span class=\"ident\" data-type=\"string => bool\" data-global-use='MainAux/1222'>isCmt</span>)) <span class=\"operator\" data-type=\"(\n  list(list(string)),\n  list(list(string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list(string)) => list(string)\" data-stamp-missing>List.concat</span>;\n    (<span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1243'>found</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1242'>compiledRoot</span>)\n    /* HACKKKK */\n  } <span class=\"pattern-constructor\" data-type=\"bool\">:</span> (<span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1234'>sourceDirectories</span> <span class=\"operator\" data-type=\"(list(string), list(string) => list(list(string))) => list(\n  list(string)\n)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => list(string), list(string)) => list(list(string))\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1246' data-type=\"string\">p</span> =&gt; <span class=\"ident\" data-type=\"(string, string => bool) => list(string)\" data-stamp-missing>Files.collect</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1246'>p</span>, <span class=\"ident\" data-type=\"string => bool\" data-global-use='MainAux/1222'>isCmt</span>)) <span class=\"operator\" data-type=\"(\n  list(list(string)),\n  list(list(string)) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"list(list(string)) => list(string)\" data-stamp-missing>List.concat</span>, <span class=\"ident\" data-type=\"list(string) => string\" data-stamp-missing>List.hd</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1234'>sourceDirectories</span>));\n\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1247' data-type=\"list((string, option(string), Omd.t, string))\">markdowns</span> = <span class=\"ident\" data-type=\"(string, string, string) => list(\n  (string, option(string), Omd.t, string)\n)\" data-global-use='MainAux/1203'>getMarkdowns</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1231'>projectName</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1232'>root</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1233'>target</span>);\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1248' data-type=\"option(string)\">url</span> = <span class=\"ident\" data-type=\"string => option(string)\" data-global-use='ParseConfig/1013'>ParseConfig.getUrl</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1232'>root</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1249' data-type=\"string\">static</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.dirname</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1230'>selfPath</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;../../../static&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1250' data-type=\"string\">bsbVersion</span> = <span class=\"ident\" data-type=\"string => string\" data-global-use='MainAux/1224'>getBsbVersion</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1232'>root</span>);\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1251' data-type=\"string\">bsbFile</span> = <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1249'>static</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bs-&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1250'>bsbVersion</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.js&quot;</span>;\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1252' data-type=\"bool\">editingEnabled</span> = <span class=\"ident\" data-type=\"string => bool\" data-stamp-missing>Files.exists</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1251'>bsbFile</span>);\n  if (<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1252'>editingEnabled</span>) {\n    <span class=\"ident\" data-type=\"(~source: string, ~dest: string) => bool\" data-stamp-missing>Files.copy</span>(~source=<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1251'>bsbFile</span>, ~dest=<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1233'>target</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;bucklescript.js&quot;</span>) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  } else {\n    <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;No bucklescript file available -- editing will be disabled&quot;</span>)\n  };\n\n  <span class=\"ident\" data-type=\"(\n  ~bsRoot: string,\n  ~editingEnabled: bool,\n  ~test: bool,\n  string,\n  string,\n  option(string),\n  string,\n  list(string),\n  list((string, option(string), Omd.t, string))\n) => unit\" data-global-use='MainAux/1100'>generateMultiple</span>(~<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1236'>bsRoot</span>, ~<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1252'>editingEnabled</span>, ~<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1235'>test</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1232'>root</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1239'>compiledRoot</span>, <span class=\"ident\" data-type=\"option(string)\" data-local-use='MainAux/1248'>url</span>, <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1233'>target</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='MainAux/1238'>found</span>, <span class=\"ident\" data-type=\"list((string, option(string), Omd.t, string))\" data-local-use='MainAux/1247'>markdowns</span>);\n\n  [\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;block-script.js&quot;</span>,\n  ...<span class=\"ident\" data-type=\"bool\" data-local-use='MainAux/1252'>editingEnabled</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> [\n  <span data-type=\"list(string)\"><span class=\"constructor\" data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;jsx-ppx.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;refmt.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/lib/codemirror.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/lib/codemirror.css&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/mode/rust/rust.js&quot;</span>,\n  <span data-type=\"list(string)\"><span class=\"string\" data-type=\"string\">&quot;codemirror-5.36.0/addon/mode/simple.js&quot;</span>,</span></span></span></span></span></span></span>\n  ] <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span></span>]\n  <span class=\"operator\" data-type=\"(list(string), list(string) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => unit, list(string)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"pattern-ident\" data-local-define='MainAux/1253' data-type=\"string\">name</span> =&gt; {\n    <span class=\"ident\" data-type=\"(~source: string, ~dest: string) => bool\" data-stamp-missing>Files.copy</span>(~source=<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1249'>static</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1253'>name</span>, ~dest=<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1233'>target</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1253'>name</span>)) <span class=\"operator\" data-type=\"(bool, bool => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"bool => unit\" data-stamp-missing>ignore</span>;\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='MainAux/1254' data-type=\"string\">localUrl</span> = <span class=\"string\" data-type=\"string\">&quot;file://&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Files.absify</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1233'>target</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-global-use='Infix/1052'>/+</span> <span class=\"string\" data-type=\"string\">&quot;index.html&quot;</span>;\n  <span class=\"ident\" data-type=\"unit => unit\" data-stamp-missing>print_newline</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n  <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Complete! Docs are available in &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1233'>target</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\nOpen &quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1254'>localUrl</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot; in your browser to view&quot;</span>);\n  <span class=\"ident\" data-type=\"unit => unit\" data-stamp-missing>print_newline</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n}", "values": [{"id": "Infix/1008", "name": "|!", "moduleName": "Infix"}, {"id": "CodeSnippets/1176", "name": "getSourceDirectories", "moduleName": "CodeSnippets"}, {"id": "CodeSnippets/1188", "name": "isNative", "moduleName": "CodeSnippets"}, {"id": "MainAux/1222", "name": "isCmt", "moduleName": "MainAux"}, {"id": "MainAux/1203", "name": "getMarkdowns", "moduleName": "MainAux"}, {"id": "ParseConfig/1013", "name": "getUrl", "moduleName": "ParseConfig"}, {"id": "MainAux/1224", "name": "getBsbVersion", "moduleName": "MainAux"}, {"id": "MainAux/1100", "name": "generateMultiple", "moduleName": "MainAux"}, {"id": "Infix/1052", "name": "/+", "moduleName": "Infix"}], "chars": 1989, "lines": 46, "type": "(\n  ~selfPath: string,\n  ~projectName: string,\n  ~root: string,\n  ~target: string,\n  ~sourceDirectories: list(string),\n  ~test: bool,\n  ~bsRoot: string\n) => unit"},
"CodeSnippets/1103": {"name": "hashAll", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1103' data-type=\"string => string\">hashAll</span> = <span class=\"pattern-ident\" data-local-define='CodeSnippets/1104' data-type=\"string\">text</span> =&gt; <span class=\"ident\" data-type=\"string => list(string)\" data-global-use='CodeSnippets/1088'>splitLines</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1104'>text</span>) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='CodeSnippets/1105' data-type=\"string\">t</span> =&gt; (<span class=\"ident\" data-type=\"string => bool\" data-global-use='CodeHighlight/1266'>CodeHighlight.isHashed</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1105'>t</span>) <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1105'>t</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;#&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='CodeSnippets/1105'>t</span>)) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>)", "values": [{"id": "CodeSnippets/1088", "name": "splitLines", "moduleName": "CodeSnippets"}, {"id": "CodeHighlight/1266", "name": "isHashed", "moduleName": "CodeHighlight"}], "chars": 122, "lines": 0, "type": "string => string"},
"PrintType/1032": {"name": "@!", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1032' data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\">(@!)</span> = <span class=\"ident\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-stamp-missing>Pretty.append</span>", "values": [], "chars": 24, "lines": 0, "type": "(Pretty.doc, Pretty.doc) => Pretty.doc"},
"MainAux/1222": {"name": "isCmt", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1222' data-type=\"string => bool\">isCmt</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1223' data-type=\"string\">name</span> =&gt; {\n  <span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"(string, string) => bool\" data-global-use='MainAux/1096'>startsWith</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1223'>name</span>), <span class=\"ident\" data-type=\"string\" data-global-use='CodeSnippets/1008'>CodeSnippets.codeBlockPrefix</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> (<span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1223'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.cmt&quot;</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>||</span> <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1223'>name</span>, <span class=\"string\" data-type=\"string\">&quot;.cmti&quot;</span>));\n}", "values": [{"id": "MainAux/1096", "name": "startsWith", "moduleName": "MainAux"}, {"id": "CodeSnippets/1008", "name": "codeBlockPrefix", "moduleName": "CodeSnippets"}], "chars": 174, "lines": 2, "type": "string => bool"},
"GenerateDoc/1029": {"name": "findValueByName", "moduleName": "GenerateDoc", "html": "let rec <span class=\"pattern-ident\" data-local-define='GenerateDoc/1029' data-type=\"(list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)\">findValueByName</span> = (<span class=\"pattern-ident\" data-local-define='GenerateDoc/1030' data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">allDocs</span>, <span class=\"pattern-ident\" data-local-define='GenerateDoc/1031' data-type=\"'a\">name</span>) =&gt; {\n  switch <span class=\"ident\" data-type=\"list(('a, 'a, State.Model.Docs.docItem))\" data-local-use='GenerateDoc/1030'>allDocs</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">[]</span> =&gt; <span class=\"constructor\" data-type=\"option(('a, 'a, State.Model.Docs.docItem))\">None</span>\n  | [<span data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">(<span class=\"pattern-ident\" data-local-define='GenerateDoc/1032' data-type=\"'a\">n</span>, _, <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Value</span>(_)) as doc, ...<span class=\"pattern-ident\" data-local-define='GenerateDoc/1034' data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">rest</span></span>] when <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1032'>n</span> <span class=\"operator\" data-type=\"('a, 'a) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1031'>name</span> =&gt; <span class=\"constructor\" data-type=\"option(('a, 'a, State.Model.Docs.docItem))\">Some</span>(<span class=\"ident\" data-type=\"('a, 'a, State.Model.Docs.docItem)\" data-local-use='GenerateDoc/1033'>doc</span>)\n  | [<span data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">_, ...<span class=\"pattern-ident\" data-local-define='GenerateDoc/1035' data-type=\"list(('a, 'a, State.Model.Docs.docItem))\">rest</span></span>] =&gt; <span class=\"ident\" data-type=\"(list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)\" data-global-use='GenerateDoc/1015'>findByName</span>(<span class=\"ident\" data-type=\"list(('a, 'a, State.Model.Docs.docItem))\" data-local-use='GenerateDoc/1035'>rest</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='GenerateDoc/1031'>name</span>)\n  }\n}", "values": [{"id": "GenerateDoc/1015", "name": "findByName", "moduleName": "GenerateDoc"}], "chars": 196, "lines": 6, "type": "(list(('a, 'a, State.Model.Docs.docItem)), 'a) => option(\n  ('a, 'a, State.Model.Docs.docItem)\n)"},
"MakeIndex/1008": {"name": "source", "moduleName": "MakeIndex", "html": "let <span class=\"pattern-ident\" data-local-define='MakeIndex/1008' data-type=\"string\">source</span> = <span class=\"string\" data-type=\"string\">{|\nconsole.log(process.argv);\nvar elasticlunr = process.argv[1];\nvar json = process.argv[2];\nvar relative = function (n) { return n[0] == &#39;.&#39; || n[0] == &#39;/&#39; ? n : &#39;./&#39; + n; };\nvar elastic = require(relative(elasticlunr));\nvar data = require(relative(json));\n\nvar index = new elastic.Index();\nindex.addField(&quot;title&quot;);\nindex.addField(&quot;contents&quot;);\nindex.setRef(&quot;id&quot;);\n\ndata.forEach(function(doc, i) {\n  doc.id = &#39;&#39; + i;\n  index.addDoc(doc);\n});\n\nvar fs = require(&#39;fs&#39;);\nfs.writeFileSync(json + &quot;.index.js&quot;, &quot;window.searchindex = &quot; + JSON.stringify(index.toJSON()));\nconsole.log(&quot;Finished generating index!&quot;);\n|}</span> <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>), <span class=\"string\" data-type=\"string\">&quot;&quot;</span>)", "values": [], "chars": 672, "lines": 21, "type": "string"},
"State/1079": {"name": "iter", "moduleName": "State", "html": "let rec <span class=\"pattern-ident\" data-local-define='State/1079' data-type=\"((string, option(Omd.t), docItem) => 'a, doc) => unit\">iter</span> = (<span class=\"pattern-ident\" data-local-define='State/1080' data-type=\"(string, option(Omd.t), docItem) => 'a\">fn</span>, (<span class=\"pattern-ident\" data-local-define='State/1081' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='State/1082' data-type=\"option(Omd.t)\">docString</span>, <span class=\"pattern-ident\" data-local-define='State/1083' data-type=\"docItem\">item</span>) as doc) =&gt; {\n      <span class=\"ident\" data-type=\"(string, option(Omd.t), docItem) => 'a\" data-local-use='State/1080'>fn</span>(<span class=\"ident\" data-type=\"(string, option(Omd.t), docItem)\" data-local-use='State/1084'>doc</span>);\n      switch <span class=\"ident\" data-type=\"docItem\" data-local-use='State/1083'>item</span> {\n      | <span class=\"pattern-constructor\" data-type=\"docItem\">Include</span>(_, <span class=\"pattern-ident\" data-local-define='State/1085' data-type=\"list(doc)\">children</span>) | <span class=\"pattern-constructor\" data-type=\"docItem\">Module</span>(<span class=\"pattern-constructor\" data-type=\"moduleContents\">Items</span>(<span class=\"pattern-ident\" data-local-define='State/1085' data-type=\"list(doc)\">children</span>)) =&gt; <span class=\"ident\" data-type=\"(doc => unit, list(doc)) => unit\" data-stamp-missing>List.iter</span>(<span class=\"ident\" data-type=\"((string, option(Omd.t), docItem) => 'a, doc) => unit\" data-global-use='State/1079'>iter</span>(<span class=\"ident\" data-type=\"(string, option(Omd.t), docItem) => 'a\" data-local-use='State/1080'>fn</span>), <span class=\"ident\" data-type=\"list(doc)\" data-local-use='State/1085'>children</span>)\n      | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n      }\n    }", "values": [], "chars": 209, "lines": 6, "type": "((string, option(Omd.t), docItem) => 'a, doc) => unit"},
"PrepareUtils/1061": {"name": "foldOpt", "moduleName": "PrepareUtils", "html": "let <span class=\"pattern-ident\" data-local-define='PrepareUtils/1061' data-type=\"('a => option('a), list('a), list('a)) => list('a)\">foldOpt</span> = (<span class=\"pattern-ident\" data-local-define='PrepareUtils/1062' data-type=\"'a => option('a)\">fn</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1063' data-type=\"list('a)\">items</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1064' data-type=\"list('a)\">base</span>) =&gt; <span class=\"ident\" data-type=\"((list('a), 'a) => list('a), list('a), list('a)) => list('a)\" data-stamp-missing>List.fold_left</span>((<span class=\"pattern-ident\" data-local-define='PrepareUtils/1065' data-type=\"list('a)\">items</span>, <span class=\"pattern-ident\" data-local-define='PrepareUtils/1066' data-type=\"'a\">item</span>) =&gt; switch (<span class=\"ident\" data-type=\"'a => option('a)\" data-local-use='PrepareUtils/1062'>fn</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1066'>item</span>)) { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1065'>items</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrepareUtils/1067' data-type=\"'a\">x</span>) =&gt; [<span data-type=\"list('a)\"><span class=\"ident\" data-type=\"'a\" data-local-use='PrepareUtils/1067'>x</span>, ...<span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1065'>items</span></span>]}, <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1064'>base</span>, <span class=\"ident\" data-type=\"list('a)\" data-local-use='PrepareUtils/1063'>items</span>)", "values": [], "chars": 144, "lines": 0, "type": "('a => option('a), list('a), list('a)) => list('a)"},
"CodeHighlight/1276": {"name": "codeSections", "moduleName": "CodeHighlight", "html": "let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1276' data-type=\"string => (string, int, string, string, int)\">codeSections</span> = <span class=\"pattern-ident\" data-local-define='CodeHighlight/1277' data-type=\"string\">text</span> =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1278' data-type=\"list(string)\">lines</span> = <span class=\"ident\" data-type=\"(Str.regexp, string) => list(string)\" data-stamp-missing>Str.split</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>), <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1277'>text</span>);\n  let (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1279' data-type=\"int\">frontOffset</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1280' data-type=\"list(string)\">pre</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1281' data-type=\"list(string)\">lines</span>) = <span class=\"ident\" data-type=\"(int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)\" data-global-use='CodeHighlight/1270'>separateHashed</span>(<span class=\"int\" data-type=\"int\">0</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1278'>lines</span>);\n  let (<span class=\"pattern-ident\" data-local-define='CodeHighlight/1282' data-type=\"int\">backOffset</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1283' data-type=\"list(string)\">post</span>, <span class=\"pattern-ident\" data-local-define='CodeHighlight/1284' data-type=\"list(string)\">lines</span>) = <span class=\"ident\" data-type=\"(int, list(string), list(string)) => (\n  int,\n  list(string),\n  list(string)\n)\" data-global-use='CodeHighlight/1270'>separateHashed</span>(<span class=\"int\" data-type=\"int\">0</span>, <span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"ident\" data-type=\"list(string) => list(string)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1281'>lines</span>));\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1285' data-type=\"int\">backOffset</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1277'>text</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1282'>backOffset</span>;\n  let <span class=\"pattern-ident\" data-local-define='CodeHighlight/1286' data-type=\"string\">text</span> = <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string) => list(string)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1284'>lines</span>));\n  (<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1280'>pre</span>)), <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1279'>frontOffset</span>, <span class=\"ident\" data-type=\"string\" data-local-use='CodeHighlight/1286'>text</span>, <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.trim</span>(<span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span>, <span class=\"ident\" data-type=\"list(string) => list(string)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"list(string)\" data-local-use='CodeHighlight/1283'>post</span>))), <span class=\"ident\" data-type=\"int\" data-local-use='CodeHighlight/1285'>backOffset</span>)\n}", "values": [{"id": "CodeHighlight/1270", "name": "separateHashed", "moduleName": "CodeHighlight"}], "chars": 451, "lines": 7, "type": "string => (string, int, string, string, int)"},
"CodeSnippets/1059": {"name": "html", "moduleName": "CodeSnippets", "html": "let <span class=\"pattern-ident\" data-local-define='CodeSnippets/1059' data-type=\"(~?md: option(bool), string) => string\">html</span> = <span class=\"ident\" data-type=\"(~?md: option(bool), string) => string\" data-stamp-missing>Omd_utils.htmlentities</span>", "values": [], "chars": 33, "lines": 0, "type": "(~?md: option(bool), string) => string"},
"InputToModel/1073": {"name": "processModules", "moduleName": "InputToModel", "html": "let <span class=\"pattern-ident\" data-local-define='InputToModel/1073' data-type=\"list((string, string)) => list(State.Model.topModule)\">processModules</span> = <span class=\"pattern-ident\" data-local-define='InputToModel/1074' data-type=\"list((string, string))\">moduleFiles</span> =&gt; {\n  <span class=\"ident\" data-type=\"list((string, string))\" data-local-use='InputToModel/1074'>moduleFiles</span> <span class=\"operator\" data-type=\"(\n  list((string, string)),\n  list((string, string)) => list(\n    State.Model.topModule\n  )\n) => list(State.Model.topModule)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (string, string) => State.Model.topModule,\n  list((string, string))\n) => list(State.Model.topModule)\" data-stamp-missing>List.map</span>(((<span class=\"pattern-ident\" data-local-define='InputToModel/1075' data-type=\"string\">cmt</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1076' data-type=\"string\">sourcePath</span>)) =&gt; {\n    let <span class=\"pattern-ident\" data-local-define='InputToModel/1077' data-type=\"string\">name</span> = <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.basename</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1075'>cmt</span>) <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>Filename.chop_extension</span> <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.capitalize</span>;\n    let (<span class=\"pattern-ident\" data-local-define='InputToModel/1078' data-type=\"list(\n  (int, (string, list(string), CmtFindStamps.T.pathType))\n)\">stamps</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1079' data-type=\"option(Omd.t)\">topDocs</span>, <span class=\"pattern-ident\" data-local-define='InputToModel/1080' data-type=\"list(State.Model.Docs.doc)\">items</span>) = <span class=\"ident\" data-type=\"(string, string) => (\n  list(\n    (\n      int,\n      (string, list(string), CmtFindStamps.T.pathType)\n    )\n  ),\n  option(Omd.t),\n  list(State.Model.Docs.doc)\n)\" data-global-use='InputToModel/1059'>processCmt</span>(<span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1077'>name</span>, <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1075'>cmt</span>);\n    <span data-type=\"State.Model.topModule\">{\n      <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1077'>name</span>,\n      <span class=\"ident\" data-type=\"string\" data-local-use='InputToModel/1076'>sourcePath</span>,\n      docs: <span class=\"ident\" data-type=\"option(State.Model.docWithExamples)\" data-local-use='InputToModel/1079'>topDocs</span>,\n      <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='InputToModel/1080'>items</span>,\n      <span class=\"ident\" data-type=\"CmtFindStamps.T.stamps\" data-local-use='InputToModel/1078'>stamps</span>,\n    }</span>\n  });\n}", "values": [{"id": "InputToModel/1059", "name": "processCmt", "moduleName": "InputToModel"}], "chars": 331, "lines": 12, "type": "list((string, string)) => list(State.Model.topModule)"},
"Highlighting/1129": {"name": "pathName", "moduleName": "Highlighting", "html": "let rec <span class=\"pattern-ident\" data-local-define='Highlighting/1129' data-type=\"Path.t => string\">pathName</span> = <span class=\"pattern-ident\" data-local-define='Highlighting/1130' data-type=\"Path.t\">path</span> =&gt; {\n  switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1130'>path</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>({<span class=\"pattern-ident\" data-local-define='Highlighting/1131' data-type=\"int\">Ident.stamp</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1132' data-type=\"string\">name</span>}) =&gt; <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1131'>stamp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"int\" data-type=\"int\">0</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1132'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;!&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1132'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;/&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1131'>stamp</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pdot</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1133' data-type=\"Path.t\">path</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1134' data-type=\"string\">name</span>, _) =&gt; <span class=\"ident\" data-type=\"Path.t => string\" data-global-use='Highlighting/1129'>pathName</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1133'>path</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;.&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1134'>name</span>\n  | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Papply</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1135' data-type=\"Path.t\">one</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1136' data-type=\"Path.t\">two</span>) =&gt; <span class=\"ident\" data-type=\"string => string\" data-stamp-missing>failwith</span>(<span class=\"string\" data-type=\"string\">&quot;cannot path name an apply&quot;</span>) /* TBH I just don&#39;t understand apply */\n  }\n}", "values": [], "chars": 322, "lines": 6, "type": "Path.t => string"},
"Commands/1034": {"name": "execSync", "moduleName": "Commands", "html": "/**\n * Get the output of a command, in lines.\n */\nlet <span class=\"pattern-ident\" data-local-define='Commands/1034' data-type=\"string => (list(string), bool)\">execSync</span> = (<span class=\"pattern-ident\" data-local-define='Commands/1035' data-type=\"string\">cmd</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Commands/1036' data-type=\"Pervasives.in_channel\">cin</span> = <span class=\"ident\" data-type=\"string => Pervasives.in_channel\" data-stamp-missing>Unix.open_process_in</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Commands/1035'>cmd</span>);\n  try {\n    let rec <span class=\"pattern-ident\" data-local-define='Commands/1037' data-type=\"unit => list(string)\">loop</span> = <span class=\"pattern-constructor\" data-type=\"unit\">()</span> =&gt;\n      switch (<span class=\"ident\" data-type=\"Pervasives.in_channel => string\" data-stamp-missing>Pervasives.input_line</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1036'>cin</span>)) {\n      | exception <span class=\"pattern-constructor\" data-type=\"exn\">End_of_file</span> =&gt; <span class=\"constructor\" data-type=\"list(string)\">[]</span>\n      | <span class=\"pattern-ident\" data-local-define='Commands/1038' data-type=\"string\">line</span> =&gt; {\n        [<span data-type=\"list(string)\"><span class=\"ident\" data-type=\"string\" data-local-use='Commands/1038'>line</span>, ...<span class=\"ident\" data-type=\"unit => list(string)\" data-local-use='Commands/1037'>loop</span><span class=\"constructor\" data-type=\"unit\">()</span></span>]\n      }\n      };\n    let <span class=\"pattern-ident\" data-local-define='Commands/1039' data-type=\"list(string)\">lines</span> = <span class=\"ident\" data-type=\"unit => list(string)\" data-local-use='Commands/1037'>loop</span><span class=\"constructor\" data-type=\"unit\">()</span>;\n    switch (<span class=\"ident\" data-type=\"Pervasives.in_channel => Unix.process_status\" data-stamp-missing>Unix.close_process_in</span>(<span class=\"ident\" data-type=\"Pervasives.in_channel\" data-local-use='Commands/1036'>cin</span>)) {\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WEXITED</span>(<span class=\"int\" data-type=\"int\">0</span>) =&gt; (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1039'>lines</span>, <span class=\"constructor\" data-type=\"bool\">true</span>)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WEXITED</span>(_)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WSIGNALED</span>(_)\n    | <span class=\"pattern-constructor\" data-type=\"Unix.process_status\">WSTOPPED</span>(_) =&gt; (<span class=\"ident\" data-type=\"list(string)\" data-local-use='Commands/1039'>lines</span>, <span class=\"constructor\" data-type=\"bool\">false</span>)\n    }\n  } {\n  | <span class=\"pattern-constructor\" data-type=\"exn\">End_of_file</span> =&gt; (<span class=\"constructor\" data-type=\"list(string)\">[]</span>, <span class=\"constructor\" data-type=\"bool\">false</span>)\n  }\n}", "values": [], "chars": 509, "lines": 23, "type": "string => (list(string), bool)"},
"MainAux/1193": {"name": "isReadme", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1193' data-type=\"string => bool\">isReadme</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1194' data-type=\"string\">path</span> =&gt; <span class=\"ident\" data-type=\"(string, string) => bool\" data-stamp-missing>Filename.check_suffix</span>(<span class=\"ident\" data-type=\"string => string\" data-stamp-missing>String.lowercase</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1194'>path</span>), <span class=\"string\" data-type=\"string\">&quot;/readme.md&quot;</span>)", "values": [], "chars": 82, "lines": 0, "type": "string => bool"},
"DocsTemplate/1011": {"name": "typeScript", "moduleName": "DocsTemplate", "html": "let <span class=\"pattern-ident\" data-local-define='DocsTemplate/1011' data-type=\"string\">typeScript</span> = <span class=\"string\" data-type=\"string\">{|\nvar listenForTypes = () =&gt; {\n  var typeViewer = document.createElement(&#39;div&#39;)\n  typeViewer.className = &#39;type-viewer&#39;\n  document.body.appendChild(typeViewer)\n  ;[].forEach.call(document.querySelectorAll(&#39;pre.code&#39;), el =&gt; {\n    el.addEventListener(&#39;mousemove&#39;, evt =&gt; {\n      typeViewer.style.top = evt.pageY + &#39;px&#39;\n      typeViewer.style.left = evt.pageX + &#39;px&#39;\n    });\n    el.addEventListener(&#39;mouseover&#39;, evt =&gt; {\n      if (evt.target.getAttribute(&#39;data-type&#39;)) {\n        evt.target.classList.add(&#39;type-hovered&#39;)\n        typeViewer.textContent = evt.target.getAttribute(&#39;data-type&#39;)\n        typeViewer.style.display = &#39;block&#39;\n      }\n    })\n    el.addEventListener(&#39;mouseout&#39;, evt =&gt; {\n      if (evt.target.getAttribute(&#39;data-type&#39;)) {\n        evt.target.classList.remove(&#39;type-hovered&#39;)\n        typeViewer.style.display = &#39;none&#39;\n      }\n    })\n  })\n}\n|}</span>", "values": [], "chars": 876, "lines": 25, "type": "string"},
"MainAux/1255": {"name": "parse", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1255' data-type=\"(\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)\">parse</span> = <span class=\"ident\" data-type=\"(\n  ~?alias: option(list((string, Minimist.StrSet.elt))),\n  ~?presence: option(list(Minimist.StrSet.elt)),\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  ~?strings: option(list(Minimist.StrSet.elt)),\n  ~?multi: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)\" data-stamp-missing>Minimist.parse</span>(\n  ~alias=[<span data-type=\"list((string, Minimist.StrSet.elt))\"><span class=\"constructor\" data-type=\"list((string, Minimist.StrSet.elt))\">(<span class=\"string\" data-type=\"string\">&quot;h&quot;</span>, <span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;help&quot;</span>), <span data-type=\"list((string, Minimist.StrSet.elt))\">(<span class=\"string\" data-type=\"string\">&quot;test&quot;</span>, <span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;doctest&quot;</span>)</span></span></span>],\n  ~presence=[<span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"constructor\" data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;help&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;doctest&quot;</span></span></span></span>],\n  ~multi=[<span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\"><span class=\"constructor\" data-type=\"list(Minimist.StrSet.elt)\">&quot;cmi-directory&quot;</span></span></span>],\n  ~strings=[<span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"constructor\" data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;target&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;root&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;name&quot;</span>, <span data-type=\"list(Minimist.StrSet.elt)\"><span class=\"string\" data-type=\"Minimist.StrSet.elt\">&quot;bs-root&quot;</span></span></span></span></span></span>]\n)", "values": [], "chars": 186, "lines": 5, "type": "(\n  ~?bools: option(list(Minimist.StrSet.elt)),\n  ~?floats: option(list(Minimist.StrSet.elt)),\n  ~?ints: option(list(Minimist.StrSet.elt)),\n  list(string)\n) => Minimist.result(\n  Minimist.opts,\n  [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)"},
"ParseConfig/1008": {"name": "fromGitUrl", "moduleName": "ParseConfig", "html": "let <span class=\"pattern-ident\" data-local-define='ParseConfig/1008' data-type=\"string => option(string)\">fromGitUrl</span> = <span class=\"pattern-ident\" data-local-define='ParseConfig/1009' data-type=\"string\">text</span> =&gt; {\n  if (<span class=\"ident\" data-type=\"(Str.regexp, string, int) => bool\" data-stamp-missing>Str.string_match</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp</span>(<span class=\"string\" data-type=\"string\">{|\\([a-zA-Z0-9_.-]+\\)/\\([a-zA-Z0-9_.-]+\\)|}</span>), <span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1009'>text</span>, <span class=\"int\" data-type=\"int\">0</span>))  {\n    <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|https://github.com/%s/%s/blob/master/|}</span></span></span></span></span></span></span></span></span>, <span class=\"ident\" data-type=\"(int, string) => string\" data-stamp-missing>Str.matched_group</span>(<span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1009'>text</span>), <span class=\"ident\" data-type=\"(int, string) => string\" data-stamp-missing>Str.matched_group</span>(<span class=\"int\" data-type=\"int\">2</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1009'>text</span>)))\n  } else if (<span class=\"ident\" data-type=\"(Str.regexp, string, int) => bool\" data-stamp-missing>Str.string_match</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp</span>(<span class=\"string\" data-type=\"string\">{|git\\+\\(https://github.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+\\)|}</span>), <span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1009'>text</span>, <span class=\"int\" data-type=\"int\">0</span>)) {\n    let <span class=\"pattern-ident\" data-local-define='ParseConfig/1010' data-type=\"string\">matched</span> = <span class=\"ident\" data-type=\"(int, string) => string\" data-stamp-missing>Str.matched_group</span>(<span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1009'>text</span>);\n    let <span class=\"pattern-ident\" data-local-define='ParseConfig/1011' data-type=\"int\">ln</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1010'>matched</span>);\n    let <span class=\"pattern-ident\" data-local-define='ParseConfig/1012' data-type=\"string\">matched</span> = if (<span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1010'>matched</span>, <span class=\"ident\" data-type=\"int\" data-local-use='ParseConfig/1011'>ln</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">4</span>, <span class=\"int\" data-type=\"int\">4</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"string\" data-type=\"string\">&quot;.git&quot;</span>) {\n      <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1010'>matched</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"int\" data-local-use='ParseConfig/1011'>ln</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">4</span>)\n    } else {\n      <span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1010'>matched</span>\n    };\n    <span class=\"constructor\" data-type=\"option(string)\">Some</span>(<span class=\"ident\" data-type=\"string\" data-local-use='ParseConfig/1012'>matched</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;/blob/master/&quot;</span>)\n  } else {\n    <span class=\"constructor\" data-type=\"option(string)\">None</span>\n  }\n}", "values": [], "chars": 645, "lines": 15, "type": "string => option(string)"},
"CmtFindDocItems/1012": {"name": "iter", "moduleName": "CmtFindDocItems", "html": "let rec <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1012' data-type=\"(\n  (string, option(Omd.t), State.Model.Docs.docItem) => 'a,\n  State.Model.Docs.doc\n) => unit\">iter</span> = (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1013' data-type=\"(string, option(Omd.t), State.Model.Docs.docItem) => 'a\">fn</span>, (<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1014' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1015' data-type=\"option(Omd.t)\">docString</span>, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1016' data-type=\"State.Model.Docs.docItem\">item</span>) as doc) =&gt; {\n  <span class=\"ident\" data-type=\"(string, option(Omd.t), State.Model.Docs.docItem) => 'a\" data-local-use='CmtFindDocItems/1013'>fn</span>(<span class=\"ident\" data-type=\"(string, option(Omd.t), State.Model.Docs.docItem)\" data-local-use='CmtFindDocItems/1017'>doc</span>);\n  switch <span class=\"ident\" data-type=\"State.Model.Docs.docItem\" data-local-use='CmtFindDocItems/1016'>item</span> {\n  | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Include</span>(_, <span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1018' data-type=\"list(State.Model.Docs.doc)\">children</span>) | <span class=\"pattern-constructor\" data-type=\"State.Model.Docs.docItem\">Module</span>(<span class=\"pattern-constructor\" data-type=\"State.Model.Docs.moduleContents\">Items</span>(<span class=\"pattern-ident\" data-local-define='CmtFindDocItems/1018' data-type=\"list(State.Model.Docs.doc)\">children</span>)) =&gt; <span class=\"ident\" data-type=\"(\n  State.Model.Docs.doc => unit,\n  list(State.Model.Docs.doc)\n) => unit\" data-stamp-missing>List.iter</span>(<span class=\"ident\" data-type=\"(\n  (string, option(Omd.t), State.Model.Docs.docItem) => 'a,\n  State.Model.Docs.doc\n) => unit\" data-global-use='CmtFindDocItems/1012'>iter</span>(<span class=\"ident\" data-type=\"(string, option(Omd.t), State.Model.Docs.docItem) => 'a\" data-local-use='CmtFindDocItems/1013'>fn</span>), <span class=\"ident\" data-type=\"list(State.Model.Docs.doc)\" data-local-use='CmtFindDocItems/1018'>children</span>)\n  | _ =&gt; <span class=\"constructor\" data-type=\"unit\">()</span>\n  }\n}", "values": [], "chars": 185, "lines": 6, "type": "(\n  (string, option(Omd.t), State.Model.Docs.docItem) => 'a,\n  State.Model.Docs.doc\n) => unit"},
"PrepareUtils/1057": {"name": "hasNoDoc", "moduleName": "PrepareUtils", "html": "let rec <span class=\"pattern-ident\" data-local-define='PrepareUtils/1057' data-type=\"list((Asttypes.loc(string), 'a)) => bool\">hasNoDoc</span> = <span class=\"pattern-ident\" data-local-define='PrepareUtils/1058' data-type=\"list((Asttypes.loc(string), 'a))\">attributes</span> =&gt; {\n  switch <span class=\"ident\" data-type=\"list((Asttypes.loc(string), 'a))\" data-local-use='PrepareUtils/1058'>attributes</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list((Asttypes.loc(string), 'a))\">[]</span> =&gt; <span class=\"constructor\" data-type=\"bool\">false</span>\n  | [<span data-type=\"list((Asttypes.loc(string), 'a))\">({Asttypes.txt: <span class=\"string\" data-type=\"string\">&quot;nodoc&quot;</span>}, _), ...<span class=\"pattern-ident\" data-local-define='PrepareUtils/1059' data-type=\"list((Asttypes.loc(string), 'a))\">rest</span></span>] =&gt; <span class=\"constructor\" data-type=\"bool\">true</span>\n  | [<span data-type=\"list((Asttypes.loc(string), 'a))\">_, ...<span class=\"pattern-ident\" data-local-define='PrepareUtils/1060' data-type=\"list((Asttypes.loc(string), 'a))\">rest</span></span>] =&gt; <span class=\"ident\" data-type=\"list((Asttypes.loc(string), 'a)) => bool\" data-global-use='PrepareUtils/1057'>hasNoDoc</span>(<span class=\"ident\" data-type=\"list((Asttypes.loc(string), 'a))\" data-local-use='PrepareUtils/1060'>rest</span>)\n  }\n}", "values": [], "chars": 165, "lines": 6, "type": "list((Asttypes.loc(string), 'a)) => bool"},
"MainAux/1187": {"name": "stripNumber", "moduleName": "MainAux", "html": "let <span class=\"pattern-ident\" data-local-define='MainAux/1187' data-type=\"string => string\">stripNumber</span> = <span class=\"pattern-ident\" data-local-define='MainAux/1188' data-type=\"string\">name</span> =&gt; {\n  if (<span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1188'>name</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&lt;=</span> &#39;9&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1188'>name</span>.[<span class=\"int\" data-type=\"int\">0</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>&gt;=</span> &#39;0&#39; <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int) => char\" data-stamp-missing><span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1188'>name</span>.[<span class=\"int\" data-type=\"int\">1</span>]</span> <span class=\"operator\" data-type=\"(char, char) => bool\" data-stamp-missing>==</span> &#39;_&#39;) {\n    <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1188'>name</span>, <span class=\"int\" data-type=\"int\">2</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1188'>name</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">2</span>)\n  } else {\n    <span class=\"ident\" data-type=\"string\" data-local-use='MainAux/1188'>name</span>\n  }\n}", "values": [], "chars": 165, "lines": 6, "type": "string => string"},
"PrintType/1191": {"name": "print_decl", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1191' data-type=\"(\n  T.stringifier,\n  string,\n  string,\n  Types.type_declaration\n) => Pretty.doc\">print_decl</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1192' data-type=\"T.stringifier\">stringifier</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1193' data-type=\"string\">realName</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1194' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1195' data-type=\"Types.type_declaration\">decl</span>) =&gt; {\n  open Types;\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;type &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(~len=<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1193'>realName</span>), <span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1194'>name</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  switch <span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='PrintType/1195'>decl</span>.<span class=\"field\" data-type=\"list(Types.type_expr)\">type_params</span> {\n  | <span class=\"pattern-constructor\" data-type=\"list(Types.type_expr)\">[]</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n  | <span class=\"pattern-ident\" data-local-define='PrintType/1196' data-type=\"list(Types.type_expr)\">args</span> =&gt; <span class=\"ident\" data-type=\"(\n  list(Types.type_expr),\n  Types.type_expr => Pretty.doc\n) => Pretty.doc\" data-global-use='PrintType/1047'>tuple_list</span>(<span class=\"ident\" data-type=\"list(Types.type_expr)\" data-local-use='PrintType/1196'>args</span>, <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1192'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1192'>stringifier</span>))\n  } <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  switch <span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='PrintType/1195'>decl</span>.<span class=\"field\" data-type=\"Types.type_kind\">type_kind</span> {\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_kind\">Type_abstract</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_kind\">Type_open</span> =&gt; <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot; = ..&quot;</span>)\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_kind\">Type_record</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1197' data-type=\"list(Types.label_declaration)\">labels</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1198' data-type=\"Types.record_representation\">representation</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot; = {&quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc => Pretty.doc\" data-global-use='PrintType/1045'>indentGroup</span>(<span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1028'>break</span> <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n    <span class=\"ident\" data-type=\"(\n  Types.label_declaration => Pretty.doc,\n  list(Types.label_declaration)\n) => Pretty.doc\" data-global-use='PrintType/1042'>commad_list</span>(<span class=\"ident\" data-type=\"(T.stringifier, Types.label_declaration) => Pretty.doc\" data-global-use='PrintType/1181'>print_attr</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1192'>stringifier</span>), <span class=\"ident\" data-type=\"list(Types.label_declaration)\" data-local-use='PrintType/1197'>labels</span>)\n     <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1030'>dedent</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;}&quot;</span>)\n  }\n  | <span class=\"pattern-constructor\" data-type=\"Types.type_kind\">Type_variant</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1199' data-type=\"list(Types.constructor_declaration)\">constructors</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot; = &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc => Pretty.doc\" data-global-use='PrintType/1045'>indentGroup</span>(<span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1028'>break</span> <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;| &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n      <span class=\"ident\" data-type=\"(\n  Pretty.doc,\n  list(Types.constructor_declaration),\n  Types.constructor_declaration => Pretty.doc\n) => Pretty.doc\" data-global-use='PrintType/1033'>sepd_list</span>(<span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1029'>space</span> <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot;| &quot;</span>), <span class=\"ident\" data-type=\"list(Types.constructor_declaration)\" data-local-use='PrintType/1199'>constructors</span>, <span class=\"ident\" data-type=\"(\n  Types.type_expr => Pretty.doc,\n  Types.constructor_declaration\n) => Pretty.doc\" data-global-use='PrintType/1174'>print_constructor</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1192'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1192'>stringifier</span>)))\n    ) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span> <span class=\"ident\" data-type=\"Pretty.doc\" data-global-use='PrintType/1028'>break</span>\n  }\n  } <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n  switch <span class=\"ident\" data-type=\"Types.type_declaration\" data-local-use='PrintType/1195'>decl</span>.<span class=\"field\" data-type=\"option(Types.type_expr)\">type_manifest</span> {\n  | <span class=\"pattern-constructor\" data-type=\"option(Types.type_expr)\">None</span> =&gt; <span class=\"ident\" data-type=\"Pretty.doc\" data-stamp-missing>Pretty.empty</span>\n  | <span class=\"pattern-constructor\" data-type=\"option(Types.type_expr)\">Some</span>(<span class=\"pattern-ident\" data-local-define='PrintType/1200' data-type=\"Types.type_expr\">manifest</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(~?len: option(int), string) => Pretty.doc\" data-global-use='PrintType/1031'>str</span>(<span class=\"string\" data-type=\"string\">&quot; = &quot;</span>) <span class=\"operator\" data-type=\"(Pretty.doc, Pretty.doc) => Pretty.doc\" data-global-use='PrintType/1032'>@!</span>\n    <span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1192'>stringifier</span>.<span class=\"field\" data-type=\"(T.stringifier, Types.type_expr) => Pretty.doc\">expr</span>(<span class=\"ident\" data-type=\"T.stringifier\" data-local-use='PrintType/1192'>stringifier</span>, <span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='PrintType/1200'>manifest</span>)\n  }\n  };\n}", "values": [{"id": "PrintType/1047", "name": "tuple_list", "moduleName": "PrintType"}, {"id": "PrintType/1042", "name": "commad_list", "moduleName": "PrintType"}, {"id": "PrintType/1181", "name": "print_attr", "moduleName": "PrintType"}, {"id": "PrintType/1030", "name": "dedent", "moduleName": "PrintType"}, {"id": "PrintType/1045", "name": "indentGroup", "moduleName": "PrintType"}, {"id": "PrintType/1033", "name": "sepd_list", "moduleName": "PrintType"}, {"id": "PrintType/1029", "name": "space", "moduleName": "PrintType"}, {"id": "PrintType/1174", "name": "print_constructor", "moduleName": "PrintType"}, {"id": "PrintType/1028", "name": "break", "moduleName": "PrintType"}, {"id": "PrintType/1032", "name": "@!", "moduleName": "PrintType"}, {"id": "PrintType/1031", "name": "str", "moduleName": "PrintType"}], "chars": 874, "lines": 29, "type": "(\n  T.stringifier,\n  string,\n  string,\n  Types.type_declaration\n) => Pretty.doc"},
"Markdown/1028": {"name": "startsWith", "moduleName": "Markdown", "html": "let <span class=\"pattern-ident\" data-local-define='Markdown/1028' data-type=\"(string, string) => bool\">startsWith</span> = (<span class=\"pattern-ident\" data-local-define='Markdown/1029' data-type=\"string\">prefix</span>, <span class=\"pattern-ident\" data-local-define='Markdown/1030' data-type=\"string\">string</span>) =&gt; {\n  let <span class=\"pattern-ident\" data-local-define='Markdown/1031' data-type=\"int\">lp</span> = <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1029'>prefix</span>);\n  <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1031'>lp</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&lt;=</span> <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1030'>string</span>) <span class=\"operator\" data-type=\"(bool, bool) => bool\" data-stamp-missing>&amp;&amp;</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1030'>string</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Markdown/1031'>lp</span>) <span class=\"operator\" data-type=\"(string, string) => bool\" data-stamp-missing>==</span> <span class=\"ident\" data-type=\"string\" data-local-use='Markdown/1029'>prefix</span>\n}", "values": [], "chars": 143, "lines": 3, "type": "(string, string) => bool"},
"PrintType/1050": {"name": "replace", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1050' data-type=\"(string, string, string) => string\">replace</span> = (<span class=\"pattern-ident\" data-local-define='PrintType/1051' data-type=\"string\">one</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1052' data-type=\"string\">two</span>, <span class=\"pattern-ident\" data-local-define='PrintType/1053' data-type=\"string\">text</span>) =&gt; <span class=\"ident\" data-type=\"(Str.regexp, string, string) => string\" data-stamp-missing>Str.global_replace</span>(<span class=\"ident\" data-type=\"string => Str.regexp\" data-stamp-missing>Str.regexp_string</span>(<span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1051'>one</span>), <span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1052'>two</span>, <span class=\"ident\" data-type=\"string\" data-local-use='PrintType/1053'>text</span>)", "values": [], "chars": 87, "lines": 0, "type": "(string, string, string) => string"},
"PrintType/1028": {"name": "break", "moduleName": "PrintType", "html": "let <span class=\"pattern-ident\" data-local-define='PrintType/1028' data-type=\"Pretty.doc\">break</span> = <span class=\"ident\" data-type=\"string => Pretty.doc\" data-stamp-missing>Pretty.line</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>)", "values": [], "chars": 27, "lines": 0, "type": "Pretty.doc"},
"Highlighting/1301": {"name": "highlight", "moduleName": "Highlighting", "html": "let <span class=\"pattern-ident\" data-local-define='Highlighting/1301' data-type=\"(\n  string,\n  Parsetree.structure,\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, (('a, Location.t), list(('a, Location.t)))),\n  'a,\n  list(Typing.openn),\n  Hashtbl.t((int, int), (Path.t, Typing.tag))\n) => (string, string)\">highlight</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1302' data-type=\"string\">text</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1303' data-type=\"Parsetree.structure\">ast</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1304' data-type=\"Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\">types</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1305' data-type=\"Hashtbl.t('a, (('a, Location.t), list(('a, Location.t))))\">bindings</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1306' data-type=\"'a\">externals</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1307' data-type=\"list(Typing.openn)\">all_opens</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1308' data-type=\"Hashtbl.t((int, int), (Path.t, Typing.tag))\">locToPath</span>) =&gt; {\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1309' data-type=\"Hashtbl.t((int, int), 'a)\">bindingMap</span> = <span class=\"ident\" data-type=\"Hashtbl.t(\n  'a,\n  (('a, Location.t), list(('a, Location.t)))\n) => Hashtbl.t((int, int), 'a)\" data-global-use='Highlighting/1254'>buildLocBindingMap</span>(<span class=\"ident\" data-type=\"Hashtbl.t('a, (('a, Location.t), list(('a, Location.t))))\" data-local-use='Highlighting/1305'>bindings</span>);\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1310' data-type=\"list((int, int, string, [&gt; `Normal | `Full of string ]))\">ranges</span> = <span class=\"ident\" data-type=\"(\n  Parsetree.structure,\n  Hashtbl.t((int, int), 'a),\n  Hashtbl.t((int, int), (Path.t, Typing.tag))\n) => list(\n  (int, int, string, [&gt; `Normal | `Full of string ])\n)\" data-global-use='Highlighting/1137'>collect</span>(<span class=\"ident\" data-type=\"Parsetree.structure\" data-local-use='Highlighting/1303'>ast</span>, <span class=\"ident\" data-type=\"Hashtbl.t((int, int), 'a)\" data-local-use='Highlighting/1309'>bindingMap</span>, <span class=\"ident\" data-type=\"Hashtbl.t((int, int), (Path.t, Typing.tag))\" data-local-use='Highlighting/1308'>locToPath</span>);\n\n  /** Yolo this might be overkill? */\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1311' data-type=\"array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\">tag_starts</span> = <span class=\"ident\" data-type=\"(\n  int,\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n) => array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\" data-stamp-missing>Array.make</span>(<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1302'>text</span>), <span class=\"constructor\" data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\">[]</span>);\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1312' data-type=\"array(int)\">tag_closes</span> = <span class=\"ident\" data-type=\"(int, int) => array(int)\" data-stamp-missing>Array.make</span>(<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1302'>text</span>), <span class=\"int\" data-type=\"int\">0</span>);\n  <span class=\"ident\" data-type=\"list(\n  (\n    int,\n    int,\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\" data-local-use='Highlighting/1310'>ranges</span> <span class=\"operator\" data-type=\"(\n  list(\n    (\n      int,\n      int,\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  ),\n  list(\n    (\n      int,\n      int,\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  ) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (\n    int,\n    int,\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  ) => unit,\n  list(\n    (\n      int,\n      int,\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n) => unit\" data-stamp-missing>List.iter</span>(((<span class=\"pattern-ident\" data-local-define='Highlighting/1313' data-type=\"int\">cstart</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1314' data-type=\"int\">cend</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1315' data-type=\"string\">className</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1316' data-type=\"[&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\">id</span>)) =&gt; {\n    <span class=\"ident\" data-type=\"(\n  array(\n    list(\n      (\n        string,\n        [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n      )\n    )\n  ),\n  int,\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\" data-local-use='Highlighting/1311'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1313'>cstart</span>] = [<span data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\">(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1315'>className</span>, <span class=\"ident\" data-type=\"[&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\" data-local-use='Highlighting/1316'>id</span>), ...<span class=\"ident\" data-type=\"(\n  array(\n    list(\n      (\n        string,\n        [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n      )\n    )\n  ),\n  int\n) => list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\" data-stamp-missing><span class=\"ident\" data-type=\"array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\" data-local-use='Highlighting/1311'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1313'>cstart</span>]</span></span>]</span>;\n    <span class=\"ident\" data-type=\"(array(int), int, int) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='Highlighting/1312'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1314'>cend</span>] = <span class=\"ident\" data-type=\"(array(int), int) => int\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='Highlighting/1312'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1314'>cend</span>]</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span></span>;\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1317' data-type=\"Pervasives.ref(int)\">typeId</span> = <span class=\"ident\" data-type=\"int => Pervasives.ref(int)\" data-stamp-missing>ref</span>(<span class=\"int\" data-type=\"int\">0</span>);\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1318' data-type=\"Pervasives.ref(list(Types.type_expr))\">typeList</span> = <span class=\"ident\" data-type=\"list(Types.type_expr) => Pervasives.ref(\n  list(Types.type_expr)\n)\" data-stamp-missing>ref</span>(<span class=\"constructor\" data-type=\"list(Types.type_expr)\">[]</span>);\n  <span class=\"ident\" data-type=\"Hashtbl.t(\n  (Lexing.position, Lexing.position),\n  Types.type_expr\n)\" data-local-use='Highlighting/1304'>types</span> <span class=\"operator\" data-type=\"(\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ) => unit\n) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(\n  (\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ) => unit,\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  )\n) => unit\" data-stamp-missing>Hashtbl.iter</span>((({Lexing.pos_cnum: <span class=\"pattern-ident\" data-local-define='Highlighting/1319' data-type=\"int\">cstart</span>}, {Lexing.pos_cnum: <span class=\"pattern-ident\" data-local-define='Highlighting/1320' data-type=\"int\">cend</span>}), <span class=\"pattern-ident\" data-local-define='Highlighting/1321' data-type=\"Types.type_expr\">typExpr</span>) =&gt; {\n    <span class=\"ident\" data-type=\"(\n  array(\n    list(\n      (\n        string,\n        [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n      )\n    )\n  ),\n  int,\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\" data-local-use='Highlighting/1311'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1319'>cstart</span>] = [<span data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\">(<span class=\"string\" data-type=\"string\">&quot;type&quot;</span>, `Type(<span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='Highlighting/1317'>typeId</span><span class=\"operator\" data-type=\"Pervasives.ref(int) => int\" data-stamp-missing>^</span>)), ...<span class=\"ident\" data-type=\"(\n  array(\n    list(\n      (\n        string,\n        [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n      )\n    )\n  ),\n  int\n) => list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\" data-stamp-missing><span class=\"ident\" data-type=\"array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\" data-local-use='Highlighting/1311'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1319'>cstart</span>]</span></span>]</span>;\n    <span class=\"ident\" data-type=\"(array(int), int, int) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='Highlighting/1312'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1320'>cend</span>] = <span class=\"ident\" data-type=\"(array(int), int) => int\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='Highlighting/1312'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1320'>cend</span>]</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span></span>;\n    <span class=\"ident\" data-type=\"Pervasives.ref(list(Types.type_expr))\" data-local-use='Highlighting/1318'>typeList</span> <span class=\"operator\" data-type=\"(\n  Pervasives.ref(list(Types.type_expr)),\n  list(Types.type_expr)\n) => unit\" data-stamp-missing>:=</span> [<span data-type=\"list(Types.type_expr)\"><span class=\"ident\" data-type=\"Types.type_expr\" data-local-use='Highlighting/1321'>typExpr</span>, ...<span class=\"ident\" data-type=\"Pervasives.ref(list(Types.type_expr))\" data-local-use='Highlighting/1318'>typeList</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Types.type_expr)) => list(\n  Types.type_expr\n)\" data-stamp-missing>^</span></span>];\n    <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='Highlighting/1317'>typeId</span> <span class=\"operator\" data-type=\"(Pervasives.ref(int), int) => unit\" data-stamp-missing>:=</span> <span class=\"ident\" data-type=\"Pervasives.ref(int)\" data-local-use='Highlighting/1317'>typeId</span><span class=\"operator\" data-type=\"Pervasives.ref(int) => int\" data-stamp-missing>^</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>;\n  });\n\n  /* let rec addLidents = Longident.((p1, p2) =&gt; switch (p1, p2) {\n  | (a, Lident(c)) =&gt; Ldot(a, c)\n  | (a, Ldot(b, c)) =&gt; Ldot(addLidents(a, b), c)\n  | _ =&gt; assert(false)\n  }); */\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1322' data-type=\"array(list(string))\">extra_inserts</span> = <span class=\"ident\" data-type=\"(int, list(string)) => array(list(string))\" data-stamp-missing>Array.make</span>(<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1302'>text</span>), <span class=\"constructor\" data-type=\"list(string)\">[]</span>);\n  /* let globalTag = (path, (innerPath, tag)) =&gt; {\n    let show = Typing.toString(lident =&gt; String.concat(&quot;.&quot;, Longident.flatten(lident)), (innerPath, tag));\n    let id = (Typing.addLidentToPath(path, innerPath), tag) |&gt; Typing.toString(pathName);\n    Printf.sprintf({|&lt;span class=&quot;declaration-var&quot; data-id=&quot;%s&quot;&gt;%s&lt;/span&gt;|}, id, show)\n  }; */\n  <span class=\"ident\" data-type=\"list(Typing.openn)\" data-local-use='Highlighting/1307'>all_opens</span> <span class=\"operator\" data-type=\"(list(Typing.openn), list(Typing.openn) => unit) => unit\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Typing.openn => unit, list(Typing.openn)) => unit\" data-stamp-missing>List.iter</span>(({<span class=\"pattern-ident\" data-local-define='Highlighting/1324' data-type=\"Path.t\">Typing.path</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1325' data-type=\"Location.t\">loc</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1323' data-type=\"list(Typing.ident(Longident.t))\">used</span>}) =&gt; {\n    if (<span class=\"ident\" data-type=\"bool => bool\" data-stamp-missing>!</span><span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1325'>loc</span>.<span class=\"field\" data-type=\"bool\">Location.loc_ghost</span>) {\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1326' data-type=\"int\">i</span> = <span class=\"ident\" data-type=\"Location.t\" data-local-use='Highlighting/1325'>loc</span>.<span class=\"field\" data-type=\"Lexing.position\">Location.loc_end</span>.<span class=\"field\" data-type=\"int\">pos_cnum</span>;\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1327' data-type=\"bool\">isPervasives</span> = switch <span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1324'>path</span> {\n        | <span class=\"pattern-constructor\" data-type=\"Path.t\">Path.Pident</span>({name: <span class=\"string\" data-type=\"string\">&quot;Pervasives&quot;</span>}) =&gt;<span class=\"constructor\" data-type=\"bool\">true</span>\n        | _ =&gt; <span class=\"constructor\" data-type=\"bool\">false</span>\n      };\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1328' data-type=\"list(Typing.ident(Longident.t))\">used</span> = <span class=\"ident\" data-type=\"(\n  (\n    Typing.ident(Longident.t),\n    Typing.ident(Longident.t)\n  ) => int,\n  list(Typing.ident(Longident.t))\n) => list(Typing.ident(Longident.t))\" data-stamp-missing>List.sort_uniq</span>(<span class=\"ident\" data-type=\"(\n  Typing.ident(Longident.t),\n  Typing.ident(Longident.t)\n) => int\" data-stamp-missing>compare</span>, <span class=\"ident\" data-type=\"list(Typing.ident(Longident.t))\" data-local-use='Highlighting/1323'>used</span>);\n      <span class=\"ident\" data-type=\"(array(list(string)), int, list(string)) => unit\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='Highlighting/1322'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1326'>i</span>] = [\n        <span data-type=\"list(string)\"><span class=\"ident\" data-type=\"(\n  Pervasives.format(\n    (string, string) => string,\n    unit,\n    string\n  ),\n  string,\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(\n          <span class=\"constructor\" data-type=\"Pervasives.format((string, string) => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  (string, string) => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  (string, string) => string,\n  (string, string) => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"string\" data-type=\"string\">{|%s &lt;span class=&quot;open-exposing&quot;&gt;exposing (%s)&lt;/span&gt;|}</span></span></span></span></span></span></span></span></span>,\n          (<span class=\"ident\" data-type=\"bool\" data-local-use='Highlighting/1327'>isPervasives</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;open Pervasives&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>),\n          <span class=\"ident\" data-type=\"(Path.t, list(Typing.ident(Longident.t))) => string\" data-global-use='Highlighting/1277'>showUses</span>(<span class=\"ident\" data-type=\"Path.t\" data-local-use='Highlighting/1324'>path</span>, <span class=\"ident\" data-type=\"list(Typing.ident(Longident.t))\" data-local-use='Highlighting/1328'>used</span>)\n          /* used |&gt; List.map(globalTag(path)) |&gt; String.concat(&quot;, &quot;) */\n        ) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (<span class=\"ident\" data-type=\"bool\" data-local-use='Highlighting/1327'>isPervasives</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;\\n&quot;</span> <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>),\n        ...<span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='Highlighting/1322'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1326'>i</span>]</span></span>\n      ]</span>;\n    } else {\n      <span class=\"ident\" data-type=\"string => unit\" data-stamp-missing>print_endline</span>(<span class=\"string\" data-type=\"string\">&quot;Skipping a ghost open :/&quot;</span>)\n    }\n  });\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1329' data-type=\"(\n  string,\n  [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n) => string\">openTag</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1330' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1331' data-type=\"[&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\">id</span>) =&gt; {\n    <span class=\"string\" data-type=\"string\">&quot;&lt;span class=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1330'>name</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (\n      switch <span class=\"ident\" data-type=\"[&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\" data-local-use='Highlighting/1331'>id</span> {\n      | `Normal =&gt; <span class=\"string\" data-type=\"string\">&quot;&quot;</span>\n      | `Type(<span class=\"pattern-ident\" data-local-define='Highlighting/1332' data-type=\"int\">id</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot; data-type=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-stamp-missing>string_of_int</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1332'>id</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>\n      | `Opened(<span class=\"pattern-ident\" data-local-define='Highlighting/1333' data-type=\"string\">id</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot; data-opened data-id=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1333'>id</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>\n      | `Full(<span class=\"pattern-ident\" data-local-define='Highlighting/1334' data-type=\"string\">id</span>) =&gt; <span class=\"string\" data-type=\"string\">&quot; data-id=\\&quot;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1334'>id</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;\\&quot;&quot;</span>\n      }\n    ) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;&gt;&quot;</span>\n/*\n     /* for viewing witch identifiers have numbers */\n      ++ (switch id {\n    | `Normal =&gt; &quot;&quot;\n    | `Opened(id) | `Full(id) =&gt; &quot;&lt;span class=\\&quot;id-badge\\&quot;&gt;&quot; ++ id ++ &quot;&lt;/span&gt;&quot;\n    }) */\n  };\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1335' data-type=\"Pervasives.ref(string)\">t</span> = <span class=\"ident\" data-type=\"string => Pervasives.ref(string)\" data-stamp-missing>ref</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1302'>text</span>);\n  let rec <span class=\"pattern-ident\" data-local-define='Highlighting/1336' data-type=\"(int, int) => unit\">loop</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1337' data-type=\"int\">i</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1338' data-type=\"int\">offset</span>) =&gt; {\n    if (<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;=</span> <span class=\"ident\" data-type=\"array(int) => int\" data-stamp-missing>Array.length</span>(<span class=\"ident\" data-type=\"array(int)\" data-local-use='Highlighting/1312'>tag_closes</span>)) {\n      <span class=\"constructor\" data-type=\"unit\">()</span>\n    } else {\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1339' data-type=\"string\">additional</span> = if (<span class=\"ident\" data-type=\"(array(int), int) => int\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='Highlighting/1312'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span>]</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>==</span> <span class=\"int\" data-type=\"int\">0</span>) {\n        &quot;&quot;\n      } else {\n        let rec <span class=\"pattern-ident\" data-local-define='Highlighting/1340' data-type=\"int => string\">loop</span> = <span class=\"pattern-ident\" data-local-define='Highlighting/1341' data-type=\"int\">i</span> =&gt; <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1341'>i</span> <span class=\"operator\" data-type=\"(int, int) => bool\" data-stamp-missing>&gt;</span> <span class=\"int\" data-type=\"int\">0</span> <span class=\"pattern-constructor\" data-type=\"bool\">?</span> <span class=\"string\" data-type=\"string\">&quot;&lt;/span&gt;&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"int => string\" data-local-use='Highlighting/1340'>loop</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1341'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"int\" data-type=\"int\">1</span>) <span class=\"pattern-constructor\" data-type=\"bool\">:</span> <span class=\"string\" data-type=\"string\">&quot;&quot;</span>;\n        <span class=\"ident\" data-type=\"int => string\" data-local-use='Highlighting/1340'>loop</span>(<span class=\"ident\" data-type=\"(array(int), int) => int\" data-stamp-missing><span class=\"ident\" data-type=\"array(int)\" data-local-use='Highlighting/1312'>tag_closes</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span>]</span>)\n      };\n\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1342' data-type=\"string\">additional</span> = <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1339'>additional</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (if (<span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='Highlighting/1322'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span>]</span> <span class=\"operator\" data-type=\"(list(string), list(string)) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(string)\">[]</span>) {\n        &quot;&quot;\n      } else {\n        <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;&quot;</span>, <span class=\"ident\" data-type=\"(array(list(string)), int) => list(string)\" data-stamp-missing><span class=\"ident\" data-type=\"array(list(string))\" data-local-use='Highlighting/1322'>extra_inserts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span>]</span>)\n      });\n\n      let <span class=\"pattern-ident\" data-local-define='Highlighting/1343' data-type=\"string\">additional</span> = <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1342'>additional</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> (if (<span class=\"ident\" data-type=\"(\n  array(\n    list(\n      (\n        string,\n        [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n      )\n    )\n  ),\n  int\n) => list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\" data-stamp-missing><span class=\"ident\" data-type=\"array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\" data-local-use='Highlighting/1311'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span>]</span> <span class=\"operator\" data-type=\"(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  ),\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n) => bool\" data-stamp-missing>==</span> <span class=\"constructor\" data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\">[]</span>) {\n        &quot;&quot;\n      } else {\n        let rec <span class=\"pattern-ident\" data-local-define='Highlighting/1344' data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n) => string\">loop</span> = <span class=\"pattern-ident\" data-local-define='Highlighting/1345' data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n)\">inserts</span> =&gt; switch <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n)\" data-local-use='Highlighting/1345'>inserts</span> {\n        | <span class=\"pattern-constructor\" data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n)\">[]</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;&quot;</span>\n        | [<span data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n)\">(<span class=\"pattern-ident\" data-local-define='Highlighting/1346' data-type=\"string\">name</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1347' data-type=\"[&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\">id</span>), ...<span class=\"pattern-ident\" data-local-define='Highlighting/1348' data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n)\">rest</span></span>] =&gt; <span class=\"ident\" data-type=\"(\n  string,\n  [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n) => string\" data-local-use='Highlighting/1329'>openTag</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1346'>name</span>, <span class=\"ident\" data-type=\"[&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\" data-local-use='Highlighting/1347'>id</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n) => string\" data-local-use='Highlighting/1344'>loop</span>(<span class=\"ident\" data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string ]\n  )\n)\" data-local-use='Highlighting/1348'>rest</span>)\n        };\n        <span class=\"ident\" data-type=\"list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n) => string\" data-local-use='Highlighting/1344'>loop</span>(<span class=\"ident\" data-type=\"(\n  array(\n    list(\n      (\n        string,\n        [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n      )\n    )\n  ),\n  int\n) => list(\n  (\n    string,\n    [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n  )\n)\" data-stamp-missing><span class=\"ident\" data-type=\"array(\n  list(\n    (\n      string,\n      [&lt; `Normal | `Type of int | `Opened of string | `Full of string\n &gt; `Normal `Type `Full ]\n    )\n  )\n)\" data-local-use='Highlighting/1311'>tag_starts</span>[<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span>]</span>)\n      });\n\n      <span class=\"ident\" data-type=\"Pervasives.ref(string)\" data-local-use='Highlighting/1335'>t</span> <span class=\"operator\" data-type=\"(Pervasives.ref(string), string) => unit\" data-stamp-missing>:=</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"Pervasives.ref(string)\" data-local-use='Highlighting/1335'>t</span><span class=\"operator\" data-type=\"Pervasives.ref(string) => string\" data-stamp-missing>^</span>, <span class=\"int\" data-type=\"int\">0</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1338'>offset</span>) <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1343'>additional</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"(string, int, int) => string\" data-stamp-missing>String.sub</span>(<span class=\"ident\" data-type=\"Pervasives.ref(string)\" data-local-use='Highlighting/1335'>t</span><span class=\"operator\" data-type=\"Pervasives.ref(string) => string\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1338'>offset</span>, <span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"Pervasives.ref(string)\" data-local-use='Highlighting/1335'>t</span><span class=\"operator\" data-type=\"Pervasives.ref(string) => string\" data-stamp-missing>^</span>) <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>-</span> <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1338'>offset</span>);\n      <span class=\"ident\" data-type=\"(int, int) => unit\" data-local-use='Highlighting/1336'>loop</span>(<span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1337'>i</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> <span class=\"int\" data-type=\"int\">1</span>, <span class=\"ident\" data-type=\"int\" data-local-use='Highlighting/1338'>offset</span> <span class=\"operator\" data-type=\"(int, int) => int\" data-stamp-missing>+</span> (<span class=\"ident\" data-type=\"string => int\" data-stamp-missing>String.length</span>(<span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1343'>additional</span>)))\n    }\n  };\n  <span class=\"ident\" data-type=\"(int, int) => unit\" data-local-use='Highlighting/1336'>loop</span>(<span class=\"int\" data-type=\"int\">0</span>, <span class=\"int\" data-type=\"int\">0</span>);\n\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1349' data-type=\"((Format.formatter, 'a) => 'a, 'a) => string\">to_string</span> = (<span class=\"pattern-ident\" data-local-define='Highlighting/1350' data-type=\"(Format.formatter, 'a) => 'a\">f</span>, <span class=\"pattern-ident\" data-local-define='Highlighting/1351' data-type=\"'a\">v</span>) =&gt; {<span class=\"ident\" data-type=\"(Format.formatter, 'a) => 'a\" data-local-use='Highlighting/1350'>f</span>(<span class=\"ident\" data-type=\"Format.formatter\" data-stamp-missing>Format.str_formatter</span>, <span class=\"ident\" data-type=\"'a\" data-local-use='Highlighting/1351'>v</span>); <span class=\"ident\" data-type=\"unit => string\" data-stamp-missing>Format.flush_str_formatter</span><span class=\"constructor\" data-type=\"unit\">()</span>};\n  let <span class=\"pattern-ident\" data-local-define='Highlighting/1352' data-type=\"string\">typeText</span> = <span class=\"ident\" data-type=\"list(Types.type_expr) => list(Types.type_expr)\" data-stamp-missing>List.rev</span>(<span class=\"ident\" data-type=\"Pervasives.ref(list(Types.type_expr))\" data-local-use='Highlighting/1318'>typeList</span><span class=\"operator\" data-type=\"Pervasives.ref(list(Types.type_expr)) => list(\n  Types.type_expr\n)\" data-stamp-missing>^</span>) <span class=\"operator\" data-type=\"(\n  list(Types.type_expr),\n  list(Types.type_expr) => list(string)\n) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(Types.type_expr => string, list(Types.type_expr)) => list(\n  string\n)\" data-stamp-missing>List.map</span>(<span class=\"ident\" data-type=\"(\n  (Format.formatter, Types.type_expr) => unit,\n  Types.type_expr\n) => string\" data-local-use='Highlighting/1349'>to_string</span>(<span class=\"ident\" data-type=\"(Format.formatter, Types.type_expr) => unit\" data-stamp-missing>Printtyp.type_expr</span>)) <span class=\"operator\" data-type=\"(list(string), list(string) => list(string)) => list(string)\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string => string, list(string)) => list(string)\" data-stamp-missing>List.map</span>(<span class=\"pattern-ident\" data-local-define='Highlighting/1353' data-type=\"string\">s</span> =&gt; <span class=\"ident\" data-type=\"(\n  Pervasives.format(string => string, unit, string),\n  string\n) => string\" data-stamp-missing>Printf.sprintf</span>(<span class=\"constructor\" data-type=\"Pervasives.format(string => string, unit, string)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string => string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.padding(\n  string => string,\n  string => string\n)\"><span class=\"constructor\" data-type=\"CamlinternalFormatBasics.fmt(\n  string,\n  unit,\n  string,\n  string,\n  string,\n  string\n)\">{|%S|}</span></span></span></span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1353'>s</span>)) <span class=\"operator\" data-type=\"(list(string), list(string) => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"ident\" data-type=\"(string, list(string)) => string\" data-stamp-missing>String.concat</span>(<span class=\"string\" data-type=\"string\">&quot;,\\n  &quot;</span>)\n  <span class=\"operator\" data-type=\"(string, string => string) => string\" data-stamp-missing>|&gt;</span> <span class=\"pattern-ident\" data-local-define='Highlighting/1354' data-type=\"string\">full</span> =&gt; <span class=\"string\" data-type=\"string\">&quot;window.TYPES_LIST = [&quot;</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1354'>full</span> <span class=\"operator\" data-type=\"(string, string) => string\" data-stamp-missing>++</span> <span class=\"string\" data-type=\"string\">&quot;]&quot;</span>;\n\n  (<span class=\"ident\" data-type=\"Pervasives.ref(string)\" data-local-use='Highlighting/1335'>t</span><span class=\"operator\" data-type=\"Pervasives.ref(string) => string\" data-stamp-missing>^</span>, <span class=\"ident\" data-type=\"string\" data-local-use='Highlighting/1352'>typeText</span>)\n\n  /* let rec loop = (text, ranges, offset) =&gt; {\n    switch ranges {\n    | [] =&gt; text\n    | [(loc, className), ...rest] =&gt; {\n\n    }\n    }\n  };\n  loop(text, ranges, 0) */\n}", "values": [{"id": "Highlighting/1254", "name": "buildLocBindingMap", "moduleName": "Highlighting"}, {"id": "Highlighting/1137", "name": "collect", "moduleName": "Highlighting"}, {"id": "Highlighting/1277", "name": "showUses", "moduleName": "Highlighting"}], "chars": 4078, "lines": 122, "type": "(\n  string,\n  Parsetree.structure,\n  Hashtbl.t(\n    (Lexing.position, Lexing.position),\n    Types.type_expr\n  ),\n  Hashtbl.t('a, (('a, Location.t), list(('a, Location.t)))),\n  'a,\n  list(Typing.openn),\n  Hashtbl.t((int, int), (Path.t, Typing.tag))\n) => (string, string)"},
"Infix/1016": {"name": "|??", "moduleName": "Infix", "html": "let <span class=\"pattern-ident\" data-local-define='Infix/1016' data-type=\"(option('a), option('a)) => option('a)\">(|??)</span> = (<span class=\"pattern-ident\" data-local-define='Infix/1017' data-type=\"option('a)\">o</span>, <span class=\"pattern-ident\" data-local-define='Infix/1018' data-type=\"option('a)\">d</span>) =&gt; switch <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1017'>o</span> { | <span class=\"pattern-constructor\" data-type=\"option('a)\">None</span> =&gt; <span class=\"ident\" data-type=\"option('a)\" data-local-use='Infix/1018'>d</span> | <span class=\"pattern-constructor\" data-type=\"option('a)\">Some</span>(<span class=\"pattern-ident\" data-local-define='Infix/1019' data-type=\"'a\">v</span>) =&gt; <span class=\"constructor\" data-type=\"option('a)\">Some</span>(<span class=\"ident\" data-type=\"'a\" data-local-use='Infix/1019'>v</span>) }", "values": [], "chars": 67, "lines": 0, "type": "(option('a), option('a)) => option('a)"}};
window.MODULES = {"PrintType/1027": {"name": "T", "ids": ["PrintType/1021"]},
"State/1087": {"name": "Docs", "ids": ["State/1071", "State/1070", "State/1069", "State/1079"]},
"CmtFindStamps/1015": {"name": "T", "ids": ["CmtFindStamps/1008", "CmtFindStamps/1013", "CmtFindStamps/1014"]},
"State/1152": {"name": "Model", "ids": ["State/1020", "State/1030", "State/1038", "State/1043", "State/1048", "State/1056", "State/1060", "State/1067", "State/1068", "State/1088", "State/1093", "State/1096", "State/1102", "State/1111", "State/1150", "State/1028", "State/1055", "State/1087"]},
"State/1173": {"name": "Input", "ids": ["State/1153", "State/1155", "State/1158", "State/1165", "State/1169"]},
"PrepareUtils": {"name": "PrepareUtils", "ids": ["PrepareUtils/1008", "PrepareUtils/1012", "PrepareUtils/1016", "PrepareUtils/1022", "PrepareUtils/1027", "PrepareUtils/1034", "PrepareUtils/1038", "PrepareUtils/1051", "PrepareUtils/1057", "PrepareUtils/1061", "PrepareUtils/1068", "PrepareUtils/1073", "PrepareUtils/1077", "PrepareUtils/1081"]},
"State": {"name": "State", "ids": ["State/1008", "State/1017", "State/1152", "State/1173"]},
"Search": {"name": "Search", "ids": ["Search/1008", "Search/1012", "Search/1014", "Search/1020"]},
"MainAux": {"name": "MainAux", "ids": ["MainAux/1008", "MainAux/1012", "MainAux/1068", "MainAux/1070", "MainAux/1084", "MainAux/1089", "MainAux/1092", "MainAux/1096", "MainAux/1100", "MainAux/1179", "MainAux/1183", "MainAux/1187", "MainAux/1189", "MainAux/1191", "MainAux/1193", "MainAux/1195", "MainAux/1197", "MainAux/1199", "MainAux/1203", "MainAux/1222", "MainAux/1224", "MainAux/1229", "MainAux/1255", "MainAux/1256", "MainAux/1257"]},
"InputToModel": {"name": "InputToModel", "ids": ["InputToModel/1034", "InputToModel/1041", "InputToModel/1043", "InputToModel/1045", "InputToModel/1047", "InputToModel/1049", "InputToModel/1053", "InputToModel/1059", "InputToModel/1073", "InputToModel/1081"]},
"Template": {"name": "Template", "ids": ["Template/1008", "Template/1009", "Template/1010"]},
"SerializeBinary": {"name": "SerializeBinary", "ids": ["SerializeBinary/1008", "SerializeBinary/1010", "SerializeBinary/1012"]},
"ModelToOutput": {"name": "ModelToOutput", "ids": ["ModelToOutput/1008", "ModelToOutput/1015", "ModelToOutput/1032", "ModelToOutput/1062", "ModelToOutput/1087", "ModelToOutput/1135", "ModelToOutput/1166"]},
"Docs": {"name": "Docs", "ids": ["Docs/1008", "Docs/1009", "Docs/1019", "Docs/1033"]},
"Sidebar": {"name": "Sidebar", "ids": ["Sidebar/1008", "Sidebar/1014", "Sidebar/1018", "Sidebar/1022"]},
"Base": {"name": "Base", "ids": ["Base/1008"]},
"CodeHighlight": {"name": "CodeHighlight", "ids": ["CodeHighlight/1008", "CodeHighlight/1013", "CodeHighlight/1045", "CodeHighlight/1048", "CodeHighlight/1256", "CodeHighlight/1261", "CodeHighlight/1263", "CodeHighlight/1266", "CodeHighlight/1268", "CodeHighlight/1270", "CodeHighlight/1276", "CodeHighlight/1287"]},
"Highlighting": {"name": "Highlighting", "ids": ["Highlighting/1126", "Highlighting/1129", "Highlighting/1137", "Highlighting/1254", "Highlighting/1261", "Highlighting/1266", "Highlighting/1271", "Highlighting/1277", "Highlighting/1301"]},
"GenerateDoc": {"name": "GenerateDoc", "ids": ["GenerateDoc/1195", "GenerateDoc/1015", "GenerateDoc/1022", "GenerateDoc/1029", "GenerateDoc/1036", "GenerateDoc/1038", "GenerateDoc/1052", "GenerateDoc/1069", "GenerateDoc/1071", "GenerateDoc/1074", "GenerateDoc/1079", "GenerateDoc/1085", "GenerateDoc/1087", "GenerateDoc/1130", "GenerateDoc/1155", "GenerateDoc/1186", "GenerateDoc/1189", "GenerateDoc/1192", "GenerateDoc/1196", "GenerateDoc/1197"]},
"CmtFindDocItems": {"name": "CmtFindDocItems", "ids": ["CmtFindDocItems/1012", "CmtFindDocItems/1042", "CmtFindDocItems/1043", "CmtFindDocItems/1163", "CmtFindDocItems/1168", "CmtFindDocItems/1172", "CmtFindDocItems/1176", "CmtFindDocItems/1177", "CmtFindDocItems/1178", "CmtFindDocItems/1179", "CmtFindDocItems/1180"]},
"Markdown": {"name": "Markdown", "ids": ["Markdown/1008", "Markdown/1021", "Markdown/1024", "Markdown/1028", "Markdown/1032", "Markdown/1054"]},
"SearchScript": {"name": "SearchScript", "ids": ["SearchScript/1008", "SearchScript/1009"]},
"Main": {"name": "Main", "ids": []},
"CliToInput": {"name": "CliToInput", "ids": ["CliToInput/1008", "CliToInput/1010", "CliToInput/1016", "CliToInput/1019", "CliToInput/1026", "CliToInput/1029", "CliToInput/1044", "CliToInput/1056", "CliToInput/1058", "CliToInput/1070", "CliToInput/1072", "CliToInput/1074", "CliToInput/1076", "CliToInput/1119", "CliToInput/1129", "CliToInput/1137", "CliToInput/1138", "CliToInput/1140", "CliToInput/1146", "CliToInput/1148", "CliToInput/1150", "CliToInput/1155", "CliToInput/1314"]},
"Descartes": {"name": "Descartes", "ids": ["Descartes/1017", "Descartes/1269", "Descartes/1271", "Descartes/1270", "Descartes/1309", "Descartes/1008", "Descartes/1014", "Descartes/1024", "Descartes/1203", "Descartes/1276", "Descartes/1305", "Descartes/1319", "Descartes/1350", "Descartes/1355", "Descartes/1362", "Descartes/1365", "Descartes/1378", "Descartes/1391", "Descartes/1402", "Descartes/1413", "Descartes/1417", "Descartes/1487", "Descartes/1495"]},
"PrintType": {"name": "PrintType", "ids": ["PrintType/1016", "PrintType/1008", "PrintType/1028", "PrintType/1029", "PrintType/1030", "PrintType/1031", "PrintType/1032", "PrintType/1033", "PrintType/1042", "PrintType/1045", "PrintType/1047", "PrintType/1050", "PrintType/1054", "PrintType/1056", "PrintType/1174", "PrintType/1181", "PrintType/1186", "PrintType/1191", "PrintType/1201", "PrintType/1027"]},
"CompileCode": {"name": "CompileCode", "ids": ["CompileCode/1008", "CompileCode/1010"]},
"CmtFindStamps": {"name": "CmtFindStamps", "ids": ["CmtFindStamps/1016", "CmtFindStamps/1127", "CmtFindStamps/1146", "CmtFindStamps/1015"]},
"ParseConfig": {"name": "ParseConfig", "ids": ["ParseConfig/1008", "ParseConfig/1013"]},
"ReadMlast": {"name": "ReadMlast", "ids": ["ReadMlast/1008", "ReadMlast/1012", "ReadMlast/1016", "ReadMlast/1019", "ReadMlast/1024"]},
"ProcessCode": {"name": "ProcessCode", "ids": ["ProcessCode/1008", "ProcessCode/1012", "ProcessCode/1016", "ProcessCode/1024", "ProcessCode/1034", "ProcessCode/1043", "ProcessCode/1118"]},
"SyntaxHighlighting": {"name": "SyntaxHighlighting", "ids": ["SyntaxHighlighting/1008"]},
"Infix": {"name": "Infix", "ids": ["Infix/1008", "Infix/1012", "Infix/1016", "Infix/1020", "Infix/1024", "Infix/1028", "Infix/1032", "Infix/1036", "Infix/1041", "Infix/1045", "Infix/1049", "Infix/1052"]},
"DocsTemplate": {"name": "DocsTemplate", "ids": ["DocsTemplate/1008", "DocsTemplate/1009", "DocsTemplate/1010", "DocsTemplate/1011", "DocsTemplate/1012", "DocsTemplate/1013"]},
"Typing": {"name": "Typing", "ids": ["Typing/1008", "Typing/1014", "Typing/1038", "Typing/1042", "Typing/1361", "Typing/1362", "Typing/1015", "Typing/1019", "Typing/1021", "Typing/1027", "Typing/1028", "Typing/1030", "Typing/1032", "Typing/1046", "Typing/1051", "Typing/1057", "Typing/1065", "Typing/1350", "Typing/1352", "Typing/1359", "Typing/1401", "Typing/1406"]},
"MakeIndex": {"name": "MakeIndex", "ids": ["MakeIndex/1008", "MakeIndex/1009"]},
"Commands": {"name": "Commands", "ids": ["Commands/1008", "Commands/1034", "Commands/1040"]},
"CodeSnippets": {"name": "CodeSnippets", "ids": ["CodeSnippets/1049", "CodeSnippets/1055", "CodeSnippets/1008", "CodeSnippets/1009", "CodeSnippets/1012", "CodeSnippets/1058", "CodeSnippets/1059", "CodeSnippets/1060", "CodeSnippets/1062", "CodeSnippets/1064", "CodeSnippets/1088", "CodeSnippets/1090", "CodeSnippets/1093", "CodeSnippets/1103", "CodeSnippets/1106", "CodeSnippets/1110", "CodeSnippets/1114", "CodeSnippets/1130", "CodeSnippets/1166", "CodeSnippets/1170", "CodeSnippets/1176", "CodeSnippets/1188", "CodeSnippets/1190", "CodeSnippets/1202", "CodeSnippets/1205", "CodeSnippets/1223", "CodeSnippets/1227", "CodeSnippets/1231", "CodeSnippets/1255", "CodeSnippets/1323", "CodeSnippets/1325", "CodeSnippets/1327", "CodeSnippets/1339"]},
"ElasticRaw": {"name": "ElasticRaw", "ids": ["ElasticRaw/1008"]},
"NewMain": {"name": "NewMain", "ids": ["NewMain/1035", "NewMain/1039", "NewMain/1042", "NewMain/1084", "NewMain/1087"]}}